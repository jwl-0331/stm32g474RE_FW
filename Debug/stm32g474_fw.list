
stm32g474_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062ec  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080064c4  080064c4  000164c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064dc  080064dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080064dc  080064dc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080064dc  080064dc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064dc  080064dc  000164dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064e0  080064e0  000164e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080064e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000300  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000030c  2000030c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b8b7  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002347  00000000  00000000  0002b936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b18  00000000  00000000  0002dc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000081e  00000000  00000000  0002e798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026bb2  00000000  00000000  0002efb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f92a  00000000  00000000  00055b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ecf18  00000000  00000000  00065492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002a70  00000000  00000000  001523ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  00154e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080064ac 	.word	0x080064ac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080064ac 	.word	0x080064ac

08000218 <apInit>:
static uint32_t g_LEDOnTime = 1000;
static uint32_t g_LEDOffTime = 200;
static uint32_t nextmill = 0;
*/
void apInit(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0

}
 800021c:	bf00      	nop
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr

08000226 <apMain>:

void apMain(void)
{
 8000226:	b480      	push	{r7}
 8000228:	af00      	add	r7, sp, #0

  //uint32_t pre_time = millis();
  while(1)
 800022a:	e7fe      	b.n	800022a <apMain+0x4>

0800022c <bspInit>:
 */
#include "bsp.h"
void SystemClock_Config(void);

bool bspInit(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
  HAL_Init();
 8000232:	f000 f989 	bl	8000548 <HAL_Init>
  SystemClock_Config();
 8000236:	f000 f81f 	bl	8000278 <SystemClock_Config>

  __HAL_RCC_GPIOF_CLK_ENABLE();
 800023a:	4b0e      	ldr	r3, [pc, #56]	; (8000274 <bspInit+0x48>)
 800023c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800023e:	4a0d      	ldr	r2, [pc, #52]	; (8000274 <bspInit+0x48>)
 8000240:	f043 0320 	orr.w	r3, r3, #32
 8000244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000246:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <bspInit+0x48>)
 8000248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800024a:	f003 0320 	and.w	r3, r3, #32
 800024e:	607b      	str	r3, [r7, #4]
 8000250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000252:	4b08      	ldr	r3, [pc, #32]	; (8000274 <bspInit+0x48>)
 8000254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000256:	4a07      	ldr	r2, [pc, #28]	; (8000274 <bspInit+0x48>)
 8000258:	f043 0301 	orr.w	r3, r3, #1
 800025c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800025e:	4b05      	ldr	r3, [pc, #20]	; (8000274 <bspInit+0x48>)
 8000260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000262:	f003 0301 	and.w	r3, r3, #1
 8000266:	603b      	str	r3, [r7, #0]
 8000268:	683b      	ldr	r3, [r7, #0]

  return true;
 800026a:	2301      	movs	r3, #1
}
 800026c:	4618      	mov	r0, r3
 800026e:	3708      	adds	r7, #8
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	40021000 	.word	0x40021000

08000278 <SystemClock_Config>:
  return HAL_GetTick();
}


void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b094      	sub	sp, #80	; 0x50
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0318 	add.w	r3, r7, #24
 8000282:	2238      	movs	r2, #56	; 0x38
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f006 f8e3 	bl	8006452 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]
 8000298:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800029a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800029e:	f001 ffb9 	bl	8002214 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80002a2:	2309      	movs	r3, #9
 80002a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002ac:	2301      	movs	r3, #1
 80002ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b0:	2302      	movs	r3, #2
 80002b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b4:	2303      	movs	r3, #3
 80002b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80002b8:	2302      	movs	r3, #2
 80002ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 24;
 80002bc:	2318      	movs	r3, #24
 80002be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002c0:	2302      	movs	r3, #2
 80002c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 80002c4:	2306      	movs	r3, #6
 80002c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002c8:	2302      	movs	r3, #2
 80002ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002cc:	f107 0318 	add.w	r3, r7, #24
 80002d0:	4618      	mov	r0, r3
 80002d2:	f002 f853 	bl	800237c <HAL_RCC_OscConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80002dc:	f000 f818 	bl	8000310 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e0:	230f      	movs	r3, #15
 80002e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e4:	2303      	movs	r3, #3
 80002e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80002e8:	2380      	movs	r3, #128	; 0x80
 80002ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f0:	2300      	movs	r3, #0
 80002f2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	2102      	movs	r1, #2
 80002f8:	4618      	mov	r0, r3
 80002fa:	f002 fb51 	bl	80029a0 <HAL_RCC_ClockConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000304:	f000 f804 	bl	8000310 <Error_Handler>
  }
}
 8000308:	bf00      	nop
 800030a:	3750      	adds	r7, #80	; 0x50
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <Error_Handler>:

void Error_Handler(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0

}
 8000314:	bf00      	nop
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
	...

08000320 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000326:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <HAL_MspInit+0x44>)
 8000328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800032a:	4a0e      	ldr	r2, [pc, #56]	; (8000364 <HAL_MspInit+0x44>)
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	6613      	str	r3, [r2, #96]	; 0x60
 8000332:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <HAL_MspInit+0x44>)
 8000334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000336:	f003 0301 	and.w	r3, r3, #1
 800033a:	607b      	str	r3, [r7, #4]
 800033c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800033e:	4b09      	ldr	r3, [pc, #36]	; (8000364 <HAL_MspInit+0x44>)
 8000340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000342:	4a08      	ldr	r2, [pc, #32]	; (8000364 <HAL_MspInit+0x44>)
 8000344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000348:	6593      	str	r3, [r2, #88]	; 0x58
 800034a:	4b06      	ldr	r3, [pc, #24]	; (8000364 <HAL_MspInit+0x44>)
 800034c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800034e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000352:	603b      	str	r3, [r7, #0]
 8000354:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000356:	f002 f801 	bl	800235c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800035a:	bf00      	nop
 800035c:	3708      	adds	r7, #8
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	40021000 	.word	0x40021000

08000368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800036c:	e7fe      	b.n	800036c <NMI_Handler+0x4>

0800036e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800036e:	b480      	push	{r7}
 8000370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000372:	e7fe      	b.n	8000372 <HardFault_Handler+0x4>

08000374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000378:	e7fe      	b.n	8000378 <MemManage_Handler+0x4>

0800037a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800037e:	e7fe      	b.n	800037e <BusFault_Handler+0x4>

08000380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000384:	e7fe      	b.n	8000384 <UsageFault_Handler+0x4>

08000386 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800038a:	bf00      	nop
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr

08000394 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr

080003a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003a2:	b480      	push	{r7}
 80003a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003a6:	bf00      	nop
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr

080003b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003b4:	f000 f91a 	bl	80005ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}

080003bc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80003c0:	4802      	ldr	r0, [pc, #8]	; (80003cc <USB_LP_IRQHandler+0x10>)
 80003c2:	f000 fbaf 	bl	8000b24 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80003c6:	bf00      	nop
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000030 	.word	0x20000030

080003d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <SystemInit+0x20>)
 80003d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003da:	4a05      	ldr	r2, [pc, #20]	; (80003f0 <SystemInit+0x20>)
 80003dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	e000ed00 	.word	0xe000ed00

080003f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003f4:	480d      	ldr	r0, [pc, #52]	; (800042c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003f8:	f7ff ffea 	bl	80003d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003fc:	480c      	ldr	r0, [pc, #48]	; (8000430 <LoopForever+0x6>)
  ldr r1, =_edata
 80003fe:	490d      	ldr	r1, [pc, #52]	; (8000434 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000400:	4a0d      	ldr	r2, [pc, #52]	; (8000438 <LoopForever+0xe>)
  movs r3, #0
 8000402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000404:	e002      	b.n	800040c <LoopCopyDataInit>

08000406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800040a:	3304      	adds	r3, #4

0800040c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800040c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800040e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000410:	d3f9      	bcc.n	8000406 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000412:	4a0a      	ldr	r2, [pc, #40]	; (800043c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000414:	4c0a      	ldr	r4, [pc, #40]	; (8000440 <LoopForever+0x16>)
  movs r3, #0
 8000416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000418:	e001      	b.n	800041e <LoopFillZerobss>

0800041a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800041a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800041c:	3204      	adds	r2, #4

0800041e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800041e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000420:	d3fb      	bcc.n	800041a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000422:	f006 f81f 	bl	8006464 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000426:	f006 f809 	bl	800643c <main>

0800042a <LoopForever>:

LoopForever:
  b LoopForever
 800042a:	e7fe      	b.n	800042a <LoopForever>
  ldr   r0, =_estack
 800042c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000434:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000438:	080064e4 	.word	0x080064e4
  ldr r2, =_sbss
 800043c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000440:	2000030c 	.word	0x2000030c

08000444 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000444:	e7fe      	b.n	8000444 <ADC1_2_IRQHandler>
	...

08000448 <ledInit>:




bool ledInit(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b088      	sub	sp, #32
 800044c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 800044e:	f107 0308 	add.w	r3, r7, #8
 8000452:	2200      	movs	r2, #0
 8000454:	601a      	str	r2, [r3, #0]
 8000456:	605a      	str	r2, [r3, #4]
 8000458:	609a      	str	r2, [r3, #8]
 800045a:	60da      	str	r2, [r3, #12]
 800045c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045e:	4b1a      	ldr	r3, [pc, #104]	; (80004c8 <ledInit+0x80>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	4a19      	ldr	r2, [pc, #100]	; (80004c8 <ledInit+0x80>)
 8000464:	f043 0301 	orr.w	r3, r3, #1
 8000468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800046a:	4b17      	ldr	r3, [pc, #92]	; (80004c8 <ledInit+0x80>)
 800046c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046e:	f003 0301 	and.w	r3, r3, #1
 8000472:	607b      	str	r3, [r7, #4]
 8000474:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000476:	2301      	movs	r3, #1
 8000478:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800047a:	2300      	movs	r3, #0
 800047c:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 800047e:	2300      	movs	r3, #0
 8000480:	617b      	str	r3, [r7, #20]

  for (int i=0; i<LED_MAX_CH; i++)
 8000482:	2300      	movs	r3, #0
 8000484:	61fb      	str	r3, [r7, #28]
 8000486:	e017      	b.n	80004b8 <ledInit+0x70>
  {
    GPIO_InitStructure.Pin = led_tbl[i].pin;
 8000488:	4a10      	ldr	r2, [pc, #64]	; (80004cc <ledInit+0x84>)
 800048a:	69fb      	ldr	r3, [r7, #28]
 800048c:	00db      	lsls	r3, r3, #3
 800048e:	4413      	add	r3, r2
 8000490:	889b      	ldrh	r3, [r3, #4]
 8000492:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStructure);
 8000494:	4a0d      	ldr	r2, [pc, #52]	; (80004cc <ledInit+0x84>)
 8000496:	69fb      	ldr	r3, [r7, #28]
 8000498:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800049c:	f107 0208 	add.w	r2, r7, #8
 80004a0:	4611      	mov	r1, r2
 80004a2:	4618      	mov	r0, r3
 80004a4:	f000 f9a4 	bl	80007f0 <HAL_GPIO_Init>

    ledOff(i);
 80004a8:	69fb      	ldr	r3, [r7, #28]
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	4618      	mov	r0, r3
 80004ae:	f000 f80f 	bl	80004d0 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 80004b2:	69fb      	ldr	r3, [r7, #28]
 80004b4:	3301      	adds	r3, #1
 80004b6:	61fb      	str	r3, [r7, #28]
 80004b8:	69fb      	ldr	r3, [r7, #28]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	dde4      	ble.n	8000488 <ledInit+0x40>
  }
  return true;
 80004be:	2301      	movs	r3, #1
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	3720      	adds	r7, #32
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40021000 	.word	0x40021000
 80004cc:	080064d4 	.word	0x080064d4

080004d0 <ledOff>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d10d      	bne.n	80004fc <ledOff+0x2c>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80004e0:	79fb      	ldrb	r3, [r7, #7]
 80004e2:	4a08      	ldr	r2, [pc, #32]	; (8000504 <ledOff+0x34>)
 80004e4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	4a06      	ldr	r2, [pc, #24]	; (8000504 <ledOff+0x34>)
 80004ec:	00db      	lsls	r3, r3, #3
 80004ee:	4413      	add	r3, r2
 80004f0:	889b      	ldrh	r3, [r3, #4]
 80004f2:	2200      	movs	r2, #0
 80004f4:	4619      	mov	r1, r3
 80004f6:	f000 fafd 	bl	8000af4 <HAL_GPIO_WritePin>
 80004fa:	e000      	b.n	80004fe <ledOff+0x2e>
  if (ch >= LED_MAX_CH) return;
 80004fc:	bf00      	nop
}
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	080064d4 	.word	0x080064d4

08000508 <hwInit>:
 *      Author: mm940
 */
#include "hw.h"

bool hwInit(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
  bool ret = true;
 800050e:	2301      	movs	r3, #1
 8000510:	71fb      	strb	r3, [r7, #7]

  ret &= bspInit();
 8000512:	f7ff fe8b 	bl	800022c <bspInit>
 8000516:	4603      	mov	r3, r0
 8000518:	461a      	mov	r2, r3
 800051a:	79fb      	ldrb	r3, [r7, #7]
 800051c:	4013      	ands	r3, r2
 800051e:	2b00      	cmp	r3, #0
 8000520:	bf14      	ite	ne
 8000522:	2301      	movne	r3, #1
 8000524:	2300      	moveq	r3, #0
 8000526:	71fb      	strb	r3, [r7, #7]
  ret &= ledInit();
 8000528:	f7ff ff8e 	bl	8000448 <ledInit>
 800052c:	4603      	mov	r3, r0
 800052e:	461a      	mov	r2, r3
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	4013      	ands	r3, r2
 8000534:	2b00      	cmp	r3, #0
 8000536:	bf14      	ite	ne
 8000538:	2301      	movne	r3, #1
 800053a:	2300      	moveq	r3, #0
 800053c:	71fb      	strb	r3, [r7, #7]

  return ret;
 800053e:	79fb      	ldrb	r3, [r7, #7]
}
 8000540:	4618      	mov	r0, r3
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800054e:	2300      	movs	r3, #0
 8000550:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000552:	2003      	movs	r0, #3
 8000554:	f000 f91a 	bl	800078c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000558:	200f      	movs	r0, #15
 800055a:	f000 f80d 	bl	8000578 <HAL_InitTick>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d002      	beq.n	800056a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000564:	2301      	movs	r3, #1
 8000566:	71fb      	strb	r3, [r7, #7]
 8000568:	e001      	b.n	800056e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800056a:	f7ff fed9 	bl	8000320 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800056e:	79fb      	ldrb	r3, [r7, #7]

}
 8000570:	4618      	mov	r0, r3
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000580:	2300      	movs	r3, #0
 8000582:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000584:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <HAL_InitTick+0x68>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d022      	beq.n	80005d2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800058c:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <HAL_InitTick+0x6c>)
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <HAL_InitTick+0x68>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000598:	fbb1 f3f3 	udiv	r3, r1, r3
 800059c:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 f918 	bl	80007d6 <HAL_SYSTICK_Config>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d10f      	bne.n	80005cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2b0f      	cmp	r3, #15
 80005b0:	d809      	bhi.n	80005c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005b2:	2200      	movs	r2, #0
 80005b4:	6879      	ldr	r1, [r7, #4]
 80005b6:	f04f 30ff 	mov.w	r0, #4294967295
 80005ba:	f000 f8f2 	bl	80007a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005be:	4a0a      	ldr	r2, [pc, #40]	; (80005e8 <HAL_InitTick+0x70>)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	e007      	b.n	80005d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80005c6:	2301      	movs	r3, #1
 80005c8:	73fb      	strb	r3, [r7, #15]
 80005ca:	e004      	b.n	80005d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005cc:	2301      	movs	r3, #1
 80005ce:	73fb      	strb	r3, [r7, #15]
 80005d0:	e001      	b.n	80005d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005d2:	2301      	movs	r3, #1
 80005d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000008 	.word	0x20000008
 80005e4:	20000000 	.word	0x20000000
 80005e8:	20000004 	.word	0x20000004

080005ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <HAL_IncTick+0x1c>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <HAL_IncTick+0x20>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4413      	add	r3, r2
 80005fa:	4a03      	ldr	r2, [pc, #12]	; (8000608 <HAL_IncTick+0x1c>)
 80005fc:	6013      	str	r3, [r2, #0]
}
 80005fe:	bf00      	nop
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	20000028 	.word	0x20000028
 800060c:	20000008 	.word	0x20000008

08000610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  return uwTick;
 8000614:	4b03      	ldr	r3, [pc, #12]	; (8000624 <HAL_GetTick+0x14>)
 8000616:	681b      	ldr	r3, [r3, #0]
}
 8000618:	4618      	mov	r0, r3
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000028 	.word	0x20000028

08000628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f003 0307 	and.w	r3, r3, #7
 8000636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <__NVIC_SetPriorityGrouping+0x44>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000644:	4013      	ands	r3, r2
 8000646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065a:	4a04      	ldr	r2, [pc, #16]	; (800066c <__NVIC_SetPriorityGrouping+0x44>)
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	60d3      	str	r3, [r2, #12]
}
 8000660:	bf00      	nop
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066a:	4770      	bx	lr
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000674:	4b04      	ldr	r3, [pc, #16]	; (8000688 <__NVIC_GetPriorityGrouping+0x18>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	0a1b      	lsrs	r3, r3, #8
 800067a:	f003 0307 	and.w	r3, r3, #7
}
 800067e:	4618      	mov	r0, r3
 8000680:	46bd      	mov	sp, r7
 8000682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000686:	4770      	bx	lr
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	6039      	str	r1, [r7, #0]
 8000696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069c:	2b00      	cmp	r3, #0
 800069e:	db0a      	blt.n	80006b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	490c      	ldr	r1, [pc, #48]	; (80006d8 <__NVIC_SetPriority+0x4c>)
 80006a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006aa:	0112      	lsls	r2, r2, #4
 80006ac:	b2d2      	uxtb	r2, r2
 80006ae:	440b      	add	r3, r1
 80006b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b4:	e00a      	b.n	80006cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	4908      	ldr	r1, [pc, #32]	; (80006dc <__NVIC_SetPriority+0x50>)
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	f003 030f 	and.w	r3, r3, #15
 80006c2:	3b04      	subs	r3, #4
 80006c4:	0112      	lsls	r2, r2, #4
 80006c6:	b2d2      	uxtb	r2, r2
 80006c8:	440b      	add	r3, r1
 80006ca:	761a      	strb	r2, [r3, #24]
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000e100 	.word	0xe000e100
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b089      	sub	sp, #36	; 0x24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	f003 0307 	and.w	r3, r3, #7
 80006f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	f1c3 0307 	rsb	r3, r3, #7
 80006fa:	2b04      	cmp	r3, #4
 80006fc:	bf28      	it	cs
 80006fe:	2304      	movcs	r3, #4
 8000700:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	3304      	adds	r3, #4
 8000706:	2b06      	cmp	r3, #6
 8000708:	d902      	bls.n	8000710 <NVIC_EncodePriority+0x30>
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3b03      	subs	r3, #3
 800070e:	e000      	b.n	8000712 <NVIC_EncodePriority+0x32>
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000714:	f04f 32ff 	mov.w	r2, #4294967295
 8000718:	69bb      	ldr	r3, [r7, #24]
 800071a:	fa02 f303 	lsl.w	r3, r2, r3
 800071e:	43da      	mvns	r2, r3
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	401a      	ands	r2, r3
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000728:	f04f 31ff 	mov.w	r1, #4294967295
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	fa01 f303 	lsl.w	r3, r1, r3
 8000732:	43d9      	mvns	r1, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000738:	4313      	orrs	r3, r2
         );
}
 800073a:	4618      	mov	r0, r3
 800073c:	3724      	adds	r7, #36	; 0x24
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
	...

08000748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3b01      	subs	r3, #1
 8000754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000758:	d301      	bcc.n	800075e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075a:	2301      	movs	r3, #1
 800075c:	e00f      	b.n	800077e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <SysTick_Config+0x40>)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000766:	210f      	movs	r1, #15
 8000768:	f04f 30ff 	mov.w	r0, #4294967295
 800076c:	f7ff ff8e 	bl	800068c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <SysTick_Config+0x40>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000776:	4b04      	ldr	r3, [pc, #16]	; (8000788 <SysTick_Config+0x40>)
 8000778:	2207      	movs	r2, #7
 800077a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	e000e010 	.word	0xe000e010

0800078c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff ff47 	bl	8000628 <__NVIC_SetPriorityGrouping>
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b086      	sub	sp, #24
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	4603      	mov	r3, r0
 80007aa:	60b9      	str	r1, [r7, #8]
 80007ac:	607a      	str	r2, [r7, #4]
 80007ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007b0:	f7ff ff5e 	bl	8000670 <__NVIC_GetPriorityGrouping>
 80007b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	68b9      	ldr	r1, [r7, #8]
 80007ba:	6978      	ldr	r0, [r7, #20]
 80007bc:	f7ff ff90 	bl	80006e0 <NVIC_EncodePriority>
 80007c0:	4602      	mov	r2, r0
 80007c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c6:	4611      	mov	r1, r2
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff5f 	bl	800068c <__NVIC_SetPriority>
}
 80007ce:	bf00      	nop
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f7ff ffb2 	bl	8000748 <SysTick_Config>
 80007e4:	4603      	mov	r3, r0
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
	...

080007f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b087      	sub	sp, #28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80007fe:	e15a      	b.n	8000ab6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	2101      	movs	r1, #1
 8000806:	697b      	ldr	r3, [r7, #20]
 8000808:	fa01 f303 	lsl.w	r3, r1, r3
 800080c:	4013      	ands	r3, r2
 800080e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	2b00      	cmp	r3, #0
 8000814:	f000 814c 	beq.w	8000ab0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	f003 0303 	and.w	r3, r3, #3
 8000820:	2b01      	cmp	r3, #1
 8000822:	d005      	beq.n	8000830 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800082c:	2b02      	cmp	r3, #2
 800082e:	d130      	bne.n	8000892 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	2203      	movs	r2, #3
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	43db      	mvns	r3, r3
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	4013      	ands	r3, r2
 8000846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	68da      	ldr	r2, [r3, #12]
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	693a      	ldr	r2, [r7, #16]
 8000856:	4313      	orrs	r3, r2
 8000858:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	693a      	ldr	r2, [r7, #16]
 800085e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000866:	2201      	movs	r2, #1
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	fa02 f303 	lsl.w	r3, r2, r3
 800086e:	43db      	mvns	r3, r3
 8000870:	693a      	ldr	r2, [r7, #16]
 8000872:	4013      	ands	r3, r2
 8000874:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	091b      	lsrs	r3, r3, #4
 800087c:	f003 0201 	and.w	r2, r3, #1
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	4313      	orrs	r3, r2
 800088a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	f003 0303 	and.w	r3, r3, #3
 800089a:	2b03      	cmp	r3, #3
 800089c:	d017      	beq.n	80008ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	68db      	ldr	r3, [r3, #12]
 80008a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	2203      	movs	r2, #3
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	43db      	mvns	r3, r3
 80008b0:	693a      	ldr	r2, [r7, #16]
 80008b2:	4013      	ands	r3, r2
 80008b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	689a      	ldr	r2, [r3, #8]
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	f003 0303 	and.w	r3, r3, #3
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	d123      	bne.n	8000922 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	08da      	lsrs	r2, r3, #3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	3208      	adds	r2, #8
 80008e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	f003 0307 	and.w	r3, r3, #7
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	220f      	movs	r2, #15
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	43db      	mvns	r3, r3
 80008f8:	693a      	ldr	r2, [r7, #16]
 80008fa:	4013      	ands	r3, r2
 80008fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	691a      	ldr	r2, [r3, #16]
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	f003 0307 	and.w	r3, r3, #7
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	4313      	orrs	r3, r2
 8000912:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	08da      	lsrs	r2, r3, #3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3208      	adds	r2, #8
 800091c:	6939      	ldr	r1, [r7, #16]
 800091e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	2203      	movs	r2, #3
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	43db      	mvns	r3, r3
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	4013      	ands	r3, r2
 8000938:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f003 0203 	and.w	r2, r3, #3
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	4313      	orrs	r3, r2
 800094e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800095e:	2b00      	cmp	r3, #0
 8000960:	f000 80a6 	beq.w	8000ab0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000964:	4b5b      	ldr	r3, [pc, #364]	; (8000ad4 <HAL_GPIO_Init+0x2e4>)
 8000966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000968:	4a5a      	ldr	r2, [pc, #360]	; (8000ad4 <HAL_GPIO_Init+0x2e4>)
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	6613      	str	r3, [r2, #96]	; 0x60
 8000970:	4b58      	ldr	r3, [pc, #352]	; (8000ad4 <HAL_GPIO_Init+0x2e4>)
 8000972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800097c:	4a56      	ldr	r2, [pc, #344]	; (8000ad8 <HAL_GPIO_Init+0x2e8>)
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	089b      	lsrs	r3, r3, #2
 8000982:	3302      	adds	r3, #2
 8000984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000988:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	f003 0303 	and.w	r3, r3, #3
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	220f      	movs	r2, #15
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	43db      	mvns	r3, r3
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4013      	ands	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009a6:	d01f      	beq.n	80009e8 <HAL_GPIO_Init+0x1f8>
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a4c      	ldr	r2, [pc, #304]	; (8000adc <HAL_GPIO_Init+0x2ec>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d019      	beq.n	80009e4 <HAL_GPIO_Init+0x1f4>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a4b      	ldr	r2, [pc, #300]	; (8000ae0 <HAL_GPIO_Init+0x2f0>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d013      	beq.n	80009e0 <HAL_GPIO_Init+0x1f0>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a4a      	ldr	r2, [pc, #296]	; (8000ae4 <HAL_GPIO_Init+0x2f4>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d00d      	beq.n	80009dc <HAL_GPIO_Init+0x1ec>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a49      	ldr	r2, [pc, #292]	; (8000ae8 <HAL_GPIO_Init+0x2f8>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d007      	beq.n	80009d8 <HAL_GPIO_Init+0x1e8>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a48      	ldr	r2, [pc, #288]	; (8000aec <HAL_GPIO_Init+0x2fc>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d101      	bne.n	80009d4 <HAL_GPIO_Init+0x1e4>
 80009d0:	2305      	movs	r3, #5
 80009d2:	e00a      	b.n	80009ea <HAL_GPIO_Init+0x1fa>
 80009d4:	2306      	movs	r3, #6
 80009d6:	e008      	b.n	80009ea <HAL_GPIO_Init+0x1fa>
 80009d8:	2304      	movs	r3, #4
 80009da:	e006      	b.n	80009ea <HAL_GPIO_Init+0x1fa>
 80009dc:	2303      	movs	r3, #3
 80009de:	e004      	b.n	80009ea <HAL_GPIO_Init+0x1fa>
 80009e0:	2302      	movs	r3, #2
 80009e2:	e002      	b.n	80009ea <HAL_GPIO_Init+0x1fa>
 80009e4:	2301      	movs	r3, #1
 80009e6:	e000      	b.n	80009ea <HAL_GPIO_Init+0x1fa>
 80009e8:	2300      	movs	r3, #0
 80009ea:	697a      	ldr	r2, [r7, #20]
 80009ec:	f002 0203 	and.w	r2, r2, #3
 80009f0:	0092      	lsls	r2, r2, #2
 80009f2:	4093      	lsls	r3, r2
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	4313      	orrs	r3, r2
 80009f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009fa:	4937      	ldr	r1, [pc, #220]	; (8000ad8 <HAL_GPIO_Init+0x2e8>)
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	089b      	lsrs	r3, r3, #2
 8000a00:	3302      	adds	r3, #2
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a08:	4b39      	ldr	r3, [pc, #228]	; (8000af0 <HAL_GPIO_Init+0x300>)
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	43db      	mvns	r3, r3
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	4013      	ands	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d003      	beq.n	8000a2c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a2c:	4a30      	ldr	r2, [pc, #192]	; (8000af0 <HAL_GPIO_Init+0x300>)
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a32:	4b2f      	ldr	r3, [pc, #188]	; (8000af0 <HAL_GPIO_Init+0x300>)
 8000a34:	68db      	ldr	r3, [r3, #12]
 8000a36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d003      	beq.n	8000a56 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a56:	4a26      	ldr	r2, [pc, #152]	; (8000af0 <HAL_GPIO_Init+0x300>)
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000a5c:	4b24      	ldr	r3, [pc, #144]	; (8000af0 <HAL_GPIO_Init+0x300>)
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	43db      	mvns	r3, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d003      	beq.n	8000a80 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a80:	4a1b      	ldr	r2, [pc, #108]	; (8000af0 <HAL_GPIO_Init+0x300>)
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a86:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <HAL_GPIO_Init+0x300>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	4013      	ands	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d003      	beq.n	8000aaa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000aaa:	4a11      	ldr	r2, [pc, #68]	; (8000af0 <HAL_GPIO_Init+0x300>)
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	f47f ae9d 	bne.w	8000800 <HAL_GPIO_Init+0x10>
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	bf00      	nop
 8000aca:	371c      	adds	r7, #28
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	40010000 	.word	0x40010000
 8000adc:	48000400 	.word	0x48000400
 8000ae0:	48000800 	.word	0x48000800
 8000ae4:	48000c00 	.word	0x48000c00
 8000ae8:	48001000 	.word	0x48001000
 8000aec:	48001400 	.word	0x48001400
 8000af0:	40010400 	.word	0x40010400

08000af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	460b      	mov	r3, r1
 8000afe:	807b      	strh	r3, [r7, #2]
 8000b00:	4613      	mov	r3, r2
 8000b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b04:	787b      	ldrb	r3, [r7, #1]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d003      	beq.n	8000b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b0a:	887a      	ldrh	r2, [r7, #2]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b10:	e002      	b.n	8000b18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b12:	887a      	ldrh	r2, [r7, #2]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f004 f9a1 	bl	8004e78 <USB_ReadInterrupts>
 8000b36:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d003      	beq.n	8000b4a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f000 faa4 	bl	8001090 <PCD_EP_ISR_Handler>

    return;
 8000b48:	e110      	b.n	8000d6c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d013      	beq.n	8000b7c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b66:	b292      	uxth	r2, r2
 8000b68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f005 fab6 	bl	80060de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000b72:	2100      	movs	r1, #0
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f000 f8fc 	bl	8000d72 <HAL_PCD_SetAddress>

    return;
 8000b7a:	e0f7      	b.n	8000d6c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d00c      	beq.n	8000ba0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000b98:	b292      	uxth	r2, r2
 8000b9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000b9e:	e0e5      	b.n	8000d6c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d00c      	beq.n	8000bc4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000bbc:	b292      	uxth	r2, r2
 8000bbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000bc2:	e0d3      	b.n	8000d6c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d034      	beq.n	8000c38 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000bd6:	b29a      	uxth	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	f022 0204 	bic.w	r2, r2, #4
 8000be0:	b292      	uxth	r2, r2
 8000be2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f022 0208 	bic.w	r2, r2, #8
 8000bf8:	b292      	uxth	r2, r2
 8000bfa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d107      	bne.n	8000c18 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000c10:	2100      	movs	r1, #0
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f005 fbaa 	bl	800636c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f005 fa99 	bl	8006150 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000c30:	b292      	uxth	r2, r2
 8000c32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000c36:	e099      	b.n	8000d6c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d027      	beq.n	8000c92 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000c4a:	b29a      	uxth	r2, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f042 0208 	orr.w	r2, r2, #8
 8000c54:	b292      	uxth	r2, r2
 8000c56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c6c:	b292      	uxth	r2, r2
 8000c6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f042 0204 	orr.w	r2, r2, #4
 8000c84:	b292      	uxth	r2, r2
 8000c86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f005 fa46 	bl	800611c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000c90:	e06c      	b.n	8000d6c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d040      	beq.n	8000d1e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cae:	b292      	uxth	r2, r2
 8000cb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d12b      	bne.n	8000d16 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f042 0204 	orr.w	r2, r2, #4
 8000cd0:	b292      	uxth	r2, r2
 8000cd2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f042 0208 	orr.w	r2, r2, #8
 8000ce8:	b292      	uxth	r2, r2
 8000cea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	089b      	lsrs	r3, r3, #2
 8000d02:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f005 fb2c 	bl	800636c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8000d14:	e02a      	b.n	8000d6c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f005 fa00 	bl	800611c <HAL_PCD_SuspendCallback>
    return;
 8000d1c:	e026      	b.n	8000d6c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d00f      	beq.n	8000d48 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d3a:	b292      	uxth	r2, r2
 8000d3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f005 f9be 	bl	80060c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8000d46:	e011      	b.n	8000d6c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d00c      	beq.n	8000d6c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d64:	b292      	uxth	r2, r2
 8000d66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000d6a:	bf00      	nop
  }
}
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d101      	bne.n	8000d8c <HAL_PCD_SetAddress+0x1a>
 8000d88:	2302      	movs	r3, #2
 8000d8a:	e012      	b.n	8000db2 <HAL_PCD_SetAddress+0x40>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2201      	movs	r2, #1
 8000d90:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	78fa      	ldrb	r2, [r7, #3]
 8000d98:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	78fa      	ldrb	r2, [r7, #3]
 8000da0:	4611      	mov	r1, r2
 8000da2:	4618      	mov	r0, r3
 8000da4:	f004 f854 	bl	8004e50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b084      	sub	sp, #16
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	4608      	mov	r0, r1
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4603      	mov	r3, r0
 8000dca:	70fb      	strb	r3, [r7, #3]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	803b      	strh	r3, [r7, #0]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000dd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	da0e      	bge.n	8000dfe <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000de0:	78fb      	ldrb	r3, [r7, #3]
 8000de2:	f003 0207 	and.w	r2, r3, #7
 8000de6:	4613      	mov	r3, r2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	4413      	add	r3, r2
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	3310      	adds	r3, #16
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	4413      	add	r3, r2
 8000df4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	705a      	strb	r2, [r3, #1]
 8000dfc:	e00e      	b.n	8000e1c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000dfe:	78fb      	ldrb	r3, [r7, #3]
 8000e00:	f003 0207 	and.w	r2, r3, #7
 8000e04:	4613      	mov	r3, r2
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	4413      	add	r3, r2
 8000e0a:	00db      	lsls	r3, r3, #3
 8000e0c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	4413      	add	r3, r2
 8000e14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000e1c:	78fb      	ldrb	r3, [r7, #3]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000e28:	883a      	ldrh	r2, [r7, #0]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	78ba      	ldrb	r2, [r7, #2]
 8000e32:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000e34:	78bb      	ldrb	r3, [r7, #2]
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d102      	bne.n	8000e40 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d101      	bne.n	8000e4e <HAL_PCD_EP_Open+0x94>
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	e00e      	b.n	8000e6c <HAL_PCD_EP_Open+0xb2>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2201      	movs	r2, #1
 8000e52:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	68f9      	ldr	r1, [r7, #12]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f001 ff83 	bl	8002d68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8000e6a:	7afb      	ldrb	r3, [r7, #11]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	603b      	str	r3, [r7, #0]
 8000e80:	460b      	mov	r3, r1
 8000e82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000e84:	7afb      	ldrb	r3, [r7, #11]
 8000e86:	f003 0207 	and.w	r2, r3, #7
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4413      	add	r3, r2
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	4413      	add	r3, r2
 8000e9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	683a      	ldr	r2, [r7, #0]
 8000ea6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000eb4:	7afb      	ldrb	r3, [r7, #11]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	6979      	ldr	r1, [r7, #20]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f002 fb12 	bl	80034f0 <USB_EPStartXfer>

  return HAL_OK;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	60f8      	str	r0, [r7, #12]
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	603b      	str	r3, [r7, #0]
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000ee6:	7afb      	ldrb	r3, [r7, #11]
 8000ee8:	f003 0207 	and.w	r2, r3, #7
 8000eec:	4613      	mov	r3, r2
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	4413      	add	r3, r2
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	3310      	adds	r3, #16
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	4413      	add	r3, r2
 8000efa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	683a      	ldr	r2, [r7, #0]
 8000f06:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	683a      	ldr	r2, [r7, #0]
 8000f14:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	2201      	movs	r2, #1
 8000f20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000f22:	7afb      	ldrb	r3, [r7, #11]
 8000f24:	f003 0307 	and.w	r3, r3, #7
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	6979      	ldr	r1, [r7, #20]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f002 fadb 	bl	80034f0 <USB_EPStartXfer>

  return HAL_OK;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	7912      	ldrb	r2, [r2, #4]
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d901      	bls.n	8000f62 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e03e      	b.n	8000fe0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000f62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	da0e      	bge.n	8000f88 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000f6a:	78fb      	ldrb	r3, [r7, #3]
 8000f6c:	f003 0207 	and.w	r2, r3, #7
 8000f70:	4613      	mov	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	3310      	adds	r3, #16
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2201      	movs	r2, #1
 8000f84:	705a      	strb	r2, [r3, #1]
 8000f86:	e00c      	b.n	8000fa2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000f88:	78fa      	ldrb	r2, [r7, #3]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000fa8:	78fb      	ldrb	r3, [r7, #3]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d101      	bne.n	8000fc2 <HAL_PCD_EP_SetStall+0x7e>
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	e00e      	b.n	8000fe0 <HAL_PCD_EP_SetStall+0x9c>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	68f9      	ldr	r1, [r7, #12]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f003 fe3e 	bl	8004c52 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000ff4:	78fb      	ldrb	r3, [r7, #3]
 8000ff6:	f003 030f 	and.w	r3, r3, #15
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	7912      	ldrb	r2, [r2, #4]
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d901      	bls.n	8001006 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e040      	b.n	8001088 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001006:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800100a:	2b00      	cmp	r3, #0
 800100c:	da0e      	bge.n	800102c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800100e:	78fb      	ldrb	r3, [r7, #3]
 8001010:	f003 0207 	and.w	r2, r3, #7
 8001014:	4613      	mov	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	3310      	adds	r3, #16
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2201      	movs	r2, #1
 8001028:	705a      	strb	r2, [r3, #1]
 800102a:	e00e      	b.n	800104a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800102c:	78fb      	ldrb	r3, [r7, #3]
 800102e:	f003 0207 	and.w	r2, r3, #7
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2200      	movs	r2, #0
 8001048:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2200      	movs	r2, #0
 800104e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001050:	78fb      	ldrb	r3, [r7, #3]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	b2da      	uxtb	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001062:	2b01      	cmp	r3, #1
 8001064:	d101      	bne.n	800106a <HAL_PCD_EP_ClrStall+0x82>
 8001066:	2302      	movs	r3, #2
 8001068:	e00e      	b.n	8001088 <HAL_PCD_EP_ClrStall+0xa0>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2201      	movs	r2, #1
 800106e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	68f9      	ldr	r1, [r7, #12]
 8001078:	4618      	mov	r0, r3
 800107a:	f003 fe3b 	bl	8004cf4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b096      	sub	sp, #88	; 0x58
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001098:	e3ae      	b.n	80017f8 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80010a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	f003 030f 	and.w	r3, r3, #15
 80010b0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80010b4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f040 8170 	bne.w	800139e <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80010be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80010c2:	f003 0310 	and.w	r3, r3, #16
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d14d      	bne.n	8001166 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80010d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010da:	81fb      	strh	r3, [r7, #14]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	89fb      	ldrh	r3, [r7, #14]
 80010e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80010e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80010ea:	b29b      	uxth	r3, r3
 80010ec:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3310      	adds	r3, #16
 80010f2:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	461a      	mov	r2, r3
 8001100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	4413      	add	r3, r2
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	6812      	ldr	r2, [r2, #0]
 800110c:	4413      	add	r3, r2
 800110e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800111a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800111c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800111e:	695a      	ldr	r2, [r3, #20]
 8001120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001122:	69db      	ldr	r3, [r3, #28]
 8001124:	441a      	add	r2, r3
 8001126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001128:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800112a:	2100      	movs	r1, #0
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f004 ffae 	bl	800608e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7b1b      	ldrb	r3, [r3, #12]
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	f000 835d 	beq.w	80017f8 <PCD_EP_ISR_Handler+0x768>
 800113e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	2b00      	cmp	r3, #0
 8001144:	f040 8358 	bne.w	80017f8 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	7b1b      	ldrb	r3, [r3, #12]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001152:	b2da      	uxtb	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	b292      	uxth	r2, r2
 800115a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	731a      	strb	r2, [r3, #12]
 8001164:	e348      	b.n	80017f8 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800116c:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001178:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800117c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001180:	2b00      	cmp	r3, #0
 8001182:	d032      	beq.n	80011ea <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800118c:	b29b      	uxth	r3, r3
 800118e:	461a      	mov	r2, r3
 8001190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	4413      	add	r3, r2
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	6812      	ldr	r2, [r2, #0]
 800119c:	4413      	add	r3, r2
 800119e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80011a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011aa:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6818      	ldr	r0, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f503 7126 	add.w	r1, r3, #664	; 0x298
 80011b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011b8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80011ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011bc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80011be:	b29b      	uxth	r3, r3
 80011c0:	f003 feac 	bl	8004f1c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80011d0:	4013      	ands	r3, r2
 80011d2:	823b      	strh	r3, [r7, #16]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	8a3a      	ldrh	r2, [r7, #16]
 80011da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011de:	b292      	uxth	r2, r2
 80011e0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f004 ff26 	bl	8006034 <HAL_PCD_SetupStageCallback>
 80011e8:	e306      	b.n	80017f8 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80011ea:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f280 8302 	bge.w	80017f8 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001200:	4013      	ands	r3, r2
 8001202:	83fb      	strh	r3, [r7, #30]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	8bfa      	ldrh	r2, [r7, #30]
 800120a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800120e:	b292      	uxth	r2, r2
 8001210:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800121a:	b29b      	uxth	r3, r3
 800121c:	461a      	mov	r2, r3
 800121e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	4413      	add	r3, r2
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	6812      	ldr	r2, [r2, #0]
 800122a:	4413      	add	r3, r2
 800122c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001230:	881b      	ldrh	r3, [r3, #0]
 8001232:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001238:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800123a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d019      	beq.n	8001276 <PCD_EP_ISR_Handler+0x1e6>
 8001242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d015      	beq.n	8001276 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6818      	ldr	r0, [r3, #0]
 800124e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001250:	6959      	ldr	r1, [r3, #20]
 8001252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001254:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001258:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800125a:	b29b      	uxth	r3, r3
 800125c:	f003 fe5e 	bl	8004f1c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001262:	695a      	ldr	r2, [r3, #20]
 8001264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001266:	69db      	ldr	r3, [r3, #28]
 8001268:	441a      	add	r2, r3
 800126a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800126c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800126e:	2100      	movs	r1, #0
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f004 fef1 	bl	8006058 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001280:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001288:	2b00      	cmp	r3, #0
 800128a:	f040 82b5 	bne.w	80017f8 <PCD_EP_ISR_Handler+0x768>
 800128e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001292:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001296:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800129a:	f000 82ad 	beq.w	80017f8 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	61bb      	str	r3, [r7, #24]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	461a      	mov	r2, r3
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	4413      	add	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	801a      	strh	r2, [r3, #0]
 80012ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	2b3e      	cmp	r3, #62	; 0x3e
 80012d4:	d91d      	bls.n	8001312 <PCD_EP_ISR_Handler+0x282>
 80012d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	095b      	lsrs	r3, r3, #5
 80012dc:	647b      	str	r3, [r7, #68]	; 0x44
 80012de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	f003 031f 	and.w	r3, r3, #31
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d102      	bne.n	80012f0 <PCD_EP_ISR_Handler+0x260>
 80012ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012ec:	3b01      	subs	r3, #1
 80012ee:	647b      	str	r3, [r7, #68]	; 0x44
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	029b      	lsls	r3, r3, #10
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	4313      	orrs	r3, r2
 8001300:	b29b      	uxth	r3, r3
 8001302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800130a:	b29a      	uxth	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	801a      	strh	r2, [r3, #0]
 8001310:	e026      	b.n	8001360 <PCD_EP_ISR_Handler+0x2d0>
 8001312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10a      	bne.n	8001330 <PCD_EP_ISR_Handler+0x2a0>
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	b29b      	uxth	r3, r3
 8001320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001328:	b29a      	uxth	r2, r3
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	801a      	strh	r2, [r3, #0]
 800132e:	e017      	b.n	8001360 <PCD_EP_ISR_Handler+0x2d0>
 8001330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	085b      	lsrs	r3, r3, #1
 8001336:	647b      	str	r3, [r7, #68]	; 0x44
 8001338:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d002      	beq.n	800134a <PCD_EP_ISR_Handler+0x2ba>
 8001344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001346:	3301      	adds	r3, #1
 8001348:	647b      	str	r3, [r7, #68]	; 0x44
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	b29a      	uxth	r2, r3
 8001350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001352:	b29b      	uxth	r3, r3
 8001354:	029b      	lsls	r3, r3, #10
 8001356:	b29b      	uxth	r3, r3
 8001358:	4313      	orrs	r3, r2
 800135a:	b29a      	uxth	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	b29b      	uxth	r3, r3
 8001368:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800136c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001370:	827b      	strh	r3, [r7, #18]
 8001372:	8a7b      	ldrh	r3, [r7, #18]
 8001374:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001378:	827b      	strh	r3, [r7, #18]
 800137a:	8a7b      	ldrh	r3, [r7, #18]
 800137c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001380:	827b      	strh	r3, [r7, #18]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	8a7b      	ldrh	r3, [r7, #18]
 8001388:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800138c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001398:	b29b      	uxth	r3, r3
 800139a:	8013      	strh	r3, [r2, #0]
 800139c:	e22c      	b.n	80017f8 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80013b2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f280 80f6 	bge.w	80015a8 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	4413      	add	r3, r2
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	b29a      	uxth	r2, r3
 80013ce:	f640 738f 	movw	r3, #3983	; 0xf8f
 80013d2:	4013      	ands	r3, r2
 80013d4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80013ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013ee:	b292      	uxth	r2, r2
 80013f0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80013f2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001408:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800140a:	7b1b      	ldrb	r3, [r3, #12]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d123      	bne.n	8001458 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001418:	b29b      	uxth	r3, r3
 800141a:	461a      	mov	r2, r3
 800141c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	4413      	add	r3, r2
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	6812      	ldr	r2, [r2, #0]
 8001428:	4413      	add	r3, r2
 800142a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001434:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8001438:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 808e 	beq.w	800155e <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6818      	ldr	r0, [r3, #0]
 8001446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001448:	6959      	ldr	r1, [r3, #20]
 800144a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800144c:	88da      	ldrh	r2, [r3, #6]
 800144e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001452:	f003 fd63 	bl	8004f1c <USB_ReadPMA>
 8001456:	e082      	b.n	800155e <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001458:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800145a:	78db      	ldrb	r3, [r3, #3]
 800145c:	2b02      	cmp	r3, #2
 800145e:	d10a      	bne.n	8001476 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001460:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001464:	461a      	mov	r2, r3
 8001466:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 f9d3 	bl	8001814 <HAL_PCD_EP_DB_Receive>
 800146e:	4603      	mov	r3, r0
 8001470:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001474:	e073      	b.n	800155e <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	b29b      	uxth	r3, r3
 8001488:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800148c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001490:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	441a      	add	r2, r3
 80014a2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80014a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80014aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80014ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d022      	beq.n	800151a <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014dc:	b29b      	uxth	r3, r3
 80014de:	461a      	mov	r2, r3
 80014e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	4413      	add	r3, r2
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6812      	ldr	r2, [r2, #0]
 80014ec:	4413      	add	r3, r2
 80014ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014f8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80014fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001500:	2b00      	cmp	r3, #0
 8001502:	d02c      	beq.n	800155e <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6818      	ldr	r0, [r3, #0]
 8001508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800150a:	6959      	ldr	r1, [r3, #20]
 800150c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800150e:	891a      	ldrh	r2, [r3, #8]
 8001510:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001514:	f003 fd02 	bl	8004f1c <USB_ReadPMA>
 8001518:	e021      	b.n	800155e <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001522:	b29b      	uxth	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	4413      	add	r3, r2
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6812      	ldr	r2, [r2, #0]
 8001532:	4413      	add	r3, r2
 8001534:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800153e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001542:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001546:	2b00      	cmp	r3, #0
 8001548:	d009      	beq.n	800155e <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6818      	ldr	r0, [r3, #0]
 800154e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001550:	6959      	ldr	r1, [r3, #20]
 8001552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001554:	895a      	ldrh	r2, [r3, #10]
 8001556:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800155a:	f003 fcdf 	bl	8004f1c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800155e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001560:	69da      	ldr	r2, [r3, #28]
 8001562:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001566:	441a      	add	r2, r3
 8001568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800156a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800156c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800156e:	695a      	ldr	r2, [r3, #20]
 8001570:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001574:	441a      	add	r2, r3
 8001576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001578:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800157a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d005      	beq.n	800158e <PCD_EP_ISR_Handler+0x4fe>
 8001582:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	429a      	cmp	r2, r3
 800158c:	d206      	bcs.n	800159c <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800158e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	4619      	mov	r1, r3
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f004 fd5f 	bl	8006058 <HAL_PCD_DataOutStageCallback>
 800159a:	e005      	b.n	80015a8 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80015a2:	4618      	mov	r0, r3
 80015a4:	f001 ffa4 	bl	80034f0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80015a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80015ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 8121 	beq.w	80017f8 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 80015b6:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80015ba:	4613      	mov	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	4413      	add	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	3310      	adds	r3, #16
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	4413      	add	r3, r2
 80015c8:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	461a      	mov	r2, r3
 80015d0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80015e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	461a      	mov	r2, r3
 80015ee:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	441a      	add	r2, r3
 80015f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80015fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001602:	b29b      	uxth	r3, r3
 8001604:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001608:	78db      	ldrb	r3, [r3, #3]
 800160a:	2b01      	cmp	r3, #1
 800160c:	f040 80a2 	bne.w	8001754 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8001610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001612:	2200      	movs	r2, #0
 8001614:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001618:	7b1b      	ldrb	r3, [r3, #12]
 800161a:	2b00      	cmp	r3, #0
 800161c:	f000 8093 	beq.w	8001746 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001620:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001628:	2b00      	cmp	r3, #0
 800162a:	d046      	beq.n	80016ba <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800162c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800162e:	785b      	ldrb	r3, [r3, #1]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d126      	bne.n	8001682 <PCD_EP_ISR_Handler+0x5f2>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001642:	b29b      	uxth	r3, r3
 8001644:	461a      	mov	r2, r3
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	4413      	add	r3, r2
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
 800164c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	00da      	lsls	r2, r3, #3
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	4413      	add	r3, r2
 8001656:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800165a:	623b      	str	r3, [r7, #32]
 800165c:	6a3b      	ldr	r3, [r7, #32]
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	b29b      	uxth	r3, r3
 8001662:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001666:	b29a      	uxth	r2, r3
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	801a      	strh	r2, [r3, #0]
 800166c:	6a3b      	ldr	r3, [r7, #32]
 800166e:	881b      	ldrh	r3, [r3, #0]
 8001670:	b29b      	uxth	r3, r3
 8001672:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001676:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800167a:	b29a      	uxth	r2, r3
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	801a      	strh	r2, [r3, #0]
 8001680:	e061      	b.n	8001746 <PCD_EP_ISR_Handler+0x6b6>
 8001682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001684:	785b      	ldrb	r3, [r3, #1]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d15d      	bne.n	8001746 <PCD_EP_ISR_Handler+0x6b6>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001698:	b29b      	uxth	r3, r3
 800169a:	461a      	mov	r2, r3
 800169c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169e:	4413      	add	r3, r2
 80016a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	00da      	lsls	r2, r3, #3
 80016a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016aa:	4413      	add	r3, r2
 80016ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80016b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80016b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b4:	2200      	movs	r2, #0
 80016b6:	801a      	strh	r2, [r3, #0]
 80016b8:	e045      	b.n	8001746 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016c2:	785b      	ldrb	r3, [r3, #1]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d126      	bne.n	8001716 <PCD_EP_ISR_Handler+0x686>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	637b      	str	r3, [r7, #52]	; 0x34
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	461a      	mov	r2, r3
 80016da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016dc:	4413      	add	r3, r2
 80016de:	637b      	str	r3, [r7, #52]	; 0x34
 80016e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	00da      	lsls	r2, r3, #3
 80016e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e8:	4413      	add	r3, r2
 80016ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80016ee:	633b      	str	r3, [r7, #48]	; 0x30
 80016f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016fe:	801a      	strh	r2, [r3, #0]
 8001700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	b29b      	uxth	r3, r3
 8001706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800170a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800170e:	b29a      	uxth	r2, r3
 8001710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001712:	801a      	strh	r2, [r3, #0]
 8001714:	e017      	b.n	8001746 <PCD_EP_ISR_Handler+0x6b6>
 8001716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001718:	785b      	ldrb	r3, [r3, #1]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d113      	bne.n	8001746 <PCD_EP_ISR_Handler+0x6b6>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001726:	b29b      	uxth	r3, r3
 8001728:	461a      	mov	r2, r3
 800172a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800172c:	4413      	add	r3, r2
 800172e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	00da      	lsls	r2, r3, #3
 8001736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001738:	4413      	add	r3, r2
 800173a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800173e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001742:	2200      	movs	r2, #0
 8001744:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	4619      	mov	r1, r3
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f004 fc9e 	bl	800608e <HAL_PCD_DataInStageCallback>
 8001752:	e051      	b.n	80017f8 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001754:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175c:	2b00      	cmp	r3, #0
 800175e:	d144      	bne.n	80017ea <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001768:	b29b      	uxth	r3, r3
 800176a:	461a      	mov	r2, r3
 800176c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	4413      	add	r3, r2
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	4413      	add	r3, r2
 800177a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001784:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800178a:	699a      	ldr	r2, [r3, #24]
 800178c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001790:	429a      	cmp	r2, r3
 8001792:	d907      	bls.n	80017a4 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8001794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001796:	699a      	ldr	r2, [r3, #24]
 8001798:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800179c:	1ad2      	subs	r2, r2, r3
 800179e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017a0:	619a      	str	r2, [r3, #24]
 80017a2:	e002      	b.n	80017aa <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 80017a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017a6:	2200      	movs	r2, #0
 80017a8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80017aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d106      	bne.n	80017c0 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80017b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	4619      	mov	r1, r3
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f004 fc68 	bl	800608e <HAL_PCD_DataInStageCallback>
 80017be:	e01b      	b.n	80017f8 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80017c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017c2:	695a      	ldr	r2, [r3, #20]
 80017c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80017c8:	441a      	add	r2, r3
 80017ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017cc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80017ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017d0:	69da      	ldr	r2, [r3, #28]
 80017d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80017d6:	441a      	add	r2, r3
 80017d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017da:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80017e2:	4618      	mov	r0, r3
 80017e4:	f001 fe84 	bl	80034f0 <USB_EPStartXfer>
 80017e8:	e006      	b.n	80017f8 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80017ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80017ee:	461a      	mov	r2, r3
 80017f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 f917 	bl	8001a26 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001800:	b29b      	uxth	r3, r3
 8001802:	b21b      	sxth	r3, r3
 8001804:	2b00      	cmp	r3, #0
 8001806:	f6ff ac48 	blt.w	800109a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	3758      	adds	r7, #88	; 0x58
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	60b9      	str	r1, [r7, #8]
 800181e:	4613      	mov	r3, r2
 8001820:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d07c      	beq.n	8001926 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001834:	b29b      	uxth	r3, r3
 8001836:	461a      	mov	r2, r3
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	4413      	add	r3, r2
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	4413      	add	r3, r2
 8001846:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001850:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	699a      	ldr	r2, [r3, #24]
 8001856:	8b7b      	ldrh	r3, [r7, #26]
 8001858:	429a      	cmp	r2, r3
 800185a:	d306      	bcc.n	800186a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	699a      	ldr	r2, [r3, #24]
 8001860:	8b7b      	ldrh	r3, [r7, #26]
 8001862:	1ad2      	subs	r2, r2, r3
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	619a      	str	r2, [r3, #24]
 8001868:	e002      	b.n	8001870 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d123      	bne.n	80018c0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	b29b      	uxth	r3, r3
 800188a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800188e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001892:	833b      	strh	r3, [r7, #24]
 8001894:	8b3b      	ldrh	r3, [r7, #24]
 8001896:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800189a:	833b      	strh	r3, [r7, #24]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	441a      	add	r2, r3
 80018aa:	8b3b      	ldrh	r3, [r7, #24]
 80018ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80018b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80018b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018bc:	b29b      	uxth	r3, r3
 80018be:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80018c0:	88fb      	ldrh	r3, [r7, #6]
 80018c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d01f      	beq.n	800190a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	461a      	mov	r2, r3
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	b29b      	uxth	r3, r3
 80018dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80018e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018e4:	82fb      	strh	r3, [r7, #22]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	461a      	mov	r2, r3
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	441a      	add	r2, r3
 80018f4:	8afb      	ldrh	r3, [r7, #22]
 80018f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80018fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80018fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001902:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001906:	b29b      	uxth	r3, r3
 8001908:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800190a:	8b7b      	ldrh	r3, [r7, #26]
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 8085 	beq.w	8001a1c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6818      	ldr	r0, [r3, #0]
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	6959      	ldr	r1, [r3, #20]
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	891a      	ldrh	r2, [r3, #8]
 800191e:	8b7b      	ldrh	r3, [r7, #26]
 8001920:	f003 fafc 	bl	8004f1c <USB_ReadPMA>
 8001924:	e07a      	b.n	8001a1c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800192e:	b29b      	uxth	r3, r3
 8001930:	461a      	mov	r2, r3
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4413      	add	r3, r2
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	4413      	add	r3, r2
 8001940:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800194a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	699a      	ldr	r2, [r3, #24]
 8001950:	8b7b      	ldrh	r3, [r7, #26]
 8001952:	429a      	cmp	r2, r3
 8001954:	d306      	bcc.n	8001964 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	699a      	ldr	r2, [r3, #24]
 800195a:	8b7b      	ldrh	r3, [r7, #26]
 800195c:	1ad2      	subs	r2, r2, r3
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	619a      	str	r2, [r3, #24]
 8001962:	e002      	b.n	800196a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2200      	movs	r2, #0
 8001968:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d123      	bne.n	80019ba <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	b29b      	uxth	r3, r3
 8001984:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800198c:	83fb      	strh	r3, [r7, #30]
 800198e:	8bfb      	ldrh	r3, [r7, #30]
 8001990:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001994:	83fb      	strh	r3, [r7, #30]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	441a      	add	r2, r3
 80019a4:	8bfb      	ldrh	r3, [r7, #30]
 80019a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80019aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80019ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80019ba:	88fb      	ldrh	r3, [r7, #6]
 80019bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d11f      	bne.n	8001a04 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	461a      	mov	r2, r3
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019de:	83bb      	strh	r3, [r7, #28]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	441a      	add	r2, r3
 80019ee:	8bbb      	ldrh	r3, [r7, #28]
 80019f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80019f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80019f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001a04:	8b7b      	ldrh	r3, [r7, #26]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d008      	beq.n	8001a1c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6818      	ldr	r0, [r3, #0]
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	6959      	ldr	r1, [r3, #20]
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	895a      	ldrh	r2, [r3, #10]
 8001a16:	8b7b      	ldrh	r3, [r7, #26]
 8001a18:	f003 fa80 	bl	8004f1c <USB_ReadPMA>
    }
  }

  return count;
 8001a1c:	8b7b      	ldrh	r3, [r7, #26]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3720      	adds	r7, #32
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b0a4      	sub	sp, #144	; 0x90
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	60f8      	str	r0, [r7, #12]
 8001a2e:	60b9      	str	r1, [r7, #8]
 8001a30:	4613      	mov	r3, r2
 8001a32:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 81db 	beq.w	8001df6 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	4413      	add	r3, r2
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	6812      	ldr	r2, [r2, #0]
 8001a58:	4413      	add	r3, r2
 8001a5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a64:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	699a      	ldr	r2, [r3, #24]
 8001a6c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d907      	bls.n	8001a84 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	699a      	ldr	r2, [r3, #24]
 8001a78:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001a7c:	1ad2      	subs	r2, r2, r3
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	619a      	str	r2, [r3, #24]
 8001a82:	e002      	b.n	8001a8a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	2200      	movs	r2, #0
 8001a88:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f040 80b9 	bne.w	8001c06 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	785b      	ldrb	r3, [r3, #1]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d126      	bne.n	8001aea <HAL_PCD_EP_DB_Transmit+0xc4>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	461a      	mov	r2, r3
 8001aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab0:	4413      	add	r3, r2
 8001ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	00da      	lsls	r2, r3, #3
 8001aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001abc:	4413      	add	r3, r2
 8001abe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad2:	801a      	strh	r2, [r3, #0]
 8001ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ade:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae6:	801a      	strh	r2, [r3, #0]
 8001ae8:	e01a      	b.n	8001b20 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	785b      	ldrb	r3, [r3, #1]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d116      	bne.n	8001b20 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	637b      	str	r3, [r7, #52]	; 0x34
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	461a      	mov	r2, r3
 8001b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b06:	4413      	add	r3, r2
 8001b08:	637b      	str	r3, [r7, #52]	; 0x34
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	00da      	lsls	r2, r3, #3
 8001b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b12:	4413      	add	r3, r2
 8001b14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001b18:	633b      	str	r3, [r7, #48]	; 0x30
 8001b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	785b      	ldrb	r3, [r3, #1]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d126      	bne.n	8001b7c <HAL_PCD_EP_DB_Transmit+0x156>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	61fb      	str	r3, [r7, #28]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	461a      	mov	r2, r3
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	4413      	add	r3, r2
 8001b44:	61fb      	str	r3, [r7, #28]
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	00da      	lsls	r2, r3, #3
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	4413      	add	r3, r2
 8001b50:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001b54:	61bb      	str	r3, [r7, #24]
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	801a      	strh	r2, [r3, #0]
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	801a      	strh	r2, [r3, #0]
 8001b7a:	e017      	b.n	8001bac <HAL_PCD_EP_DB_Transmit+0x186>
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	785b      	ldrb	r3, [r3, #1]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d113      	bne.n	8001bac <HAL_PCD_EP_DB_Transmit+0x186>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	461a      	mov	r2, r3
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	4413      	add	r3, r2
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	00da      	lsls	r2, r3, #3
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	4413      	add	r3, r2
 8001ba0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001ba4:	623b      	str	r3, [r7, #32]
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f004 fa6b 	bl	800608e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 82fa 	beq.w	80021b8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bde:	82fb      	strh	r3, [r7, #22]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	461a      	mov	r2, r3
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	441a      	add	r2, r3
 8001bee:	8afb      	ldrh	r3, [r7, #22]
 8001bf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001bf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001bf8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	8013      	strh	r3, [r2, #0]
 8001c04:	e2d8      	b.n	80021b8 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001c06:	88fb      	ldrh	r3, [r7, #6]
 8001c08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d021      	beq.n	8001c54 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	461a      	mov	r2, r3
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c2a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	461a      	mov	r2, r3
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	441a      	add	r2, r3
 8001c3c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8001c40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	f040 82ac 	bne.w	80021b8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	695a      	ldr	r2, [r3, #20]
 8001c64:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001c68:	441a      	add	r2, r3
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	69da      	ldr	r2, [r3, #28]
 8001c72:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001c76:	441a      	add	r2, r3
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	6a1a      	ldr	r2, [r3, #32]
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d30b      	bcc.n	8001ca0 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	6a1a      	ldr	r2, [r3, #32]
 8001c94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c98:	1ad2      	subs	r2, r2, r3
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	621a      	str	r2, [r3, #32]
 8001c9e:	e017      	b.n	8001cd0 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d108      	bne.n	8001cba <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8001ca8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001cac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001cb8:	e00a      	b.n	8001cd0 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	785b      	ldrb	r3, [r3, #1]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d165      	bne.n	8001da4 <HAL_PCD_EP_DB_Transmit+0x37e>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cec:	4413      	add	r3, r2
 8001cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	00da      	lsls	r2, r3, #3
 8001cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cf8:	4413      	add	r3, r2
 8001cfa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001cfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d0e:	801a      	strh	r2, [r3, #0]
 8001d10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d14:	2b3e      	cmp	r3, #62	; 0x3e
 8001d16:	d91d      	bls.n	8001d54 <HAL_PCD_EP_DB_Transmit+0x32e>
 8001d18:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d1c:	095b      	lsrs	r3, r3, #5
 8001d1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d24:	f003 031f 	and.w	r3, r3, #31
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d102      	bne.n	8001d32 <HAL_PCD_EP_DB_Transmit+0x30c>
 8001d2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	029b      	lsls	r3, r3, #10
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	4313      	orrs	r3, r2
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d50:	801a      	strh	r2, [r3, #0]
 8001d52:	e044      	b.n	8001dde <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001d54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d10a      	bne.n	8001d72 <HAL_PCD_EP_DB_Transmit+0x34c>
 8001d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d6e:	801a      	strh	r2, [r3, #0]
 8001d70:	e035      	b.n	8001dde <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001d72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d76:	085b      	lsrs	r3, r3, #1
 8001d78:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d002      	beq.n	8001d8c <HAL_PCD_EP_DB_Transmit+0x366>
 8001d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d88:	3301      	adds	r3, #1
 8001d8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	029b      	lsls	r3, r3, #10
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001da0:	801a      	strh	r2, [r3, #0]
 8001da2:	e01c      	b.n	8001dde <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	785b      	ldrb	r3, [r3, #1]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d118      	bne.n	8001dde <HAL_PCD_EP_DB_Transmit+0x3b8>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	647b      	str	r3, [r7, #68]	; 0x44
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dc0:	4413      	add	r3, r2
 8001dc2:	647b      	str	r3, [r7, #68]	; 0x44
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	00da      	lsls	r2, r3, #3
 8001dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dcc:	4413      	add	r3, r2
 8001dce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001dd2:	643b      	str	r3, [r7, #64]	; 0x40
 8001dd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ddc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6818      	ldr	r0, [r3, #0]
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	6959      	ldr	r1, [r3, #20]
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	891a      	ldrh	r2, [r3, #8]
 8001dea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	f003 f852 	bl	8004e98 <USB_WritePMA>
 8001df4:	e1e0      	b.n	80021b8 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	461a      	mov	r2, r3
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4413      	add	r3, r2
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	6812      	ldr	r2, [r2, #0]
 8001e0e:	4413      	add	r3, r2
 8001e10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e1a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	699a      	ldr	r2, [r3, #24]
 8001e22:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d307      	bcc.n	8001e3a <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	699a      	ldr	r2, [r3, #24]
 8001e2e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001e32:	1ad2      	subs	r2, r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	619a      	str	r2, [r3, #24]
 8001e38:	e002      	b.n	8001e40 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f040 80c0 	bne.w	8001fca <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	785b      	ldrb	r3, [r3, #1]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d126      	bne.n	8001ea0 <HAL_PCD_EP_DB_Transmit+0x47a>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	461a      	mov	r2, r3
 8001e64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e66:	4413      	add	r3, r2
 8001e68:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	00da      	lsls	r2, r3, #3
 8001e70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e72:	4413      	add	r3, r2
 8001e74:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e78:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e88:	801a      	strh	r2, [r3, #0]
 8001e8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e9c:	801a      	strh	r2, [r3, #0]
 8001e9e:	e01a      	b.n	8001ed6 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	785b      	ldrb	r3, [r3, #1]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d116      	bne.n	8001ed6 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	667b      	str	r3, [r7, #100]	; 0x64
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	461a      	mov	r2, r3
 8001eba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ebc:	4413      	add	r3, r2
 8001ebe:	667b      	str	r3, [r7, #100]	; 0x64
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	00da      	lsls	r2, r3, #3
 8001ec6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ec8:	4413      	add	r3, r2
 8001eca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001ece:	663b      	str	r3, [r7, #96]	; 0x60
 8001ed0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	677b      	str	r3, [r7, #116]	; 0x74
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	785b      	ldrb	r3, [r3, #1]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d12b      	bne.n	8001f3c <HAL_PCD_EP_DB_Transmit+0x516>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ef8:	4413      	add	r3, r2
 8001efa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	00da      	lsls	r2, r3, #3
 8001f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f04:	4413      	add	r3, r2
 8001f06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001f0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f20:	801a      	strh	r2, [r3, #0]
 8001f22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f38:	801a      	strh	r2, [r3, #0]
 8001f3a:	e017      	b.n	8001f6c <HAL_PCD_EP_DB_Transmit+0x546>
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	785b      	ldrb	r3, [r3, #1]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d113      	bne.n	8001f6c <HAL_PCD_EP_DB_Transmit+0x546>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	461a      	mov	r2, r3
 8001f50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f52:	4413      	add	r3, r2
 8001f54:	677b      	str	r3, [r7, #116]	; 0x74
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	00da      	lsls	r2, r3, #3
 8001f5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f5e:	4413      	add	r3, r2
 8001f60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001f64:	673b      	str	r3, [r7, #112]	; 0x70
 8001f66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f68:	2200      	movs	r2, #0
 8001f6a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	4619      	mov	r1, r3
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f004 f88b 	bl	800608e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001f78:	88fb      	ldrh	r3, [r7, #6]
 8001f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f040 811a 	bne.w	80021b8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	881b      	ldrh	r3, [r3, #0]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f9e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	441a      	add	r2, r3
 8001fb0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001fb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	8013      	strh	r3, [r2, #0]
 8001fc8:	e0f6      	b.n	80021b8 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d121      	bne.n	8002018 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	441a      	add	r2, r3
 8002000:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002004:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002008:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800200c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002014:	b29b      	uxth	r3, r3
 8002016:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800201e:	2b01      	cmp	r3, #1
 8002020:	f040 80ca 	bne.w	80021b8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	695a      	ldr	r2, [r3, #20]
 8002028:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800202c:	441a      	add	r2, r3
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	69da      	ldr	r2, [r3, #28]
 8002036:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800203a:	441a      	add	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	6a1a      	ldr	r2, [r3, #32]
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	429a      	cmp	r2, r3
 800204a:	d30b      	bcc.n	8002064 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	6a1a      	ldr	r2, [r3, #32]
 8002058:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800205c:	1ad2      	subs	r2, r2, r3
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	621a      	str	r2, [r3, #32]
 8002062:	e017      	b.n	8002094 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d108      	bne.n	800207e <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800206c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002070:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800207c:	e00a      	b.n	8002094 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2200      	movs	r2, #0
 800208a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	657b      	str	r3, [r7, #84]	; 0x54
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	785b      	ldrb	r3, [r3, #1]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d165      	bne.n	800216e <HAL_PCD_EP_DB_Transmit+0x748>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	461a      	mov	r2, r3
 80020b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020b6:	4413      	add	r3, r2
 80020b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	00da      	lsls	r2, r3, #3
 80020c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020c2:	4413      	add	r3, r2
 80020c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80020ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020d8:	801a      	strh	r2, [r3, #0]
 80020da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020de:	2b3e      	cmp	r3, #62	; 0x3e
 80020e0:	d91d      	bls.n	800211e <HAL_PCD_EP_DB_Transmit+0x6f8>
 80020e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020e6:	095b      	lsrs	r3, r3, #5
 80020e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80020ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020ee:	f003 031f 	and.w	r3, r3, #31
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d102      	bne.n	80020fc <HAL_PCD_EP_DB_Transmit+0x6d6>
 80020f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020f8:	3b01      	subs	r3, #1
 80020fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80020fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	b29a      	uxth	r2, r3
 8002102:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002104:	b29b      	uxth	r3, r3
 8002106:	029b      	lsls	r3, r3, #10
 8002108:	b29b      	uxth	r3, r3
 800210a:	4313      	orrs	r3, r2
 800210c:	b29b      	uxth	r3, r3
 800210e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002112:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002116:	b29a      	uxth	r2, r3
 8002118:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800211a:	801a      	strh	r2, [r3, #0]
 800211c:	e041      	b.n	80021a2 <HAL_PCD_EP_DB_Transmit+0x77c>
 800211e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10a      	bne.n	800213c <HAL_PCD_EP_DB_Transmit+0x716>
 8002126:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	b29b      	uxth	r3, r3
 800212c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002130:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002134:	b29a      	uxth	r2, r3
 8002136:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002138:	801a      	strh	r2, [r3, #0]
 800213a:	e032      	b.n	80021a2 <HAL_PCD_EP_DB_Transmit+0x77c>
 800213c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002140:	085b      	lsrs	r3, r3, #1
 8002142:	66bb      	str	r3, [r7, #104]	; 0x68
 8002144:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	d002      	beq.n	8002156 <HAL_PCD_EP_DB_Transmit+0x730>
 8002150:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002152:	3301      	adds	r3, #1
 8002154:	66bb      	str	r3, [r7, #104]	; 0x68
 8002156:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	b29a      	uxth	r2, r3
 800215c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800215e:	b29b      	uxth	r3, r3
 8002160:	029b      	lsls	r3, r3, #10
 8002162:	b29b      	uxth	r3, r3
 8002164:	4313      	orrs	r3, r2
 8002166:	b29a      	uxth	r2, r3
 8002168:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800216a:	801a      	strh	r2, [r3, #0]
 800216c:	e019      	b.n	80021a2 <HAL_PCD_EP_DB_Transmit+0x77c>
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	785b      	ldrb	r3, [r3, #1]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d115      	bne.n	80021a2 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800217e:	b29b      	uxth	r3, r3
 8002180:	461a      	mov	r2, r3
 8002182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002184:	4413      	add	r3, r2
 8002186:	657b      	str	r3, [r7, #84]	; 0x54
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	00da      	lsls	r2, r3, #3
 800218e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002190:	4413      	add	r3, r2
 8002192:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002196:	653b      	str	r3, [r7, #80]	; 0x50
 8002198:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800219c:	b29a      	uxth	r2, r3
 800219e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021a0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	6959      	ldr	r1, [r3, #20]
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	895a      	ldrh	r2, [r3, #10]
 80021ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	f002 fe70 	bl	8004e98 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021d2:	82bb      	strh	r3, [r7, #20]
 80021d4:	8abb      	ldrh	r3, [r7, #20]
 80021d6:	f083 0310 	eor.w	r3, r3, #16
 80021da:	82bb      	strh	r3, [r7, #20]
 80021dc:	8abb      	ldrh	r3, [r7, #20]
 80021de:	f083 0320 	eor.w	r3, r3, #32
 80021e2:	82bb      	strh	r3, [r7, #20]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	441a      	add	r2, r3
 80021f2:	8abb      	ldrh	r3, [r7, #20]
 80021f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002204:	b29b      	uxth	r3, r3
 8002206:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3790      	adds	r7, #144	; 0x90
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d141      	bne.n	80022a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002222:	4b4b      	ldr	r3, [pc, #300]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800222a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800222e:	d131      	bne.n	8002294 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002230:	4b47      	ldr	r3, [pc, #284]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002236:	4a46      	ldr	r2, [pc, #280]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800223c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002240:	4b43      	ldr	r3, [pc, #268]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002248:	4a41      	ldr	r2, [pc, #260]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800224a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800224e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002250:	4b40      	ldr	r3, [pc, #256]	; (8002354 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2232      	movs	r2, #50	; 0x32
 8002256:	fb02 f303 	mul.w	r3, r2, r3
 800225a:	4a3f      	ldr	r2, [pc, #252]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800225c:	fba2 2303 	umull	r2, r3, r2, r3
 8002260:	0c9b      	lsrs	r3, r3, #18
 8002262:	3301      	adds	r3, #1
 8002264:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002266:	e002      	b.n	800226e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	3b01      	subs	r3, #1
 800226c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800226e:	4b38      	ldr	r3, [pc, #224]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800227a:	d102      	bne.n	8002282 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f2      	bne.n	8002268 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002282:	4b33      	ldr	r3, [pc, #204]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800228a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228e:	d158      	bne.n	8002342 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e057      	b.n	8002344 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002294:	4b2e      	ldr	r3, [pc, #184]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800229a:	4a2d      	ldr	r2, [pc, #180]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800229c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80022a4:	e04d      	b.n	8002342 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ac:	d141      	bne.n	8002332 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022ae:	4b28      	ldr	r3, [pc, #160]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ba:	d131      	bne.n	8002320 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022bc:	4b24      	ldr	r3, [pc, #144]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022c2:	4a23      	ldr	r2, [pc, #140]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022cc:	4b20      	ldr	r3, [pc, #128]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022d4:	4a1e      	ldr	r2, [pc, #120]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022dc:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2232      	movs	r2, #50	; 0x32
 80022e2:	fb02 f303 	mul.w	r3, r2, r3
 80022e6:	4a1c      	ldr	r2, [pc, #112]	; (8002358 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022e8:	fba2 2303 	umull	r2, r3, r2, r3
 80022ec:	0c9b      	lsrs	r3, r3, #18
 80022ee:	3301      	adds	r3, #1
 80022f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022f2:	e002      	b.n	80022fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022fa:	4b15      	ldr	r3, [pc, #84]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002306:	d102      	bne.n	800230e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f2      	bne.n	80022f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800231a:	d112      	bne.n	8002342 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e011      	b.n	8002344 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002320:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002322:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002326:	4a0a      	ldr	r2, [pc, #40]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002330:	e007      	b.n	8002342 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002332:	4b07      	ldr	r3, [pc, #28]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800233a:	4a05      	ldr	r2, [pc, #20]	; (8002350 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800233c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002340:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	40007000 	.word	0x40007000
 8002354:	20000000 	.word	0x20000000
 8002358:	431bde83 	.word	0x431bde83

0800235c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	4a04      	ldr	r2, [pc, #16]	; (8002378 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002366:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800236a:	6093      	str	r3, [r2, #8]
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40007000 	.word	0x40007000

0800237c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e2fe      	b.n	800298c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d075      	beq.n	8002486 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800239a:	4b97      	ldr	r3, [pc, #604]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 030c 	and.w	r3, r3, #12
 80023a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023a4:	4b94      	ldr	r3, [pc, #592]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	2b0c      	cmp	r3, #12
 80023b2:	d102      	bne.n	80023ba <HAL_RCC_OscConfig+0x3e>
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d002      	beq.n	80023c0 <HAL_RCC_OscConfig+0x44>
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d10b      	bne.n	80023d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c0:	4b8d      	ldr	r3, [pc, #564]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d05b      	beq.n	8002484 <HAL_RCC_OscConfig+0x108>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d157      	bne.n	8002484 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e2d9      	b.n	800298c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e0:	d106      	bne.n	80023f0 <HAL_RCC_OscConfig+0x74>
 80023e2:	4b85      	ldr	r3, [pc, #532]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a84      	ldr	r2, [pc, #528]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 80023e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	e01d      	b.n	800242c <HAL_RCC_OscConfig+0xb0>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023f8:	d10c      	bne.n	8002414 <HAL_RCC_OscConfig+0x98>
 80023fa:	4b7f      	ldr	r3, [pc, #508]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a7e      	ldr	r2, [pc, #504]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 8002400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	4b7c      	ldr	r3, [pc, #496]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a7b      	ldr	r2, [pc, #492]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 800240c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	e00b      	b.n	800242c <HAL_RCC_OscConfig+0xb0>
 8002414:	4b78      	ldr	r3, [pc, #480]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a77      	ldr	r2, [pc, #476]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 800241a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800241e:	6013      	str	r3, [r2, #0]
 8002420:	4b75      	ldr	r3, [pc, #468]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a74      	ldr	r2, [pc, #464]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 8002426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800242a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d013      	beq.n	800245c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002434:	f7fe f8ec 	bl	8000610 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800243c:	f7fe f8e8 	bl	8000610 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b64      	cmp	r3, #100	; 0x64
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e29e      	b.n	800298c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800244e:	4b6a      	ldr	r3, [pc, #424]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0f0      	beq.n	800243c <HAL_RCC_OscConfig+0xc0>
 800245a:	e014      	b.n	8002486 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7fe f8d8 	bl	8000610 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002464:	f7fe f8d4 	bl	8000610 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b64      	cmp	r3, #100	; 0x64
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e28a      	b.n	800298c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002476:	4b60      	ldr	r3, [pc, #384]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0xe8>
 8002482:	e000      	b.n	8002486 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d075      	beq.n	800257e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002492:	4b59      	ldr	r3, [pc, #356]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800249c:	4b56      	ldr	r3, [pc, #344]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	2b0c      	cmp	r3, #12
 80024aa:	d102      	bne.n	80024b2 <HAL_RCC_OscConfig+0x136>
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d002      	beq.n	80024b8 <HAL_RCC_OscConfig+0x13c>
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d11f      	bne.n	80024f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024b8:	4b4f      	ldr	r3, [pc, #316]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_RCC_OscConfig+0x154>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e25d      	b.n	800298c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d0:	4b49      	ldr	r3, [pc, #292]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	061b      	lsls	r3, r3, #24
 80024de:	4946      	ldr	r1, [pc, #280]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024e4:	4b45      	ldr	r3, [pc, #276]	; (80025fc <HAL_RCC_OscConfig+0x280>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fe f845 	bl	8000578 <HAL_InitTick>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d043      	beq.n	800257c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e249      	b.n	800298c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d023      	beq.n	8002548 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002500:	4b3d      	ldr	r3, [pc, #244]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a3c      	ldr	r2, [pc, #240]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 8002506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250c:	f7fe f880 	bl	8000610 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002514:	f7fe f87c 	bl	8000610 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e232      	b.n	800298c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002526:	4b34      	ldr	r3, [pc, #208]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002532:	4b31      	ldr	r3, [pc, #196]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	061b      	lsls	r3, r3, #24
 8002540:	492d      	ldr	r1, [pc, #180]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 8002542:	4313      	orrs	r3, r2
 8002544:	604b      	str	r3, [r1, #4]
 8002546:	e01a      	b.n	800257e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002548:	4b2b      	ldr	r3, [pc, #172]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a2a      	ldr	r2, [pc, #168]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 800254e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002554:	f7fe f85c 	bl	8000610 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800255c:	f7fe f858 	bl	8000610 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e20e      	b.n	800298c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800256e:	4b22      	ldr	r3, [pc, #136]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x1e0>
 800257a:	e000      	b.n	800257e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800257c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d041      	beq.n	800260e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d01c      	beq.n	80025cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002592:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 8002594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002598:	4a17      	ldr	r2, [pc, #92]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 800259a:	f043 0301 	orr.w	r3, r3, #1
 800259e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a2:	f7fe f835 	bl	8000610 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025a8:	e008      	b.n	80025bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025aa:	f7fe f831 	bl	8000610 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d901      	bls.n	80025bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e1e7      	b.n	800298c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025bc:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 80025be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0ef      	beq.n	80025aa <HAL_RCC_OscConfig+0x22e>
 80025ca:	e020      	b.n	800260e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025cc:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 80025ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025d2:	4a09      	ldr	r2, [pc, #36]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 80025d4:	f023 0301 	bic.w	r3, r3, #1
 80025d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025dc:	f7fe f818 	bl	8000610 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025e2:	e00d      	b.n	8002600 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e4:	f7fe f814 	bl	8000610 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d906      	bls.n	8002600 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e1ca      	b.n	800298c <HAL_RCC_OscConfig+0x610>
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000
 80025fc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002600:	4b8c      	ldr	r3, [pc, #560]	; (8002834 <HAL_RCC_OscConfig+0x4b8>)
 8002602:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1ea      	bne.n	80025e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 80a6 	beq.w	8002768 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800261c:	2300      	movs	r3, #0
 800261e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002620:	4b84      	ldr	r3, [pc, #528]	; (8002834 <HAL_RCC_OscConfig+0x4b8>)
 8002622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_OscConfig+0x2b4>
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <HAL_RCC_OscConfig+0x2b6>
 8002630:	2300      	movs	r3, #0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00d      	beq.n	8002652 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002636:	4b7f      	ldr	r3, [pc, #508]	; (8002834 <HAL_RCC_OscConfig+0x4b8>)
 8002638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263a:	4a7e      	ldr	r2, [pc, #504]	; (8002834 <HAL_RCC_OscConfig+0x4b8>)
 800263c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002640:	6593      	str	r3, [r2, #88]	; 0x58
 8002642:	4b7c      	ldr	r3, [pc, #496]	; (8002834 <HAL_RCC_OscConfig+0x4b8>)
 8002644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800264e:	2301      	movs	r3, #1
 8002650:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002652:	4b79      	ldr	r3, [pc, #484]	; (8002838 <HAL_RCC_OscConfig+0x4bc>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265a:	2b00      	cmp	r3, #0
 800265c:	d118      	bne.n	8002690 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800265e:	4b76      	ldr	r3, [pc, #472]	; (8002838 <HAL_RCC_OscConfig+0x4bc>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a75      	ldr	r2, [pc, #468]	; (8002838 <HAL_RCC_OscConfig+0x4bc>)
 8002664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800266a:	f7fd ffd1 	bl	8000610 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002672:	f7fd ffcd 	bl	8000610 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e183      	b.n	800298c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002684:	4b6c      	ldr	r3, [pc, #432]	; (8002838 <HAL_RCC_OscConfig+0x4bc>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f0      	beq.n	8002672 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d108      	bne.n	80026aa <HAL_RCC_OscConfig+0x32e>
 8002698:	4b66      	ldr	r3, [pc, #408]	; (8002834 <HAL_RCC_OscConfig+0x4b8>)
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269e:	4a65      	ldr	r2, [pc, #404]	; (8002834 <HAL_RCC_OscConfig+0x4b8>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026a8:	e024      	b.n	80026f4 <HAL_RCC_OscConfig+0x378>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b05      	cmp	r3, #5
 80026b0:	d110      	bne.n	80026d4 <HAL_RCC_OscConfig+0x358>
 80026b2:	4b60      	ldr	r3, [pc, #384]	; (8002834 <HAL_RCC_OscConfig+0x4b8>)
 80026b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b8:	4a5e      	ldr	r2, [pc, #376]	; (8002834 <HAL_RCC_OscConfig+0x4b8>)
 80026ba:	f043 0304 	orr.w	r3, r3, #4
 80026be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026c2:	4b5c      	ldr	r3, [pc, #368]	; (8002834 <HAL_RCC_OscConfig+0x4b8>)
 80026c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c8:	4a5a      	ldr	r2, [pc, #360]	; (8002834 <HAL_RCC_OscConfig+0x4b8>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026d2:	e00f      	b.n	80026f4 <HAL_RCC_OscConfig+0x378>
 80026d4:	4b57      	ldr	r3, [pc, #348]	; (8002834 <HAL_RCC_OscConfig+0x4b8>)
 80026d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026da:	4a56      	ldr	r2, [pc, #344]	; (8002834 <HAL_RCC_OscConfig+0x4b8>)
 80026dc:	f023 0301 	bic.w	r3, r3, #1
 80026e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026e4:	4b53      	ldr	r3, [pc, #332]	; (8002834 <HAL_RCC_OscConfig+0x4b8>)
 80026e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ea:	4a52      	ldr	r2, [pc, #328]	; (8002834 <HAL_RCC_OscConfig+0x4b8>)
 80026ec:	f023 0304 	bic.w	r3, r3, #4
 80026f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d016      	beq.n	800272a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fc:	f7fd ff88 	bl	8000610 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002702:	e00a      	b.n	800271a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002704:	f7fd ff84 	bl	8000610 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e138      	b.n	800298c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800271a:	4b46      	ldr	r3, [pc, #280]	; (8002834 <HAL_RCC_OscConfig+0x4b8>)
 800271c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0ed      	beq.n	8002704 <HAL_RCC_OscConfig+0x388>
 8002728:	e015      	b.n	8002756 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800272a:	f7fd ff71 	bl	8000610 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002730:	e00a      	b.n	8002748 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002732:	f7fd ff6d 	bl	8000610 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002740:	4293      	cmp	r3, r2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e121      	b.n	800298c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002748:	4b3a      	ldr	r3, [pc, #232]	; (8002834 <HAL_RCC_OscConfig+0x4b8>)
 800274a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1ed      	bne.n	8002732 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002756:	7ffb      	ldrb	r3, [r7, #31]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d105      	bne.n	8002768 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800275c:	4b35      	ldr	r3, [pc, #212]	; (8002834 <HAL_RCC_OscConfig+0x4b8>)
 800275e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002760:	4a34      	ldr	r2, [pc, #208]	; (8002834 <HAL_RCC_OscConfig+0x4b8>)
 8002762:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002766:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0320 	and.w	r3, r3, #32
 8002770:	2b00      	cmp	r3, #0
 8002772:	d03c      	beq.n	80027ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d01c      	beq.n	80027b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800277c:	4b2d      	ldr	r3, [pc, #180]	; (8002834 <HAL_RCC_OscConfig+0x4b8>)
 800277e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002782:	4a2c      	ldr	r2, [pc, #176]	; (8002834 <HAL_RCC_OscConfig+0x4b8>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278c:	f7fd ff40 	bl	8000610 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002794:	f7fd ff3c 	bl	8000610 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e0f2      	b.n	800298c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027a6:	4b23      	ldr	r3, [pc, #140]	; (8002834 <HAL_RCC_OscConfig+0x4b8>)
 80027a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0ef      	beq.n	8002794 <HAL_RCC_OscConfig+0x418>
 80027b4:	e01b      	b.n	80027ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027b6:	4b1f      	ldr	r3, [pc, #124]	; (8002834 <HAL_RCC_OscConfig+0x4b8>)
 80027b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027bc:	4a1d      	ldr	r2, [pc, #116]	; (8002834 <HAL_RCC_OscConfig+0x4b8>)
 80027be:	f023 0301 	bic.w	r3, r3, #1
 80027c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c6:	f7fd ff23 	bl	8000610 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027ce:	f7fd ff1f 	bl	8000610 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e0d5      	b.n	800298c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027e0:	4b14      	ldr	r3, [pc, #80]	; (8002834 <HAL_RCC_OscConfig+0x4b8>)
 80027e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1ef      	bne.n	80027ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 80c9 	beq.w	800298a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027f8:	4b0e      	ldr	r3, [pc, #56]	; (8002834 <HAL_RCC_OscConfig+0x4b8>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 030c 	and.w	r3, r3, #12
 8002800:	2b0c      	cmp	r3, #12
 8002802:	f000 8083 	beq.w	800290c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	2b02      	cmp	r3, #2
 800280c:	d15e      	bne.n	80028cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280e:	4b09      	ldr	r3, [pc, #36]	; (8002834 <HAL_RCC_OscConfig+0x4b8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a08      	ldr	r2, [pc, #32]	; (8002834 <HAL_RCC_OscConfig+0x4b8>)
 8002814:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281a:	f7fd fef9 	bl	8000610 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002820:	e00c      	b.n	800283c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002822:	f7fd fef5 	bl	8000610 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d905      	bls.n	800283c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e0ab      	b.n	800298c <HAL_RCC_OscConfig+0x610>
 8002834:	40021000 	.word	0x40021000
 8002838:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800283c:	4b55      	ldr	r3, [pc, #340]	; (8002994 <HAL_RCC_OscConfig+0x618>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1ec      	bne.n	8002822 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002848:	4b52      	ldr	r3, [pc, #328]	; (8002994 <HAL_RCC_OscConfig+0x618>)
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	4b52      	ldr	r3, [pc, #328]	; (8002998 <HAL_RCC_OscConfig+0x61c>)
 800284e:	4013      	ands	r3, r2
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6a11      	ldr	r1, [r2, #32]
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002858:	3a01      	subs	r2, #1
 800285a:	0112      	lsls	r2, r2, #4
 800285c:	4311      	orrs	r1, r2
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002862:	0212      	lsls	r2, r2, #8
 8002864:	4311      	orrs	r1, r2
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800286a:	0852      	lsrs	r2, r2, #1
 800286c:	3a01      	subs	r2, #1
 800286e:	0552      	lsls	r2, r2, #21
 8002870:	4311      	orrs	r1, r2
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002876:	0852      	lsrs	r2, r2, #1
 8002878:	3a01      	subs	r2, #1
 800287a:	0652      	lsls	r2, r2, #25
 800287c:	4311      	orrs	r1, r2
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002882:	06d2      	lsls	r2, r2, #27
 8002884:	430a      	orrs	r2, r1
 8002886:	4943      	ldr	r1, [pc, #268]	; (8002994 <HAL_RCC_OscConfig+0x618>)
 8002888:	4313      	orrs	r3, r2
 800288a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800288c:	4b41      	ldr	r3, [pc, #260]	; (8002994 <HAL_RCC_OscConfig+0x618>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a40      	ldr	r2, [pc, #256]	; (8002994 <HAL_RCC_OscConfig+0x618>)
 8002892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002896:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002898:	4b3e      	ldr	r3, [pc, #248]	; (8002994 <HAL_RCC_OscConfig+0x618>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	4a3d      	ldr	r2, [pc, #244]	; (8002994 <HAL_RCC_OscConfig+0x618>)
 800289e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a4:	f7fd feb4 	bl	8000610 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ac:	f7fd feb0 	bl	8000610 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e066      	b.n	800298c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028be:	4b35      	ldr	r3, [pc, #212]	; (8002994 <HAL_RCC_OscConfig+0x618>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d0f0      	beq.n	80028ac <HAL_RCC_OscConfig+0x530>
 80028ca:	e05e      	b.n	800298a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028cc:	4b31      	ldr	r3, [pc, #196]	; (8002994 <HAL_RCC_OscConfig+0x618>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a30      	ldr	r2, [pc, #192]	; (8002994 <HAL_RCC_OscConfig+0x618>)
 80028d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fd fe9a 	bl	8000610 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e0:	f7fd fe96 	bl	8000610 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e04c      	b.n	800298c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f2:	4b28      	ldr	r3, [pc, #160]	; (8002994 <HAL_RCC_OscConfig+0x618>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80028fe:	4b25      	ldr	r3, [pc, #148]	; (8002994 <HAL_RCC_OscConfig+0x618>)
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	4924      	ldr	r1, [pc, #144]	; (8002994 <HAL_RCC_OscConfig+0x618>)
 8002904:	4b25      	ldr	r3, [pc, #148]	; (800299c <HAL_RCC_OscConfig+0x620>)
 8002906:	4013      	ands	r3, r2
 8002908:	60cb      	str	r3, [r1, #12]
 800290a:	e03e      	b.n	800298a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e039      	b.n	800298c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002918:	4b1e      	ldr	r3, [pc, #120]	; (8002994 <HAL_RCC_OscConfig+0x618>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f003 0203 	and.w	r2, r3, #3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
 8002928:	429a      	cmp	r2, r3
 800292a:	d12c      	bne.n	8002986 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	3b01      	subs	r3, #1
 8002938:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293a:	429a      	cmp	r2, r3
 800293c:	d123      	bne.n	8002986 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002948:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800294a:	429a      	cmp	r2, r3
 800294c:	d11b      	bne.n	8002986 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800295a:	429a      	cmp	r2, r3
 800295c:	d113      	bne.n	8002986 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002968:	085b      	lsrs	r3, r3, #1
 800296a:	3b01      	subs	r3, #1
 800296c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800296e:	429a      	cmp	r2, r3
 8002970:	d109      	bne.n	8002986 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297c:	085b      	lsrs	r3, r3, #1
 800297e:	3b01      	subs	r3, #1
 8002980:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002982:	429a      	cmp	r2, r3
 8002984:	d001      	beq.n	800298a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3720      	adds	r7, #32
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40021000 	.word	0x40021000
 8002998:	019f800c 	.word	0x019f800c
 800299c:	feeefffc 	.word	0xfeeefffc

080029a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e11e      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029b8:	4b91      	ldr	r3, [pc, #580]	; (8002c00 <HAL_RCC_ClockConfig+0x260>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d910      	bls.n	80029e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c6:	4b8e      	ldr	r3, [pc, #568]	; (8002c00 <HAL_RCC_ClockConfig+0x260>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 020f 	bic.w	r2, r3, #15
 80029ce:	498c      	ldr	r1, [pc, #560]	; (8002c00 <HAL_RCC_ClockConfig+0x260>)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d6:	4b8a      	ldr	r3, [pc, #552]	; (8002c00 <HAL_RCC_ClockConfig+0x260>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d001      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e106      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d073      	beq.n	8002adc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b03      	cmp	r3, #3
 80029fa:	d129      	bne.n	8002a50 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029fc:	4b81      	ldr	r3, [pc, #516]	; (8002c04 <HAL_RCC_ClockConfig+0x264>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0f4      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002a0c:	f000 f966 	bl	8002cdc <RCC_GetSysClockFreqFromPLLSource>
 8002a10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4a7c      	ldr	r2, [pc, #496]	; (8002c08 <HAL_RCC_ClockConfig+0x268>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d93f      	bls.n	8002a9a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a1a:	4b7a      	ldr	r3, [pc, #488]	; (8002c04 <HAL_RCC_ClockConfig+0x264>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d009      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d033      	beq.n	8002a9a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d12f      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a3a:	4b72      	ldr	r3, [pc, #456]	; (8002c04 <HAL_RCC_ClockConfig+0x264>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a42:	4a70      	ldr	r2, [pc, #448]	; (8002c04 <HAL_RCC_ClockConfig+0x264>)
 8002a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a4a:	2380      	movs	r3, #128	; 0x80
 8002a4c:	617b      	str	r3, [r7, #20]
 8002a4e:	e024      	b.n	8002a9a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d107      	bne.n	8002a68 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a58:	4b6a      	ldr	r3, [pc, #424]	; (8002c04 <HAL_RCC_ClockConfig+0x264>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d109      	bne.n	8002a78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e0c6      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a68:	4b66      	ldr	r3, [pc, #408]	; (8002c04 <HAL_RCC_ClockConfig+0x264>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0be      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002a78:	f000 f8ce 	bl	8002c18 <HAL_RCC_GetSysClockFreq>
 8002a7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4a61      	ldr	r2, [pc, #388]	; (8002c08 <HAL_RCC_ClockConfig+0x268>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d909      	bls.n	8002a9a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a86:	4b5f      	ldr	r3, [pc, #380]	; (8002c04 <HAL_RCC_ClockConfig+0x264>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a8e:	4a5d      	ldr	r2, [pc, #372]	; (8002c04 <HAL_RCC_ClockConfig+0x264>)
 8002a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a94:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002a96:	2380      	movs	r3, #128	; 0x80
 8002a98:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a9a:	4b5a      	ldr	r3, [pc, #360]	; (8002c04 <HAL_RCC_ClockConfig+0x264>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f023 0203 	bic.w	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	4957      	ldr	r1, [pc, #348]	; (8002c04 <HAL_RCC_ClockConfig+0x264>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aac:	f7fd fdb0 	bl	8000610 <HAL_GetTick>
 8002ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab2:	e00a      	b.n	8002aca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab4:	f7fd fdac 	bl	8000610 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e095      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aca:	4b4e      	ldr	r3, [pc, #312]	; (8002c04 <HAL_RCC_ClockConfig+0x264>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 020c 	and.w	r2, r3, #12
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d1eb      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d023      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002af4:	4b43      	ldr	r3, [pc, #268]	; (8002c04 <HAL_RCC_ClockConfig+0x264>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	4a42      	ldr	r2, [pc, #264]	; (8002c04 <HAL_RCC_ClockConfig+0x264>)
 8002afa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002afe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d007      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002b0c:	4b3d      	ldr	r3, [pc, #244]	; (8002c04 <HAL_RCC_ClockConfig+0x264>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002b14:	4a3b      	ldr	r2, [pc, #236]	; (8002c04 <HAL_RCC_ClockConfig+0x264>)
 8002b16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b1c:	4b39      	ldr	r3, [pc, #228]	; (8002c04 <HAL_RCC_ClockConfig+0x264>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	4936      	ldr	r1, [pc, #216]	; (8002c04 <HAL_RCC_ClockConfig+0x264>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	608b      	str	r3, [r1, #8]
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	2b80      	cmp	r3, #128	; 0x80
 8002b34:	d105      	bne.n	8002b42 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b36:	4b33      	ldr	r3, [pc, #204]	; (8002c04 <HAL_RCC_ClockConfig+0x264>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	4a32      	ldr	r2, [pc, #200]	; (8002c04 <HAL_RCC_ClockConfig+0x264>)
 8002b3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b40:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b42:	4b2f      	ldr	r3, [pc, #188]	; (8002c00 <HAL_RCC_ClockConfig+0x260>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d21d      	bcs.n	8002b8c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b50:	4b2b      	ldr	r3, [pc, #172]	; (8002c00 <HAL_RCC_ClockConfig+0x260>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f023 020f 	bic.w	r2, r3, #15
 8002b58:	4929      	ldr	r1, [pc, #164]	; (8002c00 <HAL_RCC_ClockConfig+0x260>)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b60:	f7fd fd56 	bl	8000610 <HAL_GetTick>
 8002b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b66:	e00a      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b68:	f7fd fd52 	bl	8000610 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e03b      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7e:	4b20      	ldr	r3, [pc, #128]	; (8002c00 <HAL_RCC_ClockConfig+0x260>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d1ed      	bne.n	8002b68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b98:	4b1a      	ldr	r3, [pc, #104]	; (8002c04 <HAL_RCC_ClockConfig+0x264>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	4917      	ldr	r1, [pc, #92]	; (8002c04 <HAL_RCC_ClockConfig+0x264>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d009      	beq.n	8002bca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bb6:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <HAL_RCC_ClockConfig+0x264>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	490f      	ldr	r1, [pc, #60]	; (8002c04 <HAL_RCC_ClockConfig+0x264>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bca:	f000 f825 	bl	8002c18 <HAL_RCC_GetSysClockFreq>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <HAL_RCC_ClockConfig+0x264>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	091b      	lsrs	r3, r3, #4
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	490c      	ldr	r1, [pc, #48]	; (8002c0c <HAL_RCC_ClockConfig+0x26c>)
 8002bdc:	5ccb      	ldrb	r3, [r1, r3]
 8002bde:	f003 031f 	and.w	r3, r3, #31
 8002be2:	fa22 f303 	lsr.w	r3, r2, r3
 8002be6:	4a0a      	ldr	r2, [pc, #40]	; (8002c10 <HAL_RCC_ClockConfig+0x270>)
 8002be8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002bea:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <HAL_RCC_ClockConfig+0x274>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fd fcc2 	bl	8000578 <HAL_InitTick>
 8002bf4:	4603      	mov	r3, r0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40022000 	.word	0x40022000
 8002c04:	40021000 	.word	0x40021000
 8002c08:	04c4b400 	.word	0x04c4b400
 8002c0c:	080064c4 	.word	0x080064c4
 8002c10:	20000000 	.word	0x20000000
 8002c14:	20000004 	.word	0x20000004

08002c18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b087      	sub	sp, #28
 8002c1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c1e:	4b2c      	ldr	r3, [pc, #176]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 030c 	and.w	r3, r3, #12
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d102      	bne.n	8002c30 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c2a:	4b2a      	ldr	r3, [pc, #168]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	e047      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c30:	4b27      	ldr	r3, [pc, #156]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 030c 	and.w	r3, r3, #12
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d102      	bne.n	8002c42 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c3c:	4b26      	ldr	r3, [pc, #152]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c3e:	613b      	str	r3, [r7, #16]
 8002c40:	e03e      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002c42:	4b23      	ldr	r3, [pc, #140]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	2b0c      	cmp	r3, #12
 8002c4c:	d136      	bne.n	8002cbc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c4e:	4b20      	ldr	r3, [pc, #128]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c58:	4b1d      	ldr	r3, [pc, #116]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 030f 	and.w	r3, r3, #15
 8002c62:	3301      	adds	r3, #1
 8002c64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2b03      	cmp	r3, #3
 8002c6a:	d10c      	bne.n	8002c86 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c6c:	4a1a      	ldr	r2, [pc, #104]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c74:	4a16      	ldr	r2, [pc, #88]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c76:	68d2      	ldr	r2, [r2, #12]
 8002c78:	0a12      	lsrs	r2, r2, #8
 8002c7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c7e:	fb02 f303 	mul.w	r3, r2, r3
 8002c82:	617b      	str	r3, [r7, #20]
      break;
 8002c84:	e00c      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c86:	4a13      	ldr	r2, [pc, #76]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8e:	4a10      	ldr	r2, [pc, #64]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c90:	68d2      	ldr	r2, [r2, #12]
 8002c92:	0a12      	lsrs	r2, r2, #8
 8002c94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c98:	fb02 f303 	mul.w	r3, r2, r3
 8002c9c:	617b      	str	r3, [r7, #20]
      break;
 8002c9e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	0e5b      	lsrs	r3, r3, #25
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	3301      	adds	r3, #1
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb8:	613b      	str	r3, [r7, #16]
 8002cba:	e001      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002cc0:	693b      	ldr	r3, [r7, #16]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	371c      	adds	r7, #28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	00f42400 	.word	0x00f42400
 8002cd8:	016e3600 	.word	0x016e3600

08002cdc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ce2:	4b1e      	ldr	r3, [pc, #120]	; (8002d5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f003 0303 	and.w	r3, r3, #3
 8002cea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cec:	4b1b      	ldr	r3, [pc, #108]	; (8002d5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	091b      	lsrs	r3, r3, #4
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d10c      	bne.n	8002d1a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d00:	4a17      	ldr	r2, [pc, #92]	; (8002d60 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d08:	4a14      	ldr	r2, [pc, #80]	; (8002d5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d0a:	68d2      	ldr	r2, [r2, #12]
 8002d0c:	0a12      	lsrs	r2, r2, #8
 8002d0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d12:	fb02 f303 	mul.w	r3, r2, r3
 8002d16:	617b      	str	r3, [r7, #20]
    break;
 8002d18:	e00c      	b.n	8002d34 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d1a:	4a12      	ldr	r2, [pc, #72]	; (8002d64 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d22:	4a0e      	ldr	r2, [pc, #56]	; (8002d5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d24:	68d2      	ldr	r2, [r2, #12]
 8002d26:	0a12      	lsrs	r2, r2, #8
 8002d28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d2c:	fb02 f303 	mul.w	r3, r2, r3
 8002d30:	617b      	str	r3, [r7, #20]
    break;
 8002d32:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d34:	4b09      	ldr	r3, [pc, #36]	; (8002d5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	0e5b      	lsrs	r3, r3, #25
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	3301      	adds	r3, #1
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002d4e:	687b      	ldr	r3, [r7, #4]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	371c      	adds	r7, #28
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	016e3600 	.word	0x016e3600
 8002d64:	00f42400 	.word	0x00f42400

08002d68 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b09d      	sub	sp, #116	; 0x74
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	78db      	ldrb	r3, [r3, #3]
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	d81f      	bhi.n	8002dda <USB_ActivateEndpoint+0x72>
 8002d9a:	a201      	add	r2, pc, #4	; (adr r2, 8002da0 <USB_ActivateEndpoint+0x38>)
 8002d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da0:	08002db1 	.word	0x08002db1
 8002da4:	08002dcd 	.word	0x08002dcd
 8002da8:	08002de3 	.word	0x08002de3
 8002dac:	08002dbf 	.word	0x08002dbf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002db0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002db4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002db8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002dbc:	e012      	b.n	8002de4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002dbe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002dc2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002dc6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002dca:	e00b      	b.n	8002de4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002dcc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002dd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dd4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8002dd8:	e004      	b.n	8002de4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8002de0:	e000      	b.n	8002de4 <USB_ActivateEndpoint+0x7c>
      break;
 8002de2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	441a      	add	r2, r3
 8002dee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	b21b      	sxth	r3, r3
 8002e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1e:	b21a      	sxth	r2, r3
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	b21b      	sxth	r3, r3
 8002e26:	4313      	orrs	r3, r2
 8002e28:	b21b      	sxth	r3, r3
 8002e2a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	441a      	add	r2, r3
 8002e38:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8002e3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	7b1b      	ldrb	r3, [r3, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f040 8178 	bne.w	800314a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	785b      	ldrb	r3, [r3, #1]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 8084 	beq.w	8002f6c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	61bb      	str	r3, [r7, #24]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	461a      	mov	r2, r3
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	4413      	add	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	00da      	lsls	r2, r3, #3
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	4413      	add	r3, r2
 8002e82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	88db      	ldrh	r3, [r3, #6]
 8002e8c:	085b      	lsrs	r3, r3, #1
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	4413      	add	r3, r2
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	827b      	strh	r3, [r7, #18]
 8002ea6:	8a7b      	ldrh	r3, [r7, #18]
 8002ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d01b      	beq.n	8002ee8 <USB_ActivateEndpoint+0x180>
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec6:	823b      	strh	r3, [r7, #16]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	441a      	add	r2, r3
 8002ed2:	8a3b      	ldrh	r3, [r7, #16]
 8002ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002edc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ee0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	78db      	ldrb	r3, [r3, #3]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d020      	beq.n	8002f32 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f06:	81bb      	strh	r3, [r7, #12]
 8002f08:	89bb      	ldrh	r3, [r7, #12]
 8002f0a:	f083 0320 	eor.w	r3, r3, #32
 8002f0e:	81bb      	strh	r3, [r7, #12]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	441a      	add	r2, r3
 8002f1a:	89bb      	ldrh	r3, [r7, #12]
 8002f1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	8013      	strh	r3, [r2, #0]
 8002f30:	e2d5      	b.n	80034de <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f48:	81fb      	strh	r3, [r7, #14]
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	441a      	add	r2, r3
 8002f54:	89fb      	ldrh	r3, [r7, #14]
 8002f56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	8013      	strh	r3, [r2, #0]
 8002f6a:	e2b8      	b.n	80034de <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	633b      	str	r3, [r7, #48]	; 0x30
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	461a      	mov	r2, r3
 8002f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7c:	4413      	add	r3, r2
 8002f7e:	633b      	str	r3, [r7, #48]	; 0x30
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	00da      	lsls	r2, r3, #3
 8002f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f88:	4413      	add	r3, r2
 8002f8a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	88db      	ldrh	r3, [r3, #6]
 8002f94:	085b      	lsrs	r3, r3, #1
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	461a      	mov	r2, r3
 8002fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb0:	4413      	add	r3, r2
 8002fb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	00da      	lsls	r2, r3, #3
 8002fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	881b      	ldrh	r3, [r3, #0]
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	801a      	strh	r2, [r3, #0]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	2b3e      	cmp	r3, #62	; 0x3e
 8002fda:	d91d      	bls.n	8003018 <USB_ActivateEndpoint+0x2b0>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	095b      	lsrs	r3, r3, #5
 8002fe2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	f003 031f 	and.w	r3, r3, #31
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d102      	bne.n	8002ff6 <USB_ActivateEndpoint+0x28e>
 8002ff0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	029b      	lsls	r3, r3, #10
 8003002:	b29b      	uxth	r3, r3
 8003004:	4313      	orrs	r3, r2
 8003006:	b29b      	uxth	r3, r3
 8003008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800300c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003010:	b29a      	uxth	r2, r3
 8003012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003014:	801a      	strh	r2, [r3, #0]
 8003016:	e026      	b.n	8003066 <USB_ActivateEndpoint+0x2fe>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10a      	bne.n	8003036 <USB_ActivateEndpoint+0x2ce>
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	b29b      	uxth	r3, r3
 8003026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800302a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800302e:	b29a      	uxth	r2, r3
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	801a      	strh	r2, [r3, #0]
 8003034:	e017      	b.n	8003066 <USB_ActivateEndpoint+0x2fe>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	085b      	lsrs	r3, r3, #1
 800303c:	66bb      	str	r3, [r7, #104]	; 0x68
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <USB_ActivateEndpoint+0x2e8>
 800304a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800304c:	3301      	adds	r3, #1
 800304e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	b29a      	uxth	r2, r3
 8003056:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003058:	b29b      	uxth	r3, r3
 800305a:	029b      	lsls	r3, r3, #10
 800305c:	b29b      	uxth	r3, r3
 800305e:	4313      	orrs	r3, r2
 8003060:	b29a      	uxth	r2, r3
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	847b      	strh	r3, [r7, #34]	; 0x22
 8003074:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d01b      	beq.n	80030b6 <USB_ActivateEndpoint+0x34e>
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	b29b      	uxth	r3, r3
 800308c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003090:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003094:	843b      	strh	r3, [r7, #32]
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	441a      	add	r2, r3
 80030a0:	8c3b      	ldrh	r3, [r7, #32]
 80030a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d124      	bne.n	8003108 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4413      	add	r3, r2
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d4:	83bb      	strh	r3, [r7, #28]
 80030d6:	8bbb      	ldrh	r3, [r7, #28]
 80030d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80030dc:	83bb      	strh	r3, [r7, #28]
 80030de:	8bbb      	ldrh	r3, [r7, #28]
 80030e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80030e4:	83bb      	strh	r3, [r7, #28]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	441a      	add	r2, r3
 80030f0:	8bbb      	ldrh	r3, [r7, #28]
 80030f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003102:	b29b      	uxth	r3, r3
 8003104:	8013      	strh	r3, [r2, #0]
 8003106:	e1ea      	b.n	80034de <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	b29b      	uxth	r3, r3
 8003116:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800311a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311e:	83fb      	strh	r3, [r7, #30]
 8003120:	8bfb      	ldrh	r3, [r7, #30]
 8003122:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003126:	83fb      	strh	r3, [r7, #30]
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	441a      	add	r2, r3
 8003132:	8bfb      	ldrh	r3, [r7, #30]
 8003134:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003138:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800313c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003144:	b29b      	uxth	r3, r3
 8003146:	8013      	strh	r3, [r2, #0]
 8003148:	e1c9      	b.n	80034de <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	78db      	ldrb	r3, [r3, #3]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d11e      	bne.n	8003190 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	b29b      	uxth	r3, r3
 8003160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003168:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	441a      	add	r2, r3
 8003176:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800317a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800317e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003182:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800318a:	b29b      	uxth	r3, r3
 800318c:	8013      	strh	r3, [r2, #0]
 800318e:	e01d      	b.n	80031cc <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	881b      	ldrh	r3, [r3, #0]
 800319c:	b29b      	uxth	r3, r3
 800319e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80031a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	441a      	add	r2, r3
 80031b4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80031b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	461a      	mov	r2, r3
 80031da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031dc:	4413      	add	r3, r2
 80031de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	00da      	lsls	r2, r3, #3
 80031e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	891b      	ldrh	r3, [r3, #8]
 80031f4:	085b      	lsrs	r3, r3, #1
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031fe:	801a      	strh	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	657b      	str	r3, [r7, #84]	; 0x54
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800320a:	b29b      	uxth	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003210:	4413      	add	r3, r2
 8003212:	657b      	str	r3, [r7, #84]	; 0x54
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	00da      	lsls	r2, r3, #3
 800321a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800321c:	4413      	add	r3, r2
 800321e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003222:	653b      	str	r3, [r7, #80]	; 0x50
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	895b      	ldrh	r3, [r3, #10]
 8003228:	085b      	lsrs	r3, r3, #1
 800322a:	b29b      	uxth	r3, r3
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003232:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	785b      	ldrb	r3, [r3, #1]
 8003238:	2b00      	cmp	r3, #0
 800323a:	f040 8093 	bne.w	8003364 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800324e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d01b      	beq.n	8003292 <USB_ActivateEndpoint+0x52a>
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	b29b      	uxth	r3, r3
 8003268:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800326c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003270:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	441a      	add	r2, r3
 800327c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800327e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003282:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003286:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800328a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800328e:	b29b      	uxth	r3, r3
 8003290:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80032a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80032a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d01b      	beq.n	80032e2 <USB_ActivateEndpoint+0x57a>
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	441a      	add	r2, r3
 80032cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80032ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032de:	b29b      	uxth	r3, r3
 80032e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f8:	873b      	strh	r3, [r7, #56]	; 0x38
 80032fa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80032fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003300:	873b      	strh	r3, [r7, #56]	; 0x38
 8003302:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003304:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003308:	873b      	strh	r3, [r7, #56]	; 0x38
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	441a      	add	r2, r3
 8003314:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800331a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800331e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003326:	b29b      	uxth	r3, r3
 8003328:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	881b      	ldrh	r3, [r3, #0]
 8003336:	b29b      	uxth	r3, r3
 8003338:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800333c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003340:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	441a      	add	r2, r3
 800334c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800334e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800335a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800335e:	b29b      	uxth	r3, r3
 8003360:	8013      	strh	r3, [r2, #0]
 8003362:	e0bc      	b.n	80034de <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003374:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d01d      	beq.n	80033bc <USB_ActivateEndpoint+0x654>
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	b29b      	uxth	r3, r3
 800338e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003396:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	441a      	add	r2, r3
 80033a4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80033a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	881b      	ldrh	r3, [r3, #0]
 80033c8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80033cc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80033d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d01d      	beq.n	8003414 <USB_ActivateEndpoint+0x6ac>
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4413      	add	r3, r2
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	441a      	add	r2, r3
 80033fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003404:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003408:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800340c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003410:	b29b      	uxth	r3, r3
 8003412:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	78db      	ldrb	r3, [r3, #3]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d024      	beq.n	8003466 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	881b      	ldrh	r3, [r3, #0]
 8003428:	b29b      	uxth	r3, r3
 800342a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800342e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003432:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003436:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800343a:	f083 0320 	eor.w	r3, r3, #32
 800343e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	441a      	add	r2, r3
 800344c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800345c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003460:	b29b      	uxth	r3, r3
 8003462:	8013      	strh	r3, [r2, #0]
 8003464:	e01d      	b.n	80034a2 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	b29b      	uxth	r3, r3
 8003474:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800347c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	441a      	add	r2, r3
 800348a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800348e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003492:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800349a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800349e:	b29b      	uxth	r3, r3
 80034a0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	441a      	add	r2, r3
 80034c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80034ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034da:	b29b      	uxth	r3, r3
 80034dc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80034de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3774      	adds	r7, #116	; 0x74
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop

080034f0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b0c2      	sub	sp, #264	; 0x108
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80034fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80034fe:	6018      	str	r0, [r3, #0]
 8003500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003508:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800350a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800350e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	785b      	ldrb	r3, [r3, #1]
 8003516:	2b01      	cmp	r3, #1
 8003518:	f040 86b7 	bne.w	800428a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800351c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	699a      	ldr	r2, [r3, #24]
 8003528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800352c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	429a      	cmp	r2, r3
 8003536:	d908      	bls.n	800354a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8003538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800353c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003548:	e007      	b.n	800355a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800354a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800354e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800355a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800355e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	7b1b      	ldrb	r3, [r3, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d13a      	bne.n	80035e0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800356a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800356e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6959      	ldr	r1, [r3, #20]
 8003576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800357a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	88da      	ldrh	r2, [r3, #6]
 8003582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003586:	b29b      	uxth	r3, r3
 8003588:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800358c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003590:	6800      	ldr	r0, [r0, #0]
 8003592:	f001 fc81 	bl	8004e98 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800359a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	613b      	str	r3, [r7, #16]
 80035a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80035a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	461a      	mov	r2, r3
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	4413      	add	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
 80035ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80035be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	00da      	lsls	r2, r3, #3
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	4413      	add	r3, r2
 80035cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80035d0:	60fb      	str	r3, [r7, #12]
 80035d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	801a      	strh	r2, [r3, #0]
 80035dc:	f000 be1f 	b.w	800421e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80035e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80035e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	78db      	ldrb	r3, [r3, #3]
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	f040 8462 	bne.w	8003eb6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80035f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80035f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6a1a      	ldr	r2, [r3, #32]
 80035fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003602:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	429a      	cmp	r2, r3
 800360c:	f240 83df 	bls.w	8003dce <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003614:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800361e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	881b      	ldrh	r3, [r3, #0]
 800362c:	b29b      	uxth	r3, r3
 800362e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003636:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800363a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800363e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	441a      	add	r2, r3
 8003654:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003658:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800365c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003660:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003668:	b29b      	uxth	r3, r3
 800366a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800366c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6a1a      	ldr	r2, [r3, #32]
 8003678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800367c:	1ad2      	subs	r2, r2, r3
 800367e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003682:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800368a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800368e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4413      	add	r3, r2
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 81c7 	beq.w	8003a40 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80036b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	633b      	str	r3, [r7, #48]	; 0x30
 80036be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	785b      	ldrb	r3, [r3, #1]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d177      	bne.n	80037be <USB_EPStartXfer+0x2ce>
 80036ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	461a      	mov	r2, r3
 80036ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ee:	4413      	add	r3, r2
 80036f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80036f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	00da      	lsls	r2, r3, #3
 8003700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003702:	4413      	add	r3, r2
 8003704:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	881b      	ldrh	r3, [r3, #0]
 800370e:	b29b      	uxth	r3, r3
 8003710:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003714:	b29a      	uxth	r2, r3
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	801a      	strh	r2, [r3, #0]
 800371a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800371e:	2b3e      	cmp	r3, #62	; 0x3e
 8003720:	d921      	bls.n	8003766 <USB_EPStartXfer+0x276>
 8003722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003726:	095b      	lsrs	r3, r3, #5
 8003728:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800372c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003730:	f003 031f 	and.w	r3, r3, #31
 8003734:	2b00      	cmp	r3, #0
 8003736:	d104      	bne.n	8003742 <USB_EPStartXfer+0x252>
 8003738:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800373c:	3b01      	subs	r3, #1
 800373e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	b29a      	uxth	r2, r3
 8003748:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800374c:	b29b      	uxth	r3, r3
 800374e:	029b      	lsls	r3, r3, #10
 8003750:	b29b      	uxth	r3, r3
 8003752:	4313      	orrs	r3, r2
 8003754:	b29b      	uxth	r3, r3
 8003756:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800375a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800375e:	b29a      	uxth	r2, r3
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e050      	b.n	8003808 <USB_EPStartXfer+0x318>
 8003766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10a      	bne.n	8003784 <USB_EPStartXfer+0x294>
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	881b      	ldrh	r3, [r3, #0]
 8003772:	b29b      	uxth	r3, r3
 8003774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800377c:	b29a      	uxth	r2, r3
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	801a      	strh	r2, [r3, #0]
 8003782:	e041      	b.n	8003808 <USB_EPStartXfer+0x318>
 8003784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003788:	085b      	lsrs	r3, r3, #1
 800378a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800378e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d004      	beq.n	80037a4 <USB_EPStartXfer+0x2b4>
 800379a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800379e:	3301      	adds	r3, #1
 80037a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	881b      	ldrh	r3, [r3, #0]
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	029b      	lsls	r3, r3, #10
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	4313      	orrs	r3, r2
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	801a      	strh	r2, [r3, #0]
 80037bc:	e024      	b.n	8003808 <USB_EPStartXfer+0x318>
 80037be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	785b      	ldrb	r3, [r3, #1]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d11c      	bne.n	8003808 <USB_EPStartXfer+0x318>
 80037ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037dc:	b29b      	uxth	r3, r3
 80037de:	461a      	mov	r2, r3
 80037e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e2:	4413      	add	r3, r2
 80037e4:	633b      	str	r3, [r7, #48]	; 0x30
 80037e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	00da      	lsls	r2, r3, #3
 80037f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f6:	4413      	add	r3, r2
 80037f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003802:	b29a      	uxth	r2, r3
 8003804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003806:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800380c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	895b      	ldrh	r3, [r3, #10]
 8003814:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800381c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6959      	ldr	r1, [r3, #20]
 8003824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003828:	b29b      	uxth	r3, r3
 800382a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800382e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003832:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003836:	6800      	ldr	r0, [r0, #0]
 8003838:	f001 fb2e 	bl	8004e98 <USB_WritePMA>
            ep->xfer_buff += len;
 800383c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695a      	ldr	r2, [r3, #20]
 8003848:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800384c:	441a      	add	r2, r3
 800384e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800385a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800385e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6a1a      	ldr	r2, [r3, #32]
 8003866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800386a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	429a      	cmp	r2, r3
 8003874:	d90f      	bls.n	8003896 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8003876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800387a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6a1a      	ldr	r2, [r3, #32]
 8003882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003886:	1ad2      	subs	r2, r2, r3
 8003888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800388c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	621a      	str	r2, [r3, #32]
 8003894:	e00e      	b.n	80038b4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8003896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800389a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80038a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80038aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2200      	movs	r2, #0
 80038b2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80038b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80038b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	785b      	ldrb	r3, [r3, #1]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d177      	bne.n	80039b4 <USB_EPStartXfer+0x4c4>
 80038c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80038c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	61bb      	str	r3, [r7, #24]
 80038d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80038d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038de:	b29b      	uxth	r3, r3
 80038e0:	461a      	mov	r2, r3
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	4413      	add	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
 80038e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80038ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	00da      	lsls	r2, r3, #3
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	4413      	add	r3, r2
 80038fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	b29b      	uxth	r3, r3
 8003906:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800390a:	b29a      	uxth	r2, r3
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	801a      	strh	r2, [r3, #0]
 8003910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003914:	2b3e      	cmp	r3, #62	; 0x3e
 8003916:	d921      	bls.n	800395c <USB_EPStartXfer+0x46c>
 8003918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800391c:	095b      	lsrs	r3, r3, #5
 800391e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003926:	f003 031f 	and.w	r3, r3, #31
 800392a:	2b00      	cmp	r3, #0
 800392c:	d104      	bne.n	8003938 <USB_EPStartXfer+0x448>
 800392e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003932:	3b01      	subs	r3, #1
 8003934:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	b29a      	uxth	r2, r3
 800393e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003942:	b29b      	uxth	r3, r3
 8003944:	029b      	lsls	r3, r3, #10
 8003946:	b29b      	uxth	r3, r3
 8003948:	4313      	orrs	r3, r2
 800394a:	b29b      	uxth	r3, r3
 800394c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003954:	b29a      	uxth	r2, r3
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	801a      	strh	r2, [r3, #0]
 800395a:	e056      	b.n	8003a0a <USB_EPStartXfer+0x51a>
 800395c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10a      	bne.n	800397a <USB_EPStartXfer+0x48a>
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	b29b      	uxth	r3, r3
 800396a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800396e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003972:	b29a      	uxth	r2, r3
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	801a      	strh	r2, [r3, #0]
 8003978:	e047      	b.n	8003a0a <USB_EPStartXfer+0x51a>
 800397a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800397e:	085b      	lsrs	r3, r3, #1
 8003980:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003988:	f003 0301 	and.w	r3, r3, #1
 800398c:	2b00      	cmp	r3, #0
 800398e:	d004      	beq.n	800399a <USB_EPStartXfer+0x4aa>
 8003990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003994:	3301      	adds	r3, #1
 8003996:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	b29a      	uxth	r2, r3
 80039a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	029b      	lsls	r3, r3, #10
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	4313      	orrs	r3, r2
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	801a      	strh	r2, [r3, #0]
 80039b2:	e02a      	b.n	8003a0a <USB_EPStartXfer+0x51a>
 80039b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	785b      	ldrb	r3, [r3, #1]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d122      	bne.n	8003a0a <USB_EPStartXfer+0x51a>
 80039c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	623b      	str	r3, [r7, #32]
 80039d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039de:	b29b      	uxth	r3, r3
 80039e0:	461a      	mov	r2, r3
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	4413      	add	r3, r2
 80039e6:	623b      	str	r3, [r7, #32]
 80039e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	00da      	lsls	r2, r3, #3
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	4413      	add	r3, r2
 80039fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80039fe:	61fb      	str	r3, [r7, #28]
 8003a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003a0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	891b      	ldrh	r3, [r3, #8]
 8003a16:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6959      	ldr	r1, [r3, #20]
 8003a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003a30:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003a34:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003a38:	6800      	ldr	r0, [r0, #0]
 8003a3a:	f001 fa2d 	bl	8004e98 <USB_WritePMA>
 8003a3e:	e3ee      	b.n	800421e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	785b      	ldrb	r3, [r3, #1]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d177      	bne.n	8003b40 <USB_EPStartXfer+0x650>
 8003a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a70:	4413      	add	r3, r2
 8003a72:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	00da      	lsls	r2, r3, #3
 8003a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a84:	4413      	add	r3, r2
 8003a86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003a8a:	647b      	str	r3, [r7, #68]	; 0x44
 8003a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a8e:	881b      	ldrh	r3, [r3, #0]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a9a:	801a      	strh	r2, [r3, #0]
 8003a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003aa0:	2b3e      	cmp	r3, #62	; 0x3e
 8003aa2:	d921      	bls.n	8003ae8 <USB_EPStartXfer+0x5f8>
 8003aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003aa8:	095b      	lsrs	r3, r3, #5
 8003aaa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ab2:	f003 031f 	and.w	r3, r3, #31
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d104      	bne.n	8003ac4 <USB_EPStartXfer+0x5d4>
 8003aba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	029b      	lsls	r3, r3, #10
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003adc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ae4:	801a      	strh	r2, [r3, #0]
 8003ae6:	e056      	b.n	8003b96 <USB_EPStartXfer+0x6a6>
 8003ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10a      	bne.n	8003b06 <USB_EPStartXfer+0x616>
 8003af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003af2:	881b      	ldrh	r3, [r3, #0]
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003afa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b02:	801a      	strh	r2, [r3, #0]
 8003b04:	e047      	b.n	8003b96 <USB_EPStartXfer+0x6a6>
 8003b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b0a:	085b      	lsrs	r3, r3, #1
 8003b0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d004      	beq.n	8003b26 <USB_EPStartXfer+0x636>
 8003b1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b20:	3301      	adds	r3, #1
 8003b22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003b26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	029b      	lsls	r3, r3, #10
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	4313      	orrs	r3, r2
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b3c:	801a      	strh	r2, [r3, #0]
 8003b3e:	e02a      	b.n	8003b96 <USB_EPStartXfer+0x6a6>
 8003b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	785b      	ldrb	r3, [r3, #1]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d122      	bne.n	8003b96 <USB_EPStartXfer+0x6a6>
 8003b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	653b      	str	r3, [r7, #80]	; 0x50
 8003b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b70:	4413      	add	r3, r2
 8003b72:	653b      	str	r3, [r7, #80]	; 0x50
 8003b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	00da      	lsls	r2, r3, #3
 8003b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b84:	4413      	add	r3, r2
 8003b86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b94:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	891b      	ldrh	r3, [r3, #8]
 8003ba2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003ba6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003baa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6959      	ldr	r1, [r3, #20]
 8003bb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003bbc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003bc0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003bc4:	6800      	ldr	r0, [r0, #0]
 8003bc6:	f001 f967 	bl	8004e98 <USB_WritePMA>
            ep->xfer_buff += len;
 8003bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695a      	ldr	r2, [r3, #20]
 8003bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bda:	441a      	add	r2, r3
 8003bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003be0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003bec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6a1a      	ldr	r2, [r3, #32]
 8003bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d90f      	bls.n	8003c24 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8003c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6a1a      	ldr	r2, [r3, #32]
 8003c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c14:	1ad2      	subs	r2, r2, r3
 8003c16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	621a      	str	r2, [r3, #32]
 8003c22:	e00e      	b.n	8003c42 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8003c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8003c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003c42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	643b      	str	r3, [r7, #64]	; 0x40
 8003c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	785b      	ldrb	r3, [r3, #1]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d177      	bne.n	8003d4e <USB_EPStartXfer+0x85e>
 8003c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7e:	4413      	add	r3, r2
 8003c80:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	00da      	lsls	r2, r3, #3
 8003c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c92:	4413      	add	r3, r2
 8003c94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c98:	637b      	str	r3, [r7, #52]	; 0x34
 8003c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca8:	801a      	strh	r2, [r3, #0]
 8003caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cae:	2b3e      	cmp	r3, #62	; 0x3e
 8003cb0:	d921      	bls.n	8003cf6 <USB_EPStartXfer+0x806>
 8003cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cb6:	095b      	lsrs	r3, r3, #5
 8003cb8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cc0:	f003 031f 	and.w	r3, r3, #31
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d104      	bne.n	8003cd2 <USB_EPStartXfer+0x7e2>
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	029b      	lsls	r3, r3, #10
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf2:	801a      	strh	r2, [r3, #0]
 8003cf4:	e050      	b.n	8003d98 <USB_EPStartXfer+0x8a8>
 8003cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10a      	bne.n	8003d14 <USB_EPStartXfer+0x824>
 8003cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d10:	801a      	strh	r2, [r3, #0]
 8003d12:	e041      	b.n	8003d98 <USB_EPStartXfer+0x8a8>
 8003d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d18:	085b      	lsrs	r3, r3, #1
 8003d1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d004      	beq.n	8003d34 <USB_EPStartXfer+0x844>
 8003d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2e:	3301      	adds	r3, #1
 8003d30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d36:	881b      	ldrh	r3, [r3, #0]
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	029b      	lsls	r3, r3, #10
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	4313      	orrs	r3, r2
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d4a:	801a      	strh	r2, [r3, #0]
 8003d4c:	e024      	b.n	8003d98 <USB_EPStartXfer+0x8a8>
 8003d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	785b      	ldrb	r3, [r3, #1]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d11c      	bne.n	8003d98 <USB_EPStartXfer+0x8a8>
 8003d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	461a      	mov	r2, r3
 8003d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d72:	4413      	add	r3, r2
 8003d74:	643b      	str	r3, [r7, #64]	; 0x40
 8003d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	00da      	lsls	r2, r3, #3
 8003d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d86:	4413      	add	r3, r2
 8003d88:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d96:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003d98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	895b      	ldrh	r3, [r3, #10]
 8003da4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6959      	ldr	r1, [r3, #20]
 8003db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003dbe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003dc2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003dc6:	6800      	ldr	r0, [r0, #0]
 8003dc8:	f001 f866 	bl	8004e98 <USB_WritePMA>
 8003dcc:	e227      	b.n	800421e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8003dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003de2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e04:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	441a      	add	r2, r3
 8003e22:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003e3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	461a      	mov	r2, r3
 8003e58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e5a:	4413      	add	r3, r2
 8003e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	00da      	lsls	r2, r3, #3
 8003e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e6e:	4413      	add	r3, r2
 8003e70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003e74:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e7e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003e80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	891b      	ldrh	r3, [r3, #8]
 8003e8c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6959      	ldr	r1, [r3, #20]
 8003e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003ea6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003eaa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003eae:	6800      	ldr	r0, [r0, #0]
 8003eb0:	f000 fff2 	bl	8004e98 <USB_WritePMA>
 8003eb4:	e1b3      	b.n	800421e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8003eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6a1a      	ldr	r2, [r3, #32]
 8003ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ec6:	1ad2      	subs	r2, r2, r3
 8003ec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ecc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003ed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ed8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ee2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 80c6 	beq.w	8004088 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	673b      	str	r3, [r7, #112]	; 0x70
 8003f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	785b      	ldrb	r3, [r3, #1]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d177      	bne.n	8004008 <USB_EPStartXfer+0xb18>
 8003f18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	461a      	mov	r2, r3
 8003f36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f38:	4413      	add	r3, r2
 8003f3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	00da      	lsls	r2, r3, #3
 8003f4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f52:	667b      	str	r3, [r7, #100]	; 0x64
 8003f54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f62:	801a      	strh	r2, [r3, #0]
 8003f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f68:	2b3e      	cmp	r3, #62	; 0x3e
 8003f6a:	d921      	bls.n	8003fb0 <USB_EPStartXfer+0xac0>
 8003f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f70:	095b      	lsrs	r3, r3, #5
 8003f72:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f7a:	f003 031f 	and.w	r3, r3, #31
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d104      	bne.n	8003f8c <USB_EPStartXfer+0xa9c>
 8003f82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003f86:	3b01      	subs	r3, #1
 8003f88:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003f8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	029b      	lsls	r3, r3, #10
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fac:	801a      	strh	r2, [r3, #0]
 8003fae:	e050      	b.n	8004052 <USB_EPStartXfer+0xb62>
 8003fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10a      	bne.n	8003fce <USB_EPStartXfer+0xade>
 8003fb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fca:	801a      	strh	r2, [r3, #0]
 8003fcc:	e041      	b.n	8004052 <USB_EPStartXfer+0xb62>
 8003fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fd2:	085b      	lsrs	r3, r3, #1
 8003fd4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003fd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fdc:	f003 0301 	and.w	r3, r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d004      	beq.n	8003fee <USB_EPStartXfer+0xafe>
 8003fe4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003fe8:	3301      	adds	r3, #1
 8003fea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003fee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ff0:	881b      	ldrh	r3, [r3, #0]
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	029b      	lsls	r3, r3, #10
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	4313      	orrs	r3, r2
 8004000:	b29a      	uxth	r2, r3
 8004002:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004004:	801a      	strh	r2, [r3, #0]
 8004006:	e024      	b.n	8004052 <USB_EPStartXfer+0xb62>
 8004008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800400c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	785b      	ldrb	r3, [r3, #1]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d11c      	bne.n	8004052 <USB_EPStartXfer+0xb62>
 8004018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800401c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004026:	b29b      	uxth	r3, r3
 8004028:	461a      	mov	r2, r3
 800402a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800402c:	4413      	add	r3, r2
 800402e:	673b      	str	r3, [r7, #112]	; 0x70
 8004030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	00da      	lsls	r2, r3, #3
 800403e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004040:	4413      	add	r3, r2
 8004042:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004046:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800404c:	b29a      	uxth	r2, r3
 800404e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004050:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	895b      	ldrh	r3, [r3, #10]
 800405e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6959      	ldr	r1, [r3, #20]
 800406e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004072:	b29b      	uxth	r3, r3
 8004074:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004078:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800407c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004080:	6800      	ldr	r0, [r0, #0]
 8004082:	f000 ff09 	bl	8004e98 <USB_WritePMA>
 8004086:	e0ca      	b.n	800421e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800408c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	785b      	ldrb	r3, [r3, #1]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d177      	bne.n	8004188 <USB_EPStartXfer+0xc98>
 8004098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800409c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80040a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	461a      	mov	r2, r3
 80040b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040b8:	4413      	add	r3, r2
 80040ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80040bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	00da      	lsls	r2, r3, #3
 80040ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040cc:	4413      	add	r3, r2
 80040ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80040d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80040d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	b29b      	uxth	r3, r3
 80040da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040de:	b29a      	uxth	r2, r3
 80040e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040e2:	801a      	strh	r2, [r3, #0]
 80040e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040e8:	2b3e      	cmp	r3, #62	; 0x3e
 80040ea:	d921      	bls.n	8004130 <USB_EPStartXfer+0xc40>
 80040ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040f0:	095b      	lsrs	r3, r3, #5
 80040f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80040f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040fa:	f003 031f 	and.w	r3, r3, #31
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d104      	bne.n	800410c <USB_EPStartXfer+0xc1c>
 8004102:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004106:	3b01      	subs	r3, #1
 8004108:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800410c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	b29a      	uxth	r2, r3
 8004112:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004116:	b29b      	uxth	r3, r3
 8004118:	029b      	lsls	r3, r3, #10
 800411a:	b29b      	uxth	r3, r3
 800411c:	4313      	orrs	r3, r2
 800411e:	b29b      	uxth	r3, r3
 8004120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004128:	b29a      	uxth	r2, r3
 800412a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800412c:	801a      	strh	r2, [r3, #0]
 800412e:	e05c      	b.n	80041ea <USB_EPStartXfer+0xcfa>
 8004130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10a      	bne.n	800414e <USB_EPStartXfer+0xc5e>
 8004138:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	b29b      	uxth	r3, r3
 800413e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004142:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004146:	b29a      	uxth	r2, r3
 8004148:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800414a:	801a      	strh	r2, [r3, #0]
 800414c:	e04d      	b.n	80041ea <USB_EPStartXfer+0xcfa>
 800414e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004152:	085b      	lsrs	r3, r3, #1
 8004154:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b00      	cmp	r3, #0
 8004162:	d004      	beq.n	800416e <USB_EPStartXfer+0xc7e>
 8004164:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004168:	3301      	adds	r3, #1
 800416a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800416e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	b29a      	uxth	r2, r3
 8004174:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004178:	b29b      	uxth	r3, r3
 800417a:	029b      	lsls	r3, r3, #10
 800417c:	b29b      	uxth	r3, r3
 800417e:	4313      	orrs	r3, r2
 8004180:	b29a      	uxth	r2, r3
 8004182:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004184:	801a      	strh	r2, [r3, #0]
 8004186:	e030      	b.n	80041ea <USB_EPStartXfer+0xcfa>
 8004188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800418c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	785b      	ldrb	r3, [r3, #1]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d128      	bne.n	80041ea <USB_EPStartXfer+0xcfa>
 8004198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800419c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	461a      	mov	r2, r3
 80041b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041bc:	4413      	add	r3, r2
 80041be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80041c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	00da      	lsls	r2, r3, #3
 80041d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041d4:	4413      	add	r3, r2
 80041d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80041da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041e8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80041ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	891b      	ldrh	r3, [r3, #8]
 80041f6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80041fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6959      	ldr	r1, [r3, #20]
 8004206:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800420a:	b29b      	uxth	r3, r3
 800420c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004210:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004214:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004218:	6800      	ldr	r0, [r0, #0]
 800421a:	f000 fe3d 	bl	8004e98 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800421e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004222:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800422c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	b29b      	uxth	r3, r3
 800423c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004244:	817b      	strh	r3, [r7, #10]
 8004246:	897b      	ldrh	r3, [r7, #10]
 8004248:	f083 0310 	eor.w	r3, r3, #16
 800424c:	817b      	strh	r3, [r7, #10]
 800424e:	897b      	ldrh	r3, [r7, #10]
 8004250:	f083 0320 	eor.w	r3, r3, #32
 8004254:	817b      	strh	r3, [r7, #10]
 8004256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800425a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	441a      	add	r2, r3
 8004270:	897b      	ldrh	r3, [r7, #10]
 8004272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800427a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800427e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004282:	b29b      	uxth	r3, r3
 8004284:	8013      	strh	r3, [r2, #0]
 8004286:	f000 bcde 	b.w	8004c46 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800428a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800428e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	7b1b      	ldrb	r3, [r3, #12]
 8004296:	2b00      	cmp	r3, #0
 8004298:	f040 80bb 	bne.w	8004412 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800429c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	699a      	ldr	r2, [r3, #24]
 80042a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d917      	bls.n	80042e8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80042b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80042c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	699a      	ldr	r2, [r3, #24]
 80042d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042d8:	1ad2      	subs	r2, r2, r3
 80042da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	619a      	str	r2, [r3, #24]
 80042e6:	e00e      	b.n	8004306 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80042e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80042f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2200      	movs	r2, #0
 8004304:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800430a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004318:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004322:	b29b      	uxth	r3, r3
 8004324:	461a      	mov	r2, r3
 8004326:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800432a:	4413      	add	r3, r2
 800432c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004334:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	00da      	lsls	r2, r3, #3
 800433e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004342:	4413      	add	r3, r2
 8004344:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004348:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800434c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	b29b      	uxth	r3, r3
 8004354:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004358:	b29a      	uxth	r2, r3
 800435a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800435e:	801a      	strh	r2, [r3, #0]
 8004360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004364:	2b3e      	cmp	r3, #62	; 0x3e
 8004366:	d924      	bls.n	80043b2 <USB_EPStartXfer+0xec2>
 8004368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800436c:	095b      	lsrs	r3, r3, #5
 800436e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004372:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004376:	f003 031f 	and.w	r3, r3, #31
 800437a:	2b00      	cmp	r3, #0
 800437c:	d104      	bne.n	8004388 <USB_EPStartXfer+0xe98>
 800437e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004382:	3b01      	subs	r3, #1
 8004384:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004388:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	b29a      	uxth	r2, r3
 8004390:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004394:	b29b      	uxth	r3, r3
 8004396:	029b      	lsls	r3, r3, #10
 8004398:	b29b      	uxth	r3, r3
 800439a:	4313      	orrs	r3, r2
 800439c:	b29b      	uxth	r3, r3
 800439e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043ac:	801a      	strh	r2, [r3, #0]
 80043ae:	f000 bc10 	b.w	8004bd2 <USB_EPStartXfer+0x16e2>
 80043b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10c      	bne.n	80043d4 <USB_EPStartXfer+0xee4>
 80043ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043be:	881b      	ldrh	r3, [r3, #0]
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043d0:	801a      	strh	r2, [r3, #0]
 80043d2:	e3fe      	b.n	8004bd2 <USB_EPStartXfer+0x16e2>
 80043d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043d8:	085b      	lsrs	r3, r3, #1
 80043da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d004      	beq.n	80043f4 <USB_EPStartXfer+0xf04>
 80043ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80043ee:	3301      	adds	r3, #1
 80043f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004400:	b29b      	uxth	r3, r3
 8004402:	029b      	lsls	r3, r3, #10
 8004404:	b29b      	uxth	r3, r3
 8004406:	4313      	orrs	r3, r2
 8004408:	b29a      	uxth	r2, r3
 800440a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800440e:	801a      	strh	r2, [r3, #0]
 8004410:	e3df      	b.n	8004bd2 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004416:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	78db      	ldrb	r3, [r3, #3]
 800441e:	2b02      	cmp	r3, #2
 8004420:	f040 8218 	bne.w	8004854 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004424:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	785b      	ldrb	r3, [r3, #1]
 8004430:	2b00      	cmp	r3, #0
 8004432:	f040 809d 	bne.w	8004570 <USB_EPStartXfer+0x1080>
 8004436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800443a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004448:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004452:	b29b      	uxth	r3, r3
 8004454:	461a      	mov	r2, r3
 8004456:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800445a:	4413      	add	r3, r2
 800445c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	00da      	lsls	r2, r3, #3
 800446e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004472:	4413      	add	r3, r2
 8004474:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004478:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800447c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	b29b      	uxth	r3, r3
 8004484:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004488:	b29a      	uxth	r2, r3
 800448a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800448e:	801a      	strh	r2, [r3, #0]
 8004490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	2b3e      	cmp	r3, #62	; 0x3e
 800449e:	d92b      	bls.n	80044f8 <USB_EPStartXfer+0x1008>
 80044a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	095b      	lsrs	r3, r3, #5
 80044ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	f003 031f 	and.w	r3, r3, #31
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d104      	bne.n	80044d0 <USB_EPStartXfer+0xfe0>
 80044c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ca:	3b01      	subs	r3, #1
 80044cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044d4:	881b      	ldrh	r3, [r3, #0]
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044dc:	b29b      	uxth	r3, r3
 80044de:	029b      	lsls	r3, r3, #10
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	4313      	orrs	r3, r2
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80044f4:	801a      	strh	r2, [r3, #0]
 80044f6:	e070      	b.n	80045da <USB_EPStartXfer+0x10ea>
 80044f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10c      	bne.n	8004522 <USB_EPStartXfer+0x1032>
 8004508:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	b29b      	uxth	r3, r3
 8004510:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004514:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004518:	b29a      	uxth	r2, r3
 800451a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800451e:	801a      	strh	r2, [r3, #0]
 8004520:	e05b      	b.n	80045da <USB_EPStartXfer+0x10ea>
 8004522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	085b      	lsrs	r3, r3, #1
 8004530:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b00      	cmp	r3, #0
 8004546:	d004      	beq.n	8004552 <USB_EPStartXfer+0x1062>
 8004548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800454c:	3301      	adds	r3, #1
 800454e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004552:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	b29a      	uxth	r2, r3
 800455a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800455e:	b29b      	uxth	r3, r3
 8004560:	029b      	lsls	r3, r3, #10
 8004562:	b29b      	uxth	r3, r3
 8004564:	4313      	orrs	r3, r2
 8004566:	b29a      	uxth	r2, r3
 8004568:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800456c:	801a      	strh	r2, [r3, #0]
 800456e:	e034      	b.n	80045da <USB_EPStartXfer+0x10ea>
 8004570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004574:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	785b      	ldrb	r3, [r3, #1]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d12c      	bne.n	80045da <USB_EPStartXfer+0x10ea>
 8004580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004584:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800458e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004592:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800459c:	b29b      	uxth	r3, r3
 800459e:	461a      	mov	r2, r3
 80045a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80045a4:	4413      	add	r3, r2
 80045a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	00da      	lsls	r2, r3, #3
 80045b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80045bc:	4413      	add	r3, r2
 80045be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80045c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80045c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80045d8:	801a      	strh	r2, [r3, #0]
 80045da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80045e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	785b      	ldrb	r3, [r3, #1]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f040 809d 	bne.w	8004734 <USB_EPStartXfer+0x1244>
 80045fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800460c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004616:	b29b      	uxth	r3, r3
 8004618:	461a      	mov	r2, r3
 800461a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800461e:	4413      	add	r3, r2
 8004620:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004628:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	00da      	lsls	r2, r3, #3
 8004632:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004636:	4413      	add	r3, r2
 8004638:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800463c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004640:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	b29b      	uxth	r3, r3
 8004648:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800464c:	b29a      	uxth	r2, r3
 800464e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004652:	801a      	strh	r2, [r3, #0]
 8004654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004658:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	2b3e      	cmp	r3, #62	; 0x3e
 8004662:	d92b      	bls.n	80046bc <USB_EPStartXfer+0x11cc>
 8004664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004668:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	095b      	lsrs	r3, r3, #5
 8004672:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800467a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f003 031f 	and.w	r3, r3, #31
 8004686:	2b00      	cmp	r3, #0
 8004688:	d104      	bne.n	8004694 <USB_EPStartXfer+0x11a4>
 800468a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800468e:	3b01      	subs	r3, #1
 8004690:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004694:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004698:	881b      	ldrh	r3, [r3, #0]
 800469a:	b29a      	uxth	r2, r3
 800469c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	029b      	lsls	r3, r3, #10
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	4313      	orrs	r3, r2
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046b8:	801a      	strh	r2, [r3, #0]
 80046ba:	e069      	b.n	8004790 <USB_EPStartXfer+0x12a0>
 80046bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10c      	bne.n	80046e6 <USB_EPStartXfer+0x11f6>
 80046cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046dc:	b29a      	uxth	r2, r3
 80046de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046e2:	801a      	strh	r2, [r3, #0]
 80046e4:	e054      	b.n	8004790 <USB_EPStartXfer+0x12a0>
 80046e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	085b      	lsrs	r3, r3, #1
 80046f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	f003 0301 	and.w	r3, r3, #1
 8004708:	2b00      	cmp	r3, #0
 800470a:	d004      	beq.n	8004716 <USB_EPStartXfer+0x1226>
 800470c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004710:	3301      	adds	r3, #1
 8004712:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004716:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	b29a      	uxth	r2, r3
 800471e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004722:	b29b      	uxth	r3, r3
 8004724:	029b      	lsls	r3, r3, #10
 8004726:	b29b      	uxth	r3, r3
 8004728:	4313      	orrs	r3, r2
 800472a:	b29a      	uxth	r2, r3
 800472c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004730:	801a      	strh	r2, [r3, #0]
 8004732:	e02d      	b.n	8004790 <USB_EPStartXfer+0x12a0>
 8004734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004738:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	785b      	ldrb	r3, [r3, #1]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d125      	bne.n	8004790 <USB_EPStartXfer+0x12a0>
 8004744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004748:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004752:	b29b      	uxth	r3, r3
 8004754:	461a      	mov	r2, r3
 8004756:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800475a:	4413      	add	r3, r2
 800475c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	00da      	lsls	r2, r3, #3
 800476e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004772:	4413      	add	r3, r2
 8004774:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004778:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800477c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	b29a      	uxth	r2, r3
 800478a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800478e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	2b00      	cmp	r3, #0
 800479e:	f000 8218 	beq.w	8004bd2 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80047a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	4413      	add	r3, r2
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80047c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80047c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d005      	beq.n	80047da <USB_EPStartXfer+0x12ea>
 80047ce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80047d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10d      	bne.n	80047f6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80047da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80047de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	f040 81f5 	bne.w	8004bd2 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80047e8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80047ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f040 81ee 	bne.w	8004bd2 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80047f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	b29b      	uxth	r3, r3
 8004814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800481c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8004820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004824:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800482e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	441a      	add	r2, r3
 800483a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800483e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800484a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800484e:	b29b      	uxth	r3, r3
 8004850:	8013      	strh	r3, [r2, #0]
 8004852:	e1be      	b.n	8004bd2 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	78db      	ldrb	r3, [r3, #3]
 8004860:	2b01      	cmp	r3, #1
 8004862:	f040 81b4 	bne.w	8004bce <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8004866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800486a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	699a      	ldr	r2, [r3, #24]
 8004872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004876:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	429a      	cmp	r2, r3
 8004880:	d917      	bls.n	80048b2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8004882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004886:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8004892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004896:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699a      	ldr	r2, [r3, #24]
 800489e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048a2:	1ad2      	subs	r2, r2, r3
 80048a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	619a      	str	r2, [r3, #24]
 80048b0:	e00e      	b.n	80048d0 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80048b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80048c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2200      	movs	r2, #0
 80048ce:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80048d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	785b      	ldrb	r3, [r3, #1]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f040 8085 	bne.w	80049ec <USB_EPStartXfer+0x14fc>
 80048e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80048f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048fe:	b29b      	uxth	r3, r3
 8004900:	461a      	mov	r2, r3
 8004902:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004906:	4413      	add	r3, r2
 8004908:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800490c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	00da      	lsls	r2, r3, #3
 800491a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800491e:	4413      	add	r3, r2
 8004920:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004924:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004928:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800492c:	881b      	ldrh	r3, [r3, #0]
 800492e:	b29b      	uxth	r3, r3
 8004930:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004934:	b29a      	uxth	r2, r3
 8004936:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800493a:	801a      	strh	r2, [r3, #0]
 800493c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004940:	2b3e      	cmp	r3, #62	; 0x3e
 8004942:	d923      	bls.n	800498c <USB_EPStartXfer+0x149c>
 8004944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004948:	095b      	lsrs	r3, r3, #5
 800494a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800494e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004952:	f003 031f 	and.w	r3, r3, #31
 8004956:	2b00      	cmp	r3, #0
 8004958:	d104      	bne.n	8004964 <USB_EPStartXfer+0x1474>
 800495a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800495e:	3b01      	subs	r3, #1
 8004960:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004964:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	b29a      	uxth	r2, r3
 800496c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004970:	b29b      	uxth	r3, r3
 8004972:	029b      	lsls	r3, r3, #10
 8004974:	b29b      	uxth	r3, r3
 8004976:	4313      	orrs	r3, r2
 8004978:	b29b      	uxth	r3, r3
 800497a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800497e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004982:	b29a      	uxth	r2, r3
 8004984:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004988:	801a      	strh	r2, [r3, #0]
 800498a:	e060      	b.n	8004a4e <USB_EPStartXfer+0x155e>
 800498c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10c      	bne.n	80049ae <USB_EPStartXfer+0x14be>
 8004994:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	b29b      	uxth	r3, r3
 800499c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049aa:	801a      	strh	r2, [r3, #0]
 80049ac:	e04f      	b.n	8004a4e <USB_EPStartXfer+0x155e>
 80049ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049b2:	085b      	lsrs	r3, r3, #1
 80049b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80049b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d004      	beq.n	80049ce <USB_EPStartXfer+0x14de>
 80049c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049c8:	3301      	adds	r3, #1
 80049ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80049ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049d2:	881b      	ldrh	r3, [r3, #0]
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049da:	b29b      	uxth	r3, r3
 80049dc:	029b      	lsls	r3, r3, #10
 80049de:	b29b      	uxth	r3, r3
 80049e0:	4313      	orrs	r3, r2
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049e8:	801a      	strh	r2, [r3, #0]
 80049ea:	e030      	b.n	8004a4e <USB_EPStartXfer+0x155e>
 80049ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	785b      	ldrb	r3, [r3, #1]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d128      	bne.n	8004a4e <USB_EPStartXfer+0x155e>
 80049fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004a0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a20:	4413      	add	r3, r2
 8004a22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004a26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	00da      	lsls	r2, r3, #3
 8004a34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a38:	4413      	add	r3, r2
 8004a3a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004a3e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004a4c:	801a      	strh	r2, [r3, #0]
 8004a4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	785b      	ldrb	r3, [r3, #1]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f040 8085 	bne.w	8004b78 <USB_EPStartXfer+0x1688>
 8004a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004a7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a92:	4413      	add	r3, r2
 8004a94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	00da      	lsls	r2, r3, #3
 8004aa6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004aaa:	4413      	add	r3, r2
 8004aac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ab0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ab4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ab8:	881b      	ldrh	r3, [r3, #0]
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ac6:	801a      	strh	r2, [r3, #0]
 8004ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004acc:	2b3e      	cmp	r3, #62	; 0x3e
 8004ace:	d923      	bls.n	8004b18 <USB_EPStartXfer+0x1628>
 8004ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ad4:	095b      	lsrs	r3, r3, #5
 8004ad6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ade:	f003 031f 	and.w	r3, r3, #31
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d104      	bne.n	8004af0 <USB_EPStartXfer+0x1600>
 8004ae6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004aea:	3b01      	subs	r3, #1
 8004aec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004af0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	029b      	lsls	r3, r3, #10
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	4313      	orrs	r3, r2
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b14:	801a      	strh	r2, [r3, #0]
 8004b16:	e05c      	b.n	8004bd2 <USB_EPStartXfer+0x16e2>
 8004b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10c      	bne.n	8004b3a <USB_EPStartXfer+0x164a>
 8004b20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b36:	801a      	strh	r2, [r3, #0]
 8004b38:	e04b      	b.n	8004bd2 <USB_EPStartXfer+0x16e2>
 8004b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b3e:	085b      	lsrs	r3, r3, #1
 8004b40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d004      	beq.n	8004b5a <USB_EPStartXfer+0x166a>
 8004b50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b54:	3301      	adds	r3, #1
 8004b56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b5e:	881b      	ldrh	r3, [r3, #0]
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	029b      	lsls	r3, r3, #10
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b74:	801a      	strh	r2, [r3, #0]
 8004b76:	e02c      	b.n	8004bd2 <USB_EPStartXfer+0x16e2>
 8004b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	785b      	ldrb	r3, [r3, #1]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d124      	bne.n	8004bd2 <USB_EPStartXfer+0x16e2>
 8004b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	461a      	mov	r2, r3
 8004b9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b9e:	4413      	add	r3, r2
 8004ba0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	00da      	lsls	r2, r3, #3
 8004bb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004bbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004bca:	801a      	strh	r2, [r3, #0]
 8004bcc:	e001      	b.n	8004bd2 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e03a      	b.n	8004c48 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004be0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004bfc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004c00:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004c04:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004c08:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004c0c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c10:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	441a      	add	r2, r3
 8004c2e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b085      	sub	sp, #20
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	785b      	ldrb	r3, [r3, #1]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d020      	beq.n	8004ca6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4413      	add	r3, r2
 8004c6e:	881b      	ldrh	r3, [r3, #0]
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c7a:	81bb      	strh	r3, [r7, #12]
 8004c7c:	89bb      	ldrh	r3, [r7, #12]
 8004c7e:	f083 0310 	eor.w	r3, r3, #16
 8004c82:	81bb      	strh	r3, [r7, #12]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	441a      	add	r2, r3
 8004c8e:	89bb      	ldrh	r3, [r7, #12]
 8004c90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	8013      	strh	r3, [r2, #0]
 8004ca4:	e01f      	b.n	8004ce6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4413      	add	r3, r2
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cbc:	81fb      	strh	r3, [r7, #14]
 8004cbe:	89fb      	ldrh	r3, [r7, #14]
 8004cc0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004cc4:	81fb      	strh	r3, [r7, #14]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	441a      	add	r2, r3
 8004cd0:	89fb      	ldrh	r3, [r7, #14]
 8004cd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	7b1b      	ldrb	r3, [r3, #12]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f040 809d 	bne.w	8004e42 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	785b      	ldrb	r3, [r3, #1]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d04c      	beq.n	8004daa <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	823b      	strh	r3, [r7, #16]
 8004d1e:	8a3b      	ldrh	r3, [r7, #16]
 8004d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d01b      	beq.n	8004d60 <USB_EPClearStall+0x6c>
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	881b      	ldrh	r3, [r3, #0]
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d3e:	81fb      	strh	r3, [r7, #14]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	441a      	add	r2, r3
 8004d4a:	89fb      	ldrh	r3, [r7, #14]
 8004d4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	78db      	ldrb	r3, [r3, #3]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d06c      	beq.n	8004e42 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4413      	add	r3, r2
 8004d72:	881b      	ldrh	r3, [r3, #0]
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d7e:	81bb      	strh	r3, [r7, #12]
 8004d80:	89bb      	ldrh	r3, [r7, #12]
 8004d82:	f083 0320 	eor.w	r3, r3, #32
 8004d86:	81bb      	strh	r3, [r7, #12]
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	441a      	add	r2, r3
 8004d92:	89bb      	ldrh	r3, [r7, #12]
 8004d94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	8013      	strh	r3, [r2, #0]
 8004da8:	e04b      	b.n	8004e42 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	82fb      	strh	r3, [r7, #22]
 8004db8:	8afb      	ldrh	r3, [r7, #22]
 8004dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d01b      	beq.n	8004dfa <USB_EPClearStall+0x106>
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd8:	82bb      	strh	r3, [r7, #20]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	441a      	add	r2, r3
 8004de4:	8abb      	ldrh	r3, [r7, #20]
 8004de6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	881b      	ldrh	r3, [r3, #0]
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e10:	827b      	strh	r3, [r7, #18]
 8004e12:	8a7b      	ldrh	r3, [r7, #18]
 8004e14:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004e18:	827b      	strh	r3, [r7, #18]
 8004e1a:	8a7b      	ldrh	r3, [r7, #18]
 8004e1c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004e20:	827b      	strh	r3, [r7, #18]
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	441a      	add	r2, r3
 8004e2c:	8a7b      	ldrh	r3, [r7, #18]
 8004e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	371c      	adds	r7, #28
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004e5c:	78fb      	ldrb	r3, [r7, #3]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d103      	bne.n	8004e6a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2280      	movs	r2, #128	; 0x80
 8004e66:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b08b      	sub	sp, #44	; 0x2c
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	80fb      	strh	r3, [r7, #6]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004eae:	88bb      	ldrh	r3, [r7, #4]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	085b      	lsrs	r3, r3, #1
 8004eb4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004ebe:	88fa      	ldrh	r2, [r7, #6]
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ec8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ece:	e01b      	b.n	8004f08 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	021b      	lsls	r3, r3, #8
 8004ede:	b21a      	sxth	r2, r3
 8004ee0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	b21b      	sxth	r3, r3
 8004ee8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	8a7a      	ldrh	r2, [r7, #18]
 8004eee:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	3302      	adds	r3, #2
 8004ef4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	3301      	adds	r3, #1
 8004f00:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	3b01      	subs	r3, #1
 8004f06:	627b      	str	r3, [r7, #36]	; 0x24
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1e0      	bne.n	8004ed0 <USB_WritePMA+0x38>
  }
}
 8004f0e:	bf00      	nop
 8004f10:	bf00      	nop
 8004f12:	372c      	adds	r7, #44	; 0x2c
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b08b      	sub	sp, #44	; 0x2c
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	4611      	mov	r1, r2
 8004f28:	461a      	mov	r2, r3
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	80fb      	strh	r3, [r7, #6]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004f32:	88bb      	ldrh	r3, [r7, #4]
 8004f34:	085b      	lsrs	r3, r3, #1
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004f42:	88fa      	ldrh	r2, [r7, #6]
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f4c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	627b      	str	r3, [r7, #36]	; 0x24
 8004f52:	e018      	b.n	8004f86 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	881b      	ldrh	r3, [r3, #0]
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004f5c:	6a3b      	ldr	r3, [r7, #32]
 8004f5e:	3302      	adds	r3, #2
 8004f60:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	b2da      	uxtb	r2, r3
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	0a1b      	lsrs	r3, r3, #8
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	3b01      	subs	r3, #1
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1e3      	bne.n	8004f54 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8004f8c:	88bb      	ldrh	r3, [r7, #4]
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d007      	beq.n	8004fa8 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	701a      	strb	r2, [r3, #0]
  }
}
 8004fa8:	bf00      	nop
 8004faa:	372c      	adds	r7, #44	; 0x2c
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	370c      	adds	r7, #12
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fca:	b580      	push	{r7, lr}
 8004fcc:	b084      	sub	sp, #16
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d009      	beq.n	8004ff8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	78fa      	ldrb	r2, [r7, #3]
 8004fee:	4611      	mov	r1, r2
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	4798      	blx	r3
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}

08005002 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b082      	sub	sp, #8
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	460b      	mov	r3, r1
 800500c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005014:	2b00      	cmp	r3, #0
 8005016:	d007      	beq.n	8005028 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	78fa      	ldrb	r2, [r7, #3]
 8005022:	4611      	mov	r1, r2
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	4798      	blx	r3
  }

  return USBD_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b084      	sub	sp, #16
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005042:	6839      	ldr	r1, [r7, #0]
 8005044:	4618      	mov	r0, r3
 8005046:	f000 ff47 	bl	8005ed8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005058:	461a      	mov	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005066:	f003 031f 	and.w	r3, r3, #31
 800506a:	2b02      	cmp	r3, #2
 800506c:	d01a      	beq.n	80050a4 <USBD_LL_SetupStage+0x72>
 800506e:	2b02      	cmp	r3, #2
 8005070:	d822      	bhi.n	80050b8 <USBD_LL_SetupStage+0x86>
 8005072:	2b00      	cmp	r3, #0
 8005074:	d002      	beq.n	800507c <USBD_LL_SetupStage+0x4a>
 8005076:	2b01      	cmp	r3, #1
 8005078:	d00a      	beq.n	8005090 <USBD_LL_SetupStage+0x5e>
 800507a:	e01d      	b.n	80050b8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005082:	4619      	mov	r1, r3
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 f9ef 	bl	8005468 <USBD_StdDevReq>
 800508a:	4603      	mov	r3, r0
 800508c:	73fb      	strb	r3, [r7, #15]
      break;
 800508e:	e020      	b.n	80050d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005096:	4619      	mov	r1, r3
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 fa53 	bl	8005544 <USBD_StdItfReq>
 800509e:	4603      	mov	r3, r0
 80050a0:	73fb      	strb	r3, [r7, #15]
      break;
 80050a2:	e016      	b.n	80050d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80050aa:	4619      	mov	r1, r3
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 fa92 	bl	80055d6 <USBD_StdEPReq>
 80050b2:	4603      	mov	r3, r0
 80050b4:	73fb      	strb	r3, [r7, #15]
      break;
 80050b6:	e00c      	b.n	80050d2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80050be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	4619      	mov	r1, r3
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f001 f884 	bl	80061d4 <USBD_LL_StallEP>
 80050cc:	4603      	mov	r3, r0
 80050ce:	73fb      	strb	r3, [r7, #15]
      break;
 80050d0:	bf00      	nop
  }

  return ret;
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	460b      	mov	r3, r1
 80050e6:	607a      	str	r2, [r7, #4]
 80050e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80050ea:	7afb      	ldrb	r3, [r7, #11]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d138      	bne.n	8005162 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80050f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80050fe:	2b03      	cmp	r3, #3
 8005100:	d14a      	bne.n	8005198 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	429a      	cmp	r2, r3
 800510c:	d913      	bls.n	8005136 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	689a      	ldr	r2, [r3, #8]
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	1ad2      	subs	r2, r2, r3
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	68da      	ldr	r2, [r3, #12]
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	4293      	cmp	r3, r2
 8005126:	bf28      	it	cs
 8005128:	4613      	movcs	r3, r2
 800512a:	461a      	mov	r2, r3
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 ff49 	bl	8005fc6 <USBD_CtlContinueRx>
 8005134:	e030      	b.n	8005198 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b03      	cmp	r3, #3
 8005140:	d10b      	bne.n	800515a <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d005      	beq.n	800515a <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f000 ff44 	bl	8005fe8 <USBD_CtlSendStatus>
 8005160:	e01a      	b.n	8005198 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b03      	cmp	r3, #3
 800516c:	d114      	bne.n	8005198 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00e      	beq.n	8005198 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	7afa      	ldrb	r2, [r7, #11]
 8005184:	4611      	mov	r1, r2
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	4798      	blx	r3
 800518a:	4603      	mov	r3, r0
 800518c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800518e:	7dfb      	ldrb	r3, [r7, #23]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005194:	7dfb      	ldrb	r3, [r7, #23]
 8005196:	e000      	b.n	800519a <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3718      	adds	r7, #24
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b086      	sub	sp, #24
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	60f8      	str	r0, [r7, #12]
 80051aa:	460b      	mov	r3, r1
 80051ac:	607a      	str	r2, [r7, #4]
 80051ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80051b0:	7afb      	ldrb	r3, [r7, #11]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d16b      	bne.n	800528e <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	3314      	adds	r3, #20
 80051ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d156      	bne.n	8005274 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	689a      	ldr	r2, [r3, #8]
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d914      	bls.n	80051fc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	689a      	ldr	r2, [r3, #8]
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	1ad2      	subs	r2, r2, r3
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	461a      	mov	r2, r3
 80051e6:	6879      	ldr	r1, [r7, #4]
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 fedb 	bl	8005fa4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80051ee:	2300      	movs	r3, #0
 80051f0:	2200      	movs	r2, #0
 80051f2:	2100      	movs	r1, #0
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f001 f897 	bl	8006328 <USBD_LL_PrepareReceive>
 80051fa:	e03b      	b.n	8005274 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	68da      	ldr	r2, [r3, #12]
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	429a      	cmp	r2, r3
 8005206:	d11c      	bne.n	8005242 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005210:	429a      	cmp	r2, r3
 8005212:	d316      	bcc.n	8005242 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800521e:	429a      	cmp	r2, r3
 8005220:	d20f      	bcs.n	8005242 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005222:	2200      	movs	r2, #0
 8005224:	2100      	movs	r1, #0
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 febc 	bl	8005fa4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005234:	2300      	movs	r3, #0
 8005236:	2200      	movs	r2, #0
 8005238:	2100      	movs	r1, #0
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f001 f874 	bl	8006328 <USBD_LL_PrepareReceive>
 8005240:	e018      	b.n	8005274 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b03      	cmp	r3, #3
 800524c:	d10b      	bne.n	8005266 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d005      	beq.n	8005266 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005266:	2180      	movs	r1, #128	; 0x80
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 ffb3 	bl	80061d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 fecd 	bl	800600e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800527a:	2b01      	cmp	r3, #1
 800527c:	d122      	bne.n	80052c4 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f7ff fe98 	bl	8004fb4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800528c:	e01a      	b.n	80052c4 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b03      	cmp	r3, #3
 8005298:	d114      	bne.n	80052c4 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00e      	beq.n	80052c4 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	7afa      	ldrb	r2, [r7, #11]
 80052b0:	4611      	mov	r1, r2
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	4798      	blx	r3
 80052b6:	4603      	mov	r3, r0
 80052b8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80052ba:	7dfb      	ldrb	r3, [r7, #23]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d001      	beq.n	80052c4 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80052c0:	7dfb      	ldrb	r3, [r7, #23]
 80052c2:	e000      	b.n	80052c6 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b082      	sub	sp, #8
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80052fe:	2303      	movs	r3, #3
 8005300:	e02f      	b.n	8005362 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00f      	beq.n	800532c <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d009      	beq.n	800532c <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6852      	ldr	r2, [r2, #4]
 8005324:	b2d2      	uxtb	r2, r2
 8005326:	4611      	mov	r1, r2
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800532c:	2340      	movs	r3, #64	; 0x40
 800532e:	2200      	movs	r2, #0
 8005330:	2100      	movs	r1, #0
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 ff28 	bl	8006188 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2240      	movs	r2, #64	; 0x40
 8005344:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005348:	2340      	movs	r3, #64	; 0x40
 800534a:	2200      	movs	r2, #0
 800534c:	2180      	movs	r1, #128	; 0x80
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 ff1a 	bl	8006188 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2240      	movs	r2, #64	; 0x40
 800535e:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
 8005372:	460b      	mov	r3, r1
 8005374:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	78fa      	ldrb	r2, [r7, #3]
 800537a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005398:	b2da      	uxtb	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2204      	movs	r2, #4
 80053a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d106      	bne.n	80053d8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b082      	sub	sp, #8
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e012      	b.n	8005422 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b03      	cmp	r3, #3
 8005406:	d10b      	bne.n	8005420 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800540e:	69db      	ldr	r3, [r3, #28]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d005      	beq.n	8005420 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800542a:	b480      	push	{r7}
 800542c:	b087      	sub	sp, #28
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	3301      	adds	r3, #1
 8005440:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005448:	8a3b      	ldrh	r3, [r7, #16]
 800544a:	021b      	lsls	r3, r3, #8
 800544c:	b21a      	sxth	r2, r3
 800544e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005452:	4313      	orrs	r3, r2
 8005454:	b21b      	sxth	r3, r3
 8005456:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005458:	89fb      	ldrh	r3, [r7, #14]
}
 800545a:	4618      	mov	r0, r3
 800545c:	371c      	adds	r7, #28
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
	...

08005468 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005472:	2300      	movs	r3, #0
 8005474:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800547e:	2b40      	cmp	r3, #64	; 0x40
 8005480:	d005      	beq.n	800548e <USBD_StdDevReq+0x26>
 8005482:	2b40      	cmp	r3, #64	; 0x40
 8005484:	d853      	bhi.n	800552e <USBD_StdDevReq+0xc6>
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00b      	beq.n	80054a2 <USBD_StdDevReq+0x3a>
 800548a:	2b20      	cmp	r3, #32
 800548c:	d14f      	bne.n	800552e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	6839      	ldr	r1, [r7, #0]
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	4798      	blx	r3
 800549c:	4603      	mov	r3, r0
 800549e:	73fb      	strb	r3, [r7, #15]
      break;
 80054a0:	e04a      	b.n	8005538 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	785b      	ldrb	r3, [r3, #1]
 80054a6:	2b09      	cmp	r3, #9
 80054a8:	d83b      	bhi.n	8005522 <USBD_StdDevReq+0xba>
 80054aa:	a201      	add	r2, pc, #4	; (adr r2, 80054b0 <USBD_StdDevReq+0x48>)
 80054ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b0:	08005505 	.word	0x08005505
 80054b4:	08005519 	.word	0x08005519
 80054b8:	08005523 	.word	0x08005523
 80054bc:	0800550f 	.word	0x0800550f
 80054c0:	08005523 	.word	0x08005523
 80054c4:	080054e3 	.word	0x080054e3
 80054c8:	080054d9 	.word	0x080054d9
 80054cc:	08005523 	.word	0x08005523
 80054d0:	080054fb 	.word	0x080054fb
 80054d4:	080054ed 	.word	0x080054ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80054d8:	6839      	ldr	r1, [r7, #0]
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f9de 	bl	800589c <USBD_GetDescriptor>
          break;
 80054e0:	e024      	b.n	800552c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80054e2:	6839      	ldr	r1, [r7, #0]
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 fb6d 	bl	8005bc4 <USBD_SetAddress>
          break;
 80054ea:	e01f      	b.n	800552c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80054ec:	6839      	ldr	r1, [r7, #0]
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fbac 	bl	8005c4c <USBD_SetConfig>
 80054f4:	4603      	mov	r3, r0
 80054f6:	73fb      	strb	r3, [r7, #15]
          break;
 80054f8:	e018      	b.n	800552c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80054fa:	6839      	ldr	r1, [r7, #0]
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 fc4b 	bl	8005d98 <USBD_GetConfig>
          break;
 8005502:	e013      	b.n	800552c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005504:	6839      	ldr	r1, [r7, #0]
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fc7c 	bl	8005e04 <USBD_GetStatus>
          break;
 800550c:	e00e      	b.n	800552c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800550e:	6839      	ldr	r1, [r7, #0]
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fcab 	bl	8005e6c <USBD_SetFeature>
          break;
 8005516:	e009      	b.n	800552c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005518:	6839      	ldr	r1, [r7, #0]
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fcba 	bl	8005e94 <USBD_ClrFeature>
          break;
 8005520:	e004      	b.n	800552c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005522:	6839      	ldr	r1, [r7, #0]
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fd11 	bl	8005f4c <USBD_CtlError>
          break;
 800552a:	bf00      	nop
      }
      break;
 800552c:	e004      	b.n	8005538 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800552e:	6839      	ldr	r1, [r7, #0]
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 fd0b 	bl	8005f4c <USBD_CtlError>
      break;
 8005536:	bf00      	nop
  }

  return ret;
 8005538:	7bfb      	ldrb	r3, [r7, #15]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop

08005544 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800554e:	2300      	movs	r3, #0
 8005550:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800555a:	2b40      	cmp	r3, #64	; 0x40
 800555c:	d005      	beq.n	800556a <USBD_StdItfReq+0x26>
 800555e:	2b40      	cmp	r3, #64	; 0x40
 8005560:	d82f      	bhi.n	80055c2 <USBD_StdItfReq+0x7e>
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <USBD_StdItfReq+0x26>
 8005566:	2b20      	cmp	r3, #32
 8005568:	d12b      	bne.n	80055c2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005570:	b2db      	uxtb	r3, r3
 8005572:	3b01      	subs	r3, #1
 8005574:	2b02      	cmp	r3, #2
 8005576:	d81d      	bhi.n	80055b4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	889b      	ldrh	r3, [r3, #4]
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b01      	cmp	r3, #1
 8005580:	d813      	bhi.n	80055aa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	6839      	ldr	r1, [r7, #0]
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	4798      	blx	r3
 8005590:	4603      	mov	r3, r0
 8005592:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	88db      	ldrh	r3, [r3, #6]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d110      	bne.n	80055be <USBD_StdItfReq+0x7a>
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10d      	bne.n	80055be <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 fd20 	bl	8005fe8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80055a8:	e009      	b.n	80055be <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80055aa:	6839      	ldr	r1, [r7, #0]
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 fccd 	bl	8005f4c <USBD_CtlError>
          break;
 80055b2:	e004      	b.n	80055be <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80055b4:	6839      	ldr	r1, [r7, #0]
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 fcc8 	bl	8005f4c <USBD_CtlError>
          break;
 80055bc:	e000      	b.n	80055c0 <USBD_StdItfReq+0x7c>
          break;
 80055be:	bf00      	nop
      }
      break;
 80055c0:	e004      	b.n	80055cc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80055c2:	6839      	ldr	r1, [r7, #0]
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 fcc1 	bl	8005f4c <USBD_CtlError>
      break;
 80055ca:	bf00      	nop
  }

  return ret;
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b084      	sub	sp, #16
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80055e0:	2300      	movs	r3, #0
 80055e2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	889b      	ldrh	r3, [r3, #4]
 80055e8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80055f2:	2b40      	cmp	r3, #64	; 0x40
 80055f4:	d007      	beq.n	8005606 <USBD_StdEPReq+0x30>
 80055f6:	2b40      	cmp	r3, #64	; 0x40
 80055f8:	f200 8145 	bhi.w	8005886 <USBD_StdEPReq+0x2b0>
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00c      	beq.n	800561a <USBD_StdEPReq+0x44>
 8005600:	2b20      	cmp	r3, #32
 8005602:	f040 8140 	bne.w	8005886 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	6839      	ldr	r1, [r7, #0]
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	4798      	blx	r3
 8005614:	4603      	mov	r3, r0
 8005616:	73fb      	strb	r3, [r7, #15]
      break;
 8005618:	e13a      	b.n	8005890 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	785b      	ldrb	r3, [r3, #1]
 800561e:	2b03      	cmp	r3, #3
 8005620:	d007      	beq.n	8005632 <USBD_StdEPReq+0x5c>
 8005622:	2b03      	cmp	r3, #3
 8005624:	f300 8129 	bgt.w	800587a <USBD_StdEPReq+0x2a4>
 8005628:	2b00      	cmp	r3, #0
 800562a:	d07f      	beq.n	800572c <USBD_StdEPReq+0x156>
 800562c:	2b01      	cmp	r3, #1
 800562e:	d03c      	beq.n	80056aa <USBD_StdEPReq+0xd4>
 8005630:	e123      	b.n	800587a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d002      	beq.n	8005644 <USBD_StdEPReq+0x6e>
 800563e:	2b03      	cmp	r3, #3
 8005640:	d016      	beq.n	8005670 <USBD_StdEPReq+0x9a>
 8005642:	e02c      	b.n	800569e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005644:	7bbb      	ldrb	r3, [r7, #14]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00d      	beq.n	8005666 <USBD_StdEPReq+0x90>
 800564a:	7bbb      	ldrb	r3, [r7, #14]
 800564c:	2b80      	cmp	r3, #128	; 0x80
 800564e:	d00a      	beq.n	8005666 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005650:	7bbb      	ldrb	r3, [r7, #14]
 8005652:	4619      	mov	r1, r3
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 fdbd 	bl	80061d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800565a:	2180      	movs	r1, #128	; 0x80
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 fdb9 	bl	80061d4 <USBD_LL_StallEP>
 8005662:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005664:	e020      	b.n	80056a8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005666:	6839      	ldr	r1, [r7, #0]
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 fc6f 	bl	8005f4c <USBD_CtlError>
              break;
 800566e:	e01b      	b.n	80056a8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	885b      	ldrh	r3, [r3, #2]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10e      	bne.n	8005696 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005678:	7bbb      	ldrb	r3, [r7, #14]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00b      	beq.n	8005696 <USBD_StdEPReq+0xc0>
 800567e:	7bbb      	ldrb	r3, [r7, #14]
 8005680:	2b80      	cmp	r3, #128	; 0x80
 8005682:	d008      	beq.n	8005696 <USBD_StdEPReq+0xc0>
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	88db      	ldrh	r3, [r3, #6]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d104      	bne.n	8005696 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800568c:	7bbb      	ldrb	r3, [r7, #14]
 800568e:	4619      	mov	r1, r3
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fd9f 	bl	80061d4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fca6 	bl	8005fe8 <USBD_CtlSendStatus>

              break;
 800569c:	e004      	b.n	80056a8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800569e:	6839      	ldr	r1, [r7, #0]
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 fc53 	bl	8005f4c <USBD_CtlError>
              break;
 80056a6:	bf00      	nop
          }
          break;
 80056a8:	e0ec      	b.n	8005884 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d002      	beq.n	80056bc <USBD_StdEPReq+0xe6>
 80056b6:	2b03      	cmp	r3, #3
 80056b8:	d016      	beq.n	80056e8 <USBD_StdEPReq+0x112>
 80056ba:	e030      	b.n	800571e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80056bc:	7bbb      	ldrb	r3, [r7, #14]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00d      	beq.n	80056de <USBD_StdEPReq+0x108>
 80056c2:	7bbb      	ldrb	r3, [r7, #14]
 80056c4:	2b80      	cmp	r3, #128	; 0x80
 80056c6:	d00a      	beq.n	80056de <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80056c8:	7bbb      	ldrb	r3, [r7, #14]
 80056ca:	4619      	mov	r1, r3
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 fd81 	bl	80061d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80056d2:	2180      	movs	r1, #128	; 0x80
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 fd7d 	bl	80061d4 <USBD_LL_StallEP>
 80056da:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80056dc:	e025      	b.n	800572a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80056de:	6839      	ldr	r1, [r7, #0]
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fc33 	bl	8005f4c <USBD_CtlError>
              break;
 80056e6:	e020      	b.n	800572a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	885b      	ldrh	r3, [r3, #2]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d11b      	bne.n	8005728 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80056f0:	7bbb      	ldrb	r3, [r7, #14]
 80056f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d004      	beq.n	8005704 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80056fa:	7bbb      	ldrb	r3, [r7, #14]
 80056fc:	4619      	mov	r1, r3
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 fd87 	bl	8006212 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 fc6f 	bl	8005fe8 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	6839      	ldr	r1, [r7, #0]
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	4798      	blx	r3
 8005718:	4603      	mov	r3, r0
 800571a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800571c:	e004      	b.n	8005728 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800571e:	6839      	ldr	r1, [r7, #0]
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 fc13 	bl	8005f4c <USBD_CtlError>
              break;
 8005726:	e000      	b.n	800572a <USBD_StdEPReq+0x154>
              break;
 8005728:	bf00      	nop
          }
          break;
 800572a:	e0ab      	b.n	8005884 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d002      	beq.n	800573e <USBD_StdEPReq+0x168>
 8005738:	2b03      	cmp	r3, #3
 800573a:	d032      	beq.n	80057a2 <USBD_StdEPReq+0x1cc>
 800573c:	e097      	b.n	800586e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800573e:	7bbb      	ldrb	r3, [r7, #14]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d007      	beq.n	8005754 <USBD_StdEPReq+0x17e>
 8005744:	7bbb      	ldrb	r3, [r7, #14]
 8005746:	2b80      	cmp	r3, #128	; 0x80
 8005748:	d004      	beq.n	8005754 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800574a:	6839      	ldr	r1, [r7, #0]
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 fbfd 	bl	8005f4c <USBD_CtlError>
                break;
 8005752:	e091      	b.n	8005878 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005754:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005758:	2b00      	cmp	r3, #0
 800575a:	da0b      	bge.n	8005774 <USBD_StdEPReq+0x19e>
 800575c:	7bbb      	ldrb	r3, [r7, #14]
 800575e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005762:	4613      	mov	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4413      	add	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	3310      	adds	r3, #16
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	4413      	add	r3, r2
 8005770:	3304      	adds	r3, #4
 8005772:	e00b      	b.n	800578c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005774:	7bbb      	ldrb	r3, [r7, #14]
 8005776:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800577a:	4613      	mov	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	4413      	add	r3, r2
 800578a:	3304      	adds	r3, #4
 800578c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	2200      	movs	r2, #0
 8005792:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2202      	movs	r2, #2
 8005798:	4619      	mov	r1, r3
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 fbe7 	bl	8005f6e <USBD_CtlSendData>
              break;
 80057a0:	e06a      	b.n	8005878 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80057a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	da11      	bge.n	80057ce <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80057aa:	7bbb      	ldrb	r3, [r7, #14]
 80057ac:	f003 020f 	and.w	r2, r3, #15
 80057b0:	6879      	ldr	r1, [r7, #4]
 80057b2:	4613      	mov	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	440b      	add	r3, r1
 80057bc:	3324      	adds	r3, #36	; 0x24
 80057be:	881b      	ldrh	r3, [r3, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d117      	bne.n	80057f4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80057c4:	6839      	ldr	r1, [r7, #0]
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fbc0 	bl	8005f4c <USBD_CtlError>
                  break;
 80057cc:	e054      	b.n	8005878 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80057ce:	7bbb      	ldrb	r3, [r7, #14]
 80057d0:	f003 020f 	and.w	r2, r3, #15
 80057d4:	6879      	ldr	r1, [r7, #4]
 80057d6:	4613      	mov	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	440b      	add	r3, r1
 80057e0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80057e4:	881b      	ldrh	r3, [r3, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d104      	bne.n	80057f4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80057ea:	6839      	ldr	r1, [r7, #0]
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 fbad 	bl	8005f4c <USBD_CtlError>
                  break;
 80057f2:	e041      	b.n	8005878 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80057f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	da0b      	bge.n	8005814 <USBD_StdEPReq+0x23e>
 80057fc:	7bbb      	ldrb	r3, [r7, #14]
 80057fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005802:	4613      	mov	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	3310      	adds	r3, #16
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	4413      	add	r3, r2
 8005810:	3304      	adds	r3, #4
 8005812:	e00b      	b.n	800582c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005814:	7bbb      	ldrb	r3, [r7, #14]
 8005816:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800581a:	4613      	mov	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	4413      	add	r3, r2
 800582a:	3304      	adds	r3, #4
 800582c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800582e:	7bbb      	ldrb	r3, [r7, #14]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <USBD_StdEPReq+0x264>
 8005834:	7bbb      	ldrb	r3, [r7, #14]
 8005836:	2b80      	cmp	r3, #128	; 0x80
 8005838:	d103      	bne.n	8005842 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2200      	movs	r2, #0
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	e00e      	b.n	8005860 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005842:	7bbb      	ldrb	r3, [r7, #14]
 8005844:	4619      	mov	r1, r3
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fd02 	bl	8006250 <USBD_LL_IsStallEP>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	2201      	movs	r2, #1
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	e002      	b.n	8005860 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2200      	movs	r2, #0
 800585e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	2202      	movs	r2, #2
 8005864:	4619      	mov	r1, r3
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fb81 	bl	8005f6e <USBD_CtlSendData>
              break;
 800586c:	e004      	b.n	8005878 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800586e:	6839      	ldr	r1, [r7, #0]
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 fb6b 	bl	8005f4c <USBD_CtlError>
              break;
 8005876:	bf00      	nop
          }
          break;
 8005878:	e004      	b.n	8005884 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800587a:	6839      	ldr	r1, [r7, #0]
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 fb65 	bl	8005f4c <USBD_CtlError>
          break;
 8005882:	bf00      	nop
      }
      break;
 8005884:	e004      	b.n	8005890 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005886:	6839      	ldr	r1, [r7, #0]
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 fb5f 	bl	8005f4c <USBD_CtlError>
      break;
 800588e:	bf00      	nop
  }

  return ret;
 8005890:	7bfb      	ldrb	r3, [r7, #15]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
	...

0800589c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80058a6:	2300      	movs	r3, #0
 80058a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80058aa:	2300      	movs	r3, #0
 80058ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	885b      	ldrh	r3, [r3, #2]
 80058b6:	0a1b      	lsrs	r3, r3, #8
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	3b01      	subs	r3, #1
 80058bc:	2b0e      	cmp	r3, #14
 80058be:	f200 8152 	bhi.w	8005b66 <USBD_GetDescriptor+0x2ca>
 80058c2:	a201      	add	r2, pc, #4	; (adr r2, 80058c8 <USBD_GetDescriptor+0x2c>)
 80058c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c8:	08005939 	.word	0x08005939
 80058cc:	08005951 	.word	0x08005951
 80058d0:	08005991 	.word	0x08005991
 80058d4:	08005b67 	.word	0x08005b67
 80058d8:	08005b67 	.word	0x08005b67
 80058dc:	08005b07 	.word	0x08005b07
 80058e0:	08005b33 	.word	0x08005b33
 80058e4:	08005b67 	.word	0x08005b67
 80058e8:	08005b67 	.word	0x08005b67
 80058ec:	08005b67 	.word	0x08005b67
 80058f0:	08005b67 	.word	0x08005b67
 80058f4:	08005b67 	.word	0x08005b67
 80058f8:	08005b67 	.word	0x08005b67
 80058fc:	08005b67 	.word	0x08005b67
 8005900:	08005905 	.word	0x08005905
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00b      	beq.n	8005928 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	7c12      	ldrb	r2, [r2, #16]
 800591c:	f107 0108 	add.w	r1, r7, #8
 8005920:	4610      	mov	r0, r2
 8005922:	4798      	blx	r3
 8005924:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005926:	e126      	b.n	8005b76 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005928:	6839      	ldr	r1, [r7, #0]
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 fb0e 	bl	8005f4c <USBD_CtlError>
        err++;
 8005930:	7afb      	ldrb	r3, [r7, #11]
 8005932:	3301      	adds	r3, #1
 8005934:	72fb      	strb	r3, [r7, #11]
      break;
 8005936:	e11e      	b.n	8005b76 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	7c12      	ldrb	r2, [r2, #16]
 8005944:	f107 0108 	add.w	r1, r7, #8
 8005948:	4610      	mov	r0, r2
 800594a:	4798      	blx	r3
 800594c:	60f8      	str	r0, [r7, #12]
      break;
 800594e:	e112      	b.n	8005b76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	7c1b      	ldrb	r3, [r3, #16]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10d      	bne.n	8005974 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800595e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005960:	f107 0208 	add.w	r2, r7, #8
 8005964:	4610      	mov	r0, r2
 8005966:	4798      	blx	r3
 8005968:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	3301      	adds	r3, #1
 800596e:	2202      	movs	r2, #2
 8005970:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005972:	e100      	b.n	8005b76 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800597a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597c:	f107 0208 	add.w	r2, r7, #8
 8005980:	4610      	mov	r0, r2
 8005982:	4798      	blx	r3
 8005984:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	3301      	adds	r3, #1
 800598a:	2202      	movs	r2, #2
 800598c:	701a      	strb	r2, [r3, #0]
      break;
 800598e:	e0f2      	b.n	8005b76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	885b      	ldrh	r3, [r3, #2]
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b05      	cmp	r3, #5
 8005998:	f200 80ac 	bhi.w	8005af4 <USBD_GetDescriptor+0x258>
 800599c:	a201      	add	r2, pc, #4	; (adr r2, 80059a4 <USBD_GetDescriptor+0x108>)
 800599e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a2:	bf00      	nop
 80059a4:	080059bd 	.word	0x080059bd
 80059a8:	080059f1 	.word	0x080059f1
 80059ac:	08005a25 	.word	0x08005a25
 80059b0:	08005a59 	.word	0x08005a59
 80059b4:	08005a8d 	.word	0x08005a8d
 80059b8:	08005ac1 	.word	0x08005ac1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00b      	beq.n	80059e0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	7c12      	ldrb	r2, [r2, #16]
 80059d4:	f107 0108 	add.w	r1, r7, #8
 80059d8:	4610      	mov	r0, r2
 80059da:	4798      	blx	r3
 80059dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80059de:	e091      	b.n	8005b04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80059e0:	6839      	ldr	r1, [r7, #0]
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fab2 	bl	8005f4c <USBD_CtlError>
            err++;
 80059e8:	7afb      	ldrb	r3, [r7, #11]
 80059ea:	3301      	adds	r3, #1
 80059ec:	72fb      	strb	r3, [r7, #11]
          break;
 80059ee:	e089      	b.n	8005b04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00b      	beq.n	8005a14 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	7c12      	ldrb	r2, [r2, #16]
 8005a08:	f107 0108 	add.w	r1, r7, #8
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	4798      	blx	r3
 8005a10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a12:	e077      	b.n	8005b04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005a14:	6839      	ldr	r1, [r7, #0]
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fa98 	bl	8005f4c <USBD_CtlError>
            err++;
 8005a1c:	7afb      	ldrb	r3, [r7, #11]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	72fb      	strb	r3, [r7, #11]
          break;
 8005a22:	e06f      	b.n	8005b04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00b      	beq.n	8005a48 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	7c12      	ldrb	r2, [r2, #16]
 8005a3c:	f107 0108 	add.w	r1, r7, #8
 8005a40:	4610      	mov	r0, r2
 8005a42:	4798      	blx	r3
 8005a44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a46:	e05d      	b.n	8005b04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005a48:	6839      	ldr	r1, [r7, #0]
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 fa7e 	bl	8005f4c <USBD_CtlError>
            err++;
 8005a50:	7afb      	ldrb	r3, [r7, #11]
 8005a52:	3301      	adds	r3, #1
 8005a54:	72fb      	strb	r3, [r7, #11]
          break;
 8005a56:	e055      	b.n	8005b04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00b      	beq.n	8005a7c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	7c12      	ldrb	r2, [r2, #16]
 8005a70:	f107 0108 	add.w	r1, r7, #8
 8005a74:	4610      	mov	r0, r2
 8005a76:	4798      	blx	r3
 8005a78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005a7a:	e043      	b.n	8005b04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005a7c:	6839      	ldr	r1, [r7, #0]
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fa64 	bl	8005f4c <USBD_CtlError>
            err++;
 8005a84:	7afb      	ldrb	r3, [r7, #11]
 8005a86:	3301      	adds	r3, #1
 8005a88:	72fb      	strb	r3, [r7, #11]
          break;
 8005a8a:	e03b      	b.n	8005b04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00b      	beq.n	8005ab0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	7c12      	ldrb	r2, [r2, #16]
 8005aa4:	f107 0108 	add.w	r1, r7, #8
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	4798      	blx	r3
 8005aac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005aae:	e029      	b.n	8005b04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005ab0:	6839      	ldr	r1, [r7, #0]
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fa4a 	bl	8005f4c <USBD_CtlError>
            err++;
 8005ab8:	7afb      	ldrb	r3, [r7, #11]
 8005aba:	3301      	adds	r3, #1
 8005abc:	72fb      	strb	r3, [r7, #11]
          break;
 8005abe:	e021      	b.n	8005b04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00b      	beq.n	8005ae4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	7c12      	ldrb	r2, [r2, #16]
 8005ad8:	f107 0108 	add.w	r1, r7, #8
 8005adc:	4610      	mov	r0, r2
 8005ade:	4798      	blx	r3
 8005ae0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ae2:	e00f      	b.n	8005b04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005ae4:	6839      	ldr	r1, [r7, #0]
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fa30 	bl	8005f4c <USBD_CtlError>
            err++;
 8005aec:	7afb      	ldrb	r3, [r7, #11]
 8005aee:	3301      	adds	r3, #1
 8005af0:	72fb      	strb	r3, [r7, #11]
          break;
 8005af2:	e007      	b.n	8005b04 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005af4:	6839      	ldr	r1, [r7, #0]
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fa28 	bl	8005f4c <USBD_CtlError>
          err++;
 8005afc:	7afb      	ldrb	r3, [r7, #11]
 8005afe:	3301      	adds	r3, #1
 8005b00:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005b02:	bf00      	nop
      }
      break;
 8005b04:	e037      	b.n	8005b76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	7c1b      	ldrb	r3, [r3, #16]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d109      	bne.n	8005b22 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b16:	f107 0208 	add.w	r2, r7, #8
 8005b1a:	4610      	mov	r0, r2
 8005b1c:	4798      	blx	r3
 8005b1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b20:	e029      	b.n	8005b76 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005b22:	6839      	ldr	r1, [r7, #0]
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 fa11 	bl	8005f4c <USBD_CtlError>
        err++;
 8005b2a:	7afb      	ldrb	r3, [r7, #11]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	72fb      	strb	r3, [r7, #11]
      break;
 8005b30:	e021      	b.n	8005b76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	7c1b      	ldrb	r3, [r3, #16]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10d      	bne.n	8005b56 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b42:	f107 0208 	add.w	r2, r7, #8
 8005b46:	4610      	mov	r0, r2
 8005b48:	4798      	blx	r3
 8005b4a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	2207      	movs	r2, #7
 8005b52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005b54:	e00f      	b.n	8005b76 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005b56:	6839      	ldr	r1, [r7, #0]
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 f9f7 	bl	8005f4c <USBD_CtlError>
        err++;
 8005b5e:	7afb      	ldrb	r3, [r7, #11]
 8005b60:	3301      	adds	r3, #1
 8005b62:	72fb      	strb	r3, [r7, #11]
      break;
 8005b64:	e007      	b.n	8005b76 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8005b66:	6839      	ldr	r1, [r7, #0]
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f9ef 	bl	8005f4c <USBD_CtlError>
      err++;
 8005b6e:	7afb      	ldrb	r3, [r7, #11]
 8005b70:	3301      	adds	r3, #1
 8005b72:	72fb      	strb	r3, [r7, #11]
      break;
 8005b74:	bf00      	nop
  }

  if (err != 0U)
 8005b76:	7afb      	ldrb	r3, [r7, #11]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d11e      	bne.n	8005bba <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	88db      	ldrh	r3, [r3, #6]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d016      	beq.n	8005bb2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8005b84:	893b      	ldrh	r3, [r7, #8]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00e      	beq.n	8005ba8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	88da      	ldrh	r2, [r3, #6]
 8005b8e:	893b      	ldrh	r3, [r7, #8]
 8005b90:	4293      	cmp	r3, r2
 8005b92:	bf28      	it	cs
 8005b94:	4613      	movcs	r3, r2
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005b9a:	893b      	ldrh	r3, [r7, #8]
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	68f9      	ldr	r1, [r7, #12]
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f9e4 	bl	8005f6e <USBD_CtlSendData>
 8005ba6:	e009      	b.n	8005bbc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005ba8:	6839      	ldr	r1, [r7, #0]
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f9ce 	bl	8005f4c <USBD_CtlError>
 8005bb0:	e004      	b.n	8005bbc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fa18 	bl	8005fe8 <USBD_CtlSendStatus>
 8005bb8:	e000      	b.n	8005bbc <USBD_GetDescriptor+0x320>
    return;
 8005bba:	bf00      	nop
  }
}
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop

08005bc4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	889b      	ldrh	r3, [r3, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d131      	bne.n	8005c3a <USBD_SetAddress+0x76>
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	88db      	ldrh	r3, [r3, #6]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d12d      	bne.n	8005c3a <USBD_SetAddress+0x76>
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	885b      	ldrh	r3, [r3, #2]
 8005be2:	2b7f      	cmp	r3, #127	; 0x7f
 8005be4:	d829      	bhi.n	8005c3a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	885b      	ldrh	r3, [r3, #2]
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bf0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b03      	cmp	r3, #3
 8005bfc:	d104      	bne.n	8005c08 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005bfe:	6839      	ldr	r1, [r7, #0]
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f9a3 	bl	8005f4c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c06:	e01d      	b.n	8005c44 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	7bfa      	ldrb	r2, [r7, #15]
 8005c0c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
 8005c12:	4619      	mov	r1, r3
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fb47 	bl	80062a8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f9e4 	bl	8005fe8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d004      	beq.n	8005c30 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2202      	movs	r2, #2
 8005c2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c2e:	e009      	b.n	8005c44 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c38:	e004      	b.n	8005c44 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005c3a:	6839      	ldr	r1, [r7, #0]
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f985 	bl	8005f4c <USBD_CtlError>
  }
}
 8005c42:	bf00      	nop
 8005c44:	bf00      	nop
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c56:	2300      	movs	r3, #0
 8005c58:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	885b      	ldrh	r3, [r3, #2]
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	4b4c      	ldr	r3, [pc, #304]	; (8005d94 <USBD_SetConfig+0x148>)
 8005c62:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005c64:	4b4b      	ldr	r3, [pc, #300]	; (8005d94 <USBD_SetConfig+0x148>)
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d905      	bls.n	8005c78 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005c6c:	6839      	ldr	r1, [r7, #0]
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f96c 	bl	8005f4c <USBD_CtlError>
    return USBD_FAIL;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e088      	b.n	8005d8a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d002      	beq.n	8005c8a <USBD_SetConfig+0x3e>
 8005c84:	2b03      	cmp	r3, #3
 8005c86:	d025      	beq.n	8005cd4 <USBD_SetConfig+0x88>
 8005c88:	e071      	b.n	8005d6e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005c8a:	4b42      	ldr	r3, [pc, #264]	; (8005d94 <USBD_SetConfig+0x148>)
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d01c      	beq.n	8005ccc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8005c92:	4b40      	ldr	r3, [pc, #256]	; (8005d94 <USBD_SetConfig+0x148>)
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	461a      	mov	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005c9c:	4b3d      	ldr	r3, [pc, #244]	; (8005d94 <USBD_SetConfig+0x148>)
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7ff f991 	bl	8004fca <USBD_SetClassConfig>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d004      	beq.n	8005cbc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8005cb2:	6839      	ldr	r1, [r7, #0]
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f949 	bl	8005f4c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005cba:	e065      	b.n	8005d88 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 f993 	bl	8005fe8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2203      	movs	r2, #3
 8005cc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005cca:	e05d      	b.n	8005d88 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f98b 	bl	8005fe8 <USBD_CtlSendStatus>
      break;
 8005cd2:	e059      	b.n	8005d88 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005cd4:	4b2f      	ldr	r3, [pc, #188]	; (8005d94 <USBD_SetConfig+0x148>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d112      	bne.n	8005d02 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005ce4:	4b2b      	ldr	r3, [pc, #172]	; (8005d94 <USBD_SetConfig+0x148>)
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	461a      	mov	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005cee:	4b29      	ldr	r3, [pc, #164]	; (8005d94 <USBD_SetConfig+0x148>)
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7ff f984 	bl	8005002 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f974 	bl	8005fe8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005d00:	e042      	b.n	8005d88 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8005d02:	4b24      	ldr	r3, [pc, #144]	; (8005d94 <USBD_SetConfig+0x148>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	461a      	mov	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d02a      	beq.n	8005d66 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	4619      	mov	r1, r3
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7ff f972 	bl	8005002 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005d1e:	4b1d      	ldr	r3, [pc, #116]	; (8005d94 <USBD_SetConfig+0x148>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	461a      	mov	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005d28:	4b1a      	ldr	r3, [pc, #104]	; (8005d94 <USBD_SetConfig+0x148>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7ff f94b 	bl	8004fca <USBD_SetClassConfig>
 8005d34:	4603      	mov	r3, r0
 8005d36:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00f      	beq.n	8005d5e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8005d3e:	6839      	ldr	r1, [r7, #0]
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f903 	bl	8005f4c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7ff f957 	bl	8005002 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2202      	movs	r2, #2
 8005d58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005d5c:	e014      	b.n	8005d88 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 f942 	bl	8005fe8 <USBD_CtlSendStatus>
      break;
 8005d64:	e010      	b.n	8005d88 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f93e 	bl	8005fe8 <USBD_CtlSendStatus>
      break;
 8005d6c:	e00c      	b.n	8005d88 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8005d6e:	6839      	ldr	r1, [r7, #0]
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f8eb 	bl	8005f4c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005d76:	4b07      	ldr	r3, [pc, #28]	; (8005d94 <USBD_SetConfig+0x148>)
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7ff f940 	bl	8005002 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005d82:	2303      	movs	r3, #3
 8005d84:	73fb      	strb	r3, [r7, #15]
      break;
 8005d86:	bf00      	nop
  }

  return ret;
 8005d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	2000002c 	.word	0x2000002c

08005d98 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	88db      	ldrh	r3, [r3, #6]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d004      	beq.n	8005db4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005daa:	6839      	ldr	r1, [r7, #0]
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f8cd 	bl	8005f4c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005db2:	e023      	b.n	8005dfc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	dc02      	bgt.n	8005dc6 <USBD_GetConfig+0x2e>
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	dc03      	bgt.n	8005dcc <USBD_GetConfig+0x34>
 8005dc4:	e015      	b.n	8005df2 <USBD_GetConfig+0x5a>
 8005dc6:	2b03      	cmp	r3, #3
 8005dc8:	d00b      	beq.n	8005de2 <USBD_GetConfig+0x4a>
 8005dca:	e012      	b.n	8005df2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	3308      	adds	r3, #8
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	4619      	mov	r1, r3
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f8c7 	bl	8005f6e <USBD_CtlSendData>
        break;
 8005de0:	e00c      	b.n	8005dfc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	3304      	adds	r3, #4
 8005de6:	2201      	movs	r2, #1
 8005de8:	4619      	mov	r1, r3
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f8bf 	bl	8005f6e <USBD_CtlSendData>
        break;
 8005df0:	e004      	b.n	8005dfc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005df2:	6839      	ldr	r1, [r7, #0]
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 f8a9 	bl	8005f4c <USBD_CtlError>
        break;
 8005dfa:	bf00      	nop
}
 8005dfc:	bf00      	nop
 8005dfe:	3708      	adds	r7, #8
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	3b01      	subs	r3, #1
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d81e      	bhi.n	8005e5a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	88db      	ldrh	r3, [r3, #6]
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d004      	beq.n	8005e2e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005e24:	6839      	ldr	r1, [r7, #0]
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f890 	bl	8005f4c <USBD_CtlError>
        break;
 8005e2c:	e01a      	b.n	8005e64 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d005      	beq.n	8005e4a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	f043 0202 	orr.w	r2, r3, #2
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	330c      	adds	r3, #12
 8005e4e:	2202      	movs	r2, #2
 8005e50:	4619      	mov	r1, r3
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f88b 	bl	8005f6e <USBD_CtlSendData>
      break;
 8005e58:	e004      	b.n	8005e64 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005e5a:	6839      	ldr	r1, [r7, #0]
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 f875 	bl	8005f4c <USBD_CtlError>
      break;
 8005e62:	bf00      	nop
  }
}
 8005e64:	bf00      	nop
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	885b      	ldrh	r3, [r3, #2]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d106      	bne.n	8005e8c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f8ae 	bl	8005fe8 <USBD_CtlSendStatus>
  }
}
 8005e8c:	bf00      	nop
 8005e8e:	3708      	adds	r7, #8
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d80b      	bhi.n	8005ec4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	885b      	ldrh	r3, [r3, #2]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d10c      	bne.n	8005ece <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 f893 	bl	8005fe8 <USBD_CtlSendStatus>
      }
      break;
 8005ec2:	e004      	b.n	8005ece <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005ec4:	6839      	ldr	r1, [r7, #0]
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f840 	bl	8005f4c <USBD_CtlError>
      break;
 8005ecc:	e000      	b.n	8005ed0 <USBD_ClrFeature+0x3c>
      break;
 8005ece:	bf00      	nop
  }
}
 8005ed0:	bf00      	nop
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	781a      	ldrb	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	781a      	ldrb	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	3301      	adds	r3, #1
 8005f00:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f7ff fa91 	bl	800542a <SWAPBYTE>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	3301      	adds	r3, #1
 8005f14:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005f1c:	68f8      	ldr	r0, [r7, #12]
 8005f1e:	f7ff fa84 	bl	800542a <SWAPBYTE>
 8005f22:	4603      	mov	r3, r0
 8005f24:	461a      	mov	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	3301      	adds	r3, #1
 8005f34:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f7ff fa77 	bl	800542a <SWAPBYTE>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	461a      	mov	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	80da      	strh	r2, [r3, #6]
}
 8005f44:	bf00      	nop
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f56:	2180      	movs	r1, #128	; 0x80
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f93b 	bl	80061d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005f5e:	2100      	movs	r1, #0
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f937 	bl	80061d4 <USBD_LL_StallEP>
}
 8005f66:	bf00      	nop
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b084      	sub	sp, #16
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	60f8      	str	r0, [r7, #12]
 8005f76:	60b9      	str	r1, [r7, #8]
 8005f78:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	2100      	movs	r1, #0
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f000 f9a6 	bl	80062e6 <USBD_LL_Transmit>

  return USBD_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	2100      	movs	r1, #0
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 f995 	bl	80062e6 <USBD_LL_Transmit>

  return USBD_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b084      	sub	sp, #16
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	60f8      	str	r0, [r7, #12]
 8005fce:	60b9      	str	r1, [r7, #8]
 8005fd0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f000 f9a5 	bl	8006328 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2204      	movs	r2, #4
 8005ff4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f971 	bl	80062e6 <USBD_LL_Transmit>

  return USBD_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b082      	sub	sp, #8
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2205      	movs	r2, #5
 800601a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800601e:	2300      	movs	r3, #0
 8006020:	2200      	movs	r2, #0
 8006022:	2100      	movs	r1, #0
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f97f 	bl	8006328 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8006048:	4619      	mov	r1, r3
 800604a:	4610      	mov	r0, r2
 800604c:	f7fe fff1 	bl	8005032 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8006050:	bf00      	nop
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	460b      	mov	r3, r1
 8006062:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800606a:	78fa      	ldrb	r2, [r7, #3]
 800606c:	6879      	ldr	r1, [r7, #4]
 800606e:	4613      	mov	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	00db      	lsls	r3, r3, #3
 8006076:	440b      	add	r3, r1
 8006078:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	78fb      	ldrb	r3, [r7, #3]
 8006080:	4619      	mov	r1, r3
 8006082:	f7ff f82b 	bl	80050dc <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8006086:	bf00      	nop
 8006088:	3708      	adds	r7, #8
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b082      	sub	sp, #8
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
 8006096:	460b      	mov	r3, r1
 8006098:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 80060a0:	78fa      	ldrb	r2, [r7, #3]
 80060a2:	6879      	ldr	r1, [r7, #4]
 80060a4:	4613      	mov	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	4413      	add	r3, r2
 80060aa:	00db      	lsls	r3, r3, #3
 80060ac:	440b      	add	r3, r1
 80060ae:	3324      	adds	r3, #36	; 0x24
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	78fb      	ldrb	r3, [r7, #3]
 80060b4:	4619      	mov	r1, r3
 80060b6:	f7ff f874 	bl	80051a2 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80060ba:	bf00      	nop
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b082      	sub	sp, #8
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7ff f988 	bl	80053e6 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80060d6:	bf00      	nop
 80060d8:	3708      	adds	r7, #8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b084      	sub	sp, #16
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80060e6:	2301      	movs	r3, #1
 80060e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	795b      	ldrb	r3, [r3, #5]
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d001      	beq.n	80060f6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80060f2:	f7fa f90d 	bl	8000310 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80060fc:	7bfa      	ldrb	r2, [r7, #15]
 80060fe:	4611      	mov	r1, r2
 8006100:	4618      	mov	r0, r3
 8006102:	f7ff f932 	bl	800536a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff f8de 	bl	80052ce <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8006112:	bf00      	nop
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
	...

0800611c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800612a:	4618      	mov	r0, r3
 800612c:	f7ff f92d 	bl	800538a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	7a5b      	ldrb	r3, [r3, #9]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d005      	beq.n	8006144 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006138:	4b04      	ldr	r3, [pc, #16]	; (800614c <HAL_PCD_SuspendCallback+0x30>)
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	4a03      	ldr	r2, [pc, #12]	; (800614c <HAL_PCD_SuspendCallback+0x30>)
 800613e:	f043 0306 	orr.w	r3, r3, #6
 8006142:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8006144:	bf00      	nop
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	e000ed00 	.word	0xe000ed00

08006150 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	7a5b      	ldrb	r3, [r3, #9]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d007      	beq.n	8006170 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006160:	4b08      	ldr	r3, [pc, #32]	; (8006184 <HAL_PCD_ResumeCallback+0x34>)
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	4a07      	ldr	r2, [pc, #28]	; (8006184 <HAL_PCD_ResumeCallback+0x34>)
 8006166:	f023 0306 	bic.w	r3, r3, #6
 800616a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800616c:	f000 f934 	bl	80063d8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006176:	4618      	mov	r0, r3
 8006178:	f7ff f91d 	bl	80053b6 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800617c:	bf00      	nop
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	e000ed00 	.word	0xe000ed00

08006188 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	4608      	mov	r0, r1
 8006192:	4611      	mov	r1, r2
 8006194:	461a      	mov	r2, r3
 8006196:	4603      	mov	r3, r0
 8006198:	70fb      	strb	r3, [r7, #3]
 800619a:	460b      	mov	r3, r1
 800619c:	70bb      	strb	r3, [r7, #2]
 800619e:	4613      	mov	r3, r2
 80061a0:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061a6:	2300      	movs	r3, #0
 80061a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80061b0:	78bb      	ldrb	r3, [r7, #2]
 80061b2:	883a      	ldrh	r2, [r7, #0]
 80061b4:	78f9      	ldrb	r1, [r7, #3]
 80061b6:	f7fa fe00 	bl	8000dba <HAL_PCD_EP_Open>
 80061ba:	4603      	mov	r3, r0
 80061bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061be:	7bfb      	ldrb	r3, [r7, #15]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f000 f90f 	bl	80063e4 <USBD_Get_USB_Status>
 80061c6:	4603      	mov	r3, r0
 80061c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80061ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	460b      	mov	r3, r1
 80061de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80061e0:	2300      	movs	r3, #0
 80061e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061e4:	2300      	movs	r3, #0
 80061e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80061ee:	78fa      	ldrb	r2, [r7, #3]
 80061f0:	4611      	mov	r1, r2
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7fa fea6 	bl	8000f44 <HAL_PCD_EP_SetStall>
 80061f8:	4603      	mov	r3, r0
 80061fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 f8f0 	bl	80063e4 <USBD_Get_USB_Status>
 8006204:	4603      	mov	r3, r0
 8006206:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006208:	7bbb      	ldrb	r3, [r7, #14]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006212:	b580      	push	{r7, lr}
 8006214:	b084      	sub	sp, #16
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
 800621a:	460b      	mov	r3, r1
 800621c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800621e:	2300      	movs	r3, #0
 8006220:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006222:	2300      	movs	r3, #0
 8006224:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800622c:	78fa      	ldrb	r2, [r7, #3]
 800622e:	4611      	mov	r1, r2
 8006230:	4618      	mov	r0, r3
 8006232:	f7fa fed9 	bl	8000fe8 <HAL_PCD_EP_ClrStall>
 8006236:	4603      	mov	r3, r0
 8006238:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800623a:	7bfb      	ldrb	r3, [r7, #15]
 800623c:	4618      	mov	r0, r3
 800623e:	f000 f8d1 	bl	80063e4 <USBD_Get_USB_Status>
 8006242:	4603      	mov	r3, r0
 8006244:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006246:	7bbb      	ldrb	r3, [r7, #14]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	460b      	mov	r3, r1
 800625a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006262:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006264:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006268:	2b00      	cmp	r3, #0
 800626a:	da0b      	bge.n	8006284 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800626c:	78fb      	ldrb	r3, [r7, #3]
 800626e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006272:	68f9      	ldr	r1, [r7, #12]
 8006274:	4613      	mov	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	00db      	lsls	r3, r3, #3
 800627c:	440b      	add	r3, r1
 800627e:	3312      	adds	r3, #18
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	e00b      	b.n	800629c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006284:	78fb      	ldrb	r3, [r7, #3]
 8006286:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800628a:	68f9      	ldr	r1, [r7, #12]
 800628c:	4613      	mov	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	00db      	lsls	r3, r3, #3
 8006294:	440b      	add	r3, r1
 8006296:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800629a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800629c:	4618      	mov	r0, r3
 800629e:	3714      	adds	r7, #20
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	460b      	mov	r3, r1
 80062b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062b4:	2300      	movs	r3, #0
 80062b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062b8:	2300      	movs	r3, #0
 80062ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80062c2:	78fa      	ldrb	r2, [r7, #3]
 80062c4:	4611      	mov	r1, r2
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fa fd53 	bl	8000d72 <HAL_PCD_SetAddress>
 80062cc:	4603      	mov	r3, r0
 80062ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 f886 	bl	80063e4 <USBD_Get_USB_Status>
 80062d8:	4603      	mov	r3, r0
 80062da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80062dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b086      	sub	sp, #24
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	60f8      	str	r0, [r7, #12]
 80062ee:	607a      	str	r2, [r7, #4]
 80062f0:	603b      	str	r3, [r7, #0]
 80062f2:	460b      	mov	r3, r1
 80062f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062f6:	2300      	movs	r3, #0
 80062f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062fa:	2300      	movs	r3, #0
 80062fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006304:	7af9      	ldrb	r1, [r7, #11]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	f7fa fde4 	bl	8000ed6 <HAL_PCD_EP_Transmit>
 800630e:	4603      	mov	r3, r0
 8006310:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006312:	7dfb      	ldrb	r3, [r7, #23]
 8006314:	4618      	mov	r0, r3
 8006316:	f000 f865 	bl	80063e4 <USBD_Get_USB_Status>
 800631a:	4603      	mov	r3, r0
 800631c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800631e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006320:	4618      	mov	r0, r3
 8006322:	3718      	adds	r7, #24
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	607a      	str	r2, [r7, #4]
 8006332:	603b      	str	r3, [r7, #0]
 8006334:	460b      	mov	r3, r1
 8006336:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006338:	2300      	movs	r3, #0
 800633a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800633c:	2300      	movs	r3, #0
 800633e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006346:	7af9      	ldrb	r1, [r7, #11]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	f7fa fd92 	bl	8000e74 <HAL_PCD_EP_Receive>
 8006350:	4603      	mov	r3, r0
 8006352:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006354:	7dfb      	ldrb	r3, [r7, #23]
 8006356:	4618      	mov	r0, r3
 8006358:	f000 f844 	bl	80063e4 <USBD_Get_USB_Status>
 800635c:	4603      	mov	r3, r0
 800635e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006360:	7dbb      	ldrb	r3, [r7, #22]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3718      	adds	r7, #24
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
	...

0800636c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	460b      	mov	r3, r1
 8006376:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8006378:	78fb      	ldrb	r3, [r7, #3]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d002      	beq.n	8006384 <HAL_PCDEx_LPM_Callback+0x18>
 800637e:	2b01      	cmp	r3, #1
 8006380:	d013      	beq.n	80063aa <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8006382:	e023      	b.n	80063cc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	7a5b      	ldrb	r3, [r3, #9]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d007      	beq.n	800639c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800638c:	f000 f824 	bl	80063d8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006390:	4b10      	ldr	r3, [pc, #64]	; (80063d4 <HAL_PCDEx_LPM_Callback+0x68>)
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	4a0f      	ldr	r2, [pc, #60]	; (80063d4 <HAL_PCDEx_LPM_Callback+0x68>)
 8006396:	f023 0306 	bic.w	r3, r3, #6
 800639a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7ff f807 	bl	80053b6 <USBD_LL_Resume>
    break;
 80063a8:	e010      	b.n	80063cc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7fe ffea 	bl	800538a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	7a5b      	ldrb	r3, [r3, #9]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d005      	beq.n	80063ca <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80063be:	4b05      	ldr	r3, [pc, #20]	; (80063d4 <HAL_PCDEx_LPM_Callback+0x68>)
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	4a04      	ldr	r2, [pc, #16]	; (80063d4 <HAL_PCDEx_LPM_Callback+0x68>)
 80063c4:	f043 0306 	orr.w	r3, r3, #6
 80063c8:	6113      	str	r3, [r2, #16]
    break;
 80063ca:	bf00      	nop
}
 80063cc:	bf00      	nop
 80063ce:	3708      	adds	r7, #8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	e000ed00 	.word	0xe000ed00

080063d8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80063dc:	f7f9 ff4c 	bl	8000278 <SystemClock_Config>
}
 80063e0:	bf00      	nop
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	4603      	mov	r3, r0
 80063ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063ee:	2300      	movs	r3, #0
 80063f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80063f2:	79fb      	ldrb	r3, [r7, #7]
 80063f4:	2b03      	cmp	r3, #3
 80063f6:	d817      	bhi.n	8006428 <USBD_Get_USB_Status+0x44>
 80063f8:	a201      	add	r2, pc, #4	; (adr r2, 8006400 <USBD_Get_USB_Status+0x1c>)
 80063fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fe:	bf00      	nop
 8006400:	08006411 	.word	0x08006411
 8006404:	08006417 	.word	0x08006417
 8006408:	0800641d 	.word	0x0800641d
 800640c:	08006423 	.word	0x08006423
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006410:	2300      	movs	r3, #0
 8006412:	73fb      	strb	r3, [r7, #15]
    break;
 8006414:	e00b      	b.n	800642e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006416:	2303      	movs	r3, #3
 8006418:	73fb      	strb	r3, [r7, #15]
    break;
 800641a:	e008      	b.n	800642e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800641c:	2301      	movs	r3, #1
 800641e:	73fb      	strb	r3, [r7, #15]
    break;
 8006420:	e005      	b.n	800642e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006422:	2303      	movs	r3, #3
 8006424:	73fb      	strb	r3, [r7, #15]
    break;
 8006426:	e002      	b.n	800642e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006428:	2303      	movs	r3, #3
 800642a:	73fb      	strb	r3, [r7, #15]
    break;
 800642c:	bf00      	nop
  }
  return usb_status;
 800642e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <main>:


#include "main.h"

int main(void)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	af00      	add	r7, sp, #0
  hwInit();
 8006440:	f7fa f862 	bl	8000508 <hwInit>
  apInit();
 8006444:	f7f9 fee8 	bl	8000218 <apInit>

  apMain();
 8006448:	f7f9 feed 	bl	8000226 <apMain>
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	bd80      	pop	{r7, pc}

08006452 <memset>:
 8006452:	4402      	add	r2, r0
 8006454:	4603      	mov	r3, r0
 8006456:	4293      	cmp	r3, r2
 8006458:	d100      	bne.n	800645c <memset+0xa>
 800645a:	4770      	bx	lr
 800645c:	f803 1b01 	strb.w	r1, [r3], #1
 8006460:	e7f9      	b.n	8006456 <memset+0x4>
	...

08006464 <__libc_init_array>:
 8006464:	b570      	push	{r4, r5, r6, lr}
 8006466:	4d0d      	ldr	r5, [pc, #52]	; (800649c <__libc_init_array+0x38>)
 8006468:	4c0d      	ldr	r4, [pc, #52]	; (80064a0 <__libc_init_array+0x3c>)
 800646a:	1b64      	subs	r4, r4, r5
 800646c:	10a4      	asrs	r4, r4, #2
 800646e:	2600      	movs	r6, #0
 8006470:	42a6      	cmp	r6, r4
 8006472:	d109      	bne.n	8006488 <__libc_init_array+0x24>
 8006474:	4d0b      	ldr	r5, [pc, #44]	; (80064a4 <__libc_init_array+0x40>)
 8006476:	4c0c      	ldr	r4, [pc, #48]	; (80064a8 <__libc_init_array+0x44>)
 8006478:	f000 f818 	bl	80064ac <_init>
 800647c:	1b64      	subs	r4, r4, r5
 800647e:	10a4      	asrs	r4, r4, #2
 8006480:	2600      	movs	r6, #0
 8006482:	42a6      	cmp	r6, r4
 8006484:	d105      	bne.n	8006492 <__libc_init_array+0x2e>
 8006486:	bd70      	pop	{r4, r5, r6, pc}
 8006488:	f855 3b04 	ldr.w	r3, [r5], #4
 800648c:	4798      	blx	r3
 800648e:	3601      	adds	r6, #1
 8006490:	e7ee      	b.n	8006470 <__libc_init_array+0xc>
 8006492:	f855 3b04 	ldr.w	r3, [r5], #4
 8006496:	4798      	blx	r3
 8006498:	3601      	adds	r6, #1
 800649a:	e7f2      	b.n	8006482 <__libc_init_array+0x1e>
 800649c:	080064dc 	.word	0x080064dc
 80064a0:	080064dc 	.word	0x080064dc
 80064a4:	080064dc 	.word	0x080064dc
 80064a8:	080064e0 	.word	0x080064e0

080064ac <_init>:
 80064ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ae:	bf00      	nop
 80064b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064b2:	bc08      	pop	{r3}
 80064b4:	469e      	mov	lr, r3
 80064b6:	4770      	bx	lr

080064b8 <_fini>:
 80064b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ba:	bf00      	nop
 80064bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064be:	bc08      	pop	{r3}
 80064c0:	469e      	mov	lr, r3
 80064c2:	4770      	bx	lr
