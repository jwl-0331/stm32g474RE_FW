
stm32g474_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08007800  08007800  00007800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010700  080079e0  080079e0  000079e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  080180e0  080180e0  000180e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080188a4  080188a4  00020360  2**0
                  CONTENTS
  4 .ARM          00000008  080188a4  080188a4  000188a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080188ac  080188ac  00020360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080188ac  080188ac  000188ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080188b0  080188b0  000188b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  080188b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00020360  2**0
                  CONTENTS
 10 .bss          00003340  20000360  20000360  00020360  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200036a0  200036a0  00020360  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020390  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e695  00000000  00000000  000203d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005834  00000000  00000000  0003ea68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018d8  00000000  00000000  000442a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000012a7  00000000  00000000  00045b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002d231  00000000  00000000  00046e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000277e8  00000000  00000000  00074050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f8652  00000000  00000000  0009b838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000075ec  00000000  00000000  00193e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  0019b478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080079e0 <__do_global_dtors_aux>:
 80079e0:	b510      	push	{r4, lr}
 80079e2:	4c05      	ldr	r4, [pc, #20]	; (80079f8 <__do_global_dtors_aux+0x18>)
 80079e4:	7823      	ldrb	r3, [r4, #0]
 80079e6:	b933      	cbnz	r3, 80079f6 <__do_global_dtors_aux+0x16>
 80079e8:	4b04      	ldr	r3, [pc, #16]	; (80079fc <__do_global_dtors_aux+0x1c>)
 80079ea:	b113      	cbz	r3, 80079f2 <__do_global_dtors_aux+0x12>
 80079ec:	4804      	ldr	r0, [pc, #16]	; (8007a00 <__do_global_dtors_aux+0x20>)
 80079ee:	f3af 8000 	nop.w
 80079f2:	2301      	movs	r3, #1
 80079f4:	7023      	strb	r3, [r4, #0]
 80079f6:	bd10      	pop	{r4, pc}
 80079f8:	20000360 	.word	0x20000360
 80079fc:	00000000 	.word	0x00000000
 8007a00:	080180c8 	.word	0x080180c8

08007a04 <frame_dummy>:
 8007a04:	b508      	push	{r3, lr}
 8007a06:	4b03      	ldr	r3, [pc, #12]	; (8007a14 <frame_dummy+0x10>)
 8007a08:	b11b      	cbz	r3, 8007a12 <frame_dummy+0xe>
 8007a0a:	4903      	ldr	r1, [pc, #12]	; (8007a18 <frame_dummy+0x14>)
 8007a0c:	4803      	ldr	r0, [pc, #12]	; (8007a1c <frame_dummy+0x18>)
 8007a0e:	f3af 8000 	nop.w
 8007a12:	bd08      	pop	{r3, pc}
 8007a14:	00000000 	.word	0x00000000
 8007a18:	20000364 	.word	0x20000364
 8007a1c:	080180c8 	.word	0x080180c8

08007a20 <strcmp>:
 8007a20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a28:	2a01      	cmp	r2, #1
 8007a2a:	bf28      	it	cs
 8007a2c:	429a      	cmpcs	r2, r3
 8007a2e:	d0f7      	beq.n	8007a20 <strcmp>
 8007a30:	1ad0      	subs	r0, r2, r3
 8007a32:	4770      	bx	lr
	...

08007a40 <memchr>:
 8007a40:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8007a44:	2a10      	cmp	r2, #16
 8007a46:	db2b      	blt.n	8007aa0 <memchr+0x60>
 8007a48:	f010 0f07 	tst.w	r0, #7
 8007a4c:	d008      	beq.n	8007a60 <memchr+0x20>
 8007a4e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007a52:	3a01      	subs	r2, #1
 8007a54:	428b      	cmp	r3, r1
 8007a56:	d02d      	beq.n	8007ab4 <memchr+0x74>
 8007a58:	f010 0f07 	tst.w	r0, #7
 8007a5c:	b342      	cbz	r2, 8007ab0 <memchr+0x70>
 8007a5e:	d1f6      	bne.n	8007a4e <memchr+0xe>
 8007a60:	b4f0      	push	{r4, r5, r6, r7}
 8007a62:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8007a66:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8007a6a:	f022 0407 	bic.w	r4, r2, #7
 8007a6e:	f07f 0700 	mvns.w	r7, #0
 8007a72:	2300      	movs	r3, #0
 8007a74:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8007a78:	3c08      	subs	r4, #8
 8007a7a:	ea85 0501 	eor.w	r5, r5, r1
 8007a7e:	ea86 0601 	eor.w	r6, r6, r1
 8007a82:	fa85 f547 	uadd8	r5, r5, r7
 8007a86:	faa3 f587 	sel	r5, r3, r7
 8007a8a:	fa86 f647 	uadd8	r6, r6, r7
 8007a8e:	faa5 f687 	sel	r6, r5, r7
 8007a92:	b98e      	cbnz	r6, 8007ab8 <memchr+0x78>
 8007a94:	d1ee      	bne.n	8007a74 <memchr+0x34>
 8007a96:	bcf0      	pop	{r4, r5, r6, r7}
 8007a98:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8007a9c:	f002 0207 	and.w	r2, r2, #7
 8007aa0:	b132      	cbz	r2, 8007ab0 <memchr+0x70>
 8007aa2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007aa6:	3a01      	subs	r2, #1
 8007aa8:	ea83 0301 	eor.w	r3, r3, r1
 8007aac:	b113      	cbz	r3, 8007ab4 <memchr+0x74>
 8007aae:	d1f8      	bne.n	8007aa2 <memchr+0x62>
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	4770      	bx	lr
 8007ab4:	3801      	subs	r0, #1
 8007ab6:	4770      	bx	lr
 8007ab8:	2d00      	cmp	r5, #0
 8007aba:	bf06      	itte	eq
 8007abc:	4635      	moveq	r5, r6
 8007abe:	3803      	subeq	r0, #3
 8007ac0:	3807      	subne	r0, #7
 8007ac2:	f015 0f01 	tst.w	r5, #1
 8007ac6:	d107      	bne.n	8007ad8 <memchr+0x98>
 8007ac8:	3001      	adds	r0, #1
 8007aca:	f415 7f80 	tst.w	r5, #256	; 0x100
 8007ace:	bf02      	ittt	eq
 8007ad0:	3001      	addeq	r0, #1
 8007ad2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8007ad6:	3001      	addeq	r0, #1
 8007ad8:	bcf0      	pop	{r4, r5, r6, r7}
 8007ada:	3801      	subs	r0, #1
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop

08007ae0 <__aeabi_drsub>:
 8007ae0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8007ae4:	e002      	b.n	8007aec <__adddf3>
 8007ae6:	bf00      	nop

08007ae8 <__aeabi_dsub>:
 8007ae8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08007aec <__adddf3>:
 8007aec:	b530      	push	{r4, r5, lr}
 8007aee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8007af2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007af6:	ea94 0f05 	teq	r4, r5
 8007afa:	bf08      	it	eq
 8007afc:	ea90 0f02 	teqeq	r0, r2
 8007b00:	bf1f      	itttt	ne
 8007b02:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007b06:	ea55 0c02 	orrsne.w	ip, r5, r2
 8007b0a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8007b0e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007b12:	f000 80e2 	beq.w	8007cda <__adddf3+0x1ee>
 8007b16:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8007b1a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8007b1e:	bfb8      	it	lt
 8007b20:	426d      	neglt	r5, r5
 8007b22:	dd0c      	ble.n	8007b3e <__adddf3+0x52>
 8007b24:	442c      	add	r4, r5
 8007b26:	ea80 0202 	eor.w	r2, r0, r2
 8007b2a:	ea81 0303 	eor.w	r3, r1, r3
 8007b2e:	ea82 0000 	eor.w	r0, r2, r0
 8007b32:	ea83 0101 	eor.w	r1, r3, r1
 8007b36:	ea80 0202 	eor.w	r2, r0, r2
 8007b3a:	ea81 0303 	eor.w	r3, r1, r3
 8007b3e:	2d36      	cmp	r5, #54	; 0x36
 8007b40:	bf88      	it	hi
 8007b42:	bd30      	pophi	{r4, r5, pc}
 8007b44:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8007b48:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007b4c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8007b50:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8007b54:	d002      	beq.n	8007b5c <__adddf3+0x70>
 8007b56:	4240      	negs	r0, r0
 8007b58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007b5c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8007b60:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8007b64:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8007b68:	d002      	beq.n	8007b70 <__adddf3+0x84>
 8007b6a:	4252      	negs	r2, r2
 8007b6c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8007b70:	ea94 0f05 	teq	r4, r5
 8007b74:	f000 80a7 	beq.w	8007cc6 <__adddf3+0x1da>
 8007b78:	f1a4 0401 	sub.w	r4, r4, #1
 8007b7c:	f1d5 0e20 	rsbs	lr, r5, #32
 8007b80:	db0d      	blt.n	8007b9e <__adddf3+0xb2>
 8007b82:	fa02 fc0e 	lsl.w	ip, r2, lr
 8007b86:	fa22 f205 	lsr.w	r2, r2, r5
 8007b8a:	1880      	adds	r0, r0, r2
 8007b8c:	f141 0100 	adc.w	r1, r1, #0
 8007b90:	fa03 f20e 	lsl.w	r2, r3, lr
 8007b94:	1880      	adds	r0, r0, r2
 8007b96:	fa43 f305 	asr.w	r3, r3, r5
 8007b9a:	4159      	adcs	r1, r3
 8007b9c:	e00e      	b.n	8007bbc <__adddf3+0xd0>
 8007b9e:	f1a5 0520 	sub.w	r5, r5, #32
 8007ba2:	f10e 0e20 	add.w	lr, lr, #32
 8007ba6:	2a01      	cmp	r2, #1
 8007ba8:	fa03 fc0e 	lsl.w	ip, r3, lr
 8007bac:	bf28      	it	cs
 8007bae:	f04c 0c02 	orrcs.w	ip, ip, #2
 8007bb2:	fa43 f305 	asr.w	r3, r3, r5
 8007bb6:	18c0      	adds	r0, r0, r3
 8007bb8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8007bbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007bc0:	d507      	bpl.n	8007bd2 <__adddf3+0xe6>
 8007bc2:	f04f 0e00 	mov.w	lr, #0
 8007bc6:	f1dc 0c00 	rsbs	ip, ip, #0
 8007bca:	eb7e 0000 	sbcs.w	r0, lr, r0
 8007bce:	eb6e 0101 	sbc.w	r1, lr, r1
 8007bd2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007bd6:	d31b      	bcc.n	8007c10 <__adddf3+0x124>
 8007bd8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007bdc:	d30c      	bcc.n	8007bf8 <__adddf3+0x10c>
 8007bde:	0849      	lsrs	r1, r1, #1
 8007be0:	ea5f 0030 	movs.w	r0, r0, rrx
 8007be4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8007be8:	f104 0401 	add.w	r4, r4, #1
 8007bec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8007bf0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8007bf4:	f080 809a 	bcs.w	8007d2c <__adddf3+0x240>
 8007bf8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007bfc:	bf08      	it	eq
 8007bfe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007c02:	f150 0000 	adcs.w	r0, r0, #0
 8007c06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007c0a:	ea41 0105 	orr.w	r1, r1, r5
 8007c0e:	bd30      	pop	{r4, r5, pc}
 8007c10:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8007c14:	4140      	adcs	r0, r0
 8007c16:	eb41 0101 	adc.w	r1, r1, r1
 8007c1a:	3c01      	subs	r4, #1
 8007c1c:	bf28      	it	cs
 8007c1e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8007c22:	d2e9      	bcs.n	8007bf8 <__adddf3+0x10c>
 8007c24:	f091 0f00 	teq	r1, #0
 8007c28:	bf04      	itt	eq
 8007c2a:	4601      	moveq	r1, r0
 8007c2c:	2000      	moveq	r0, #0
 8007c2e:	fab1 f381 	clz	r3, r1
 8007c32:	bf08      	it	eq
 8007c34:	3320      	addeq	r3, #32
 8007c36:	f1a3 030b 	sub.w	r3, r3, #11
 8007c3a:	f1b3 0220 	subs.w	r2, r3, #32
 8007c3e:	da0c      	bge.n	8007c5a <__adddf3+0x16e>
 8007c40:	320c      	adds	r2, #12
 8007c42:	dd08      	ble.n	8007c56 <__adddf3+0x16a>
 8007c44:	f102 0c14 	add.w	ip, r2, #20
 8007c48:	f1c2 020c 	rsb	r2, r2, #12
 8007c4c:	fa01 f00c 	lsl.w	r0, r1, ip
 8007c50:	fa21 f102 	lsr.w	r1, r1, r2
 8007c54:	e00c      	b.n	8007c70 <__adddf3+0x184>
 8007c56:	f102 0214 	add.w	r2, r2, #20
 8007c5a:	bfd8      	it	le
 8007c5c:	f1c2 0c20 	rsble	ip, r2, #32
 8007c60:	fa01 f102 	lsl.w	r1, r1, r2
 8007c64:	fa20 fc0c 	lsr.w	ip, r0, ip
 8007c68:	bfdc      	itt	le
 8007c6a:	ea41 010c 	orrle.w	r1, r1, ip
 8007c6e:	4090      	lslle	r0, r2
 8007c70:	1ae4      	subs	r4, r4, r3
 8007c72:	bfa2      	ittt	ge
 8007c74:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8007c78:	4329      	orrge	r1, r5
 8007c7a:	bd30      	popge	{r4, r5, pc}
 8007c7c:	ea6f 0404 	mvn.w	r4, r4
 8007c80:	3c1f      	subs	r4, #31
 8007c82:	da1c      	bge.n	8007cbe <__adddf3+0x1d2>
 8007c84:	340c      	adds	r4, #12
 8007c86:	dc0e      	bgt.n	8007ca6 <__adddf3+0x1ba>
 8007c88:	f104 0414 	add.w	r4, r4, #20
 8007c8c:	f1c4 0220 	rsb	r2, r4, #32
 8007c90:	fa20 f004 	lsr.w	r0, r0, r4
 8007c94:	fa01 f302 	lsl.w	r3, r1, r2
 8007c98:	ea40 0003 	orr.w	r0, r0, r3
 8007c9c:	fa21 f304 	lsr.w	r3, r1, r4
 8007ca0:	ea45 0103 	orr.w	r1, r5, r3
 8007ca4:	bd30      	pop	{r4, r5, pc}
 8007ca6:	f1c4 040c 	rsb	r4, r4, #12
 8007caa:	f1c4 0220 	rsb	r2, r4, #32
 8007cae:	fa20 f002 	lsr.w	r0, r0, r2
 8007cb2:	fa01 f304 	lsl.w	r3, r1, r4
 8007cb6:	ea40 0003 	orr.w	r0, r0, r3
 8007cba:	4629      	mov	r1, r5
 8007cbc:	bd30      	pop	{r4, r5, pc}
 8007cbe:	fa21 f004 	lsr.w	r0, r1, r4
 8007cc2:	4629      	mov	r1, r5
 8007cc4:	bd30      	pop	{r4, r5, pc}
 8007cc6:	f094 0f00 	teq	r4, #0
 8007cca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8007cce:	bf06      	itte	eq
 8007cd0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8007cd4:	3401      	addeq	r4, #1
 8007cd6:	3d01      	subne	r5, #1
 8007cd8:	e74e      	b.n	8007b78 <__adddf3+0x8c>
 8007cda:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007cde:	bf18      	it	ne
 8007ce0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007ce4:	d029      	beq.n	8007d3a <__adddf3+0x24e>
 8007ce6:	ea94 0f05 	teq	r4, r5
 8007cea:	bf08      	it	eq
 8007cec:	ea90 0f02 	teqeq	r0, r2
 8007cf0:	d005      	beq.n	8007cfe <__adddf3+0x212>
 8007cf2:	ea54 0c00 	orrs.w	ip, r4, r0
 8007cf6:	bf04      	itt	eq
 8007cf8:	4619      	moveq	r1, r3
 8007cfa:	4610      	moveq	r0, r2
 8007cfc:	bd30      	pop	{r4, r5, pc}
 8007cfe:	ea91 0f03 	teq	r1, r3
 8007d02:	bf1e      	ittt	ne
 8007d04:	2100      	movne	r1, #0
 8007d06:	2000      	movne	r0, #0
 8007d08:	bd30      	popne	{r4, r5, pc}
 8007d0a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8007d0e:	d105      	bne.n	8007d1c <__adddf3+0x230>
 8007d10:	0040      	lsls	r0, r0, #1
 8007d12:	4149      	adcs	r1, r1
 8007d14:	bf28      	it	cs
 8007d16:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8007d1a:	bd30      	pop	{r4, r5, pc}
 8007d1c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8007d20:	bf3c      	itt	cc
 8007d22:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8007d26:	bd30      	popcc	{r4, r5, pc}
 8007d28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007d2c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8007d30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007d34:	f04f 0000 	mov.w	r0, #0
 8007d38:	bd30      	pop	{r4, r5, pc}
 8007d3a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007d3e:	bf1a      	itte	ne
 8007d40:	4619      	movne	r1, r3
 8007d42:	4610      	movne	r0, r2
 8007d44:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8007d48:	bf1c      	itt	ne
 8007d4a:	460b      	movne	r3, r1
 8007d4c:	4602      	movne	r2, r0
 8007d4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007d52:	bf06      	itte	eq
 8007d54:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8007d58:	ea91 0f03 	teqeq	r1, r3
 8007d5c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8007d60:	bd30      	pop	{r4, r5, pc}
 8007d62:	bf00      	nop

08007d64 <__aeabi_ui2d>:
 8007d64:	f090 0f00 	teq	r0, #0
 8007d68:	bf04      	itt	eq
 8007d6a:	2100      	moveq	r1, #0
 8007d6c:	4770      	bxeq	lr
 8007d6e:	b530      	push	{r4, r5, lr}
 8007d70:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007d74:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007d78:	f04f 0500 	mov.w	r5, #0
 8007d7c:	f04f 0100 	mov.w	r1, #0
 8007d80:	e750      	b.n	8007c24 <__adddf3+0x138>
 8007d82:	bf00      	nop

08007d84 <__aeabi_i2d>:
 8007d84:	f090 0f00 	teq	r0, #0
 8007d88:	bf04      	itt	eq
 8007d8a:	2100      	moveq	r1, #0
 8007d8c:	4770      	bxeq	lr
 8007d8e:	b530      	push	{r4, r5, lr}
 8007d90:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007d94:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007d98:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8007d9c:	bf48      	it	mi
 8007d9e:	4240      	negmi	r0, r0
 8007da0:	f04f 0100 	mov.w	r1, #0
 8007da4:	e73e      	b.n	8007c24 <__adddf3+0x138>
 8007da6:	bf00      	nop

08007da8 <__aeabi_f2d>:
 8007da8:	0042      	lsls	r2, r0, #1
 8007daa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8007dae:	ea4f 0131 	mov.w	r1, r1, rrx
 8007db2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8007db6:	bf1f      	itttt	ne
 8007db8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8007dbc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007dc0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8007dc4:	4770      	bxne	lr
 8007dc6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8007dca:	bf08      	it	eq
 8007dcc:	4770      	bxeq	lr
 8007dce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8007dd2:	bf04      	itt	eq
 8007dd4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8007dd8:	4770      	bxeq	lr
 8007dda:	b530      	push	{r4, r5, lr}
 8007ddc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8007de0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007de4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007de8:	e71c      	b.n	8007c24 <__adddf3+0x138>
 8007dea:	bf00      	nop

08007dec <__aeabi_ul2d>:
 8007dec:	ea50 0201 	orrs.w	r2, r0, r1
 8007df0:	bf08      	it	eq
 8007df2:	4770      	bxeq	lr
 8007df4:	b530      	push	{r4, r5, lr}
 8007df6:	f04f 0500 	mov.w	r5, #0
 8007dfa:	e00a      	b.n	8007e12 <__aeabi_l2d+0x16>

08007dfc <__aeabi_l2d>:
 8007dfc:	ea50 0201 	orrs.w	r2, r0, r1
 8007e00:	bf08      	it	eq
 8007e02:	4770      	bxeq	lr
 8007e04:	b530      	push	{r4, r5, lr}
 8007e06:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8007e0a:	d502      	bpl.n	8007e12 <__aeabi_l2d+0x16>
 8007e0c:	4240      	negs	r0, r0
 8007e0e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007e12:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007e16:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007e1a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8007e1e:	f43f aed8 	beq.w	8007bd2 <__adddf3+0xe6>
 8007e22:	f04f 0203 	mov.w	r2, #3
 8007e26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007e2a:	bf18      	it	ne
 8007e2c:	3203      	addne	r2, #3
 8007e2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8007e32:	bf18      	it	ne
 8007e34:	3203      	addne	r2, #3
 8007e36:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8007e3a:	f1c2 0320 	rsb	r3, r2, #32
 8007e3e:	fa00 fc03 	lsl.w	ip, r0, r3
 8007e42:	fa20 f002 	lsr.w	r0, r0, r2
 8007e46:	fa01 fe03 	lsl.w	lr, r1, r3
 8007e4a:	ea40 000e 	orr.w	r0, r0, lr
 8007e4e:	fa21 f102 	lsr.w	r1, r1, r2
 8007e52:	4414      	add	r4, r2
 8007e54:	e6bd      	b.n	8007bd2 <__adddf3+0xe6>
 8007e56:	bf00      	nop

08007e58 <__aeabi_dmul>:
 8007e58:	b570      	push	{r4, r5, r6, lr}
 8007e5a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8007e5e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8007e62:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8007e66:	bf1d      	ittte	ne
 8007e68:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007e6c:	ea94 0f0c 	teqne	r4, ip
 8007e70:	ea95 0f0c 	teqne	r5, ip
 8007e74:	f000 f8de 	bleq	8008034 <__aeabi_dmul+0x1dc>
 8007e78:	442c      	add	r4, r5
 8007e7a:	ea81 0603 	eor.w	r6, r1, r3
 8007e7e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8007e82:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8007e86:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8007e8a:	bf18      	it	ne
 8007e8c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8007e90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007e94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e98:	d038      	beq.n	8007f0c <__aeabi_dmul+0xb4>
 8007e9a:	fba0 ce02 	umull	ip, lr, r0, r2
 8007e9e:	f04f 0500 	mov.w	r5, #0
 8007ea2:	fbe1 e502 	umlal	lr, r5, r1, r2
 8007ea6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8007eaa:	fbe0 e503 	umlal	lr, r5, r0, r3
 8007eae:	f04f 0600 	mov.w	r6, #0
 8007eb2:	fbe1 5603 	umlal	r5, r6, r1, r3
 8007eb6:	f09c 0f00 	teq	ip, #0
 8007eba:	bf18      	it	ne
 8007ebc:	f04e 0e01 	orrne.w	lr, lr, #1
 8007ec0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8007ec4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8007ec8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8007ecc:	d204      	bcs.n	8007ed8 <__aeabi_dmul+0x80>
 8007ece:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8007ed2:	416d      	adcs	r5, r5
 8007ed4:	eb46 0606 	adc.w	r6, r6, r6
 8007ed8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8007edc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8007ee0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8007ee4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8007ee8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8007eec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8007ef0:	bf88      	it	hi
 8007ef2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8007ef6:	d81e      	bhi.n	8007f36 <__aeabi_dmul+0xde>
 8007ef8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8007efc:	bf08      	it	eq
 8007efe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8007f02:	f150 0000 	adcs.w	r0, r0, #0
 8007f06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007f0a:	bd70      	pop	{r4, r5, r6, pc}
 8007f0c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8007f10:	ea46 0101 	orr.w	r1, r6, r1
 8007f14:	ea40 0002 	orr.w	r0, r0, r2
 8007f18:	ea81 0103 	eor.w	r1, r1, r3
 8007f1c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8007f20:	bfc2      	ittt	gt
 8007f22:	ebd4 050c 	rsbsgt	r5, r4, ip
 8007f26:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8007f2a:	bd70      	popgt	{r4, r5, r6, pc}
 8007f2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007f30:	f04f 0e00 	mov.w	lr, #0
 8007f34:	3c01      	subs	r4, #1
 8007f36:	f300 80ab 	bgt.w	8008090 <__aeabi_dmul+0x238>
 8007f3a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8007f3e:	bfde      	ittt	le
 8007f40:	2000      	movle	r0, #0
 8007f42:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8007f46:	bd70      	pople	{r4, r5, r6, pc}
 8007f48:	f1c4 0400 	rsb	r4, r4, #0
 8007f4c:	3c20      	subs	r4, #32
 8007f4e:	da35      	bge.n	8007fbc <__aeabi_dmul+0x164>
 8007f50:	340c      	adds	r4, #12
 8007f52:	dc1b      	bgt.n	8007f8c <__aeabi_dmul+0x134>
 8007f54:	f104 0414 	add.w	r4, r4, #20
 8007f58:	f1c4 0520 	rsb	r5, r4, #32
 8007f5c:	fa00 f305 	lsl.w	r3, r0, r5
 8007f60:	fa20 f004 	lsr.w	r0, r0, r4
 8007f64:	fa01 f205 	lsl.w	r2, r1, r5
 8007f68:	ea40 0002 	orr.w	r0, r0, r2
 8007f6c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8007f70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007f74:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007f78:	fa21 f604 	lsr.w	r6, r1, r4
 8007f7c:	eb42 0106 	adc.w	r1, r2, r6
 8007f80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007f84:	bf08      	it	eq
 8007f86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007f8a:	bd70      	pop	{r4, r5, r6, pc}
 8007f8c:	f1c4 040c 	rsb	r4, r4, #12
 8007f90:	f1c4 0520 	rsb	r5, r4, #32
 8007f94:	fa00 f304 	lsl.w	r3, r0, r4
 8007f98:	fa20 f005 	lsr.w	r0, r0, r5
 8007f9c:	fa01 f204 	lsl.w	r2, r1, r4
 8007fa0:	ea40 0002 	orr.w	r0, r0, r2
 8007fa4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007fa8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007fac:	f141 0100 	adc.w	r1, r1, #0
 8007fb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007fb4:	bf08      	it	eq
 8007fb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007fba:	bd70      	pop	{r4, r5, r6, pc}
 8007fbc:	f1c4 0520 	rsb	r5, r4, #32
 8007fc0:	fa00 f205 	lsl.w	r2, r0, r5
 8007fc4:	ea4e 0e02 	orr.w	lr, lr, r2
 8007fc8:	fa20 f304 	lsr.w	r3, r0, r4
 8007fcc:	fa01 f205 	lsl.w	r2, r1, r5
 8007fd0:	ea43 0302 	orr.w	r3, r3, r2
 8007fd4:	fa21 f004 	lsr.w	r0, r1, r4
 8007fd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007fdc:	fa21 f204 	lsr.w	r2, r1, r4
 8007fe0:	ea20 0002 	bic.w	r0, r0, r2
 8007fe4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8007fe8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007fec:	bf08      	it	eq
 8007fee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007ff2:	bd70      	pop	{r4, r5, r6, pc}
 8007ff4:	f094 0f00 	teq	r4, #0
 8007ff8:	d10f      	bne.n	800801a <__aeabi_dmul+0x1c2>
 8007ffa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8007ffe:	0040      	lsls	r0, r0, #1
 8008000:	eb41 0101 	adc.w	r1, r1, r1
 8008004:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008008:	bf08      	it	eq
 800800a:	3c01      	subeq	r4, #1
 800800c:	d0f7      	beq.n	8007ffe <__aeabi_dmul+0x1a6>
 800800e:	ea41 0106 	orr.w	r1, r1, r6
 8008012:	f095 0f00 	teq	r5, #0
 8008016:	bf18      	it	ne
 8008018:	4770      	bxne	lr
 800801a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800801e:	0052      	lsls	r2, r2, #1
 8008020:	eb43 0303 	adc.w	r3, r3, r3
 8008024:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008028:	bf08      	it	eq
 800802a:	3d01      	subeq	r5, #1
 800802c:	d0f7      	beq.n	800801e <__aeabi_dmul+0x1c6>
 800802e:	ea43 0306 	orr.w	r3, r3, r6
 8008032:	4770      	bx	lr
 8008034:	ea94 0f0c 	teq	r4, ip
 8008038:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800803c:	bf18      	it	ne
 800803e:	ea95 0f0c 	teqne	r5, ip
 8008042:	d00c      	beq.n	800805e <__aeabi_dmul+0x206>
 8008044:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008048:	bf18      	it	ne
 800804a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800804e:	d1d1      	bne.n	8007ff4 <__aeabi_dmul+0x19c>
 8008050:	ea81 0103 	eor.w	r1, r1, r3
 8008054:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008058:	f04f 0000 	mov.w	r0, #0
 800805c:	bd70      	pop	{r4, r5, r6, pc}
 800805e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008062:	bf06      	itte	eq
 8008064:	4610      	moveq	r0, r2
 8008066:	4619      	moveq	r1, r3
 8008068:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800806c:	d019      	beq.n	80080a2 <__aeabi_dmul+0x24a>
 800806e:	ea94 0f0c 	teq	r4, ip
 8008072:	d102      	bne.n	800807a <__aeabi_dmul+0x222>
 8008074:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008078:	d113      	bne.n	80080a2 <__aeabi_dmul+0x24a>
 800807a:	ea95 0f0c 	teq	r5, ip
 800807e:	d105      	bne.n	800808c <__aeabi_dmul+0x234>
 8008080:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008084:	bf1c      	itt	ne
 8008086:	4610      	movne	r0, r2
 8008088:	4619      	movne	r1, r3
 800808a:	d10a      	bne.n	80080a2 <__aeabi_dmul+0x24a>
 800808c:	ea81 0103 	eor.w	r1, r1, r3
 8008090:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008094:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008098:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800809c:	f04f 0000 	mov.w	r0, #0
 80080a0:	bd70      	pop	{r4, r5, r6, pc}
 80080a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80080a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80080aa:	bd70      	pop	{r4, r5, r6, pc}

080080ac <__aeabi_ddiv>:
 80080ac:	b570      	push	{r4, r5, r6, lr}
 80080ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80080b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80080b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80080ba:	bf1d      	ittte	ne
 80080bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80080c0:	ea94 0f0c 	teqne	r4, ip
 80080c4:	ea95 0f0c 	teqne	r5, ip
 80080c8:	f000 f8a7 	bleq	800821a <__aeabi_ddiv+0x16e>
 80080cc:	eba4 0405 	sub.w	r4, r4, r5
 80080d0:	ea81 0e03 	eor.w	lr, r1, r3
 80080d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80080d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80080dc:	f000 8088 	beq.w	80081f0 <__aeabi_ddiv+0x144>
 80080e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80080e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80080e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80080ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80080f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80080f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80080f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80080fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008100:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008104:	429d      	cmp	r5, r3
 8008106:	bf08      	it	eq
 8008108:	4296      	cmpeq	r6, r2
 800810a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800810e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008112:	d202      	bcs.n	800811a <__aeabi_ddiv+0x6e>
 8008114:	085b      	lsrs	r3, r3, #1
 8008116:	ea4f 0232 	mov.w	r2, r2, rrx
 800811a:	1ab6      	subs	r6, r6, r2
 800811c:	eb65 0503 	sbc.w	r5, r5, r3
 8008120:	085b      	lsrs	r3, r3, #1
 8008122:	ea4f 0232 	mov.w	r2, r2, rrx
 8008126:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800812a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800812e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008132:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008136:	bf22      	ittt	cs
 8008138:	1ab6      	subcs	r6, r6, r2
 800813a:	4675      	movcs	r5, lr
 800813c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008140:	085b      	lsrs	r3, r3, #1
 8008142:	ea4f 0232 	mov.w	r2, r2, rrx
 8008146:	ebb6 0e02 	subs.w	lr, r6, r2
 800814a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800814e:	bf22      	ittt	cs
 8008150:	1ab6      	subcs	r6, r6, r2
 8008152:	4675      	movcs	r5, lr
 8008154:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008158:	085b      	lsrs	r3, r3, #1
 800815a:	ea4f 0232 	mov.w	r2, r2, rrx
 800815e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008162:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008166:	bf22      	ittt	cs
 8008168:	1ab6      	subcs	r6, r6, r2
 800816a:	4675      	movcs	r5, lr
 800816c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008170:	085b      	lsrs	r3, r3, #1
 8008172:	ea4f 0232 	mov.w	r2, r2, rrx
 8008176:	ebb6 0e02 	subs.w	lr, r6, r2
 800817a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800817e:	bf22      	ittt	cs
 8008180:	1ab6      	subcs	r6, r6, r2
 8008182:	4675      	movcs	r5, lr
 8008184:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008188:	ea55 0e06 	orrs.w	lr, r5, r6
 800818c:	d018      	beq.n	80081c0 <__aeabi_ddiv+0x114>
 800818e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008192:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008196:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800819a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800819e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80081a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80081a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80081aa:	d1c0      	bne.n	800812e <__aeabi_ddiv+0x82>
 80081ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80081b0:	d10b      	bne.n	80081ca <__aeabi_ddiv+0x11e>
 80081b2:	ea41 0100 	orr.w	r1, r1, r0
 80081b6:	f04f 0000 	mov.w	r0, #0
 80081ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80081be:	e7b6      	b.n	800812e <__aeabi_ddiv+0x82>
 80081c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80081c4:	bf04      	itt	eq
 80081c6:	4301      	orreq	r1, r0
 80081c8:	2000      	moveq	r0, #0
 80081ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80081ce:	bf88      	it	hi
 80081d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80081d4:	f63f aeaf 	bhi.w	8007f36 <__aeabi_dmul+0xde>
 80081d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80081dc:	bf04      	itt	eq
 80081de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80081e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80081e6:	f150 0000 	adcs.w	r0, r0, #0
 80081ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80081ee:	bd70      	pop	{r4, r5, r6, pc}
 80081f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80081f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80081f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80081fc:	bfc2      	ittt	gt
 80081fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008202:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008206:	bd70      	popgt	{r4, r5, r6, pc}
 8008208:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800820c:	f04f 0e00 	mov.w	lr, #0
 8008210:	3c01      	subs	r4, #1
 8008212:	e690      	b.n	8007f36 <__aeabi_dmul+0xde>
 8008214:	ea45 0e06 	orr.w	lr, r5, r6
 8008218:	e68d      	b.n	8007f36 <__aeabi_dmul+0xde>
 800821a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800821e:	ea94 0f0c 	teq	r4, ip
 8008222:	bf08      	it	eq
 8008224:	ea95 0f0c 	teqeq	r5, ip
 8008228:	f43f af3b 	beq.w	80080a2 <__aeabi_dmul+0x24a>
 800822c:	ea94 0f0c 	teq	r4, ip
 8008230:	d10a      	bne.n	8008248 <__aeabi_ddiv+0x19c>
 8008232:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008236:	f47f af34 	bne.w	80080a2 <__aeabi_dmul+0x24a>
 800823a:	ea95 0f0c 	teq	r5, ip
 800823e:	f47f af25 	bne.w	800808c <__aeabi_dmul+0x234>
 8008242:	4610      	mov	r0, r2
 8008244:	4619      	mov	r1, r3
 8008246:	e72c      	b.n	80080a2 <__aeabi_dmul+0x24a>
 8008248:	ea95 0f0c 	teq	r5, ip
 800824c:	d106      	bne.n	800825c <__aeabi_ddiv+0x1b0>
 800824e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008252:	f43f aefd 	beq.w	8008050 <__aeabi_dmul+0x1f8>
 8008256:	4610      	mov	r0, r2
 8008258:	4619      	mov	r1, r3
 800825a:	e722      	b.n	80080a2 <__aeabi_dmul+0x24a>
 800825c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008260:	bf18      	it	ne
 8008262:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008266:	f47f aec5 	bne.w	8007ff4 <__aeabi_dmul+0x19c>
 800826a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800826e:	f47f af0d 	bne.w	800808c <__aeabi_dmul+0x234>
 8008272:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008276:	f47f aeeb 	bne.w	8008050 <__aeabi_dmul+0x1f8>
 800827a:	e712      	b.n	80080a2 <__aeabi_dmul+0x24a>

0800827c <__gedf2>:
 800827c:	f04f 3cff 	mov.w	ip, #4294967295
 8008280:	e006      	b.n	8008290 <__cmpdf2+0x4>
 8008282:	bf00      	nop

08008284 <__ledf2>:
 8008284:	f04f 0c01 	mov.w	ip, #1
 8008288:	e002      	b.n	8008290 <__cmpdf2+0x4>
 800828a:	bf00      	nop

0800828c <__cmpdf2>:
 800828c:	f04f 0c01 	mov.w	ip, #1
 8008290:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008294:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008298:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800829c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80082a0:	bf18      	it	ne
 80082a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80082a6:	d01b      	beq.n	80082e0 <__cmpdf2+0x54>
 80082a8:	b001      	add	sp, #4
 80082aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80082ae:	bf0c      	ite	eq
 80082b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80082b4:	ea91 0f03 	teqne	r1, r3
 80082b8:	bf02      	ittt	eq
 80082ba:	ea90 0f02 	teqeq	r0, r2
 80082be:	2000      	moveq	r0, #0
 80082c0:	4770      	bxeq	lr
 80082c2:	f110 0f00 	cmn.w	r0, #0
 80082c6:	ea91 0f03 	teq	r1, r3
 80082ca:	bf58      	it	pl
 80082cc:	4299      	cmppl	r1, r3
 80082ce:	bf08      	it	eq
 80082d0:	4290      	cmpeq	r0, r2
 80082d2:	bf2c      	ite	cs
 80082d4:	17d8      	asrcs	r0, r3, #31
 80082d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80082da:	f040 0001 	orr.w	r0, r0, #1
 80082de:	4770      	bx	lr
 80082e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80082e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80082e8:	d102      	bne.n	80082f0 <__cmpdf2+0x64>
 80082ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80082ee:	d107      	bne.n	8008300 <__cmpdf2+0x74>
 80082f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80082f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80082f8:	d1d6      	bne.n	80082a8 <__cmpdf2+0x1c>
 80082fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80082fe:	d0d3      	beq.n	80082a8 <__cmpdf2+0x1c>
 8008300:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop

08008308 <__aeabi_cdrcmple>:
 8008308:	4684      	mov	ip, r0
 800830a:	4610      	mov	r0, r2
 800830c:	4662      	mov	r2, ip
 800830e:	468c      	mov	ip, r1
 8008310:	4619      	mov	r1, r3
 8008312:	4663      	mov	r3, ip
 8008314:	e000      	b.n	8008318 <__aeabi_cdcmpeq>
 8008316:	bf00      	nop

08008318 <__aeabi_cdcmpeq>:
 8008318:	b501      	push	{r0, lr}
 800831a:	f7ff ffb7 	bl	800828c <__cmpdf2>
 800831e:	2800      	cmp	r0, #0
 8008320:	bf48      	it	mi
 8008322:	f110 0f00 	cmnmi.w	r0, #0
 8008326:	bd01      	pop	{r0, pc}

08008328 <__aeabi_dcmpeq>:
 8008328:	f84d ed08 	str.w	lr, [sp, #-8]!
 800832c:	f7ff fff4 	bl	8008318 <__aeabi_cdcmpeq>
 8008330:	bf0c      	ite	eq
 8008332:	2001      	moveq	r0, #1
 8008334:	2000      	movne	r0, #0
 8008336:	f85d fb08 	ldr.w	pc, [sp], #8
 800833a:	bf00      	nop

0800833c <__aeabi_dcmplt>:
 800833c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008340:	f7ff ffea 	bl	8008318 <__aeabi_cdcmpeq>
 8008344:	bf34      	ite	cc
 8008346:	2001      	movcc	r0, #1
 8008348:	2000      	movcs	r0, #0
 800834a:	f85d fb08 	ldr.w	pc, [sp], #8
 800834e:	bf00      	nop

08008350 <__aeabi_dcmple>:
 8008350:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008354:	f7ff ffe0 	bl	8008318 <__aeabi_cdcmpeq>
 8008358:	bf94      	ite	ls
 800835a:	2001      	movls	r0, #1
 800835c:	2000      	movhi	r0, #0
 800835e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008362:	bf00      	nop

08008364 <__aeabi_dcmpge>:
 8008364:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008368:	f7ff ffce 	bl	8008308 <__aeabi_cdrcmple>
 800836c:	bf94      	ite	ls
 800836e:	2001      	movls	r0, #1
 8008370:	2000      	movhi	r0, #0
 8008372:	f85d fb08 	ldr.w	pc, [sp], #8
 8008376:	bf00      	nop

08008378 <__aeabi_dcmpgt>:
 8008378:	f84d ed08 	str.w	lr, [sp, #-8]!
 800837c:	f7ff ffc4 	bl	8008308 <__aeabi_cdrcmple>
 8008380:	bf34      	ite	cc
 8008382:	2001      	movcc	r0, #1
 8008384:	2000      	movcs	r0, #0
 8008386:	f85d fb08 	ldr.w	pc, [sp], #8
 800838a:	bf00      	nop

0800838c <__aeabi_dcmpun>:
 800838c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008390:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008394:	d102      	bne.n	800839c <__aeabi_dcmpun+0x10>
 8008396:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800839a:	d10a      	bne.n	80083b2 <__aeabi_dcmpun+0x26>
 800839c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80083a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80083a4:	d102      	bne.n	80083ac <__aeabi_dcmpun+0x20>
 80083a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80083aa:	d102      	bne.n	80083b2 <__aeabi_dcmpun+0x26>
 80083ac:	f04f 0000 	mov.w	r0, #0
 80083b0:	4770      	bx	lr
 80083b2:	f04f 0001 	mov.w	r0, #1
 80083b6:	4770      	bx	lr

080083b8 <__aeabi_d2uiz>:
 80083b8:	004a      	lsls	r2, r1, #1
 80083ba:	d211      	bcs.n	80083e0 <__aeabi_d2uiz+0x28>
 80083bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80083c0:	d211      	bcs.n	80083e6 <__aeabi_d2uiz+0x2e>
 80083c2:	d50d      	bpl.n	80083e0 <__aeabi_d2uiz+0x28>
 80083c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80083c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80083cc:	d40e      	bmi.n	80083ec <__aeabi_d2uiz+0x34>
 80083ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80083d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80083d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80083da:	fa23 f002 	lsr.w	r0, r3, r2
 80083de:	4770      	bx	lr
 80083e0:	f04f 0000 	mov.w	r0, #0
 80083e4:	4770      	bx	lr
 80083e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80083ea:	d102      	bne.n	80083f2 <__aeabi_d2uiz+0x3a>
 80083ec:	f04f 30ff 	mov.w	r0, #4294967295
 80083f0:	4770      	bx	lr
 80083f2:	f04f 0000 	mov.w	r0, #0
 80083f6:	4770      	bx	lr

080083f8 <__aeabi_d2f>:
 80083f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80083fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008400:	bf24      	itt	cs
 8008402:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008406:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800840a:	d90d      	bls.n	8008428 <__aeabi_d2f+0x30>
 800840c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008410:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008414:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008418:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800841c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008420:	bf08      	it	eq
 8008422:	f020 0001 	biceq.w	r0, r0, #1
 8008426:	4770      	bx	lr
 8008428:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800842c:	d121      	bne.n	8008472 <__aeabi_d2f+0x7a>
 800842e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008432:	bfbc      	itt	lt
 8008434:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008438:	4770      	bxlt	lr
 800843a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800843e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008442:	f1c2 0218 	rsb	r2, r2, #24
 8008446:	f1c2 0c20 	rsb	ip, r2, #32
 800844a:	fa10 f30c 	lsls.w	r3, r0, ip
 800844e:	fa20 f002 	lsr.w	r0, r0, r2
 8008452:	bf18      	it	ne
 8008454:	f040 0001 	orrne.w	r0, r0, #1
 8008458:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800845c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008460:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008464:	ea40 000c 	orr.w	r0, r0, ip
 8008468:	fa23 f302 	lsr.w	r3, r3, r2
 800846c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008470:	e7cc      	b.n	800840c <__aeabi_d2f+0x14>
 8008472:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008476:	d107      	bne.n	8008488 <__aeabi_d2f+0x90>
 8008478:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800847c:	bf1e      	ittt	ne
 800847e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008482:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008486:	4770      	bxne	lr
 8008488:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800848c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008490:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop

08008498 <__aeabi_uldivmod>:
 8008498:	b953      	cbnz	r3, 80084b0 <__aeabi_uldivmod+0x18>
 800849a:	b94a      	cbnz	r2, 80084b0 <__aeabi_uldivmod+0x18>
 800849c:	2900      	cmp	r1, #0
 800849e:	bf08      	it	eq
 80084a0:	2800      	cmpeq	r0, #0
 80084a2:	bf1c      	itt	ne
 80084a4:	f04f 31ff 	movne.w	r1, #4294967295
 80084a8:	f04f 30ff 	movne.w	r0, #4294967295
 80084ac:	f000 b9a6 	b.w	80087fc <__aeabi_idiv0>
 80084b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80084b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80084b8:	f000 f83c 	bl	8008534 <__udivmoddi4>
 80084bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80084c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084c4:	b004      	add	sp, #16
 80084c6:	4770      	bx	lr

080084c8 <__aeabi_d2lz>:
 80084c8:	b538      	push	{r3, r4, r5, lr}
 80084ca:	2200      	movs	r2, #0
 80084cc:	2300      	movs	r3, #0
 80084ce:	4604      	mov	r4, r0
 80084d0:	460d      	mov	r5, r1
 80084d2:	f7ff ff33 	bl	800833c <__aeabi_dcmplt>
 80084d6:	b928      	cbnz	r0, 80084e4 <__aeabi_d2lz+0x1c>
 80084d8:	4620      	mov	r0, r4
 80084da:	4629      	mov	r1, r5
 80084dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084e0:	f000 b80a 	b.w	80084f8 <__aeabi_d2ulz>
 80084e4:	4620      	mov	r0, r4
 80084e6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 80084ea:	f000 f805 	bl	80084f8 <__aeabi_d2ulz>
 80084ee:	4240      	negs	r0, r0
 80084f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80084f4:	bd38      	pop	{r3, r4, r5, pc}
 80084f6:	bf00      	nop

080084f8 <__aeabi_d2ulz>:
 80084f8:	b5d0      	push	{r4, r6, r7, lr}
 80084fa:	4b0c      	ldr	r3, [pc, #48]	; (800852c <__aeabi_d2ulz+0x34>)
 80084fc:	2200      	movs	r2, #0
 80084fe:	4606      	mov	r6, r0
 8008500:	460f      	mov	r7, r1
 8008502:	f7ff fca9 	bl	8007e58 <__aeabi_dmul>
 8008506:	f7ff ff57 	bl	80083b8 <__aeabi_d2uiz>
 800850a:	4604      	mov	r4, r0
 800850c:	f7ff fc2a 	bl	8007d64 <__aeabi_ui2d>
 8008510:	4b07      	ldr	r3, [pc, #28]	; (8008530 <__aeabi_d2ulz+0x38>)
 8008512:	2200      	movs	r2, #0
 8008514:	f7ff fca0 	bl	8007e58 <__aeabi_dmul>
 8008518:	4602      	mov	r2, r0
 800851a:	460b      	mov	r3, r1
 800851c:	4630      	mov	r0, r6
 800851e:	4639      	mov	r1, r7
 8008520:	f7ff fae2 	bl	8007ae8 <__aeabi_dsub>
 8008524:	f7ff ff48 	bl	80083b8 <__aeabi_d2uiz>
 8008528:	4621      	mov	r1, r4
 800852a:	bdd0      	pop	{r4, r6, r7, pc}
 800852c:	3df00000 	.word	0x3df00000
 8008530:	41f00000 	.word	0x41f00000

08008534 <__udivmoddi4>:
 8008534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008538:	9e08      	ldr	r6, [sp, #32]
 800853a:	460d      	mov	r5, r1
 800853c:	4604      	mov	r4, r0
 800853e:	460f      	mov	r7, r1
 8008540:	2b00      	cmp	r3, #0
 8008542:	d14a      	bne.n	80085da <__udivmoddi4+0xa6>
 8008544:	428a      	cmp	r2, r1
 8008546:	4694      	mov	ip, r2
 8008548:	d965      	bls.n	8008616 <__udivmoddi4+0xe2>
 800854a:	fab2 f382 	clz	r3, r2
 800854e:	b143      	cbz	r3, 8008562 <__udivmoddi4+0x2e>
 8008550:	fa02 fc03 	lsl.w	ip, r2, r3
 8008554:	f1c3 0220 	rsb	r2, r3, #32
 8008558:	409f      	lsls	r7, r3
 800855a:	fa20 f202 	lsr.w	r2, r0, r2
 800855e:	4317      	orrs	r7, r2
 8008560:	409c      	lsls	r4, r3
 8008562:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8008566:	fa1f f58c 	uxth.w	r5, ip
 800856a:	fbb7 f1fe 	udiv	r1, r7, lr
 800856e:	0c22      	lsrs	r2, r4, #16
 8008570:	fb0e 7711 	mls	r7, lr, r1, r7
 8008574:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8008578:	fb01 f005 	mul.w	r0, r1, r5
 800857c:	4290      	cmp	r0, r2
 800857e:	d90a      	bls.n	8008596 <__udivmoddi4+0x62>
 8008580:	eb1c 0202 	adds.w	r2, ip, r2
 8008584:	f101 37ff 	add.w	r7, r1, #4294967295
 8008588:	f080 811c 	bcs.w	80087c4 <__udivmoddi4+0x290>
 800858c:	4290      	cmp	r0, r2
 800858e:	f240 8119 	bls.w	80087c4 <__udivmoddi4+0x290>
 8008592:	3902      	subs	r1, #2
 8008594:	4462      	add	r2, ip
 8008596:	1a12      	subs	r2, r2, r0
 8008598:	b2a4      	uxth	r4, r4
 800859a:	fbb2 f0fe 	udiv	r0, r2, lr
 800859e:	fb0e 2210 	mls	r2, lr, r0, r2
 80085a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80085a6:	fb00 f505 	mul.w	r5, r0, r5
 80085aa:	42a5      	cmp	r5, r4
 80085ac:	d90a      	bls.n	80085c4 <__udivmoddi4+0x90>
 80085ae:	eb1c 0404 	adds.w	r4, ip, r4
 80085b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80085b6:	f080 8107 	bcs.w	80087c8 <__udivmoddi4+0x294>
 80085ba:	42a5      	cmp	r5, r4
 80085bc:	f240 8104 	bls.w	80087c8 <__udivmoddi4+0x294>
 80085c0:	4464      	add	r4, ip
 80085c2:	3802      	subs	r0, #2
 80085c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80085c8:	1b64      	subs	r4, r4, r5
 80085ca:	2100      	movs	r1, #0
 80085cc:	b11e      	cbz	r6, 80085d6 <__udivmoddi4+0xa2>
 80085ce:	40dc      	lsrs	r4, r3
 80085d0:	2300      	movs	r3, #0
 80085d2:	e9c6 4300 	strd	r4, r3, [r6]
 80085d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085da:	428b      	cmp	r3, r1
 80085dc:	d908      	bls.n	80085f0 <__udivmoddi4+0xbc>
 80085de:	2e00      	cmp	r6, #0
 80085e0:	f000 80ed 	beq.w	80087be <__udivmoddi4+0x28a>
 80085e4:	2100      	movs	r1, #0
 80085e6:	e9c6 0500 	strd	r0, r5, [r6]
 80085ea:	4608      	mov	r0, r1
 80085ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085f0:	fab3 f183 	clz	r1, r3
 80085f4:	2900      	cmp	r1, #0
 80085f6:	d149      	bne.n	800868c <__udivmoddi4+0x158>
 80085f8:	42ab      	cmp	r3, r5
 80085fa:	d302      	bcc.n	8008602 <__udivmoddi4+0xce>
 80085fc:	4282      	cmp	r2, r0
 80085fe:	f200 80f8 	bhi.w	80087f2 <__udivmoddi4+0x2be>
 8008602:	1a84      	subs	r4, r0, r2
 8008604:	eb65 0203 	sbc.w	r2, r5, r3
 8008608:	2001      	movs	r0, #1
 800860a:	4617      	mov	r7, r2
 800860c:	2e00      	cmp	r6, #0
 800860e:	d0e2      	beq.n	80085d6 <__udivmoddi4+0xa2>
 8008610:	e9c6 4700 	strd	r4, r7, [r6]
 8008614:	e7df      	b.n	80085d6 <__udivmoddi4+0xa2>
 8008616:	b902      	cbnz	r2, 800861a <__udivmoddi4+0xe6>
 8008618:	deff      	udf	#255	; 0xff
 800861a:	fab2 f382 	clz	r3, r2
 800861e:	2b00      	cmp	r3, #0
 8008620:	f040 8090 	bne.w	8008744 <__udivmoddi4+0x210>
 8008624:	1a8a      	subs	r2, r1, r2
 8008626:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800862a:	fa1f fe8c 	uxth.w	lr, ip
 800862e:	2101      	movs	r1, #1
 8008630:	fbb2 f5f7 	udiv	r5, r2, r7
 8008634:	fb07 2015 	mls	r0, r7, r5, r2
 8008638:	0c22      	lsrs	r2, r4, #16
 800863a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800863e:	fb0e f005 	mul.w	r0, lr, r5
 8008642:	4290      	cmp	r0, r2
 8008644:	d908      	bls.n	8008658 <__udivmoddi4+0x124>
 8008646:	eb1c 0202 	adds.w	r2, ip, r2
 800864a:	f105 38ff 	add.w	r8, r5, #4294967295
 800864e:	d202      	bcs.n	8008656 <__udivmoddi4+0x122>
 8008650:	4290      	cmp	r0, r2
 8008652:	f200 80cb 	bhi.w	80087ec <__udivmoddi4+0x2b8>
 8008656:	4645      	mov	r5, r8
 8008658:	1a12      	subs	r2, r2, r0
 800865a:	b2a4      	uxth	r4, r4
 800865c:	fbb2 f0f7 	udiv	r0, r2, r7
 8008660:	fb07 2210 	mls	r2, r7, r0, r2
 8008664:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008668:	fb0e fe00 	mul.w	lr, lr, r0
 800866c:	45a6      	cmp	lr, r4
 800866e:	d908      	bls.n	8008682 <__udivmoddi4+0x14e>
 8008670:	eb1c 0404 	adds.w	r4, ip, r4
 8008674:	f100 32ff 	add.w	r2, r0, #4294967295
 8008678:	d202      	bcs.n	8008680 <__udivmoddi4+0x14c>
 800867a:	45a6      	cmp	lr, r4
 800867c:	f200 80bb 	bhi.w	80087f6 <__udivmoddi4+0x2c2>
 8008680:	4610      	mov	r0, r2
 8008682:	eba4 040e 	sub.w	r4, r4, lr
 8008686:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800868a:	e79f      	b.n	80085cc <__udivmoddi4+0x98>
 800868c:	f1c1 0720 	rsb	r7, r1, #32
 8008690:	408b      	lsls	r3, r1
 8008692:	fa22 fc07 	lsr.w	ip, r2, r7
 8008696:	ea4c 0c03 	orr.w	ip, ip, r3
 800869a:	fa05 f401 	lsl.w	r4, r5, r1
 800869e:	fa20 f307 	lsr.w	r3, r0, r7
 80086a2:	40fd      	lsrs	r5, r7
 80086a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80086a8:	4323      	orrs	r3, r4
 80086aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80086ae:	fa1f fe8c 	uxth.w	lr, ip
 80086b2:	fb09 5518 	mls	r5, r9, r8, r5
 80086b6:	0c1c      	lsrs	r4, r3, #16
 80086b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80086bc:	fb08 f50e 	mul.w	r5, r8, lr
 80086c0:	42a5      	cmp	r5, r4
 80086c2:	fa02 f201 	lsl.w	r2, r2, r1
 80086c6:	fa00 f001 	lsl.w	r0, r0, r1
 80086ca:	d90b      	bls.n	80086e4 <__udivmoddi4+0x1b0>
 80086cc:	eb1c 0404 	adds.w	r4, ip, r4
 80086d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80086d4:	f080 8088 	bcs.w	80087e8 <__udivmoddi4+0x2b4>
 80086d8:	42a5      	cmp	r5, r4
 80086da:	f240 8085 	bls.w	80087e8 <__udivmoddi4+0x2b4>
 80086de:	f1a8 0802 	sub.w	r8, r8, #2
 80086e2:	4464      	add	r4, ip
 80086e4:	1b64      	subs	r4, r4, r5
 80086e6:	b29d      	uxth	r5, r3
 80086e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80086ec:	fb09 4413 	mls	r4, r9, r3, r4
 80086f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80086f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80086f8:	45a6      	cmp	lr, r4
 80086fa:	d908      	bls.n	800870e <__udivmoddi4+0x1da>
 80086fc:	eb1c 0404 	adds.w	r4, ip, r4
 8008700:	f103 35ff 	add.w	r5, r3, #4294967295
 8008704:	d26c      	bcs.n	80087e0 <__udivmoddi4+0x2ac>
 8008706:	45a6      	cmp	lr, r4
 8008708:	d96a      	bls.n	80087e0 <__udivmoddi4+0x2ac>
 800870a:	3b02      	subs	r3, #2
 800870c:	4464      	add	r4, ip
 800870e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008712:	fba3 9502 	umull	r9, r5, r3, r2
 8008716:	eba4 040e 	sub.w	r4, r4, lr
 800871a:	42ac      	cmp	r4, r5
 800871c:	46c8      	mov	r8, r9
 800871e:	46ae      	mov	lr, r5
 8008720:	d356      	bcc.n	80087d0 <__udivmoddi4+0x29c>
 8008722:	d053      	beq.n	80087cc <__udivmoddi4+0x298>
 8008724:	b156      	cbz	r6, 800873c <__udivmoddi4+0x208>
 8008726:	ebb0 0208 	subs.w	r2, r0, r8
 800872a:	eb64 040e 	sbc.w	r4, r4, lr
 800872e:	fa04 f707 	lsl.w	r7, r4, r7
 8008732:	40ca      	lsrs	r2, r1
 8008734:	40cc      	lsrs	r4, r1
 8008736:	4317      	orrs	r7, r2
 8008738:	e9c6 7400 	strd	r7, r4, [r6]
 800873c:	4618      	mov	r0, r3
 800873e:	2100      	movs	r1, #0
 8008740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008744:	f1c3 0120 	rsb	r1, r3, #32
 8008748:	fa02 fc03 	lsl.w	ip, r2, r3
 800874c:	fa20 f201 	lsr.w	r2, r0, r1
 8008750:	fa25 f101 	lsr.w	r1, r5, r1
 8008754:	409d      	lsls	r5, r3
 8008756:	432a      	orrs	r2, r5
 8008758:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800875c:	fa1f fe8c 	uxth.w	lr, ip
 8008760:	fbb1 f0f7 	udiv	r0, r1, r7
 8008764:	fb07 1510 	mls	r5, r7, r0, r1
 8008768:	0c11      	lsrs	r1, r2, #16
 800876a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800876e:	fb00 f50e 	mul.w	r5, r0, lr
 8008772:	428d      	cmp	r5, r1
 8008774:	fa04 f403 	lsl.w	r4, r4, r3
 8008778:	d908      	bls.n	800878c <__udivmoddi4+0x258>
 800877a:	eb1c 0101 	adds.w	r1, ip, r1
 800877e:	f100 38ff 	add.w	r8, r0, #4294967295
 8008782:	d22f      	bcs.n	80087e4 <__udivmoddi4+0x2b0>
 8008784:	428d      	cmp	r5, r1
 8008786:	d92d      	bls.n	80087e4 <__udivmoddi4+0x2b0>
 8008788:	3802      	subs	r0, #2
 800878a:	4461      	add	r1, ip
 800878c:	1b49      	subs	r1, r1, r5
 800878e:	b292      	uxth	r2, r2
 8008790:	fbb1 f5f7 	udiv	r5, r1, r7
 8008794:	fb07 1115 	mls	r1, r7, r5, r1
 8008798:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800879c:	fb05 f10e 	mul.w	r1, r5, lr
 80087a0:	4291      	cmp	r1, r2
 80087a2:	d908      	bls.n	80087b6 <__udivmoddi4+0x282>
 80087a4:	eb1c 0202 	adds.w	r2, ip, r2
 80087a8:	f105 38ff 	add.w	r8, r5, #4294967295
 80087ac:	d216      	bcs.n	80087dc <__udivmoddi4+0x2a8>
 80087ae:	4291      	cmp	r1, r2
 80087b0:	d914      	bls.n	80087dc <__udivmoddi4+0x2a8>
 80087b2:	3d02      	subs	r5, #2
 80087b4:	4462      	add	r2, ip
 80087b6:	1a52      	subs	r2, r2, r1
 80087b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80087bc:	e738      	b.n	8008630 <__udivmoddi4+0xfc>
 80087be:	4631      	mov	r1, r6
 80087c0:	4630      	mov	r0, r6
 80087c2:	e708      	b.n	80085d6 <__udivmoddi4+0xa2>
 80087c4:	4639      	mov	r1, r7
 80087c6:	e6e6      	b.n	8008596 <__udivmoddi4+0x62>
 80087c8:	4610      	mov	r0, r2
 80087ca:	e6fb      	b.n	80085c4 <__udivmoddi4+0x90>
 80087cc:	4548      	cmp	r0, r9
 80087ce:	d2a9      	bcs.n	8008724 <__udivmoddi4+0x1f0>
 80087d0:	ebb9 0802 	subs.w	r8, r9, r2
 80087d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80087d8:	3b01      	subs	r3, #1
 80087da:	e7a3      	b.n	8008724 <__udivmoddi4+0x1f0>
 80087dc:	4645      	mov	r5, r8
 80087de:	e7ea      	b.n	80087b6 <__udivmoddi4+0x282>
 80087e0:	462b      	mov	r3, r5
 80087e2:	e794      	b.n	800870e <__udivmoddi4+0x1da>
 80087e4:	4640      	mov	r0, r8
 80087e6:	e7d1      	b.n	800878c <__udivmoddi4+0x258>
 80087e8:	46d0      	mov	r8, sl
 80087ea:	e77b      	b.n	80086e4 <__udivmoddi4+0x1b0>
 80087ec:	3d02      	subs	r5, #2
 80087ee:	4462      	add	r2, ip
 80087f0:	e732      	b.n	8008658 <__udivmoddi4+0x124>
 80087f2:	4608      	mov	r0, r1
 80087f4:	e70a      	b.n	800860c <__udivmoddi4+0xd8>
 80087f6:	4464      	add	r4, ip
 80087f8:	3802      	subs	r0, #2
 80087fa:	e742      	b.n	8008682 <__udivmoddi4+0x14e>

080087fc <__aeabi_idiv0>:
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop

08008800 <apInit>:
static uint32_t g_LEDOnTime = 1000;
static uint32_t g_LEDOffTime = 200;
static uint32_t nextmill = 0;
*/
void apInit(void)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART1, 115200);
 8008804:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8008808:	2000      	movs	r0, #0
 800880a:	f001 fd75 	bl	800a2f8 <uartOpen>
  //cliOpen(_DEF_UART1, 115200);
}
 800880e:	bf00      	nop
 8008810:	bd80      	pop	{r7, pc}
	...

08008814 <apMain>:

void apMain(void)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
  /* Reset Test */
  uartPrintf(_DEF_UART1, "Reset Count : %d\n", resetGetCount());
 800881a:	f001 fb8f 	bl	8009f3c <resetGetCount>
 800881e:	4603      	mov	r3, r0
 8008820:	461a      	mov	r2, r3
 8008822:	4907      	ldr	r1, [pc, #28]	; (8008840 <apMain+0x2c>)
 8008824:	2000      	movs	r0, #0
 8008826:	f001 fe3b 	bl	800a4a0 <uartPrintf>
  logPrintf("log Test\n");
 800882a:	4806      	ldr	r0, [pc, #24]	; (8008844 <apMain+0x30>)
 800882c:	f001 fb1e 	bl	8009e6c <logPrintf>
  uint32_t pre_time1 = millis();
 8008830:	f000 f867 	bl	8008902 <millis>
 8008834:	6078      	str	r0, [r7, #4]
  uint32_t pre_time2 = millis();
 8008836:	f000 f864 	bl	8008902 <millis>
 800883a:	6038      	str	r0, [r7, #0]
  while(1)
 800883c:	e7fe      	b.n	800883c <apMain+0x28>
 800883e:	bf00      	nop
 8008840:	080180e0 	.word	0x080180e0
 8008844:	080180f4 	.word	0x080180f4

08008848 <bspInit>:
#include "bsp.h"

void SystemClock_Config(void);

bool bspInit(void)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b088      	sub	sp, #32
 800884c:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800884e:	4b26      	ldr	r3, [pc, #152]	; (80088e8 <bspInit+0xa0>)
 8008850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008852:	4a25      	ldr	r2, [pc, #148]	; (80088e8 <bspInit+0xa0>)
 8008854:	f043 0301 	orr.w	r3, r3, #1
 8008858:	6613      	str	r3, [r2, #96]	; 0x60
 800885a:	4b23      	ldr	r3, [pc, #140]	; (80088e8 <bspInit+0xa0>)
 800885c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800885e:	f003 0301 	and.w	r3, r3, #1
 8008862:	60bb      	str	r3, [r7, #8]
 8008864:	68bb      	ldr	r3, [r7, #8]


  HAL_Init();
 8008866:	f002 f903 	bl	800aa70 <HAL_Init>
  SystemClock_Config();
 800886a:	f000 f851 	bl	8008910 <SystemClock_Config>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800886e:	4b1e      	ldr	r3, [pc, #120]	; (80088e8 <bspInit+0xa0>)
 8008870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008872:	4a1d      	ldr	r2, [pc, #116]	; (80088e8 <bspInit+0xa0>)
 8008874:	f043 0320 	orr.w	r3, r3, #32
 8008878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800887a:	4b1b      	ldr	r3, [pc, #108]	; (80088e8 <bspInit+0xa0>)
 800887c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800887e:	f003 0320 	and.w	r3, r3, #32
 8008882:	607b      	str	r3, [r7, #4]
 8008884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008886:	4b18      	ldr	r3, [pc, #96]	; (80088e8 <bspInit+0xa0>)
 8008888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800888a:	4a17      	ldr	r2, [pc, #92]	; (80088e8 <bspInit+0xa0>)
 800888c:	f043 0301 	orr.w	r3, r3, #1
 8008890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008892:	4b15      	ldr	r3, [pc, #84]	; (80088e8 <bspInit+0xa0>)
 8008894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008896:	f003 0301 	and.w	r3, r3, #1
 800889a:	603b      	str	r3, [r7, #0]
 800889c:	683b      	ldr	r3, [r7, #0]

  // USB - Reset 상태로, reset 버튼 눌렀을때 연결 해제후 연결 되도록 하기위한 설정
  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 800889e:	f107 030c 	add.w	r3, r7, #12
 80088a2:	2200      	movs	r2, #0
 80088a4:	601a      	str	r2, [r3, #0]
 80088a6:	605a      	str	r2, [r3, #4]
 80088a8:	609a      	str	r2, [r3, #8]
 80088aa:	60da      	str	r2, [r3, #12]
 80088ac:	611a      	str	r2, [r3, #16]
  // PA12(USB_DP) 출력 설정
  GPIO_InitStructure.Pin = GPIO_PIN_12;
 80088ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 80088b4:	2311      	movs	r3, #17
 80088b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80088b8:	2300      	movs	r3, #0
 80088ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 80088bc:	2300      	movs	r3, #0
 80088be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80088c0:	f107 030c 	add.w	r3, r7, #12
 80088c4:	4619      	mov	r1, r3
 80088c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80088ca:	f002 fb33 	bl	800af34 <HAL_GPIO_Init>

  //회로에 PULL UP 이 걸려있다면 - 내리고
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80088ce:	2200      	movs	r2, #0
 80088d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80088d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80088d8:	f002 fcc6 	bl	800b268 <HAL_GPIO_WritePin>



  return true;
 80088dc:	2301      	movs	r3, #1
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3720      	adds	r7, #32
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	40021000 	.word	0x40021000

080088ec <delay>:

void delay(uint32_t time_ms)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  HAL_Delay(time_ms);
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f002 f92b 	bl	800ab50 <HAL_Delay>
}
 80088fa:	bf00      	nop
 80088fc:	3708      	adds	r7, #8
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <millis>:

uint32_t millis(void)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008906:	f002 f917 	bl	800ab38 <HAL_GetTick>
 800890a:	4603      	mov	r3, r0
}
 800890c:	4618      	mov	r0, r3
 800890e:	bd80      	pop	{r7, pc}

08008910 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b094      	sub	sp, #80	; 0x50
 8008914:	af00      	add	r7, sp, #0

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008916:	4b2a      	ldr	r3, [pc, #168]	; (80089c0 <SystemClock_Config+0xb0>)
 8008918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800891a:	4a29      	ldr	r2, [pc, #164]	; (80089c0 <SystemClock_Config+0xb0>)
 800891c:	f043 0304 	orr.w	r3, r3, #4
 8008920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008922:	4b27      	ldr	r3, [pc, #156]	; (80089c0 <SystemClock_Config+0xb0>)
 8008924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008926:	f003 0304 	and.w	r3, r3, #4
 800892a:	603b      	str	r3, [r7, #0]
 800892c:	683b      	ldr	r3, [r7, #0]

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800892e:	f107 0318 	add.w	r3, r7, #24
 8008932:	2238      	movs	r2, #56	; 0x38
 8008934:	2100      	movs	r1, #0
 8008936:	4618      	mov	r0, r3
 8008938:	f00d fb0a 	bl	8015f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800893c:	1d3b      	adds	r3, r7, #4
 800893e:	2200      	movs	r2, #0
 8008940:	601a      	str	r2, [r3, #0]
 8008942:	605a      	str	r2, [r3, #4]
 8008944:	609a      	str	r2, [r3, #8]
 8008946:	60da      	str	r2, [r3, #12]
 8008948:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800894a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800894e:	f004 f9f1 	bl	800cd34 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8008952:	2309      	movs	r3, #9
 8008954:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008956:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800895a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800895c:	2301      	movs	r3, #1
 800895e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008960:	2302      	movs	r3, #2
 8008962:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008964:	2303      	movs	r3, #3
 8008966:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8008968:	2302      	movs	r3, #2
 800896a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 800896c:	2308      	movs	r3, #8
 800896e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008970:	2302      	movs	r3, #2
 8008972:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008974:	2302      	movs	r3, #2
 8008976:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008978:	2302      	movs	r3, #2
 800897a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800897c:	f107 0318 	add.w	r3, r7, #24
 8008980:	4618      	mov	r0, r3
 8008982:	f004 fb0d 	bl	800cfa0 <HAL_RCC_OscConfig>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d001      	beq.n	8008990 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800898c:	f000 f81a 	bl	80089c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008990:	230f      	movs	r3, #15
 8008992:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008994:	2303      	movs	r3, #3
 8008996:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008998:	2300      	movs	r3, #0
 800899a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800899c:	2300      	movs	r3, #0
 800899e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80089a0:	2300      	movs	r3, #0
 80089a2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80089a4:	1d3b      	adds	r3, r7, #4
 80089a6:	2101      	movs	r1, #1
 80089a8:	4618      	mov	r0, r3
 80089aa:	f004 fe0b 	bl	800d5c4 <HAL_RCC_ClockConfig>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d001      	beq.n	80089b8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80089b4:	f000 f806 	bl	80089c4 <Error_Handler>
  }
}
 80089b8:	bf00      	nop
 80089ba:	3750      	adds	r7, #80	; 0x50
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	40021000 	.word	0x40021000

080089c4 <Error_Handler>:


void Error_Handler(void)
{
 80089c4:	b480      	push	{r7}
 80089c6:	af00      	add	r7, sp, #0

}
 80089c8:	bf00      	nop
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
	...

080089d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80089da:	4b0f      	ldr	r3, [pc, #60]	; (8008a18 <HAL_MspInit+0x44>)
 80089dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089de:	4a0e      	ldr	r2, [pc, #56]	; (8008a18 <HAL_MspInit+0x44>)
 80089e0:	f043 0301 	orr.w	r3, r3, #1
 80089e4:	6613      	str	r3, [r2, #96]	; 0x60
 80089e6:	4b0c      	ldr	r3, [pc, #48]	; (8008a18 <HAL_MspInit+0x44>)
 80089e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089ea:	f003 0301 	and.w	r3, r3, #1
 80089ee:	607b      	str	r3, [r7, #4]
 80089f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80089f2:	4b09      	ldr	r3, [pc, #36]	; (8008a18 <HAL_MspInit+0x44>)
 80089f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089f6:	4a08      	ldr	r2, [pc, #32]	; (8008a18 <HAL_MspInit+0x44>)
 80089f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089fc:	6593      	str	r3, [r2, #88]	; 0x58
 80089fe:	4b06      	ldr	r3, [pc, #24]	; (8008a18 <HAL_MspInit+0x44>)
 8008a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a06:	603b      	str	r3, [r7, #0]
 8008a08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8008a0a:	f004 fa37 	bl	800ce7c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008a0e:	bf00      	nop
 8008a10:	3708      	adds	r7, #8
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	40021000 	.word	0x40021000

08008a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008a20:	e7fe      	b.n	8008a20 <NMI_Handler+0x4>

08008a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008a22:	b480      	push	{r7}
 8008a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008a26:	e7fe      	b.n	8008a26 <HardFault_Handler+0x4>

08008a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008a2c:	e7fe      	b.n	8008a2c <MemManage_Handler+0x4>

08008a2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008a2e:	b480      	push	{r7}
 8008a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008a32:	e7fe      	b.n	8008a32 <BusFault_Handler+0x4>

08008a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008a34:	b480      	push	{r7}
 8008a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008a38:	e7fe      	b.n	8008a38 <UsageFault_Handler+0x4>

08008a3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008a3a:	b480      	push	{r7}
 8008a3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008a3e:	bf00      	nop
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008a4c:	bf00      	nop
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr

08008a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008a56:	b480      	push	{r7}
 8008a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008a5a:	bf00      	nop
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008a68:	f002 f854 	bl	800ab14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008a6c:	bf00      	nop
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8008a74:	4802      	ldr	r0, [pc, #8]	; (8008a80 <USB_LP_IRQHandler+0x10>)
 8008a76:	f002 fd19 	bl	800b4ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8008a7a:	bf00      	nop
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	20003058 	.word	0x20003058

08008a84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008a88:	4802      	ldr	r0, [pc, #8]	; (8008a94 <USART1_IRQHandler+0x10>)
 8008a8a:	f005 fc7b 	bl	800e384 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008a8e:	bf00      	nop
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	20000abc 	.word	0x20000abc

08008a98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	af00      	add	r7, sp, #0
  return 1;
 8008a9c:	2301      	movs	r3, #1
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <_kill>:

int _kill(int pid, int sig)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008ab2:	f00d faad 	bl	8016010 <__errno>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	2216      	movs	r2, #22
 8008aba:	601a      	str	r2, [r3, #0]
  return -1;
 8008abc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3708      	adds	r7, #8
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <_exit>:

void _exit (int status)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f7ff ffe7 	bl	8008aa8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8008ada:	e7fe      	b.n	8008ada <_exit+0x12>

08008adc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008ae8:	2300      	movs	r3, #0
 8008aea:	617b      	str	r3, [r7, #20]
 8008aec:	e00a      	b.n	8008b04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008aee:	f3af 8000 	nop.w
 8008af2:	4601      	mov	r1, r0
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	1c5a      	adds	r2, r3, #1
 8008af8:	60ba      	str	r2, [r7, #8]
 8008afa:	b2ca      	uxtb	r2, r1
 8008afc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	3301      	adds	r3, #1
 8008b02:	617b      	str	r3, [r7, #20]
 8008b04:	697a      	ldr	r2, [r7, #20]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	dbf0      	blt.n	8008aee <_read+0x12>
  }

  return len;
 8008b0c:	687b      	ldr	r3, [r7, #4]
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3718      	adds	r7, #24
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008b16:	b580      	push	{r7, lr}
 8008b18:	b086      	sub	sp, #24
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	60f8      	str	r0, [r7, #12]
 8008b1e:	60b9      	str	r1, [r7, #8]
 8008b20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b22:	2300      	movs	r3, #0
 8008b24:	617b      	str	r3, [r7, #20]
 8008b26:	e009      	b.n	8008b3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	1c5a      	adds	r2, r3, #1
 8008b2c:	60ba      	str	r2, [r7, #8]
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	617b      	str	r3, [r7, #20]
 8008b3c:	697a      	ldr	r2, [r7, #20]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	dbf1      	blt.n	8008b28 <_write+0x12>
  }
  return len;
 8008b44:	687b      	ldr	r3, [r7, #4]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3718      	adds	r7, #24
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <_close>:

int _close(int file)
{
 8008b4e:	b480      	push	{r7}
 8008b50:	b083      	sub	sp, #12
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008b56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008b66:	b480      	push	{r7}
 8008b68:	b083      	sub	sp, #12
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008b76:	605a      	str	r2, [r3, #4]
  return 0;
 8008b78:	2300      	movs	r3, #0
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	370c      	adds	r7, #12
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr

08008b86 <_isatty>:

int _isatty(int file)
{
 8008b86:	b480      	push	{r7}
 8008b88:	b083      	sub	sp, #12
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008b8e:	2301      	movs	r3, #1
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3714      	adds	r7, #20
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr
	...

08008bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b086      	sub	sp, #24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008bc0:	4a14      	ldr	r2, [pc, #80]	; (8008c14 <_sbrk+0x5c>)
 8008bc2:	4b15      	ldr	r3, [pc, #84]	; (8008c18 <_sbrk+0x60>)
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008bcc:	4b13      	ldr	r3, [pc, #76]	; (8008c1c <_sbrk+0x64>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d102      	bne.n	8008bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008bd4:	4b11      	ldr	r3, [pc, #68]	; (8008c1c <_sbrk+0x64>)
 8008bd6:	4a12      	ldr	r2, [pc, #72]	; (8008c20 <_sbrk+0x68>)
 8008bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008bda:	4b10      	ldr	r3, [pc, #64]	; (8008c1c <_sbrk+0x64>)
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4413      	add	r3, r2
 8008be2:	693a      	ldr	r2, [r7, #16]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d207      	bcs.n	8008bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008be8:	f00d fa12 	bl	8016010 <__errno>
 8008bec:	4603      	mov	r3, r0
 8008bee:	220c      	movs	r2, #12
 8008bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8008bf6:	e009      	b.n	8008c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008bf8:	4b08      	ldr	r3, [pc, #32]	; (8008c1c <_sbrk+0x64>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008bfe:	4b07      	ldr	r3, [pc, #28]	; (8008c1c <_sbrk+0x64>)
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4413      	add	r3, r2
 8008c06:	4a05      	ldr	r2, [pc, #20]	; (8008c1c <_sbrk+0x64>)
 8008c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3718      	adds	r7, #24
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	20020000 	.word	0x20020000
 8008c18:	00000400 	.word	0x00000400
 8008c1c:	2000037c 	.word	0x2000037c
 8008c20:	200036a0 	.word	0x200036a0

08008c24 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008c24:	b480      	push	{r7}
 8008c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008c28:	4b07      	ldr	r3, [pc, #28]	; (8008c48 <SystemInit+0x24>)
 8008c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c2e:	4a06      	ldr	r2, [pc, #24]	; (8008c48 <SystemInit+0x24>)
 8008c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8008c38:	4b03      	ldr	r3, [pc, #12]	; (8008c48 <SystemInit+0x24>)
 8008c3a:	4a04      	ldr	r2, [pc, #16]	; (8008c4c <SystemInit+0x28>)
 8008c3c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008c3e:	bf00      	nop
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr
 8008c48:	e000ed00 	.word	0xe000ed00
 8008c4c:	08007800 	.word	0x08007800

08008c50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008c50:	480d      	ldr	r0, [pc, #52]	; (8008c88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008c52:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8008c54:	f7ff ffe6 	bl	8008c24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008c58:	480c      	ldr	r0, [pc, #48]	; (8008c8c <LoopForever+0x6>)
  ldr r1, =_edata
 8008c5a:	490d      	ldr	r1, [pc, #52]	; (8008c90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008c5c:	4a0d      	ldr	r2, [pc, #52]	; (8008c94 <LoopForever+0xe>)
  movs r3, #0
 8008c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008c60:	e002      	b.n	8008c68 <LoopCopyDataInit>

08008c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008c66:	3304      	adds	r3, #4

08008c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008c6c:	d3f9      	bcc.n	8008c62 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008c6e:	4a0a      	ldr	r2, [pc, #40]	; (8008c98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008c70:	4c0a      	ldr	r4, [pc, #40]	; (8008c9c <LoopForever+0x16>)
  movs r3, #0
 8008c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008c74:	e001      	b.n	8008c7a <LoopFillZerobss>

08008c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008c78:	3204      	adds	r2, #4

08008c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008c7c:	d3fb      	bcc.n	8008c76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8008c7e:	f00d f9cd 	bl	801601c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008c82:	f00c f92b 	bl	8014edc <main>

08008c86 <LoopForever>:

LoopForever:
  b LoopForever
 8008c86:	e7fe      	b.n	8008c86 <LoopForever>
  ldr   r0, =_estack
 8008c88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008c90:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 8008c94:	080188b4 	.word	0x080188b4
  ldr r2, =_sbss
 8008c98:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 8008c9c:	200036a0 	.word	0x200036a0

08008ca0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008ca0:	e7fe      	b.n	8008ca0 <ADC1_2_IRQHandler>

08008ca2 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8008ca2:	b480      	push	{r7}
 8008ca4:	b087      	sub	sp, #28
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	60f8      	str	r0, [r7, #12]
 8008caa:	60b9      	str	r1, [r7, #8]
 8008cac:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	609a      	str	r2, [r3, #8]
  p_node->size  = 1;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	68ba      	ldr	r2, [r7, #8]
 8008cce:	611a      	str	r2, [r3, #16]

  return ret;
 8008cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	371c      	adds	r7, #28
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr

08008cde <qbufferWrite>:

  return ret;
}

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8008cde:	b480      	push	{r7}
 8008ce0:	b08b      	sub	sp, #44	; 0x2c
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	60f8      	str	r0, [r7, #12]
 8008ce6:	60b9      	str	r1, [r7, #8]
 8008ce8:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8008cea:	2301      	movs	r3, #1
 8008cec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t next_in;


  for (int i=0; i<length; i++)
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	623b      	str	r3, [r7, #32]
 8008cf4:	e043      	b.n	8008d7e <qbufferWrite+0xa0>
  {
    next_in = (p_node->in + 1) % p_node->len;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	6892      	ldr	r2, [r2, #8]
 8008d00:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d04:	fb01 f202 	mul.w	r2, r1, r2
 8008d08:	1a9b      	subs	r3, r3, r2
 8008d0a:	61bb      	str	r3, [r7, #24]

    if (next_in != p_node->out)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	69ba      	ldr	r2, [r7, #24]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d02c      	beq.n	8008d70 <qbufferWrite+0x92>
    {
      if (p_node->p_buf != NULL && p_data != NULL)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	691b      	ldr	r3, [r3, #16]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d024      	beq.n	8008d68 <qbufferWrite+0x8a>
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d021      	beq.n	8008d68 <qbufferWrite+0x8a>
      {
        uint8_t *p_buf;

        p_buf = &p_node->p_buf[p_node->in*p_node->size];
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	691a      	ldr	r2, [r3, #16]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	68f9      	ldr	r1, [r7, #12]
 8008d2e:	68c9      	ldr	r1, [r1, #12]
 8008d30:	fb01 f303 	mul.w	r3, r1, r3
 8008d34:	4413      	add	r3, r2
 8008d36:	617b      	str	r3, [r7, #20]
        for (int i=0; i<p_node->size; i++)
 8008d38:	2300      	movs	r3, #0
 8008d3a:	61fb      	str	r3, [r7, #28]
 8008d3c:	e00a      	b.n	8008d54 <qbufferWrite+0x76>
        {
          p_buf[i] = p_data[i];
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	68ba      	ldr	r2, [r7, #8]
 8008d42:	441a      	add	r2, r3
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	6979      	ldr	r1, [r7, #20]
 8008d48:	440b      	add	r3, r1
 8008d4a:	7812      	ldrb	r2, [r2, #0]
 8008d4c:	701a      	strb	r2, [r3, #0]
        for (int i=0; i<p_node->size; i++)
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	3301      	adds	r3, #1
 8008d52:	61fb      	str	r3, [r7, #28]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	68da      	ldr	r2, [r3, #12]
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d8ef      	bhi.n	8008d3e <qbufferWrite+0x60>
        }
        p_data += p_node->size;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	68ba      	ldr	r2, [r7, #8]
 8008d64:	4413      	add	r3, r2
 8008d66:	60bb      	str	r3, [r7, #8]
      }
      p_node->in = next_in;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	69ba      	ldr	r2, [r7, #24]
 8008d6c:	601a      	str	r2, [r3, #0]
 8008d6e:	e003      	b.n	8008d78 <qbufferWrite+0x9a>
    }
    else
    {
      ret = false;
 8008d70:	2300      	movs	r3, #0
 8008d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8008d76:	e006      	b.n	8008d86 <qbufferWrite+0xa8>
  for (int i=0; i<length; i++)
 8008d78:	6a3b      	ldr	r3, [r7, #32]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	623b      	str	r3, [r7, #32]
 8008d7e:	6a3b      	ldr	r3, [r7, #32]
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d8b7      	bhi.n	8008cf6 <qbufferWrite+0x18>
    }
  }

  return ret;
 8008d86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	372c      	adds	r7, #44	; 0x2c
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr

08008d96 <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8008d96:	b480      	push	{r7}
 8008d98:	b089      	sub	sp, #36	; 0x24
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	60f8      	str	r0, [r7, #12]
 8008d9e:	60b9      	str	r1, [r7, #8]
 8008da0:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8008da2:	2301      	movs	r3, #1
 8008da4:	77fb      	strb	r3, [r7, #31]


  for (int i=0; i<length; i++)
 8008da6:	2300      	movs	r3, #0
 8008da8:	61bb      	str	r3, [r7, #24]
 8008daa:	e041      	b.n	8008e30 <qbufferRead+0x9a>
  {
    if (p_node->p_buf != NULL && p_data != NULL)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d024      	beq.n	8008dfe <qbufferRead+0x68>
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d021      	beq.n	8008dfe <qbufferRead+0x68>
    {
      uint8_t *p_buf;

      p_buf = &p_node->p_buf[p_node->out*p_node->size];
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	691a      	ldr	r2, [r3, #16]
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	68f9      	ldr	r1, [r7, #12]
 8008dc4:	68c9      	ldr	r1, [r1, #12]
 8008dc6:	fb01 f303 	mul.w	r3, r1, r3
 8008dca:	4413      	add	r3, r2
 8008dcc:	613b      	str	r3, [r7, #16]
      for (int i=0; i<p_node->size; i++)
 8008dce:	2300      	movs	r3, #0
 8008dd0:	617b      	str	r3, [r7, #20]
 8008dd2:	e00a      	b.n	8008dea <qbufferRead+0x54>
      {
        p_data[i] = p_buf[i];
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	693a      	ldr	r2, [r7, #16]
 8008dd8:	441a      	add	r2, r3
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	68b9      	ldr	r1, [r7, #8]
 8008dde:	440b      	add	r3, r1
 8008de0:	7812      	ldrb	r2, [r2, #0]
 8008de2:	701a      	strb	r2, [r3, #0]
      for (int i=0; i<p_node->size; i++)
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	3301      	adds	r3, #1
 8008de8:	617b      	str	r3, [r7, #20]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	68da      	ldr	r2, [r3, #12]
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	d8ef      	bhi.n	8008dd4 <qbufferRead+0x3e>
      }

      p_data += p_node->size;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	68ba      	ldr	r2, [r7, #8]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	60bb      	str	r3, [r7, #8]
    }

    if (p_node->out != p_node->in)
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	685a      	ldr	r2, [r3, #4]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d00c      	beq.n	8008e24 <qbufferRead+0x8e>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	3301      	adds	r3, #1
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	6892      	ldr	r2, [r2, #8]
 8008e14:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e18:	fb01 f202 	mul.w	r2, r1, r2
 8008e1c:	1a9a      	subs	r2, r3, r2
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	605a      	str	r2, [r3, #4]
 8008e22:	e002      	b.n	8008e2a <qbufferRead+0x94>
    }
    else
    {
      ret = false;
 8008e24:	2300      	movs	r3, #0
 8008e26:	77fb      	strb	r3, [r7, #31]
      break;
 8008e28:	e006      	b.n	8008e38 <qbufferRead+0xa2>
  for (int i=0; i<length; i++)
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	61bb      	str	r3, [r7, #24]
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d8b9      	bhi.n	8008dac <qbufferRead+0x16>
    }
  }

  return ret;
 8008e38:	7ffb      	ldrb	r3, [r7, #31]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3724      	adds	r7, #36	; 0x24
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr

08008e46 <qbufferAvailable>:
  return &p_node->p_buf[p_node->out*p_node->size];
}


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8008e46:	b480      	push	{r7}
 8008e48:	b085      	sub	sp, #20
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	1ad3      	subs	r3, r2, r3
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	6892      	ldr	r2, [r2, #8]
 8008e5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e60:	fb01 f202 	mul.w	r2, r1, r2
 8008e64:	1a9b      	subs	r3, r3, r2
 8008e66:	60fb      	str	r3, [r7, #12]

  return ret;
 8008e68:	68fb      	ldr	r3, [r7, #12]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3714      	adds	r7, #20
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
	...

08008e78 <buttonInit>:
extern void buttonISR(void *arg);
extern bool buttonGetPin(uint8_t ch);


bool buttonInit(void)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b08c      	sub	sp, #48	; 0x30
 8008e7c:	af02      	add	r7, sp, #8
  bool ret = true;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	76fb      	strb	r3, [r7, #27]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e82:	1d3b      	adds	r3, r7, #4
 8008e84:	2200      	movs	r2, #0
 8008e86:	601a      	str	r2, [r3, #0]
 8008e88:	605a      	str	r2, [r3, #4]
 8008e8a:	609a      	str	r2, [r3, #8]
 8008e8c:	60da      	str	r2, [r3, #12]
 8008e8e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008e90:	4b50      	ldr	r3, [pc, #320]	; (8008fd4 <buttonInit+0x15c>)
 8008e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e94:	4a4f      	ldr	r2, [pc, #316]	; (8008fd4 <buttonInit+0x15c>)
 8008e96:	f043 0304 	orr.w	r3, r3, #4
 8008e9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e9c:	4b4d      	ldr	r3, [pc, #308]	; (8008fd4 <buttonInit+0x15c>)
 8008e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ea0:	f003 0304 	and.w	r3, r3, #4
 8008ea4:	603b      	str	r3, [r7, #0]
 8008ea6:	683b      	ldr	r3, [r7, #0]


  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008eac:	2300      	movs	r3, #0
 8008eae:	60fb      	str	r3, [r7, #12]

  for(int i=0; i < BTN_MAX_CH; i++)
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8008eb4:	e011      	b.n	8008eda <buttonInit+0x62>
  {
    GPIO_InitStruct.Pin = button_pin[i].pin;
 8008eb6:	4948      	ldr	r1, [pc, #288]	; (8008fd8 <buttonInit+0x160>)
 8008eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eba:	4613      	mov	r3, r2
 8008ebc:	005b      	lsls	r3, r3, #1
 8008ebe:	4413      	add	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	440b      	add	r3, r1
 8008ec4:	3304      	adds	r3, #4
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(PC13_BLU_SW_GPIO_Port, &GPIO_InitStruct);
 8008eca:	1d3b      	adds	r3, r7, #4
 8008ecc:	4619      	mov	r1, r3
 8008ece:	4843      	ldr	r0, [pc, #268]	; (8008fdc <buttonInit+0x164>)
 8008ed0:	f002 f830 	bl	800af34 <HAL_GPIO_Init>
  for(int i=0; i < BTN_MAX_CH; i++)
 8008ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8008eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	ddea      	ble.n	8008eb6 <buttonInit+0x3e>
  }

  for(int i=0; i < BTN_MAX_CH; i++)
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	623b      	str	r3, [r7, #32]
 8008ee4:	e040      	b.n	8008f68 <buttonInit+0xf0>
  {
    button_tbl[i].pressed = 0;
 8008ee6:	4a3e      	ldr	r2, [pc, #248]	; (8008fe0 <buttonInit+0x168>)
 8008ee8:	6a3b      	ldr	r3, [r7, #32]
 8008eea:	212c      	movs	r1, #44	; 0x2c
 8008eec:	fb01 f303 	mul.w	r3, r1, r3
 8008ef0:	4413      	add	r3, r2
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	701a      	strb	r2, [r3, #0]
    button_tbl[i].pressed_cnt = 0;
 8008ef6:	4a3a      	ldr	r2, [pc, #232]	; (8008fe0 <buttonInit+0x168>)
 8008ef8:	6a3b      	ldr	r3, [r7, #32]
 8008efa:	212c      	movs	r1, #44	; 0x2c
 8008efc:	fb01 f303 	mul.w	r3, r1, r3
 8008f00:	4413      	add	r3, r2
 8008f02:	3302      	adds	r3, #2
 8008f04:	2200      	movs	r2, #0
 8008f06:	801a      	strh	r2, [r3, #0]
    button_tbl[i].pressed_event = 0;
 8008f08:	4a35      	ldr	r2, [pc, #212]	; (8008fe0 <buttonInit+0x168>)
 8008f0a:	6a3b      	ldr	r3, [r7, #32]
 8008f0c:	212c      	movs	r1, #44	; 0x2c
 8008f0e:	fb01 f303 	mul.w	r3, r1, r3
 8008f12:	4413      	add	r3, r2
 8008f14:	3301      	adds	r3, #1
 8008f16:	2200      	movs	r2, #0
 8008f18:	701a      	strb	r2, [r3, #0]

    button_tbl[i].released = 0;
 8008f1a:	4a31      	ldr	r2, [pc, #196]	; (8008fe0 <buttonInit+0x168>)
 8008f1c:	6a3b      	ldr	r3, [r7, #32]
 8008f1e:	212c      	movs	r1, #44	; 0x2c
 8008f20:	fb01 f303 	mul.w	r3, r1, r3
 8008f24:	4413      	add	r3, r2
 8008f26:	330c      	adds	r3, #12
 8008f28:	2200      	movs	r2, #0
 8008f2a:	701a      	strb	r2, [r3, #0]
    button_tbl[i].released_event = 0;
 8008f2c:	4a2c      	ldr	r2, [pc, #176]	; (8008fe0 <buttonInit+0x168>)
 8008f2e:	6a3b      	ldr	r3, [r7, #32]
 8008f30:	212c      	movs	r1, #44	; 0x2c
 8008f32:	fb01 f303 	mul.w	r3, r1, r3
 8008f36:	4413      	add	r3, r2
 8008f38:	330d      	adds	r3, #13
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	701a      	strb	r2, [r3, #0]

    button_tbl[i].repeat_cnt = 0;
 8008f3e:	4a28      	ldr	r2, [pc, #160]	; (8008fe0 <buttonInit+0x168>)
 8008f40:	6a3b      	ldr	r3, [r7, #32]
 8008f42:	212c      	movs	r1, #44	; 0x2c
 8008f44:	fb01 f303 	mul.w	r3, r1, r3
 8008f48:	4413      	add	r3, r2
 8008f4a:	331c      	adds	r3, #28
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	601a      	str	r2, [r3, #0]
    button_tbl[i].repeat_update = 0;
 8008f50:	4a23      	ldr	r2, [pc, #140]	; (8008fe0 <buttonInit+0x168>)
 8008f52:	6a3b      	ldr	r3, [r7, #32]
 8008f54:	212c      	movs	r1, #44	; 0x2c
 8008f56:	fb01 f303 	mul.w	r3, r1, r3
 8008f5a:	4413      	add	r3, r2
 8008f5c:	3318      	adds	r3, #24
 8008f5e:	2200      	movs	r2, #0
 8008f60:	701a      	strb	r2, [r3, #0]
  for(int i=0; i < BTN_MAX_CH; i++)
 8008f62:	6a3b      	ldr	r3, [r7, #32]
 8008f64:	3301      	adds	r3, #1
 8008f66:	623b      	str	r3, [r7, #32]
 8008f68:	6a3b      	ldr	r3, [r7, #32]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	ddbb      	ble.n	8008ee6 <buttonInit+0x6e>
  }

  for (int i=0; i<BTN_EVENT_MAX; i++)
 8008f6e:	2300      	movs	r3, #0
 8008f70:	61fb      	str	r3, [r7, #28]
 8008f72:	e007      	b.n	8008f84 <buttonInit+0x10c>
  {
   event_tbl[i] = NULL;
 8008f74:	4a1b      	ldr	r2, [pc, #108]	; (8008fe4 <buttonInit+0x16c>)
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	2100      	movs	r1, #0
 8008f7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int i=0; i<BTN_EVENT_MAX; i++)
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	3301      	adds	r3, #1
 8008f82:	61fb      	str	r3, [r7, #28]
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	2b07      	cmp	r3, #7
 8008f88:	ddf4      	ble.n	8008f74 <buttonInit+0xfc>
  }

  swtimer_handle_t timer_ch;
  timer_ch = swtimerGetHandle();
 8008f8a:	f001 f97b 	bl	800a284 <swtimerGetHandle>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	833b      	strh	r3, [r7, #24]
  if (timer_ch >= 0)
 8008f92:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	db0e      	blt.n	8008fb8 <buttonInit+0x140>
  {
    swtimerSet(timer_ch, 10, LOOP_TIME, buttonISR, NULL);
 8008f9a:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	9300      	str	r3, [sp, #0]
 8008fa2:	4b11      	ldr	r3, [pc, #68]	; (8008fe8 <buttonInit+0x170>)
 8008fa4:	2202      	movs	r2, #2
 8008fa6:	210a      	movs	r1, #10
 8008fa8:	f001 f8ee 	bl	800a188 <swtimerSet>
    swtimerStart(timer_ch);
 8008fac:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f001 f937 	bl	800a224 <swtimerStart>
 8008fb6:	e003      	b.n	8008fc0 <buttonInit+0x148>
  }
  else
  {
    uartPrintf(_DEF_UART1,"[NG] buttonInit()\n     swtimerGetHandle()\n");
 8008fb8:	490c      	ldr	r1, [pc, #48]	; (8008fec <buttonInit+0x174>)
 8008fba:	2000      	movs	r0, #0
 8008fbc:	f001 fa70 	bl	800a4a0 <uartPrintf>
  }
#ifdef _USE_HW_CLI
  cliAdd("BUTTON", cliButton);
 8008fc0:	490b      	ldr	r1, [pc, #44]	; (8008ff0 <buttonInit+0x178>)
 8008fc2:	480c      	ldr	r0, [pc, #48]	; (8008ff4 <buttonInit+0x17c>)
 8008fc4:	f000 fcd6 	bl	8009974 <cliAdd>
#endif
  return ret;
 8008fc8:	7efb      	ldrb	r3, [r7, #27]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3728      	adds	r7, #40	; 0x28
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	40021000 	.word	0x40021000
 8008fd8:	080184a8 	.word	0x080184a8
 8008fdc:	48000800 	.word	0x48000800
 8008fe0:	20000380 	.word	0x20000380
 8008fe4:	200003b0 	.word	0x200003b0
 8008fe8:	08008ff9 	.word	0x08008ff9
 8008fec:	08018114 	.word	0x08018114
 8008ff0:	08009489 	.word	0x08009489
 8008ff4:	08018140 	.word	0x08018140

08008ff8 <buttonISR>:

  return ret;
}

void buttonISR(void* args)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b088      	sub	sp, #32
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  uint32_t repeat_time;

  for (int i=0; i<BTN_MAX_CH; i++)
 8009000:	2300      	movs	r3, #0
 8009002:	61bb      	str	r3, [r7, #24]
 8009004:	e187      	b.n	8009316 <buttonISR+0x31e>
  {
    // btn pushed
    if (buttonGetPin(i) == true)
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	b2db      	uxtb	r3, r3
 800900a:	4618      	mov	r0, r3
 800900c:	f000 f99e 	bl	800934c <buttonGetPin>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	f000 8100 	beq.w	8009218 <buttonISR+0x220>
    {
      //pre btn state - false
      if (button_tbl[i].pressed == false)
 8009018:	4a99      	ldr	r2, [pc, #612]	; (8009280 <buttonISR+0x288>)
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	212c      	movs	r1, #44	; 0x2c
 800901e:	fb01 f303 	mul.w	r3, r1, r3
 8009022:	4413      	add	r3, r2
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	f083 0301 	eor.w	r3, r3, #1
 800902a:	b2db      	uxtb	r3, r3
 800902c:	2b00      	cmp	r3, #0
 800902e:	d03b      	beq.n	80090a8 <buttonISR+0xb0>
      {
        button_tbl[i].pressed_event = true;
 8009030:	4a93      	ldr	r2, [pc, #588]	; (8009280 <buttonISR+0x288>)
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	212c      	movs	r1, #44	; 0x2c
 8009036:	fb01 f303 	mul.w	r3, r1, r3
 800903a:	4413      	add	r3, r2
 800903c:	3301      	adds	r3, #1
 800903e:	2201      	movs	r2, #1
 8009040:	701a      	strb	r2, [r3, #0]
        button_tbl[i].pressed_start_time = HAL_GetTick();
 8009042:	f001 fd79 	bl	800ab38 <HAL_GetTick>
 8009046:	4602      	mov	r2, r0
 8009048:	498d      	ldr	r1, [pc, #564]	; (8009280 <buttonISR+0x288>)
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	202c      	movs	r0, #44	; 0x2c
 800904e:	fb00 f303 	mul.w	r3, r0, r3
 8009052:	440b      	add	r3, r1
 8009054:	3304      	adds	r3, #4
 8009056:	601a      	str	r2, [r3, #0]

        for (int e_i=0; e_i<event_cnt; e_i++)
 8009058:	2300      	movs	r3, #0
 800905a:	617b      	str	r3, [r7, #20]
 800905c:	e01e      	b.n	800909c <buttonISR+0xa4>
        {
          if (event_tbl[e_i]->level <= event_level)
 800905e:	4a89      	ldr	r2, [pc, #548]	; (8009284 <buttonISR+0x28c>)
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009066:	785a      	ldrb	r2, [r3, #1]
 8009068:	4b87      	ldr	r3, [pc, #540]	; (8009288 <buttonISR+0x290>)
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	429a      	cmp	r2, r3
 800906e:	d809      	bhi.n	8009084 <buttonISR+0x8c>
            event_tbl[e_i]->pressed_event[i] = true;
 8009070:	4a84      	ldr	r2, [pc, #528]	; (8009284 <buttonISR+0x28c>)
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	4413      	add	r3, r2
 800907c:	3303      	adds	r3, #3
 800907e:	2201      	movs	r2, #1
 8009080:	701a      	strb	r2, [r3, #0]
 8009082:	e008      	b.n	8009096 <buttonISR+0x9e>
          else
            event_tbl[e_i]->pressed_event[i] = false;
 8009084:	4a7f      	ldr	r2, [pc, #508]	; (8009284 <buttonISR+0x28c>)
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800908c:	69bb      	ldr	r3, [r7, #24]
 800908e:	4413      	add	r3, r2
 8009090:	3303      	adds	r3, #3
 8009092:	2200      	movs	r2, #0
 8009094:	701a      	strb	r2, [r3, #0]
        for (int e_i=0; e_i<event_cnt; e_i++)
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	3301      	adds	r3, #1
 800909a:	617b      	str	r3, [r7, #20]
 800909c:	4b7b      	ldr	r3, [pc, #492]	; (800928c <buttonISR+0x294>)
 800909e:	881b      	ldrh	r3, [r3, #0]
 80090a0:	461a      	mov	r2, r3
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	4293      	cmp	r3, r2
 80090a6:	dbda      	blt.n	800905e <buttonISR+0x66>
        }
      }

      button_tbl[i].pressed = true;
 80090a8:	4a75      	ldr	r2, [pc, #468]	; (8009280 <buttonISR+0x288>)
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	212c      	movs	r1, #44	; 0x2c
 80090ae:	fb01 f303 	mul.w	r3, r1, r3
 80090b2:	4413      	add	r3, r2
 80090b4:	2201      	movs	r2, #1
 80090b6:	701a      	strb	r2, [r3, #0]
      button_tbl[i].pressed_cnt++;
 80090b8:	4a71      	ldr	r2, [pc, #452]	; (8009280 <buttonISR+0x288>)
 80090ba:	69bb      	ldr	r3, [r7, #24]
 80090bc:	212c      	movs	r1, #44	; 0x2c
 80090be:	fb01 f303 	mul.w	r3, r1, r3
 80090c2:	4413      	add	r3, r2
 80090c4:	3302      	adds	r3, #2
 80090c6:	881b      	ldrh	r3, [r3, #0]
 80090c8:	3301      	adds	r3, #1
 80090ca:	b298      	uxth	r0, r3
 80090cc:	4a6c      	ldr	r2, [pc, #432]	; (8009280 <buttonISR+0x288>)
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	212c      	movs	r1, #44	; 0x2c
 80090d2:	fb01 f303 	mul.w	r3, r1, r3
 80090d6:	4413      	add	r3, r2
 80090d8:	3302      	adds	r3, #2
 80090da:	4602      	mov	r2, r0
 80090dc:	801a      	strh	r2, [r3, #0]

      if (button_tbl[i].repeat_cnt == 0)
 80090de:	4a68      	ldr	r2, [pc, #416]	; (8009280 <buttonISR+0x288>)
 80090e0:	69bb      	ldr	r3, [r7, #24]
 80090e2:	212c      	movs	r1, #44	; 0x2c
 80090e4:	fb01 f303 	mul.w	r3, r1, r3
 80090e8:	4413      	add	r3, r2
 80090ea:	331c      	adds	r3, #28
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d109      	bne.n	8009106 <buttonISR+0x10e>
      {
        repeat_time = button_tbl[i].repeat_time_detect;
 80090f2:	4a63      	ldr	r2, [pc, #396]	; (8009280 <buttonISR+0x288>)
 80090f4:	69bb      	ldr	r3, [r7, #24]
 80090f6:	212c      	movs	r1, #44	; 0x2c
 80090f8:	fb01 f303 	mul.w	r3, r1, r3
 80090fc:	4413      	add	r3, r2
 80090fe:	3320      	adds	r3, #32
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	61fb      	str	r3, [r7, #28]
 8009104:	e01c      	b.n	8009140 <buttonISR+0x148>
      }
      else if (button_tbl[i].repeat_cnt == 1)
 8009106:	4a5e      	ldr	r2, [pc, #376]	; (8009280 <buttonISR+0x288>)
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	212c      	movs	r1, #44	; 0x2c
 800910c:	fb01 f303 	mul.w	r3, r1, r3
 8009110:	4413      	add	r3, r2
 8009112:	331c      	adds	r3, #28
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2b01      	cmp	r3, #1
 8009118:	d109      	bne.n	800912e <buttonISR+0x136>
      {
        repeat_time = button_tbl[i].repeat_time_delay;
 800911a:	4a59      	ldr	r2, [pc, #356]	; (8009280 <buttonISR+0x288>)
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	212c      	movs	r1, #44	; 0x2c
 8009120:	fb01 f303 	mul.w	r3, r1, r3
 8009124:	4413      	add	r3, r2
 8009126:	3324      	adds	r3, #36	; 0x24
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	61fb      	str	r3, [r7, #28]
 800912c:	e008      	b.n	8009140 <buttonISR+0x148>
      }
      else
      {
        repeat_time = button_tbl[i].repeat_time;
 800912e:	4a54      	ldr	r2, [pc, #336]	; (8009280 <buttonISR+0x288>)
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	212c      	movs	r1, #44	; 0x2c
 8009134:	fb01 f303 	mul.w	r3, r1, r3
 8009138:	4413      	add	r3, r2
 800913a:	3328      	adds	r3, #40	; 0x28
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	61fb      	str	r3, [r7, #28]
      }
      if (button_tbl[i].pressed_cnt >= repeat_time)
 8009140:	4a4f      	ldr	r2, [pc, #316]	; (8009280 <buttonISR+0x288>)
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	212c      	movs	r1, #44	; 0x2c
 8009146:	fb01 f303 	mul.w	r3, r1, r3
 800914a:	4413      	add	r3, r2
 800914c:	3302      	adds	r3, #2
 800914e:	881b      	ldrh	r3, [r3, #0]
 8009150:	461a      	mov	r2, r3
 8009152:	69fb      	ldr	r3, [r7, #28]
 8009154:	4293      	cmp	r3, r2
 8009156:	d84a      	bhi.n	80091ee <buttonISR+0x1f6>
      {
        button_tbl[i].pressed_cnt = 0;
 8009158:	4a49      	ldr	r2, [pc, #292]	; (8009280 <buttonISR+0x288>)
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	212c      	movs	r1, #44	; 0x2c
 800915e:	fb01 f303 	mul.w	r3, r1, r3
 8009162:	4413      	add	r3, r2
 8009164:	3302      	adds	r3, #2
 8009166:	2200      	movs	r2, #0
 8009168:	801a      	strh	r2, [r3, #0]
        button_tbl[i].repeat_cnt++;
 800916a:	4a45      	ldr	r2, [pc, #276]	; (8009280 <buttonISR+0x288>)
 800916c:	69bb      	ldr	r3, [r7, #24]
 800916e:	212c      	movs	r1, #44	; 0x2c
 8009170:	fb01 f303 	mul.w	r3, r1, r3
 8009174:	4413      	add	r3, r2
 8009176:	331c      	adds	r3, #28
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	1c5a      	adds	r2, r3, #1
 800917c:	4940      	ldr	r1, [pc, #256]	; (8009280 <buttonISR+0x288>)
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	202c      	movs	r0, #44	; 0x2c
 8009182:	fb00 f303 	mul.w	r3, r0, r3
 8009186:	440b      	add	r3, r1
 8009188:	331c      	adds	r3, #28
 800918a:	601a      	str	r2, [r3, #0]
        button_tbl[i].repeat_update = true;
 800918c:	4a3c      	ldr	r2, [pc, #240]	; (8009280 <buttonISR+0x288>)
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	212c      	movs	r1, #44	; 0x2c
 8009192:	fb01 f303 	mul.w	r3, r1, r3
 8009196:	4413      	add	r3, r2
 8009198:	3318      	adds	r3, #24
 800919a:	2201      	movs	r2, #1
 800919c:	701a      	strb	r2, [r3, #0]

        for (int e_i=0; e_i<event_cnt; e_i++)
 800919e:	2300      	movs	r3, #0
 80091a0:	613b      	str	r3, [r7, #16]
 80091a2:	e01e      	b.n	80091e2 <buttonISR+0x1ea>
        {
          if (event_tbl[e_i]->level <= event_level)
 80091a4:	4a37      	ldr	r2, [pc, #220]	; (8009284 <buttonISR+0x28c>)
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091ac:	785a      	ldrb	r2, [r3, #1]
 80091ae:	4b36      	ldr	r3, [pc, #216]	; (8009288 <buttonISR+0x290>)
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d809      	bhi.n	80091ca <buttonISR+0x1d2>
            event_tbl[e_i]->repeat_event[i] = true;
 80091b6:	4a33      	ldr	r2, [pc, #204]	; (8009284 <buttonISR+0x28c>)
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	4413      	add	r3, r2
 80091c2:	3305      	adds	r3, #5
 80091c4:	2201      	movs	r2, #1
 80091c6:	701a      	strb	r2, [r3, #0]
 80091c8:	e008      	b.n	80091dc <buttonISR+0x1e4>
          else
            event_tbl[e_i]->repeat_event[i] = false;
 80091ca:	4a2e      	ldr	r2, [pc, #184]	; (8009284 <buttonISR+0x28c>)
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	4413      	add	r3, r2
 80091d6:	3305      	adds	r3, #5
 80091d8:	2200      	movs	r2, #0
 80091da:	701a      	strb	r2, [r3, #0]
        for (int e_i=0; e_i<event_cnt; e_i++)
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	3301      	adds	r3, #1
 80091e0:	613b      	str	r3, [r7, #16]
 80091e2:	4b2a      	ldr	r3, [pc, #168]	; (800928c <buttonISR+0x294>)
 80091e4:	881b      	ldrh	r3, [r3, #0]
 80091e6:	461a      	mov	r2, r3
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	4293      	cmp	r3, r2
 80091ec:	dbda      	blt.n	80091a4 <buttonISR+0x1ac>
        }
      }

      button_tbl[i].pressed_end_time = HAL_GetTick();
 80091ee:	f001 fca3 	bl	800ab38 <HAL_GetTick>
 80091f2:	4602      	mov	r2, r0
 80091f4:	4922      	ldr	r1, [pc, #136]	; (8009280 <buttonISR+0x288>)
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	202c      	movs	r0, #44	; 0x2c
 80091fa:	fb00 f303 	mul.w	r3, r0, r3
 80091fe:	440b      	add	r3, r1
 8009200:	3308      	adds	r3, #8
 8009202:	601a      	str	r2, [r3, #0]

      button_tbl[i].released = false;
 8009204:	4a1e      	ldr	r2, [pc, #120]	; (8009280 <buttonISR+0x288>)
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	212c      	movs	r1, #44	; 0x2c
 800920a:	fb01 f303 	mul.w	r3, r1, r3
 800920e:	4413      	add	r3, r2
 8009210:	330c      	adds	r3, #12
 8009212:	2200      	movs	r2, #0
 8009214:	701a      	strb	r2, [r3, #0]
 8009216:	e07b      	b.n	8009310 <buttonISR+0x318>
    }
    else  //btn - release
    {
      // pre btn state - pressed
      if (button_tbl[i].pressed == true)
 8009218:	4a19      	ldr	r2, [pc, #100]	; (8009280 <buttonISR+0x288>)
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	212c      	movs	r1, #44	; 0x2c
 800921e:	fb01 f303 	mul.w	r3, r1, r3
 8009222:	4413      	add	r3, r2
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d044      	beq.n	80092b4 <buttonISR+0x2bc>
      {
        button_tbl[i].released_event = true;
 800922a:	4a15      	ldr	r2, [pc, #84]	; (8009280 <buttonISR+0x288>)
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	212c      	movs	r1, #44	; 0x2c
 8009230:	fb01 f303 	mul.w	r3, r1, r3
 8009234:	4413      	add	r3, r2
 8009236:	330d      	adds	r3, #13
 8009238:	2201      	movs	r2, #1
 800923a:	701a      	strb	r2, [r3, #0]
        button_tbl[i].released_start_time = HAL_GetTick();
 800923c:	f001 fc7c 	bl	800ab38 <HAL_GetTick>
 8009240:	4602      	mov	r2, r0
 8009242:	490f      	ldr	r1, [pc, #60]	; (8009280 <buttonISR+0x288>)
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	202c      	movs	r0, #44	; 0x2c
 8009248:	fb00 f303 	mul.w	r3, r0, r3
 800924c:	440b      	add	r3, r1
 800924e:	3310      	adds	r3, #16
 8009250:	601a      	str	r2, [r3, #0]

        for (int e_i=0; e_i<event_cnt; e_i++)
 8009252:	2300      	movs	r3, #0
 8009254:	60fb      	str	r3, [r7, #12]
 8009256:	e027      	b.n	80092a8 <buttonISR+0x2b0>
        {
          if (event_tbl[e_i]->level <= event_level)
 8009258:	4a0a      	ldr	r2, [pc, #40]	; (8009284 <buttonISR+0x28c>)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009260:	785a      	ldrb	r2, [r3, #1]
 8009262:	4b09      	ldr	r3, [pc, #36]	; (8009288 <buttonISR+0x290>)
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	429a      	cmp	r2, r3
 8009268:	d812      	bhi.n	8009290 <buttonISR+0x298>
            event_tbl[e_i]->released_event[i] = true;
 800926a:	4a06      	ldr	r2, [pc, #24]	; (8009284 <buttonISR+0x28c>)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	4413      	add	r3, r2
 8009276:	3304      	adds	r3, #4
 8009278:	2201      	movs	r2, #1
 800927a:	701a      	strb	r2, [r3, #0]
 800927c:	e011      	b.n	80092a2 <buttonISR+0x2aa>
 800927e:	bf00      	nop
 8009280:	20000380 	.word	0x20000380
 8009284:	200003b0 	.word	0x200003b0
 8009288:	2000000d 	.word	0x2000000d
 800928c:	200003ac 	.word	0x200003ac
          else
            event_tbl[e_i]->released_event[i] = false;
 8009290:	4a2a      	ldr	r2, [pc, #168]	; (800933c <buttonISR+0x344>)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	4413      	add	r3, r2
 800929c:	3304      	adds	r3, #4
 800929e:	2200      	movs	r2, #0
 80092a0:	701a      	strb	r2, [r3, #0]
        for (int e_i=0; e_i<event_cnt; e_i++)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	3301      	adds	r3, #1
 80092a6:	60fb      	str	r3, [r7, #12]
 80092a8:	4b25      	ldr	r3, [pc, #148]	; (8009340 <buttonISR+0x348>)
 80092aa:	881b      	ldrh	r3, [r3, #0]
 80092ac:	461a      	mov	r2, r3
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	4293      	cmp	r3, r2
 80092b2:	dbd1      	blt.n	8009258 <buttonISR+0x260>
        }
      }

      button_tbl[i].pressed  = false;
 80092b4:	4a23      	ldr	r2, [pc, #140]	; (8009344 <buttonISR+0x34c>)
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	212c      	movs	r1, #44	; 0x2c
 80092ba:	fb01 f303 	mul.w	r3, r1, r3
 80092be:	4413      	add	r3, r2
 80092c0:	2200      	movs	r2, #0
 80092c2:	701a      	strb	r2, [r3, #0]
      button_tbl[i].released = true;
 80092c4:	4a1f      	ldr	r2, [pc, #124]	; (8009344 <buttonISR+0x34c>)
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	212c      	movs	r1, #44	; 0x2c
 80092ca:	fb01 f303 	mul.w	r3, r1, r3
 80092ce:	4413      	add	r3, r2
 80092d0:	330c      	adds	r3, #12
 80092d2:	2201      	movs	r2, #1
 80092d4:	701a      	strb	r2, [r3, #0]
      button_tbl[i].repeat_cnt = 0;
 80092d6:	4a1b      	ldr	r2, [pc, #108]	; (8009344 <buttonISR+0x34c>)
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	212c      	movs	r1, #44	; 0x2c
 80092dc:	fb01 f303 	mul.w	r3, r1, r3
 80092e0:	4413      	add	r3, r2
 80092e2:	331c      	adds	r3, #28
 80092e4:	2200      	movs	r2, #0
 80092e6:	601a      	str	r2, [r3, #0]
      button_tbl[i].repeat_update = false;
 80092e8:	4a16      	ldr	r2, [pc, #88]	; (8009344 <buttonISR+0x34c>)
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	212c      	movs	r1, #44	; 0x2c
 80092ee:	fb01 f303 	mul.w	r3, r1, r3
 80092f2:	4413      	add	r3, r2
 80092f4:	3318      	adds	r3, #24
 80092f6:	2200      	movs	r2, #0
 80092f8:	701a      	strb	r2, [r3, #0]

      button_tbl[i].released_end_time = HAL_GetTick();
 80092fa:	f001 fc1d 	bl	800ab38 <HAL_GetTick>
 80092fe:	4602      	mov	r2, r0
 8009300:	4910      	ldr	r1, [pc, #64]	; (8009344 <buttonISR+0x34c>)
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	202c      	movs	r0, #44	; 0x2c
 8009306:	fb00 f303 	mul.w	r3, r0, r3
 800930a:	440b      	add	r3, r1
 800930c:	3314      	adds	r3, #20
 800930e:	601a      	str	r2, [r3, #0]
  for (int i=0; i<BTN_MAX_CH; i++)
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	3301      	adds	r3, #1
 8009314:	61bb      	str	r3, [r7, #24]
 8009316:	69bb      	ldr	r3, [r7, #24]
 8009318:	2b00      	cmp	r3, #0
 800931a:	f77f ae74 	ble.w	8009006 <buttonISR+0xe>
    }
  }

  uartPrintf("pressed_cnt : %d\nrepeat_cnt : %d\nrepeat_time : %d\n", button_tbl[0].pressed_cnt, button_tbl[0].repeat_cnt, button_tbl[0].repeat_time);
 800931e:	4b0a      	ldr	r3, [pc, #40]	; (8009348 <buttonISR+0x350>)
 8009320:	b2d8      	uxtb	r0, r3
 8009322:	4b08      	ldr	r3, [pc, #32]	; (8009344 <buttonISR+0x34c>)
 8009324:	885b      	ldrh	r3, [r3, #2]
 8009326:	4619      	mov	r1, r3
 8009328:	4b06      	ldr	r3, [pc, #24]	; (8009344 <buttonISR+0x34c>)
 800932a:	69da      	ldr	r2, [r3, #28]
 800932c:	4b05      	ldr	r3, [pc, #20]	; (8009344 <buttonISR+0x34c>)
 800932e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009330:	f001 f8b6 	bl	800a4a0 <uartPrintf>
}
 8009334:	bf00      	nop
 8009336:	3720      	adds	r7, #32
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	200003b0 	.word	0x200003b0
 8009340:	200003ac 	.word	0x200003ac
 8009344:	20000380 	.word	0x20000380
 8009348:	08018148 	.word	0x08018148

0800934c <buttonGetPin>:

// btn - click : TRUE
bool buttonGetPin(uint8_t ch)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	4603      	mov	r3, r0
 8009354:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8009356:	2300      	movs	r3, #0
 8009358:	73fb      	strb	r3, [r7, #15]

  if(ch >= BTN_MAX_CH)
 800935a:	79fb      	ldrb	r3, [r7, #7]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d001      	beq.n	8009364 <buttonGetPin+0x18>
  {
    return false;
 8009360:	2300      	movs	r3, #0
 8009362:	e024      	b.n	80093ae <buttonGetPin+0x62>
  }

  // btn - pushed ret true
  if (HAL_GPIO_ReadPin(button_pin[ch].port, button_pin[ch].pin) == button_pin[ch].on_state)
 8009364:	79fa      	ldrb	r2, [r7, #7]
 8009366:	4914      	ldr	r1, [pc, #80]	; (80093b8 <buttonGetPin+0x6c>)
 8009368:	4613      	mov	r3, r2
 800936a:	005b      	lsls	r3, r3, #1
 800936c:	4413      	add	r3, r2
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	440b      	add	r3, r1
 8009372:	6818      	ldr	r0, [r3, #0]
 8009374:	79fa      	ldrb	r2, [r7, #7]
 8009376:	4910      	ldr	r1, [pc, #64]	; (80093b8 <buttonGetPin+0x6c>)
 8009378:	4613      	mov	r3, r2
 800937a:	005b      	lsls	r3, r3, #1
 800937c:	4413      	add	r3, r2
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	440b      	add	r3, r1
 8009382:	3304      	adds	r3, #4
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	b29b      	uxth	r3, r3
 8009388:	4619      	mov	r1, r3
 800938a:	f001 ff55 	bl	800b238 <HAL_GPIO_ReadPin>
 800938e:	4603      	mov	r3, r0
 8009390:	4618      	mov	r0, r3
 8009392:	79fa      	ldrb	r2, [r7, #7]
 8009394:	4908      	ldr	r1, [pc, #32]	; (80093b8 <buttonGetPin+0x6c>)
 8009396:	4613      	mov	r3, r2
 8009398:	005b      	lsls	r3, r3, #1
 800939a:	4413      	add	r3, r2
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	440b      	add	r3, r1
 80093a0:	3308      	adds	r3, #8
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	4298      	cmp	r0, r3
 80093a6:	d101      	bne.n	80093ac <buttonGetPin+0x60>
  {
    ret = true;
 80093a8:	2301      	movs	r3, #1
 80093aa:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80093ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	080184a8 	.word	0x080184a8

080093bc <buttonGetPressed>:
  is_enable = enable;
}

// ret btn state
bool buttonGetPressed(uint8_t ch)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	4603      	mov	r3, r0
 80093c4:	71fb      	strb	r3, [r7, #7]
  if (ch >= BTN_MAX_CH || is_enable == false)
 80093c6:	79fb      	ldrb	r3, [r7, #7]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d106      	bne.n	80093da <buttonGetPressed+0x1e>
 80093cc:	4b0a      	ldr	r3, [pc, #40]	; (80093f8 <buttonGetPressed+0x3c>)
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	f083 0301 	eor.w	r3, r3, #1
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d001      	beq.n	80093de <buttonGetPressed+0x22>
  {
    return false;
 80093da:	2300      	movs	r3, #0
 80093dc:	e006      	b.n	80093ec <buttonGetPressed+0x30>
  }

  return button_tbl[ch].pressed;
 80093de:	79fb      	ldrb	r3, [r7, #7]
 80093e0:	4a06      	ldr	r2, [pc, #24]	; (80093fc <buttonGetPressed+0x40>)
 80093e2:	212c      	movs	r1, #44	; 0x2c
 80093e4:	fb01 f303 	mul.w	r3, r1, r3
 80093e8:	4413      	add	r3, r2
 80093ea:	781b      	ldrb	r3, [r3, #0]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	2000000c 	.word	0x2000000c
 80093fc:	20000380 	.word	0x20000380

08009400 <buttonGetName>:

  return ret;
}

const char *buttonGetName(uint8_t ch)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	4603      	mov	r3, r0
 8009408:	71fb      	strb	r3, [r7, #7]
  ch = constrain(ch, 0, BTN_MAX_CH);
 800940a:	79fb      	ldrb	r3, [r7, #7]
 800940c:	2b01      	cmp	r3, #1
 800940e:	bf28      	it	cs
 8009410:	2301      	movcs	r3, #1
 8009412:	71fb      	strb	r3, [r7, #7]

  return button_name[ch];
 8009414:	79fb      	ldrb	r3, [r7, #7]
 8009416:	4a04      	ldr	r2, [pc, #16]	; (8009428 <buttonGetName+0x28>)
 8009418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800941c:	4618      	mov	r0, r3
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr
 8009428:	20000004 	.word	0x20000004

0800942c <buttonGetPressedTime>:

  return ret;
}

uint32_t buttonGetPressedTime(uint8_t ch)
{
 800942c:	b480      	push	{r7}
 800942e:	b085      	sub	sp, #20
 8009430:	af00      	add	r7, sp, #0
 8009432:	4603      	mov	r3, r0
 8009434:	71fb      	strb	r3, [r7, #7]
  volatile uint32_t ret;


  if (ch >= BTN_MAX_CH || is_enable == false) return 0;
 8009436:	79fb      	ldrb	r3, [r7, #7]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d106      	bne.n	800944a <buttonGetPressedTime+0x1e>
 800943c:	4b10      	ldr	r3, [pc, #64]	; (8009480 <buttonGetPressedTime+0x54>)
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	f083 0301 	eor.w	r3, r3, #1
 8009444:	b2db      	uxtb	r3, r3
 8009446:	2b00      	cmp	r3, #0
 8009448:	d001      	beq.n	800944e <buttonGetPressedTime+0x22>
 800944a:	2300      	movs	r3, #0
 800944c:	e012      	b.n	8009474 <buttonGetPressedTime+0x48>


  ret = button_tbl[ch].pressed_end_time - button_tbl[ch].pressed_start_time;
 800944e:	79fb      	ldrb	r3, [r7, #7]
 8009450:	4a0c      	ldr	r2, [pc, #48]	; (8009484 <buttonGetPressedTime+0x58>)
 8009452:	212c      	movs	r1, #44	; 0x2c
 8009454:	fb01 f303 	mul.w	r3, r1, r3
 8009458:	4413      	add	r3, r2
 800945a:	3308      	adds	r3, #8
 800945c:	681a      	ldr	r2, [r3, #0]
 800945e:	79fb      	ldrb	r3, [r7, #7]
 8009460:	4908      	ldr	r1, [pc, #32]	; (8009484 <buttonGetPressedTime+0x58>)
 8009462:	202c      	movs	r0, #44	; 0x2c
 8009464:	fb00 f303 	mul.w	r3, r0, r3
 8009468:	440b      	add	r3, r1
 800946a:	3304      	adds	r3, #4
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	1ad3      	subs	r3, r2, r3
 8009470:	60fb      	str	r3, [r7, #12]

  return ret;
 8009472:	68fb      	ldr	r3, [r7, #12]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3714      	adds	r7, #20
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr
 8009480:	2000000c 	.word	0x2000000c
 8009484:	20000380 	.word	0x20000380

08009488 <cliButton>:
  return ret;
}

#ifdef _USE_HW_CLI
void cliButton(cli_args_t *args)
{
 8009488:	b590      	push	{r4, r7, lr}
 800948a:	b089      	sub	sp, #36	; 0x24
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8009490:	2300      	movs	r3, #0
 8009492:	77fb      	strb	r3, [r7, #31]


  if (args->argc == 1 && args->isStr(0, "info"))
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	881b      	ldrh	r3, [r3, #0]
 8009498:	2b01      	cmp	r3, #1
 800949a:	d125      	bne.n	80094e8 <cliButton+0x60>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	695b      	ldr	r3, [r3, #20]
 80094a0:	4952      	ldr	r1, [pc, #328]	; (80095ec <cliButton+0x164>)
 80094a2:	2000      	movs	r0, #0
 80094a4:	4798      	blx	r3
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d01d      	beq.n	80094e8 <cliButton+0x60>
  {
    for (int i=0; i<BTN_MAX_CH; i++)
 80094ac:	2300      	movs	r3, #0
 80094ae:	61bb      	str	r3, [r7, #24]
 80094b0:	e015      	b.n	80094de <cliButton+0x56>
    {
      cliPrintf("%-12s pin %d\n", buttonGetName(i), button_pin[i].pin);
 80094b2:	69bb      	ldr	r3, [r7, #24]
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7ff ffa2 	bl	8009400 <buttonGetName>
 80094bc:	4601      	mov	r1, r0
 80094be:	484c      	ldr	r0, [pc, #304]	; (80095f0 <cliButton+0x168>)
 80094c0:	69ba      	ldr	r2, [r7, #24]
 80094c2:	4613      	mov	r3, r2
 80094c4:	005b      	lsls	r3, r3, #1
 80094c6:	4413      	add	r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4403      	add	r3, r0
 80094cc:	3304      	adds	r3, #4
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	461a      	mov	r2, r3
 80094d2:	4848      	ldr	r0, [pc, #288]	; (80095f4 <cliButton+0x16c>)
 80094d4:	f000 f93e 	bl	8009754 <cliPrintf>
    for (int i=0; i<BTN_MAX_CH; i++)
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	3301      	adds	r3, #1
 80094dc:	61bb      	str	r3, [r7, #24]
 80094de:	69bb      	ldr	r3, [r7, #24]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	dde6      	ble.n	80094b2 <cliButton+0x2a>
    }
    ret = true;
 80094e4:	2301      	movs	r3, #1
 80094e6:	77fb      	strb	r3, [r7, #31]
  }

  if (args->argc == 1 && args->isStr(0, "show"))
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	881b      	ldrh	r3, [r3, #0]
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d128      	bne.n	8009542 <cliButton+0xba>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	695b      	ldr	r3, [r3, #20]
 80094f4:	4940      	ldr	r1, [pc, #256]	; (80095f8 <cliButton+0x170>)
 80094f6:	2000      	movs	r0, #0
 80094f8:	4798      	blx	r3
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d020      	beq.n	8009542 <cliButton+0xba>
  {
    while(cliKeepLoop())
 8009500:	e018      	b.n	8009534 <cliButton+0xac>
    {
      for (int i=0; i<BTN_MAX_CH; i++)
 8009502:	2300      	movs	r3, #0
 8009504:	617b      	str	r3, [r7, #20]
 8009506:	e00c      	b.n	8009522 <cliButton+0x9a>
      {
        cliPrintf("%d", buttonGetPressed(i));
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	b2db      	uxtb	r3, r3
 800950c:	4618      	mov	r0, r3
 800950e:	f7ff ff55 	bl	80093bc <buttonGetPressed>
 8009512:	4603      	mov	r3, r0
 8009514:	4619      	mov	r1, r3
 8009516:	4839      	ldr	r0, [pc, #228]	; (80095fc <cliButton+0x174>)
 8009518:	f000 f91c 	bl	8009754 <cliPrintf>
      for (int i=0; i<BTN_MAX_CH; i++)
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	3301      	adds	r3, #1
 8009520:	617b      	str	r3, [r7, #20]
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	2b00      	cmp	r3, #0
 8009526:	ddef      	ble.n	8009508 <cliButton+0x80>
      }
      delay(50);
 8009528:	2032      	movs	r0, #50	; 0x32
 800952a:	f7ff f9df 	bl	80088ec <delay>
      cliPrintf("\r");
 800952e:	4834      	ldr	r0, [pc, #208]	; (8009600 <cliButton+0x178>)
 8009530:	f000 f910 	bl	8009754 <cliPrintf>
    while(cliKeepLoop())
 8009534:	f000 fa08 	bl	8009948 <cliKeepLoop>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1e1      	bne.n	8009502 <cliButton+0x7a>
    }
    ret = true;
 800953e:	2301      	movs	r3, #1
 8009540:	77fb      	strb	r3, [r7, #31]
  }

  if (args->argc == 1 && args->isStr(0, "time"))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	881b      	ldrh	r3, [r3, #0]
 8009546:	2b01      	cmp	r3, #1
 8009548:	d13c      	bne.n	80095c4 <cliButton+0x13c>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	695b      	ldr	r3, [r3, #20]
 800954e:	492d      	ldr	r1, [pc, #180]	; (8009604 <cliButton+0x17c>)
 8009550:	2000      	movs	r0, #0
 8009552:	4798      	blx	r3
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d034      	beq.n	80095c4 <cliButton+0x13c>
  {
    uint8_t ch;

    ch = (uint8_t)args->getData(1);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	2001      	movs	r0, #1
 8009560:	4798      	blx	r3
 8009562:	4603      	mov	r3, r0
 8009564:	73fb      	strb	r3, [r7, #15]
    ch = constrain(ch, 0, BTN_MAX_CH-1);
 8009566:	2300      	movs	r3, #0
 8009568:	73fb      	strb	r3, [r7, #15]

    while(cliKeepLoop())
 800956a:	e024      	b.n	80095b6 <cliButton+0x12e>
    {
      for (int i=0; i<BTN_MAX_CH; i++)
 800956c:	2300      	movs	r3, #0
 800956e:	613b      	str	r3, [r7, #16]
 8009570:	e01b      	b.n	80095aa <cliButton+0x122>
      {
        if(buttonGetPressed(i))
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	b2db      	uxtb	r3, r3
 8009576:	4618      	mov	r0, r3
 8009578:	f7ff ff20 	bl	80093bc <buttonGetPressed>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d010      	beq.n	80095a4 <cliButton+0x11c>
        {
          cliPrintf("%-12s, Time :  %d ms\n", buttonGetName(i), buttonGetPressedTime(i));
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	b2db      	uxtb	r3, r3
 8009586:	4618      	mov	r0, r3
 8009588:	f7ff ff3a 	bl	8009400 <buttonGetName>
 800958c:	4604      	mov	r4, r0
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	b2db      	uxtb	r3, r3
 8009592:	4618      	mov	r0, r3
 8009594:	f7ff ff4a 	bl	800942c <buttonGetPressedTime>
 8009598:	4603      	mov	r3, r0
 800959a:	461a      	mov	r2, r3
 800959c:	4621      	mov	r1, r4
 800959e:	481a      	ldr	r0, [pc, #104]	; (8009608 <cliButton+0x180>)
 80095a0:	f000 f8d8 	bl	8009754 <cliPrintf>
      for (int i=0; i<BTN_MAX_CH; i++)
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	3301      	adds	r3, #1
 80095a8:	613b      	str	r3, [r7, #16]
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	dde0      	ble.n	8009572 <cliButton+0xea>
        }
      }
      delay(10);
 80095b0:	200a      	movs	r0, #10
 80095b2:	f7ff f99b 	bl	80088ec <delay>
    while(cliKeepLoop())
 80095b6:	f000 f9c7 	bl	8009948 <cliKeepLoop>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d1d5      	bne.n	800956c <cliButton+0xe4>
    }
    ret = true;
 80095c0:	2301      	movs	r3, #1
 80095c2:	77fb      	strb	r3, [r7, #31]
  }

  if (ret == false)
 80095c4:	7ffb      	ldrb	r3, [r7, #31]
 80095c6:	f083 0301 	eor.w	r3, r3, #1
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d009      	beq.n	80095e4 <cliButton+0x15c>
  {
    cliPrintf("button info\n");
 80095d0:	480e      	ldr	r0, [pc, #56]	; (800960c <cliButton+0x184>)
 80095d2:	f000 f8bf 	bl	8009754 <cliPrintf>
    cliPrintf("button show\n");
 80095d6:	480e      	ldr	r0, [pc, #56]	; (8009610 <cliButton+0x188>)
 80095d8:	f000 f8bc 	bl	8009754 <cliPrintf>
    cliPrintf("button time\n", BTN_MAX_CH);
 80095dc:	2101      	movs	r1, #1
 80095de:	480d      	ldr	r0, [pc, #52]	; (8009614 <cliButton+0x18c>)
 80095e0:	f000 f8b8 	bl	8009754 <cliPrintf>
  }
}
 80095e4:	bf00      	nop
 80095e6:	3724      	adds	r7, #36	; 0x24
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd90      	pop	{r4, r7, pc}
 80095ec:	0801817c 	.word	0x0801817c
 80095f0:	080184a8 	.word	0x080184a8
 80095f4:	08018184 	.word	0x08018184
 80095f8:	08018194 	.word	0x08018194
 80095fc:	0801819c 	.word	0x0801819c
 8009600:	080181a0 	.word	0x080181a0
 8009604:	080181a4 	.word	0x080181a4
 8009608:	080181ac 	.word	0x080181ac
 800960c:	080181c4 	.word	0x080181c4
 8009610:	080181d4 	.word	0x080181d4
 8009614:	080181e4 	.word	0x080181e4

08009618 <cdcInit>:


static bool is_init = false;

bool cdcInit(void)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
  bool ret = true;
 800961e:	2301      	movs	r3, #1
 8009620:	71fb      	strb	r3, [r7, #7]


  ret = cdcIfInit();
 8009622:	f00a ff8d 	bl	8014540 <cdcIfInit>
 8009626:	4603      	mov	r3, r0
 8009628:	71fb      	strb	r3, [r7, #7]

  is_init = ret;
 800962a:	4a04      	ldr	r2, [pc, #16]	; (800963c <cdcInit+0x24>)
 800962c:	79fb      	ldrb	r3, [r7, #7]
 800962e:	7013      	strb	r3, [r2, #0]

  return ret;
 8009630:	79fb      	ldrb	r3, [r7, #7]
}
 8009632:	4618      	mov	r0, r3
 8009634:	3708      	adds	r7, #8
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	200003d0 	.word	0x200003d0

08009640 <cdcIsConnect>:
{
  return is_init;
}

bool cdcIsConnect(void)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	af00      	add	r7, sp, #0
  return cdcIfIsConnected();
 8009644:	f00b f80c 	bl	8014660 <cdcIfIsConnected>
 8009648:	4603      	mov	r3, r0
}
 800964a:	4618      	mov	r0, r3
 800964c:	bd80      	pop	{r7, pc}

0800964e <cdcAvailable>:

uint32_t cdcAvailable(void)
{
 800964e:	b580      	push	{r7, lr}
 8009650:	af00      	add	r7, sp, #0
  return cdcIfAvailable();
 8009652:	f00a ff93 	bl	801457c <cdcIfAvailable>
 8009656:	4603      	mov	r3, r0
}
 8009658:	4618      	mov	r0, r3
 800965a:	bd80      	pop	{r7, pc}

0800965c <cdcRead>:

uint8_t cdcRead(void)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	af00      	add	r7, sp, #0
  return cdcIfRead();
 8009660:	f00a ff96 	bl	8014590 <cdcIfRead>
 8009664:	4603      	mov	r3, r0
}
 8009666:	4618      	mov	r0, r3
 8009668:	bd80      	pop	{r7, pc}

0800966a <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 800966a:	b580      	push	{r7, lr}
 800966c:	b082      	sub	sp, #8
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
 8009672:	6039      	str	r1, [r7, #0]
  return cdcIfWrite(p_data, length);
 8009674:	6839      	ldr	r1, [r7, #0]
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f00a ff9c 	bl	80145b4 <cdcIfWrite>
 800967c:	4603      	mov	r3, r0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3708      	adds	r7, #8
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
	...

08009688 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 800968c:	4b1b      	ldr	r3, [pc, #108]	; (80096fc <cliInit+0x74>)
 800968e:	2200      	movs	r2, #0
 8009690:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 8009692:	4b1a      	ldr	r3, [pc, #104]	; (80096fc <cliInit+0x74>)
 8009694:	2200      	movs	r2, #0
 8009696:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 8009698:	4b18      	ldr	r3, [pc, #96]	; (80096fc <cliInit+0x74>)
 800969a:	2200      	movs	r2, #0
 800969c:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 800969e:	4b17      	ldr	r3, [pc, #92]	; (80096fc <cliInit+0x74>)
 80096a0:	2200      	movs	r2, #0
 80096a2:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 80096a6:	4b15      	ldr	r3, [pc, #84]	; (80096fc <cliInit+0x74>)
 80096a8:	2200      	movs	r2, #0
 80096aa:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 80096ae:	4b13      	ldr	r3, [pc, #76]	; (80096fc <cliInit+0x74>)
 80096b0:	2200      	movs	r2, #0
 80096b2:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 80096b6:	4b11      	ldr	r3, [pc, #68]	; (80096fc <cliInit+0x74>)
 80096b8:	2200      	movs	r2, #0
 80096ba:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 80096be:	4b0f      	ldr	r3, [pc, #60]	; (80096fc <cliInit+0x74>)
 80096c0:	4a0f      	ldr	r2, [pc, #60]	; (8009700 <cliInit+0x78>)
 80096c2:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 80096c6:	4b0d      	ldr	r3, [pc, #52]	; (80096fc <cliInit+0x74>)
 80096c8:	4a0e      	ldr	r2, [pc, #56]	; (8009704 <cliInit+0x7c>)
 80096ca:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 80096ce:	4b0b      	ldr	r3, [pc, #44]	; (80096fc <cliInit+0x74>)
 80096d0:	4a0d      	ldr	r2, [pc, #52]	; (8009708 <cliInit+0x80>)
 80096d2:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 80096d6:	4b09      	ldr	r3, [pc, #36]	; (80096fc <cliInit+0x74>)
 80096d8:	4a0c      	ldr	r2, [pc, #48]	; (800970c <cliInit+0x84>)
 80096da:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

  cliLineClean(&cli_node);
 80096de:	4807      	ldr	r0, [pc, #28]	; (80096fc <cliInit+0x74>)
 80096e0:	f000 f81e 	bl	8009720 <cliLineClean>


  cliAdd("help", cliShowList);
 80096e4:	490a      	ldr	r1, [pc, #40]	; (8009710 <cliInit+0x88>)
 80096e6:	480b      	ldr	r0, [pc, #44]	; (8009714 <cliInit+0x8c>)
 80096e8:	f000 f944 	bl	8009974 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 80096ec:	490a      	ldr	r1, [pc, #40]	; (8009718 <cliInit+0x90>)
 80096ee:	480b      	ldr	r0, [pc, #44]	; (800971c <cliInit+0x94>)
 80096f0:	f000 f940 	bl	8009974 <cliAdd>

  return true;
 80096f4:	2301      	movs	r3, #1
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	200003d4 	.word	0x200003d4
 8009700:	08009805 	.word	0x08009805
 8009704:	08009855 	.word	0x08009855
 8009708:	080098ad 	.word	0x080098ad
 800970c:	080098f5 	.word	0x080098f5
 8009710:	08009a09 	.word	0x08009a09
 8009714:	080181f4 	.word	0x080181f4
 8009718:	08009a79 	.word	0x08009a79
 800971c:	080181fc 	.word	0x080181fc

08009720 <cliLineClean>:

  return ret;
}

void cliLineClean(cli_t *p_cli)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
  p_cli->line.cursor  = 0;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	223f      	movs	r2, #63	; 0x3f
 800973c:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
  p_cli->line.buf[0]  = 0;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
}
 8009748:	bf00      	nop
 800974a:	370c      	adds	r7, #12
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <cliPrintf>:

  return ret;
}

void cliPrintf(const char *fmt, ...)
{
 8009754:	b40f      	push	{r0, r1, r2, r3}
 8009756:	b580      	push	{r7, lr}
 8009758:	b084      	sub	sp, #16
 800975a:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 800975c:	f107 031c 	add.w	r3, r7, #28
 8009760:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 8009762:	4b0d      	ldr	r3, [pc, #52]	; (8009798 <cliPrintf+0x44>)
 8009764:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f103 0011 	add.w	r0, r3, #17
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	69ba      	ldr	r2, [r7, #24]
 8009770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009774:	f00c fbde 	bl	8015f34 <vsniprintf>
 8009778:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	7818      	ldrb	r0, [r3, #0]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	3311      	adds	r3, #17
 8009782:	68ba      	ldr	r2, [r7, #8]
 8009784:	4619      	mov	r1, r3
 8009786:	f000 fe69 	bl	800a45c <uartWrite>
}
 800978a:	bf00      	nop
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009794:	b004      	add	sp, #16
 8009796:	4770      	bx	lr
 8009798:	200003d4 	.word	0x200003d4

0800979c <cliToUpper>:

void cliToUpper(char *str)
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80097a4:	2300      	movs	r3, #0
 80097a6:	81fb      	strh	r3, [r7, #14]
 80097a8:	e018      	b.n	80097dc <cliToUpper+0x40>
  {
    str_ch = str[i];
 80097aa:	89fb      	ldrh	r3, [r7, #14]
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	4413      	add	r3, r2
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 80097b4:	7b7b      	ldrb	r3, [r7, #13]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d014      	beq.n	80097e4 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 80097ba:	7b7b      	ldrb	r3, [r7, #13]
 80097bc:	2b60      	cmp	r3, #96	; 0x60
 80097be:	d905      	bls.n	80097cc <cliToUpper+0x30>
 80097c0:	7b7b      	ldrb	r3, [r7, #13]
 80097c2:	2b7a      	cmp	r3, #122	; 0x7a
 80097c4:	d802      	bhi.n	80097cc <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 80097c6:	7b7b      	ldrb	r3, [r7, #13]
 80097c8:	3b20      	subs	r3, #32
 80097ca:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 80097cc:	89fb      	ldrh	r3, [r7, #14]
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	4413      	add	r3, r2
 80097d2:	7b7a      	ldrb	r2, [r7, #13]
 80097d4:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80097d6:	89fb      	ldrh	r3, [r7, #14]
 80097d8:	3301      	adds	r3, #1
 80097da:	81fb      	strh	r3, [r7, #14]
 80097dc:	89fb      	ldrh	r3, [r7, #14]
 80097de:	2b0f      	cmp	r3, #15
 80097e0:	d9e3      	bls.n	80097aa <cliToUpper+0xe>
 80097e2:	e000      	b.n	80097e6 <cliToUpper+0x4a>
      break;
 80097e4:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 80097e6:	89fb      	ldrh	r3, [r7, #14]
 80097e8:	2b10      	cmp	r3, #16
 80097ea:	d105      	bne.n	80097f8 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 80097ec:	89fb      	ldrh	r3, [r7, #14]
 80097ee:	3b01      	subs	r3, #1
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	4413      	add	r3, r2
 80097f4:	2200      	movs	r2, #0
 80097f6:	701a      	strb	r2, [r3, #0]
  }
}
 80097f8:	bf00      	nop
 80097fa:	3714      	adds	r7, #20
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	4603      	mov	r3, r0
 800980c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 800980e:	2300      	movs	r3, #0
 8009810:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8009812:	4b0f      	ldr	r3, [pc, #60]	; (8009850 <cliArgsGetData+0x4c>)
 8009814:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8009816:	79fb      	ldrb	r3, [r7, #7]
 8009818:	b29a      	uxth	r2, r3
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8009820:	429a      	cmp	r2, r3
 8009822:	d301      	bcc.n	8009828 <cliArgsGetData+0x24>
  {
    return 0;
 8009824:	2300      	movs	r3, #0
 8009826:	e00e      	b.n	8009846 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800982e:	79fb      	ldrb	r3, [r7, #7]
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	4413      	add	r3, r2
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2200      	movs	r2, #0
 8009838:	2100      	movs	r1, #0
 800983a:	4618      	mov	r0, r3
 800983c:	f00c fa40 	bl	8015cc0 <strtoul>
 8009840:	4603      	mov	r3, r0
 8009842:	60fb      	str	r3, [r7, #12]

  return ret;
 8009844:	68fb      	ldr	r3, [r7, #12]
}
 8009846:	4618      	mov	r0, r3
 8009848:	3710      	adds	r7, #16
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	200003d4 	.word	0x200003d4

08009854 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	4603      	mov	r3, r0
 800985c:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 800985e:	f04f 0300 	mov.w	r3, #0
 8009862:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8009864:	4b10      	ldr	r3, [pc, #64]	; (80098a8 <cliArgsGetFloat+0x54>)
 8009866:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8009868:	79fb      	ldrb	r3, [r7, #7]
 800986a:	b29a      	uxth	r2, r3
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8009872:	429a      	cmp	r2, r3
 8009874:	d302      	bcc.n	800987c <cliArgsGetFloat+0x28>
  {
    return 0;
 8009876:	f04f 0300 	mov.w	r3, #0
 800987a:	e00d      	b.n	8009898 <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8009882:	79fb      	ldrb	r3, [r7, #7]
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	4413      	add	r3, r2
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2100      	movs	r1, #0
 800988c:	4618      	mov	r0, r3
 800988e:	f00c f93f 	bl	8015b10 <strtof>
 8009892:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 8009896:	68fb      	ldr	r3, [r7, #12]
}
 8009898:	ee07 3a90 	vmov	s15, r3
 800989c:	eeb0 0a67 	vmov.f32	s0, s15
 80098a0:	3710      	adds	r7, #16
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	200003d4 	.word	0x200003d4

080098ac <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	4603      	mov	r3, r0
 80098b4:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 80098b6:	2300      	movs	r3, #0
 80098b8:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80098ba:	4b0d      	ldr	r3, [pc, #52]	; (80098f0 <cliArgsGetStr+0x44>)
 80098bc:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80098be:	79fb      	ldrb	r3, [r7, #7]
 80098c0:	b29a      	uxth	r2, r3
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d301      	bcc.n	80098d0 <cliArgsGetStr+0x24>
  {
    return 0;
 80098cc:	2300      	movs	r3, #0
 80098ce:	e008      	b.n	80098e2 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80098d6:	79fb      	ldrb	r3, [r7, #7]
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	4413      	add	r3, r2
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	60fb      	str	r3, [r7, #12]

  return ret;
 80098e0:	68fb      	ldr	r3, [r7, #12]
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3714      	adds	r7, #20
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr
 80098ee:	bf00      	nop
 80098f0:	200003d4 	.word	0x200003d4

080098f4 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	4603      	mov	r3, r0
 80098fc:	6039      	str	r1, [r7, #0]
 80098fe:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8009900:	2300      	movs	r3, #0
 8009902:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8009904:	4b0f      	ldr	r3, [pc, #60]	; (8009944 <cliArgsIsStr+0x50>)
 8009906:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8009908:	79fb      	ldrb	r3, [r7, #7]
 800990a:	b29a      	uxth	r2, r3
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8009912:	429a      	cmp	r2, r3
 8009914:	d301      	bcc.n	800991a <cliArgsIsStr+0x26>
  {
    return 0;
 8009916:	2300      	movs	r3, #0
 8009918:	e010      	b.n	800993c <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8009920:	79fb      	ldrb	r3, [r7, #7]
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	4413      	add	r3, r2
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4619      	mov	r1, r3
 800992a:	6838      	ldr	r0, [r7, #0]
 800992c:	f7fe f878 	bl	8007a20 <strcmp>
 8009930:	4603      	mov	r3, r0
 8009932:	2b00      	cmp	r3, #0
 8009934:	d101      	bne.n	800993a <cliArgsIsStr+0x46>
  {
    ret = true;
 8009936:	2301      	movs	r3, #1
 8009938:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800993a:	7bfb      	ldrb	r3, [r7, #15]
}
 800993c:	4618      	mov	r0, r3
 800993e:	3710      	adds	r7, #16
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	200003d4 	.word	0x200003d4

08009948 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 800994e:	4b08      	ldr	r3, [pc, #32]	; (8009970 <cliKeepLoop+0x28>)
 8009950:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	4618      	mov	r0, r3
 8009958:	f000 fd62 	bl	800a420 <uartAvailable>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d101      	bne.n	8009966 <cliKeepLoop+0x1e>
  {
    return true;
 8009962:	2301      	movs	r3, #1
 8009964:	e000      	b.n	8009968 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 8009966:	2300      	movs	r3, #0
  }
}
 8009968:	4618      	mov	r0, r3
 800996a:	3708      	adds	r7, #8
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	200003d4 	.word	0x200003d4

08009974 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b086      	sub	sp, #24
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
  bool ret = true;
 800997e:	2301      	movs	r3, #1
 8009980:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 8009982:	4b20      	ldr	r3, [pc, #128]	; (8009a04 <cliAdd+0x90>)
 8009984:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800998c:	2b0f      	cmp	r3, #15
 800998e:	d901      	bls.n	8009994 <cliAdd+0x20>
  {
    return false;
 8009990:	2300      	movs	r3, #0
 8009992:	e032      	b.n	80099fa <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800999a:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 800999c:	89fa      	ldrh	r2, [r7, #14]
 800999e:	4613      	mov	r3, r2
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	4413      	add	r3, r2
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80099aa:	693a      	ldr	r2, [r7, #16]
 80099ac:	4413      	add	r3, r2
 80099ae:	3304      	adds	r3, #4
 80099b0:	6879      	ldr	r1, [r7, #4]
 80099b2:	4618      	mov	r0, r3
 80099b4:	f00c fb59 	bl	801606a <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 80099b8:	89fa      	ldrh	r2, [r7, #14]
 80099ba:	6939      	ldr	r1, [r7, #16]
 80099bc:	4613      	mov	r3, r2
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	4413      	add	r3, r2
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	440b      	add	r3, r1
 80099c6:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 80099ca:	683a      	ldr	r2, [r7, #0]
 80099cc:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 80099ce:	89fa      	ldrh	r2, [r7, #14]
 80099d0:	4613      	mov	r3, r2
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	4413      	add	r3, r2
 80099d6:	009b      	lsls	r3, r3, #2
 80099d8:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80099dc:	693a      	ldr	r2, [r7, #16]
 80099de:	4413      	add	r3, r2
 80099e0:	3304      	adds	r3, #4
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7ff feda 	bl	800979c <cliToUpper>

  p_cli->cmd_count++;
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80099ee:	3301      	adds	r3, #1
 80099f0:	b29a      	uxth	r2, r3
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8

  return ret;
 80099f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3718      	adds	r7, #24
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	200003d4 	.word	0x200003d4

08009a08 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 8009a10:	4b15      	ldr	r3, [pc, #84]	; (8009a68 <cliShowList+0x60>)
 8009a12:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8009a14:	4815      	ldr	r0, [pc, #84]	; (8009a6c <cliShowList+0x64>)
 8009a16:	f7ff fe9d 	bl	8009754 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 8009a1a:	4815      	ldr	r0, [pc, #84]	; (8009a70 <cliShowList+0x68>)
 8009a1c:	f7ff fe9a 	bl	8009754 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8009a20:	2300      	movs	r3, #0
 8009a22:	60fb      	str	r3, [r7, #12]
 8009a24:	e012      	b.n	8009a4c <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 8009a26:	68fa      	ldr	r2, [r7, #12]
 8009a28:	4613      	mov	r3, r2
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	4413      	add	r3, r2
 8009a2e:	009b      	lsls	r3, r3, #2
 8009a30:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8009a34:	68ba      	ldr	r2, [r7, #8]
 8009a36:	4413      	add	r3, r2
 8009a38:	3304      	adds	r3, #4
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7ff fe8a 	bl	8009754 <cliPrintf>
    cliPrintf("\r\n");
 8009a40:	480a      	ldr	r0, [pc, #40]	; (8009a6c <cliShowList+0x64>)
 8009a42:	f7ff fe87 	bl	8009754 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	60fb      	str	r3, [r7, #12]
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8009a52:	461a      	mov	r2, r3
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	4293      	cmp	r3, r2
 8009a58:	dbe5      	blt.n	8009a26 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 8009a5a:	4806      	ldr	r0, [pc, #24]	; (8009a74 <cliShowList+0x6c>)
 8009a5c:	f7ff fe7a 	bl	8009754 <cliPrintf>
}
 8009a60:	bf00      	nop
 8009a62:	3710      	adds	r7, #16
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	200003d4 	.word	0x200003d4
 8009a6c:	080182c4 	.word	0x080182c4
 8009a70:	080182c8 	.word	0x080182c8
 8009a74:	080182e8 	.word	0x080182e8

08009a78 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b08c      	sub	sp, #48	; 0x30
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8009a80:	2310      	movs	r3, #16
 8009a82:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	881b      	ldrh	r3, [r3, #0]
 8009a88:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	881b      	ldrh	r3, [r3, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d103      	bne.n	8009aa0 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 8009a98:	4840      	ldr	r0, [pc, #256]	; (8009b9c <cliMemoryDump+0x124>)
 8009a9a:	f7ff fe5b 	bl	8009754 <cliPrintf>
 8009a9e:	e07a      	b.n	8009b96 <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	dd09      	ble.n	8009aba <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	3304      	adds	r3, #4
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2200      	movs	r2, #0
 8009aae:	2100      	movs	r1, #0
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f00c f905 	bl	8015cc0 <strtoul>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f00c f8fc 	bl	8015cc0 <strtoul>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 8009acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ace:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8009ad0:	4833      	ldr	r0, [pc, #204]	; (8009ba0 <cliMemoryDump+0x128>)
 8009ad2:	f7ff fe3f 	bl	8009754 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ada:	e058      	b.n	8009b8e <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 8009adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ade:	f003 0303 	and.w	r3, r3, #3
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d104      	bne.n	8009af0 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 8009ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae8:	4619      	mov	r1, r3
 8009aea:	482e      	ldr	r0, [pc, #184]	; (8009ba4 <cliMemoryDump+0x12c>)
 8009aec:	f7ff fe32 	bl	8009754 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 8009af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4619      	mov	r1, r3
 8009af6:	482c      	ldr	r0, [pc, #176]	; (8009ba8 <cliMemoryDump+0x130>)
 8009af8:	f7ff fe2c 	bl	8009754 <cliPrintf>

    if ((idx%4) == 3)
 8009afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009afe:	425a      	negs	r2, r3
 8009b00:	f003 0303 	and.w	r3, r3, #3
 8009b04:	f002 0203 	and.w	r2, r2, #3
 8009b08:	bf58      	it	pl
 8009b0a:	4253      	negpl	r3, r2
 8009b0c:	2b03      	cmp	r3, #3
 8009b0e:	d138      	bne.n	8009b82 <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 8009b10:	4826      	ldr	r0, [pc, #152]	; (8009bac <cliMemoryDump+0x134>)
 8009b12:	f7ff fe1f 	bl	8009754 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 8009b16:	2300      	movs	r3, #0
 8009b18:	623b      	str	r3, [r7, #32]
 8009b1a:	e02c      	b.n	8009b76 <cliMemoryDump+0xfe>
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	681b      	ldr	r3, [r3, #0]
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 8009b20:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 8009b22:	2300      	movs	r3, #0
 8009b24:	61fb      	str	r3, [r7, #28]
 8009b26:	e01d      	b.n	8009b64 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 8009b28:	f107 020c 	add.w	r2, r7, #12
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	4413      	add	r3, r2
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	2b1f      	cmp	r3, #31
 8009b34:	d910      	bls.n	8009b58 <cliMemoryDump+0xe0>
 8009b36:	f107 020c 	add.w	r2, r7, #12
 8009b3a:	69fb      	ldr	r3, [r7, #28]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	2b7e      	cmp	r3, #126	; 0x7e
 8009b42:	d809      	bhi.n	8009b58 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 8009b44:	f107 020c 	add.w	r2, r7, #12
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	4619      	mov	r1, r3
 8009b50:	4817      	ldr	r0, [pc, #92]	; (8009bb0 <cliMemoryDump+0x138>)
 8009b52:	f7ff fdff 	bl	8009754 <cliPrintf>
 8009b56:	e002      	b.n	8009b5e <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 8009b58:	4816      	ldr	r0, [pc, #88]	; (8009bb4 <cliMemoryDump+0x13c>)
 8009b5a:	f7ff fdfb 	bl	8009754 <cliPrintf>
        for (i=0;i<4;i++)
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	3301      	adds	r3, #1
 8009b62:	61fb      	str	r3, [r7, #28]
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	2b03      	cmp	r3, #3
 8009b68:	ddde      	ble.n	8009b28 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 8009b6a:	69bb      	ldr	r3, [r7, #24]
 8009b6c:	3304      	adds	r3, #4
 8009b6e:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 8009b70:	6a3b      	ldr	r3, [r7, #32]
 8009b72:	3301      	adds	r3, #1
 8009b74:	623b      	str	r3, [r7, #32]
 8009b76:	6a3b      	ldr	r3, [r7, #32]
 8009b78:	2b03      	cmp	r3, #3
 8009b7a:	ddcf      	ble.n	8009b1c <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 8009b7c:	480e      	ldr	r0, [pc, #56]	; (8009bb8 <cliMemoryDump+0x140>)
 8009b7e:	f7ff fde9 	bl	8009754 <cliPrintf>
    }
    addr++;
 8009b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b84:	3304      	adds	r3, #4
 8009b86:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 8009b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b92:	429a      	cmp	r2, r3
 8009b94:	dba2      	blt.n	8009adc <cliMemoryDump+0x64>
  }
}
 8009b96:	3730      	adds	r7, #48	; 0x30
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	08018308 	.word	0x08018308
 8009ba0:	0801831c 	.word	0x0801831c
 8009ba4:	08018324 	.word	0x08018324
 8009ba8:	08018330 	.word	0x08018330
 8009bac:	08018338 	.word	0x08018338
 8009bb0:	0801833c 	.word	0x0801833c
 8009bb4:	08018340 	.word	0x08018340
 8009bb8:	08018344 	.word	0x08018344

08009bbc <flashInit>:


static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);

bool flashInit(void)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
  bool ret = true;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	71fb      	strb	r3, [r7, #7]

  return true;
 8009bc6:	2301      	movs	r3, #1
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <ledInit>:
#ifdef _USE_HW_CLI
static void cliLed(cli_args_t *args);
#endif

bool ledInit(void)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b088      	sub	sp, #32
 8009bd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 8009bda:	f107 0308 	add.w	r3, r7, #8
 8009bde:	2200      	movs	r2, #0
 8009be0:	601a      	str	r2, [r3, #0]
 8009be2:	605a      	str	r2, [r3, #4]
 8009be4:	609a      	str	r2, [r3, #8]
 8009be6:	60da      	str	r2, [r3, #12]
 8009be8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009bea:	4b1c      	ldr	r3, [pc, #112]	; (8009c5c <ledInit+0x88>)
 8009bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bee:	4a1b      	ldr	r2, [pc, #108]	; (8009c5c <ledInit+0x88>)
 8009bf0:	f043 0301 	orr.w	r3, r3, #1
 8009bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009bf6:	4b19      	ldr	r3, [pc, #100]	; (8009c5c <ledInit+0x88>)
 8009bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bfa:	f003 0301 	and.w	r3, r3, #1
 8009bfe:	607b      	str	r3, [r7, #4]
 8009c00:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8009c02:	2301      	movs	r3, #1
 8009c04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8009c06:	2300      	movs	r3, #0
 8009c08:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	617b      	str	r3, [r7, #20]

  for (int i=0; i<LED_MAX_CH; i++)
 8009c0e:	2300      	movs	r3, #0
 8009c10:	61fb      	str	r3, [r7, #28]
 8009c12:	e017      	b.n	8009c44 <ledInit+0x70>
  {
    GPIO_InitStructure.Pin = led_tbl[i].pin;
 8009c14:	4a12      	ldr	r2, [pc, #72]	; (8009c60 <ledInit+0x8c>)
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	00db      	lsls	r3, r3, #3
 8009c1a:	4413      	add	r3, r2
 8009c1c:	889b      	ldrh	r3, [r3, #4]
 8009c1e:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStructure);
 8009c20:	4a0f      	ldr	r2, [pc, #60]	; (8009c60 <ledInit+0x8c>)
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009c28:	f107 0208 	add.w	r2, r7, #8
 8009c2c:	4611      	mov	r1, r2
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f001 f980 	bl	800af34 <HAL_GPIO_Init>

    ledOff(i);
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f000 f837 	bl	8009cac <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	3301      	adds	r3, #1
 8009c42:	61fb      	str	r3, [r7, #28]
 8009c44:	69fb      	ldr	r3, [r7, #28]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	dde4      	ble.n	8009c14 <ledInit+0x40>
  }
#ifdef _USE_HW_CLI
  cliAdd("LED", cliLed);
 8009c4a:	4906      	ldr	r1, [pc, #24]	; (8009c64 <ledInit+0x90>)
 8009c4c:	4806      	ldr	r0, [pc, #24]	; (8009c68 <ledInit+0x94>)
 8009c4e:	f7ff fe91 	bl	8009974 <cliAdd>
#endif
  return true;
 8009c52:	2301      	movs	r3, #1
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3720      	adds	r7, #32
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	40021000 	.word	0x40021000
 8009c60:	080184b4 	.word	0x080184b4
 8009c64:	08009d1d 	.word	0x08009d1d
 8009c68:	08018354 	.word	0x08018354

08009c6c <ledOn>:


void ledOn(uint8_t ch)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	4603      	mov	r3, r0
 8009c74:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8009c76:	79fb      	ldrb	r3, [r7, #7]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d111      	bne.n	8009ca0 <ledOn+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
 8009c7c:	79fb      	ldrb	r3, [r7, #7]
 8009c7e:	4a0a      	ldr	r2, [pc, #40]	; (8009ca8 <ledOn+0x3c>)
 8009c80:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8009c84:	79fb      	ldrb	r3, [r7, #7]
 8009c86:	4a08      	ldr	r2, [pc, #32]	; (8009ca8 <ledOn+0x3c>)
 8009c88:	00db      	lsls	r3, r3, #3
 8009c8a:	4413      	add	r3, r2
 8009c8c:	8899      	ldrh	r1, [r3, #4]
 8009c8e:	79fb      	ldrb	r3, [r7, #7]
 8009c90:	4a05      	ldr	r2, [pc, #20]	; (8009ca8 <ledOn+0x3c>)
 8009c92:	00db      	lsls	r3, r3, #3
 8009c94:	4413      	add	r3, r2
 8009c96:	799b      	ldrb	r3, [r3, #6]
 8009c98:	461a      	mov	r2, r3
 8009c9a:	f001 fae5 	bl	800b268 <HAL_GPIO_WritePin>
 8009c9e:	e000      	b.n	8009ca2 <ledOn+0x36>
  if (ch >= LED_MAX_CH) return;
 8009ca0:	bf00      	nop
}
 8009ca2:	3708      	adds	r7, #8
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}
 8009ca8:	080184b4 	.word	0x080184b4

08009cac <ledOff>:

void ledOff(uint8_t ch)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b082      	sub	sp, #8
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8009cb6:	79fb      	ldrb	r3, [r7, #7]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d10d      	bne.n	8009cd8 <ledOff+0x2c>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8009cbc:	79fb      	ldrb	r3, [r7, #7]
 8009cbe:	4a08      	ldr	r2, [pc, #32]	; (8009ce0 <ledOff+0x34>)
 8009cc0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8009cc4:	79fb      	ldrb	r3, [r7, #7]
 8009cc6:	4a06      	ldr	r2, [pc, #24]	; (8009ce0 <ledOff+0x34>)
 8009cc8:	00db      	lsls	r3, r3, #3
 8009cca:	4413      	add	r3, r2
 8009ccc:	889b      	ldrh	r3, [r3, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	f001 fac9 	bl	800b268 <HAL_GPIO_WritePin>
 8009cd6:	e000      	b.n	8009cda <ledOff+0x2e>
  if (ch >= LED_MAX_CH) return;
 8009cd8:	bf00      	nop
}
 8009cda:	3708      	adds	r7, #8
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}
 8009ce0:	080184b4 	.word	0x080184b4

08009ce4 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	4603      	mov	r3, r0
 8009cec:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8009cee:	79fb      	ldrb	r3, [r7, #7]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d10d      	bne.n	8009d10 <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8009cf4:	79fb      	ldrb	r3, [r7, #7]
 8009cf6:	4a08      	ldr	r2, [pc, #32]	; (8009d18 <ledToggle+0x34>)
 8009cf8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009cfc:	79fb      	ldrb	r3, [r7, #7]
 8009cfe:	4906      	ldr	r1, [pc, #24]	; (8009d18 <ledToggle+0x34>)
 8009d00:	00db      	lsls	r3, r3, #3
 8009d02:	440b      	add	r3, r1
 8009d04:	889b      	ldrh	r3, [r3, #4]
 8009d06:	4619      	mov	r1, r3
 8009d08:	4610      	mov	r0, r2
 8009d0a:	f001 fac5 	bl	800b298 <HAL_GPIO_TogglePin>
 8009d0e:	e000      	b.n	8009d12 <ledToggle+0x2e>
  if (ch >= LED_MAX_CH) return;
 8009d10:	bf00      	nop
}
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	080184b4 	.word	0x080184b4

08009d1c <cliLed>:
  gpio->ODR ^= GPIO_Pin;
}

#ifdef _USE_HW_CLI
void cliLed(cli_args_t *args)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b086      	sub	sp, #24
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8009d24:	2300      	movs	r3, #0
 8009d26:	75fb      	strb	r3, [r7, #23]

  if (args-> argc == 2 && args->isStr(0, "on") == true)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	881b      	ldrh	r3, [r3, #0]
 8009d2c:	2b02      	cmp	r3, #2
 8009d2e:	d11e      	bne.n	8009d6e <cliLed+0x52>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	695b      	ldr	r3, [r3, #20]
 8009d34:	4944      	ldr	r1, [pc, #272]	; (8009e48 <cliLed+0x12c>)
 8009d36:	2000      	movs	r0, #0
 8009d38:	4798      	blx	r3
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d016      	beq.n	8009d6e <cliLed+0x52>
  {
    uint8_t led_ch;

    led_ch = args->getData(1);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	2001      	movs	r0, #1
 8009d46:	4798      	blx	r3
 8009d48:	4603      	mov	r3, r0
 8009d4a:	75bb      	strb	r3, [r7, #22]

    if(led_ch > 0)
 8009d4c:	7dbb      	ldrb	r3, [r7, #22]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d007      	beq.n	8009d62 <cliLed+0x46>
    {
      led_ch--;
 8009d52:	7dbb      	ldrb	r3, [r7, #22]
 8009d54:	3b01      	subs	r3, #1
 8009d56:	75bb      	strb	r3, [r7, #22]
    }
    while(cliKeepLoop())
 8009d58:	e003      	b.n	8009d62 <cliLed+0x46>
    {
      ledOn(led_ch);
 8009d5a:	7dbb      	ldrb	r3, [r7, #22]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7ff ff85 	bl	8009c6c <ledOn>
    while(cliKeepLoop())
 8009d62:	f7ff fdf1 	bl	8009948 <cliKeepLoop>
 8009d66:	4603      	mov	r3, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1f6      	bne.n	8009d5a <cliLed+0x3e>
  {
 8009d6c:	e05a      	b.n	8009e24 <cliLed+0x108>
    }
  }
  else if (args-> argc == 2 && args->isStr(0, "off") == true)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	881b      	ldrh	r3, [r3, #0]
 8009d72:	2b02      	cmp	r3, #2
 8009d74:	d11e      	bne.n	8009db4 <cliLed+0x98>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	695b      	ldr	r3, [r3, #20]
 8009d7a:	4934      	ldr	r1, [pc, #208]	; (8009e4c <cliLed+0x130>)
 8009d7c:	2000      	movs	r0, #0
 8009d7e:	4798      	blx	r3
 8009d80:	4603      	mov	r3, r0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d016      	beq.n	8009db4 <cliLed+0x98>
    {
      uint8_t led_ch;

      led_ch = args->getData(1);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	689b      	ldr	r3, [r3, #8]
 8009d8a:	2001      	movs	r0, #1
 8009d8c:	4798      	blx	r3
 8009d8e:	4603      	mov	r3, r0
 8009d90:	757b      	strb	r3, [r7, #21]

      if(led_ch > 0)
 8009d92:	7d7b      	ldrb	r3, [r7, #21]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d007      	beq.n	8009da8 <cliLed+0x8c>
      {
        led_ch--;
 8009d98:	7d7b      	ldrb	r3, [r7, #21]
 8009d9a:	3b01      	subs	r3, #1
 8009d9c:	757b      	strb	r3, [r7, #21]
      }
      while(cliKeepLoop())
 8009d9e:	e003      	b.n	8009da8 <cliLed+0x8c>
      {
        ledOff(led_ch);
 8009da0:	7d7b      	ldrb	r3, [r7, #21]
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7ff ff82 	bl	8009cac <ledOff>
      while(cliKeepLoop())
 8009da8:	f7ff fdce 	bl	8009948 <cliKeepLoop>
 8009dac:	4603      	mov	r3, r0
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d1f6      	bne.n	8009da0 <cliLed+0x84>
    {
 8009db2:	e037      	b.n	8009e24 <cliLed+0x108>
      }
    }
  else if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	881b      	ldrh	r3, [r3, #0]
 8009db8:	2b03      	cmp	r3, #3
 8009dba:	d133      	bne.n	8009e24 <cliLed+0x108>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	695b      	ldr	r3, [r3, #20]
 8009dc0:	4923      	ldr	r1, [pc, #140]	; (8009e50 <cliLed+0x134>)
 8009dc2:	2000      	movs	r0, #0
 8009dc4:	4798      	blx	r3
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d02b      	beq.n	8009e24 <cliLed+0x108>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = args->getData(1);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	2001      	movs	r0, #1
 8009dd2:	4798      	blx	r3
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	753b      	strb	r3, [r7, #20]
    toggle_time = args->getData(2);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	689b      	ldr	r3, [r3, #8]
 8009ddc:	2002      	movs	r0, #2
 8009dde:	4798      	blx	r3
 8009de0:	4603      	mov	r3, r0
 8009de2:	60fb      	str	r3, [r7, #12]

    if (led_ch > 0)
 8009de4:	7d3b      	ldrb	r3, [r7, #20]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d002      	beq.n	8009df0 <cliLed+0xd4>
    {
      led_ch--;
 8009dea:	7d3b      	ldrb	r3, [r7, #20]
 8009dec:	3b01      	subs	r3, #1
 8009dee:	753b      	strb	r3, [r7, #20]
    }

    pre_time = millis();
 8009df0:	f7fe fd87 	bl	8008902 <millis>
 8009df4:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 8009df6:	e00e      	b.n	8009e16 <cliLed+0xfa>
    {
      if (millis()-pre_time >= toggle_time)
 8009df8:	f7fe fd83 	bl	8008902 <millis>
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	1ad3      	subs	r3, r2, r3
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d806      	bhi.n	8009e16 <cliLed+0xfa>
      {
        pre_time = millis();
 8009e08:	f7fe fd7b 	bl	8008902 <millis>
 8009e0c:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 8009e0e:	7d3b      	ldrb	r3, [r7, #20]
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7ff ff67 	bl	8009ce4 <ledToggle>
    while(cliKeepLoop())
 8009e16:	f7ff fd97 	bl	8009948 <cliKeepLoop>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d1eb      	bne.n	8009df8 <cliLed+0xdc>
      }
    }
    ret = true;
 8009e20:	2301      	movs	r3, #1
 8009e22:	75fb      	strb	r3, [r7, #23]
  }
  if (ret != true)
 8009e24:	7dfb      	ldrb	r3, [r7, #23]
 8009e26:	f083 0301 	eor.w	r3, r3, #1
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d007      	beq.n	8009e40 <cliLed+0x124>
  {
    cliPrintf("led On/Off ch[1~%d]\n", LED_MAX_CH);
 8009e30:	2101      	movs	r1, #1
 8009e32:	4808      	ldr	r0, [pc, #32]	; (8009e54 <cliLed+0x138>)
 8009e34:	f7ff fc8e 	bl	8009754 <cliPrintf>
    cliPrintf("led toggle ch[1~%d] time(ms)\n", LED_MAX_CH);
 8009e38:	2101      	movs	r1, #1
 8009e3a:	4807      	ldr	r0, [pc, #28]	; (8009e58 <cliLed+0x13c>)
 8009e3c:	f7ff fc8a 	bl	8009754 <cliPrintf>
  }
}
 8009e40:	bf00      	nop
 8009e42:	3718      	adds	r7, #24
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	08018358 	.word	0x08018358
 8009e4c:	0801835c 	.word	0x0801835c
 8009e50:	08018360 	.word	0x08018360
 8009e54:	08018368 	.word	0x08018368
 8009e58:	08018380 	.word	0x08018380

08009e5c <logInit>:
static osMutexId mutex_lock;
#endif


bool logInit(void)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	af00      	add	r7, sp, #0
#ifdef _USE_HW_ROTS
  osMutexDef(mutex_lock);
  mutex_lock = osMutexCreate (osMutex(mutex_lock));
#endif

  return true;
 8009e60:	2301      	movs	r3, #1
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr

08009e6c <logPrintf>:

void logPrintf(const char *fmt, ...)
{
 8009e6c:	b40f      	push	{r0, r1, r2, r3}
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b082      	sub	sp, #8
 8009e72:	af00      	add	r7, sp, #0
#endif

  va_list args;
  int len;

  va_start(args, fmt);
 8009e74:	f107 0314 	add.w	r3, r7, #20
 8009e78:	603b      	str	r3, [r7, #0]
  len = vsnprintf(print_buf, 256, fmt, args);
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	693a      	ldr	r2, [r7, #16]
 8009e7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009e82:	4809      	ldr	r0, [pc, #36]	; (8009ea8 <logPrintf+0x3c>)
 8009e84:	f00c f856 	bl	8015f34 <vsniprintf>
 8009e88:	6078      	str	r0, [r7, #4]

  uartWrite(log_ch, (uint8_t *)print_buf, len);
 8009e8a:	4b08      	ldr	r3, [pc, #32]	; (8009eac <logPrintf+0x40>)
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	4905      	ldr	r1, [pc, #20]	; (8009ea8 <logPrintf+0x3c>)
 8009e92:	4618      	mov	r0, r3
 8009e94:	f000 fae2 	bl	800a45c <uartWrite>
  va_end(args);

#ifdef _USE_HW_ROTS
  osMutexRelease(mutex_lock);
#endif
}
 8009e98:	bf00      	nop
 8009e9a:	3708      	adds	r7, #8
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ea2:	b004      	add	sp, #16
 8009ea4:	4770      	bx	lr
 8009ea6:	bf00      	nop
 8009ea8:	2000081c 	.word	0x2000081c
 8009eac:	20000818 	.word	0x20000818

08009eb0 <resetInit>:
  }
}


bool resetInit(void)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
  bool ret = true;
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	71bb      	strb	r3, [r7, #6]
  bool is_debug = false;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	71fb      	strb	r3, [r7, #7]


  // 만약 디버거가 연결된 경우

  if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
 8009ebe:	4b1c      	ldr	r3, [pc, #112]	; (8009f30 <resetInit+0x80>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f003 0301 	and.w	r3, r3, #1
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d001      	beq.n	8009ece <resetInit+0x1e>
  {
    is_debug = true;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	71fb      	strb	r3, [r7, #7]
  }

  // 만약 Reset 핀이 눌렸다면
  // 리셋 상태 레지스터 자기자신 + 1 을 준다.
  // 500ms 안에 여러번 누른경우 reset_count 값에 저장된다.
  if (RCC->CSR & (1<<26) && is_debug != true)
 8009ece:	4b19      	ldr	r3, [pc, #100]	; (8009f34 <resetInit+0x84>)
 8009ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ed4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d01f      	beq.n	8009f1c <resetInit+0x6c>
 8009edc:	79fb      	ldrb	r3, [r7, #7]
 8009ede:	f083 0301 	eor.w	r3, r3, #1
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d019      	beq.n	8009f1c <resetInit+0x6c>
  if(RCC->CSR & (1<<26))
 8009ee8:	4b12      	ldr	r3, [pc, #72]	; (8009f34 <resetInit+0x84>)
 8009eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009eee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d012      	beq.n	8009f1c <resetInit+0x6c>
  {
    rtcBackupRegWrite(RESET_REG_COUNT, rtcBackupRegRead(RESET_REG_COUNT) + 1);
 8009ef6:	2001      	movs	r0, #1
 8009ef8:	f000 f8a2 	bl	800a040 <rtcBackupRegRead>
 8009efc:	4603      	mov	r3, r0
 8009efe:	3301      	adds	r3, #1
 8009f00:	4619      	mov	r1, r3
 8009f02:	2001      	movs	r0, #1
 8009f04:	f000 f8ac 	bl	800a060 <rtcBackupRegWrite>
    delay(500); // 500 m delay
 8009f08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009f0c:	f7fe fcee 	bl	80088ec <delay>
    reset_count = rtcBackupRegRead(RESET_REG_COUNT);
 8009f10:	2001      	movs	r0, #1
 8009f12:	f000 f895 	bl	800a040 <rtcBackupRegRead>
 8009f16:	4603      	mov	r3, r0
 8009f18:	4a07      	ldr	r2, [pc, #28]	; (8009f38 <resetInit+0x88>)
 8009f1a:	6013      	str	r3, [r2, #0]
  }
  //clear 다시 0으로
  rtcBackupRegWrite(RESET_REG_COUNT, 0);
 8009f1c:	2100      	movs	r1, #0
 8009f1e:	2001      	movs	r0, #1
 8009f20:	f000 f89e 	bl	800a060 <rtcBackupRegWrite>

  return ret;
 8009f24:	79bb      	ldrb	r3, [r7, #6]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3708      	adds	r7, #8
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	e000edf0 	.word	0xe000edf0
 8009f34:	40021000 	.word	0x40021000
 8009f38:	2000091c 	.word	0x2000091c

08009f3c <resetGetCount>:

uint32_t resetGetCount(void)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	af00      	add	r7, sp, #0
  return reset_count;
 8009f40:	4b03      	ldr	r3, [pc, #12]	; (8009f50 <resetGetCount+0x14>)
 8009f42:	681b      	ldr	r3, [r3, #0]
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop
 8009f50:	2000091c 	.word	0x2000091c

08009f54 <resetToSystemBoot>:
    run_timeout_count = timeout;
  }
}

void resetToSystemBoot(void)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
  void (*SysMemBootJump)(void);
  volatile uint32_t addr = 0x1FFF0000; // System Boot Loader 주소
 8009f5a:	4b1d      	ldr	r3, [pc, #116]	; (8009fd0 <resetToSystemBoot+0x7c>)
 8009f5c:	603b      	str	r3, [r7, #0]


  HAL_RCC_DeInit();
 8009f5e:	f002 ff9d 	bl	800ce9c <HAL_RCC_DeInit>

  SysTick->CTRL = 0;
 8009f62:	4b1c      	ldr	r3, [pc, #112]	; (8009fd4 <resetToSystemBoot+0x80>)
 8009f64:	2200      	movs	r2, #0
 8009f66:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 8009f68:	4b1a      	ldr	r3, [pc, #104]	; (8009fd4 <resetToSystemBoot+0x80>)
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	605a      	str	r2, [r3, #4]
  SysTick->VAL  = 0;
 8009f6e:	4b19      	ldr	r3, [pc, #100]	; (8009fd4 <resetToSystemBoot+0x80>)
 8009f70:	2200      	movs	r2, #0
 8009f72:	609a      	str	r2, [r3, #8]

  // 인터럽트
  for (int i=0;i<8;i++)
 8009f74:	2300      	movs	r3, #0
 8009f76:	60fb      	str	r3, [r7, #12]
 8009f78:	e016      	b.n	8009fa8 <resetToSystemBoot+0x54>
  {
    NVIC->ICER[i]=0xFFFFFFFF;
 8009f7a:	4a17      	ldr	r2, [pc, #92]	; (8009fd8 <resetToSystemBoot+0x84>)
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	3320      	adds	r3, #32
 8009f80:	f04f 31ff 	mov.w	r1, #4294967295
 8009f84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NVIC->ICPR[i]=0xFFFFFFFF;
 8009f88:	4a13      	ldr	r2, [pc, #76]	; (8009fd8 <resetToSystemBoot+0x84>)
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	3360      	adds	r3, #96	; 0x60
 8009f8e:	f04f 31ff 	mov.w	r1, #4294967295
 8009f92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009f96:	f3bf 8f4f 	dsb	sy
}
 8009f9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009f9c:	f3bf 8f6f 	isb	sy
}
 8009fa0:	bf00      	nop
  for (int i=0;i<8;i++)
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	60fb      	str	r3, [r7, #12]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2b07      	cmp	r3, #7
 8009fac:	dde5      	ble.n	8009f7a <resetToSystemBoot+0x26>
    __DSB();
    __ISB();
  }

  SysMemBootJump = (void (*)(void)) (*((uint32_t *)(addr + 4)));
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	3304      	adds	r3, #4
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	60bb      	str	r3, [r7, #8]

  // Main Stack 주소 셋팅
  __set_MSP(*(uint32_t *)addr);
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f383 8808 	msr	MSP, r3
}
 8009fc2:	bf00      	nop
  // Jump
  SysMemBootJump();
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	4798      	blx	r3
}
 8009fc8:	bf00      	nop
 8009fca:	3710      	adds	r7, #16
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}
 8009fd0:	1fff0000 	.word	0x1fff0000
 8009fd4:	e000e010 	.word	0xe000e010
 8009fd8:	e000e100 	.word	0xe000e100

08009fdc <rtcInit>:
static RTC_HandleTypeDef hrtc;



bool rtcInit(void)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b082      	sub	sp, #8
 8009fe0:	af00      	add	r7, sp, #0
  bool ret = true;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	71fb      	strb	r3, [r7, #7]


  hrtc.Instance = RTC;
 8009fe6:	4b14      	ldr	r3, [pc, #80]	; (800a038 <rtcInit+0x5c>)
 8009fe8:	4a14      	ldr	r2, [pc, #80]	; (800a03c <rtcInit+0x60>)
 8009fea:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8009fec:	4b12      	ldr	r3, [pc, #72]	; (800a038 <rtcInit+0x5c>)
 8009fee:	2200      	movs	r2, #0
 8009ff0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8009ff2:	4b11      	ldr	r3, [pc, #68]	; (800a038 <rtcInit+0x5c>)
 8009ff4:	227f      	movs	r2, #127	; 0x7f
 8009ff6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8009ff8:	4b0f      	ldr	r3, [pc, #60]	; (800a038 <rtcInit+0x5c>)
 8009ffa:	22ff      	movs	r2, #255	; 0xff
 8009ffc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009ffe:	4b0e      	ldr	r3, [pc, #56]	; (800a038 <rtcInit+0x5c>)
 800a000:	2200      	movs	r2, #0
 800a002:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800a004:	4b0c      	ldr	r3, [pc, #48]	; (800a038 <rtcInit+0x5c>)
 800a006:	2200      	movs	r2, #0
 800a008:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a00a:	4b0b      	ldr	r3, [pc, #44]	; (800a038 <rtcInit+0x5c>)
 800a00c:	2200      	movs	r2, #0
 800a00e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a010:	4b09      	ldr	r3, [pc, #36]	; (800a038 <rtcInit+0x5c>)
 800a012:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a016:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800a018:	4b07      	ldr	r3, [pc, #28]	; (800a038 <rtcInit+0x5c>)
 800a01a:	2200      	movs	r2, #0
 800a01c:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a01e:	4806      	ldr	r0, [pc, #24]	; (800a038 <rtcInit+0x5c>)
 800a020:	f003 ff3a 	bl	800de98 <HAL_RTC_Init>
 800a024:	4603      	mov	r3, r0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d001      	beq.n	800a02e <rtcInit+0x52>
  {
    return false;
 800a02a:	2300      	movs	r3, #0
 800a02c:	e000      	b.n	800a030 <rtcInit+0x54>
  }

  return ret;
 800a02e:	79fb      	ldrb	r3, [r7, #7]
}
 800a030:	4618      	mov	r0, r3
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	20000920 	.word	0x20000920
 800a03c:	40002800 	.word	0x40002800

0800a040 <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 800a048:	6879      	ldr	r1, [r7, #4]
 800a04a:	4804      	ldr	r0, [pc, #16]	; (800a05c <rtcBackupRegRead+0x1c>)
 800a04c:	f004 f85a 	bl	800e104 <HAL_RTCEx_BKUPRead>
 800a050:	4603      	mov	r3, r0
}
 800a052:	4618      	mov	r0, r3
 800a054:	3708      	adds	r7, #8
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	20000920 	.word	0x20000920

0800a060 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 800a06a:	683a      	ldr	r2, [r7, #0]
 800a06c:	6879      	ldr	r1, [r7, #4]
 800a06e:	4803      	ldr	r0, [pc, #12]	; (800a07c <rtcBackupRegWrite+0x1c>)
 800a070:	f004 f830 	bl	800e0d4 <HAL_RTCEx_BKUPWrite>
}
 800a074:	bf00      	nop
 800a076:	3708      	adds	r7, #8
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	20000920 	.word	0x20000920

0800a080 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b098      	sub	sp, #96	; 0x60
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a088:	f107 030c 	add.w	r3, r7, #12
 800a08c:	2254      	movs	r2, #84	; 0x54
 800a08e:	2100      	movs	r1, #0
 800a090:	4618      	mov	r0, r3
 800a092:	f00b ff5d 	bl	8015f50 <memset>
  if(rtcHandle->Instance==RTC)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	4a15      	ldr	r2, [pc, #84]	; (800a0f0 <HAL_RTC_MspInit+0x70>)
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d123      	bne.n	800a0e8 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a0a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a0a4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800a0a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0aa:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a0ac:	f107 030c 	add.w	r3, r7, #12
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f003 fca3 	bl	800d9fc <HAL_RCCEx_PeriphCLKConfig>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d001      	beq.n	800a0c0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800a0bc:	f7fe fc82 	bl	80089c4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800a0c0:	4b0c      	ldr	r3, [pc, #48]	; (800a0f4 <HAL_RTC_MspInit+0x74>)
 800a0c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0c6:	4a0b      	ldr	r2, [pc, #44]	; (800a0f4 <HAL_RTC_MspInit+0x74>)
 800a0c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800a0d0:	4b08      	ldr	r3, [pc, #32]	; (800a0f4 <HAL_RTC_MspInit+0x74>)
 800a0d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0d4:	4a07      	ldr	r2, [pc, #28]	; (800a0f4 <HAL_RTC_MspInit+0x74>)
 800a0d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a0da:	6593      	str	r3, [r2, #88]	; 0x58
 800a0dc:	4b05      	ldr	r3, [pc, #20]	; (800a0f4 <HAL_RTC_MspInit+0x74>)
 800a0de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0e4:	60bb      	str	r3, [r7, #8]
 800a0e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800a0e8:	bf00      	nop
 800a0ea:	3760      	adds	r7, #96	; 0x60
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}
 800a0f0:	40002800 	.word	0x40002800
 800a0f4:	40021000 	.word	0x40021000

0800a0f8 <swtimerInit>:
//-- External Functions
//


bool swtimerInit(void)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
  uint8_t i;
  static uint8_t excute = 0;


  if (excute == 1)
 800a0fe:	4b20      	ldr	r3, [pc, #128]	; (800a180 <swtimerInit+0x88>)
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	2b01      	cmp	r3, #1
 800a104:	d101      	bne.n	800a10a <swtimerInit+0x12>
  {
    return false;  // 이미 한번 실행했다면 정지.
 800a106:	2300      	movs	r3, #0
 800a108:	e033      	b.n	800a172 <swtimerInit+0x7a>
  }


  // 구조체 초기화
  for(i=0; i<_DEF_SW_TIMER_MAX; i++)
 800a10a:	2300      	movs	r3, #0
 800a10c:	71fb      	strb	r3, [r7, #7]
 800a10e:	e029      	b.n	800a164 <swtimerInit+0x6c>
  {
    swtimer_tbl[i].Timer_En   = OFF;
 800a110:	79fa      	ldrb	r2, [r7, #7]
 800a112:	491c      	ldr	r1, [pc, #112]	; (800a184 <swtimerInit+0x8c>)
 800a114:	4613      	mov	r3, r2
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	4413      	add	r3, r2
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	440b      	add	r3, r1
 800a11e:	2200      	movs	r2, #0
 800a120:	701a      	strb	r2, [r3, #0]
    swtimer_tbl[i].Timer_Ctn  = 0;
 800a122:	79fa      	ldrb	r2, [r7, #7]
 800a124:	4917      	ldr	r1, [pc, #92]	; (800a184 <swtimerInit+0x8c>)
 800a126:	4613      	mov	r3, r2
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	4413      	add	r3, r2
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	440b      	add	r3, r1
 800a130:	3304      	adds	r3, #4
 800a132:	2200      	movs	r2, #0
 800a134:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].Timer_Init = 0;
 800a136:	79fa      	ldrb	r2, [r7, #7]
 800a138:	4912      	ldr	r1, [pc, #72]	; (800a184 <swtimerInit+0x8c>)
 800a13a:	4613      	mov	r3, r2
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	4413      	add	r3, r2
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	440b      	add	r3, r1
 800a144:	3308      	adds	r3, #8
 800a146:	2200      	movs	r2, #0
 800a148:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].TmrFnct    = NULL;
 800a14a:	79fa      	ldrb	r2, [r7, #7]
 800a14c:	490d      	ldr	r1, [pc, #52]	; (800a184 <swtimerInit+0x8c>)
 800a14e:	4613      	mov	r3, r2
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	4413      	add	r3, r2
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	440b      	add	r3, r1
 800a158:	330c      	adds	r3, #12
 800a15a:	2200      	movs	r2, #0
 800a15c:	601a      	str	r2, [r3, #0]
  for(i=0; i<_DEF_SW_TIMER_MAX; i++)
 800a15e:	79fb      	ldrb	r3, [r7, #7]
 800a160:	3301      	adds	r3, #1
 800a162:	71fb      	strb	r3, [r7, #7]
 800a164:	79fb      	ldrb	r3, [r7, #7]
 800a166:	2b03      	cmp	r3, #3
 800a168:	d9d2      	bls.n	800a110 <swtimerInit+0x18>
  }

  excute = 1;
 800a16a:	4b05      	ldr	r3, [pc, #20]	; (800a180 <swtimerInit+0x88>)
 800a16c:	2201      	movs	r2, #1
 800a16e:	701a      	strb	r2, [r3, #0]

  return true;
 800a170:	2301      	movs	r3, #1
}
 800a172:	4618      	mov	r0, r3
 800a174:	370c      	adds	r7, #12
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr
 800a17e:	bf00      	nop
 800a180:	2000099c 	.word	0x2000099c
 800a184:	2000094c 	.word	0x2000094c

0800a188 <swtimerSet>:
  }

}

void swtimerSet(swtimer_handle_t TmrNum, uint32_t TmrData, uint8_t TmrMode, void (*Fnct)(void *),void *arg)
{
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60b9      	str	r1, [r7, #8]
 800a190:	607b      	str	r3, [r7, #4]
 800a192:	4603      	mov	r3, r0
 800a194:	81fb      	strh	r3, [r7, #14]
 800a196:	4613      	mov	r3, r2
 800a198:	737b      	strb	r3, [r7, #13]
  if(TmrNum < 0) return;
 800a19a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	db37      	blt.n	800a212 <swtimerSet+0x8a>

  swtimer_tbl[TmrNum].Timer_Mode = TmrMode;    // 모드설정
 800a1a2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800a1a6:	491e      	ldr	r1, [pc, #120]	; (800a220 <swtimerSet+0x98>)
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	4413      	add	r3, r2
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	440b      	add	r3, r1
 800a1b2:	3301      	adds	r3, #1
 800a1b4:	7b7a      	ldrb	r2, [r7, #13]
 800a1b6:	701a      	strb	r2, [r3, #0]
  swtimer_tbl[TmrNum].TmrFnct    = Fnct;       // 실행할 함수
 800a1b8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800a1bc:	4918      	ldr	r1, [pc, #96]	; (800a220 <swtimerSet+0x98>)
 800a1be:	4613      	mov	r3, r2
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	4413      	add	r3, r2
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	440b      	add	r3, r1
 800a1c8:	330c      	adds	r3, #12
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].TmrFnctArg = arg;        // 매개변수
 800a1ce:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800a1d2:	4913      	ldr	r1, [pc, #76]	; (800a220 <swtimerSet+0x98>)
 800a1d4:	4613      	mov	r3, r2
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	4413      	add	r3, r2
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	440b      	add	r3, r1
 800a1de:	3310      	adds	r3, #16
 800a1e0:	69ba      	ldr	r2, [r7, #24]
 800a1e2:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].Timer_Ctn  = TmrData;
 800a1e4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800a1e8:	490d      	ldr	r1, [pc, #52]	; (800a220 <swtimerSet+0x98>)
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	4413      	add	r3, r2
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	440b      	add	r3, r1
 800a1f4:	3304      	adds	r3, #4
 800a1f6:	68ba      	ldr	r2, [r7, #8]
 800a1f8:	601a      	str	r2, [r3, #0]
  swtimer_tbl[TmrNum].Timer_Init = TmrData;
 800a1fa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800a1fe:	4908      	ldr	r1, [pc, #32]	; (800a220 <swtimerSet+0x98>)
 800a200:	4613      	mov	r3, r2
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	4413      	add	r3, r2
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	440b      	add	r3, r1
 800a20a:	3308      	adds	r3, #8
 800a20c:	68ba      	ldr	r2, [r7, #8]
 800a20e:	601a      	str	r2, [r3, #0]
 800a210:	e000      	b.n	800a214 <swtimerSet+0x8c>
  if(TmrNum < 0) return;
 800a212:	bf00      	nop
}
 800a214:	3714      	adds	r7, #20
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop
 800a220:	2000094c 	.word	0x2000094c

0800a224 <swtimerStart>:

void swtimerStart(swtimer_handle_t TmrNum)
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	4603      	mov	r3, r0
 800a22c:	80fb      	strh	r3, [r7, #6]
  if(TmrNum < 0) return;
 800a22e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a232:	2b00      	cmp	r3, #0
 800a234:	db1e      	blt.n	800a274 <swtimerStart+0x50>

  swtimer_tbl[TmrNum].Timer_Ctn = swtimer_tbl[TmrNum].Timer_Init;
 800a236:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800a23a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a23e:	4810      	ldr	r0, [pc, #64]	; (800a280 <swtimerStart+0x5c>)
 800a240:	460b      	mov	r3, r1
 800a242:	009b      	lsls	r3, r3, #2
 800a244:	440b      	add	r3, r1
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	4403      	add	r3, r0
 800a24a:	3308      	adds	r3, #8
 800a24c:	6819      	ldr	r1, [r3, #0]
 800a24e:	480c      	ldr	r0, [pc, #48]	; (800a280 <swtimerStart+0x5c>)
 800a250:	4613      	mov	r3, r2
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	4413      	add	r3, r2
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	4403      	add	r3, r0
 800a25a:	3304      	adds	r3, #4
 800a25c:	6019      	str	r1, [r3, #0]
  swtimer_tbl[TmrNum].Timer_En  = ON;
 800a25e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a262:	4907      	ldr	r1, [pc, #28]	; (800a280 <swtimerStart+0x5c>)
 800a264:	4613      	mov	r3, r2
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	4413      	add	r3, r2
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	440b      	add	r3, r1
 800a26e:	2201      	movs	r2, #1
 800a270:	701a      	strb	r2, [r3, #0]
 800a272:	e000      	b.n	800a276 <swtimerStart+0x52>
  if(TmrNum < 0) return;
 800a274:	bf00      	nop
}
 800a276:	370c      	adds	r7, #12
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr
 800a280:	2000094c 	.word	0x2000094c

0800a284 <swtimerGetHandle>:
  swtimer_tbl[TmrNum].Timer_Ctn  = swtimer_tbl[TmrNum].Timer_Init;
}

// handler 할당
swtimer_handle_t swtimerGetHandle(void)
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
  swtimer_handle_t TmrIndex = sw_timer_handle_index;
 800a28a:	4b0d      	ldr	r3, [pc, #52]	; (800a2c0 <swtimerGetHandle+0x3c>)
 800a28c:	881b      	ldrh	r3, [r3, #0]
 800a28e:	b29b      	uxth	r3, r3
 800a290:	80fb      	strh	r3, [r7, #6]

  if (TmrIndex < _DEF_SW_TIMER_MAX)
 800a292:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a296:	2b03      	cmp	r3, #3
 800a298:	dc07      	bgt.n	800a2aa <swtimerGetHandle+0x26>
    sw_timer_handle_index++;
 800a29a:	4b09      	ldr	r3, [pc, #36]	; (800a2c0 <swtimerGetHandle+0x3c>)
 800a29c:	881b      	ldrh	r3, [r3, #0]
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	3301      	adds	r3, #1
 800a2a2:	b29a      	uxth	r2, r3
 800a2a4:	4b06      	ldr	r3, [pc, #24]	; (800a2c0 <swtimerGetHandle+0x3c>)
 800a2a6:	801a      	strh	r2, [r3, #0]
 800a2a8:	e002      	b.n	800a2b0 <swtimerGetHandle+0x2c>
  else
    TmrIndex = -1;
 800a2aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a2ae:	80fb      	strh	r3, [r7, #6]

  return TmrIndex;
 800a2b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	370c      	adds	r7, #12
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr
 800a2c0:	20000948 	.word	0x20000948

0800a2c4 <uartInit>:
UART_HandleTypeDef huart1;



bool uartInit(void)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
  for(int i = 0; i <UART_MAX_CH; i++)
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	607b      	str	r3, [r7, #4]
 800a2ce:	e007      	b.n	800a2e0 <uartInit+0x1c>
  {
    is_open[i] = false;
 800a2d0:	4a08      	ldr	r2, [pc, #32]	; (800a2f4 <uartInit+0x30>)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	4413      	add	r3, r2
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i <UART_MAX_CH; i++)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	3301      	adds	r3, #1
 800a2de:	607b      	str	r3, [r7, #4]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	ddf4      	ble.n	800a2d0 <uartInit+0xc>
  }

  return true;
 800a2e6:	2301      	movs	r3, #1
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr
 800a2f4:	200009a0 	.word	0x200009a0

0800a2f8 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	4603      	mov	r3, r0
 800a300:	6039      	str	r1, [r7, #0]
 800a302:	71fb      	strb	r3, [r7, #7]
  bool ret =false;
 800a304:	2300      	movs	r3, #0
 800a306:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 800a308:	79fb      	ldrb	r3, [r7, #7]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d176      	bne.n	800a3fc <uartOpen+0x104>
  {
    case _DEF_UART1:
      huart1.Instance = USART1;
 800a30e:	4b3e      	ldr	r3, [pc, #248]	; (800a408 <uartOpen+0x110>)
 800a310:	4a3e      	ldr	r2, [pc, #248]	; (800a40c <uartOpen+0x114>)
 800a312:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate = baud;
 800a314:	4a3c      	ldr	r2, [pc, #240]	; (800a408 <uartOpen+0x110>)
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	6053      	str	r3, [r2, #4]
      huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a31a:	4b3b      	ldr	r3, [pc, #236]	; (800a408 <uartOpen+0x110>)
 800a31c:	2200      	movs	r2, #0
 800a31e:	625a      	str	r2, [r3, #36]	; 0x24
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a320:	4b39      	ldr	r3, [pc, #228]	; (800a408 <uartOpen+0x110>)
 800a322:	2200      	movs	r2, #0
 800a324:	619a      	str	r2, [r3, #24]
      huart1.Init.Mode = UART_MODE_TX_RX;
 800a326:	4b38      	ldr	r3, [pc, #224]	; (800a408 <uartOpen+0x110>)
 800a328:	220c      	movs	r2, #12
 800a32a:	615a      	str	r2, [r3, #20]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a32c:	4b36      	ldr	r3, [pc, #216]	; (800a408 <uartOpen+0x110>)
 800a32e:	2200      	movs	r2, #0
 800a330:	61da      	str	r2, [r3, #28]
      huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a332:	4b35      	ldr	r3, [pc, #212]	; (800a408 <uartOpen+0x110>)
 800a334:	2200      	movs	r2, #0
 800a336:	621a      	str	r2, [r3, #32]
      huart1.Init.Parity = UART_PARITY_NONE;
 800a338:	4b33      	ldr	r3, [pc, #204]	; (800a408 <uartOpen+0x110>)
 800a33a:	2200      	movs	r2, #0
 800a33c:	611a      	str	r2, [r3, #16]
      huart1.Init.StopBits = UART_STOPBITS_1;
 800a33e:	4b32      	ldr	r3, [pc, #200]	; (800a408 <uartOpen+0x110>)
 800a340:	2200      	movs	r2, #0
 800a342:	60da      	str	r2, [r3, #12]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a344:	4b30      	ldr	r3, [pc, #192]	; (800a408 <uartOpen+0x110>)
 800a346:	2200      	movs	r2, #0
 800a348:	609a      	str	r2, [r3, #8]
      huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a34a:	4b2f      	ldr	r3, [pc, #188]	; (800a408 <uartOpen+0x110>)
 800a34c:	2200      	movs	r2, #0
 800a34e:	629a      	str	r2, [r3, #40]	; 0x28
      qbufferCreate(&qbuffer[ch],&rx_buf[ch], 256); // 수신 버퍼 생성
 800a350:	79fa      	ldrb	r2, [r7, #7]
 800a352:	4613      	mov	r3, r2
 800a354:	009b      	lsls	r3, r3, #2
 800a356:	4413      	add	r3, r2
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	4a2d      	ldr	r2, [pc, #180]	; (800a410 <uartOpen+0x118>)
 800a35c:	1898      	adds	r0, r3, r2
 800a35e:	79fb      	ldrb	r3, [r7, #7]
 800a360:	4a2c      	ldr	r2, [pc, #176]	; (800a414 <uartOpen+0x11c>)
 800a362:	4413      	add	r3, r2
 800a364:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a368:	4619      	mov	r1, r3
 800a36a:	f7fe fc9a 	bl	8008ca2 <qbufferCreate>
      if (HAL_UART_Init(&huart1) != HAL_OK)
 800a36e:	4826      	ldr	r0, [pc, #152]	; (800a408 <uartOpen+0x110>)
 800a370:	f003 fede 	bl	800e130 <HAL_UART_Init>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d002      	beq.n	800a380 <uartOpen+0x88>
      {
        ret = false;
 800a37a:	2300      	movs	r3, #0
 800a37c:	73fb      	strb	r3, [r7, #15]
 800a37e:	e016      	b.n	800a3ae <uartOpen+0xb6>
      }
      else
      {
        ret = true;
 800a380:	2301      	movs	r3, #1
 800a382:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 800a384:	79fb      	ldrb	r3, [r7, #7]
 800a386:	4a24      	ldr	r2, [pc, #144]	; (800a418 <uartOpen+0x120>)
 800a388:	2101      	movs	r1, #1
 800a38a:	54d1      	strb	r1, [r2, r3]
        // 수신용 데이터 버퍼 (rx_data)에 size 만큼 받아서 HAL_UART_RxCpltCallback 함수 호출
        if(HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data[ch], 1) != HAL_OK)
 800a38c:	79fb      	ldrb	r3, [r7, #7]
 800a38e:	4a23      	ldr	r2, [pc, #140]	; (800a41c <uartOpen+0x124>)
 800a390:	4413      	add	r3, r2
 800a392:	2201      	movs	r2, #1
 800a394:	4619      	mov	r1, r3
 800a396:	481c      	ldr	r0, [pc, #112]	; (800a408 <uartOpen+0x110>)
 800a398:	f003 ffa8 	bl	800e2ec <HAL_UART_Receive_IT>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d005      	beq.n	800a3ae <uartOpen+0xb6>
        {
         ret = false;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	73fb      	strb	r3, [r7, #15]
         is_open[ch] = false;
 800a3a6:	79fb      	ldrb	r3, [r7, #7]
 800a3a8:	4a1b      	ldr	r2, [pc, #108]	; (800a418 <uartOpen+0x120>)
 800a3aa:	2100      	movs	r1, #0
 800a3ac:	54d1      	strb	r1, [r2, r3]
        }
      }
      if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	4815      	ldr	r0, [pc, #84]	; (800a408 <uartOpen+0x110>)
 800a3b2:	f005 ff14 	bl	80101de <HAL_UARTEx_SetTxFifoThreshold>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d005      	beq.n	800a3c8 <uartOpen+0xd0>
      {
        ret = false;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = false;
 800a3c0:	79fb      	ldrb	r3, [r7, #7]
 800a3c2:	4a15      	ldr	r2, [pc, #84]	; (800a418 <uartOpen+0x120>)
 800a3c4:	2100      	movs	r1, #0
 800a3c6:	54d1      	strb	r1, [r2, r3]
      }
      if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a3c8:	2100      	movs	r1, #0
 800a3ca:	480f      	ldr	r0, [pc, #60]	; (800a408 <uartOpen+0x110>)
 800a3cc:	f005 ff45 	bl	801025a <HAL_UARTEx_SetRxFifoThreshold>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d005      	beq.n	800a3e2 <uartOpen+0xea>
      {
        ret = false;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = false;
 800a3da:	79fb      	ldrb	r3, [r7, #7]
 800a3dc:	4a0e      	ldr	r2, [pc, #56]	; (800a418 <uartOpen+0x120>)
 800a3de:	2100      	movs	r1, #0
 800a3e0:	54d1      	strb	r1, [r2, r3]
      }
      if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800a3e2:	4809      	ldr	r0, [pc, #36]	; (800a408 <uartOpen+0x110>)
 800a3e4:	f005 fec2 	bl	801016c <HAL_UARTEx_DisableFifoMode>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d005      	beq.n	800a3fa <uartOpen+0x102>
      {
        ret = false;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = false;
 800a3f2:	79fb      	ldrb	r3, [r7, #7]
 800a3f4:	4a08      	ldr	r2, [pc, #32]	; (800a418 <uartOpen+0x120>)
 800a3f6:	2100      	movs	r1, #0
 800a3f8:	54d1      	strb	r1, [r2, r3]
      }
      break;
 800a3fa:	bf00      	nop
  }


  return ret;
 800a3fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3710      	adds	r7, #16
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	20000abc 	.word	0x20000abc
 800a40c:	40013800 	.word	0x40013800
 800a410:	200009a4 	.word	0x200009a4
 800a414:	200009b8 	.word	0x200009b8
 800a418:	200009a0 	.word	0x200009a0
 800a41c:	20000ab8 	.word	0x20000ab8

0800a420 <uartAvailable>:
{
  return true;
}

uint32_t uartAvailable(uint8_t ch)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	4603      	mov	r3, r0
 800a428:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 800a42a:	2300      	movs	r3, #0
 800a42c:	60fb      	str	r3, [r7, #12]

  switch(ch)
 800a42e:	79fb      	ldrb	r3, [r7, #7]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d10b      	bne.n	800a44c <uartAvailable+0x2c>
  {
    case _DEF_UART1:
      ret = qbufferAvailable(&qbuffer[ch]);
 800a434:	79fa      	ldrb	r2, [r7, #7]
 800a436:	4613      	mov	r3, r2
 800a438:	009b      	lsls	r3, r3, #2
 800a43a:	4413      	add	r3, r2
 800a43c:	009b      	lsls	r3, r3, #2
 800a43e:	4a06      	ldr	r2, [pc, #24]	; (800a458 <uartAvailable+0x38>)
 800a440:	4413      	add	r3, r2
 800a442:	4618      	mov	r0, r3
 800a444:	f7fe fcff 	bl	8008e46 <qbufferAvailable>
 800a448:	60f8      	str	r0, [r7, #12]
      break;
 800a44a:	bf00      	nop
  }

  return ret;
 800a44c:	68fb      	ldr	r3, [r7, #12]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3710      	adds	r7, #16
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	200009a4 	.word	0x200009a4

0800a45c <uartWrite>:

  return ret;
}

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b086      	sub	sp, #24
 800a460:	af00      	add	r7, sp, #0
 800a462:	4603      	mov	r3, r0
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	607a      	str	r2, [r7, #4]
 800a468:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 800a46a:	2300      	movs	r3, #0
 800a46c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;
  switch(ch)
 800a46e:	7bfb      	ldrb	r3, [r7, #15]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d10e      	bne.n	800a492 <uartWrite+0x36>
  {
    case _DEF_UART1:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	b29a      	uxth	r2, r3
 800a478:	2364      	movs	r3, #100	; 0x64
 800a47a:	68b9      	ldr	r1, [r7, #8]
 800a47c:	4807      	ldr	r0, [pc, #28]	; (800a49c <uartWrite+0x40>)
 800a47e:	f003 fea7 	bl	800e1d0 <HAL_UART_Transmit>
 800a482:	4603      	mov	r3, r0
 800a484:	74fb      	strb	r3, [r7, #19]
      if(status == HAL_OK)
 800a486:	7cfb      	ldrb	r3, [r7, #19]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d101      	bne.n	800a490 <uartWrite+0x34>
      {
        ret = length;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	617b      	str	r3, [r7, #20]
      }
      break;
 800a490:	bf00      	nop
  }

  return ret;
 800a492:	697b      	ldr	r3, [r7, #20]
}
 800a494:	4618      	mov	r0, r3
 800a496:	3718      	adds	r7, #24
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}
 800a49c:	20000abc 	.word	0x20000abc

0800a4a0 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 800a4a0:	b40e      	push	{r1, r2, r3}
 800a4a2:	b580      	push	{r7, lr}
 800a4a4:	b0c7      	sub	sp, #284	; 0x11c
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a4ae:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800a4b2:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 800a4b4:	f507 7294 	add.w	r2, r7, #296	; 0x128
 800a4b8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a4bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a4c0:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 800a4c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a4c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a4ca:	f107 0010 	add.w	r0, r7, #16
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800a4d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a4d8:	f00b fd2c 	bl	8015f34 <vsniprintf>
 800a4dc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 800a4e0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800a4e4:	f107 0110 	add.w	r1, r7, #16
 800a4e8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a4ec:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7ff ffb2 	bl	800a45c <uartWrite>
 800a4f8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 800a4fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 800a500:	4618      	mov	r0, r3
 800a502:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800a506:	46bd      	mov	sp, r7
 800a508:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a50c:	b003      	add	sp, #12
 800a50e:	4770      	bx	lr

0800a510 <HAL_UART_ErrorCallback>:

  return ret;
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef* huart)
{
 800a510:	b480      	push	{r7}
 800a512:	b083      	sub	sp, #12
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
  {

  }
}
 800a518:	bf00      	nop
 800a51a:	370c      	adds	r7, #12
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b082      	sub	sp, #8
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a08      	ldr	r2, [pc, #32]	; (800a554 <HAL_UART_RxCpltCallback+0x30>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d109      	bne.n	800a54a <HAL_UART_RxCpltCallback+0x26>
  {
    // 빠르게 송신시 1 바이트 사용시 인터럽트가 많이 걸려서 처리가 늦어져 overrun (덮어쓰기 에러) , 데이터 손실 에러 발생 가능
    // 고속의 송수신 - DMA 방식을 사용
    qbufferWrite(&qbuffer[_DEF_UART1], &rx_data[_DEF_UART1], 1);
 800a536:	2201      	movs	r2, #1
 800a538:	4907      	ldr	r1, [pc, #28]	; (800a558 <HAL_UART_RxCpltCallback+0x34>)
 800a53a:	4808      	ldr	r0, [pc, #32]	; (800a55c <HAL_UART_RxCpltCallback+0x38>)
 800a53c:	f7fe fbcf 	bl	8008cde <qbufferWrite>

    HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data[_DEF_UART1], 1);
 800a540:	2201      	movs	r2, #1
 800a542:	4905      	ldr	r1, [pc, #20]	; (800a558 <HAL_UART_RxCpltCallback+0x34>)
 800a544:	4806      	ldr	r0, [pc, #24]	; (800a560 <HAL_UART_RxCpltCallback+0x3c>)
 800a546:	f003 fed1 	bl	800e2ec <HAL_UART_Receive_IT>
  }
}
 800a54a:	bf00      	nop
 800a54c:	3708      	adds	r7, #8
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	40013800 	.word	0x40013800
 800a558:	20000ab8 	.word	0x20000ab8
 800a55c:	200009a4 	.word	0x200009a4
 800a560:	20000abc 	.word	0x20000abc

0800a564 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b09e      	sub	sp, #120	; 0x78
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a56c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a570:	2200      	movs	r2, #0
 800a572:	601a      	str	r2, [r3, #0]
 800a574:	605a      	str	r2, [r3, #4]
 800a576:	609a      	str	r2, [r3, #8]
 800a578:	60da      	str	r2, [r3, #12]
 800a57a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a57c:	f107 0310 	add.w	r3, r7, #16
 800a580:	2254      	movs	r2, #84	; 0x54
 800a582:	2100      	movs	r1, #0
 800a584:	4618      	mov	r0, r3
 800a586:	f00b fce3 	bl	8015f50 <memset>
  if(uartHandle->Instance==USART1)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a22      	ldr	r2, [pc, #136]	; (800a618 <HAL_UART_MspInit+0xb4>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d13d      	bne.n	800a610 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800a594:	2301      	movs	r3, #1
 800a596:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800a598:	2300      	movs	r3, #0
 800a59a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a59c:	f107 0310 	add.w	r3, r7, #16
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f003 fa2b 	bl	800d9fc <HAL_RCCEx_PeriphCLKConfig>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d001      	beq.n	800a5b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800a5ac:	f7fe fa0a 	bl	80089c4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a5b0:	4b1a      	ldr	r3, [pc, #104]	; (800a61c <HAL_UART_MspInit+0xb8>)
 800a5b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5b4:	4a19      	ldr	r2, [pc, #100]	; (800a61c <HAL_UART_MspInit+0xb8>)
 800a5b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a5ba:	6613      	str	r3, [r2, #96]	; 0x60
 800a5bc:	4b17      	ldr	r3, [pc, #92]	; (800a61c <HAL_UART_MspInit+0xb8>)
 800a5be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5c4:	60fb      	str	r3, [r7, #12]
 800a5c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a5c8:	4b14      	ldr	r3, [pc, #80]	; (800a61c <HAL_UART_MspInit+0xb8>)
 800a5ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5cc:	4a13      	ldr	r2, [pc, #76]	; (800a61c <HAL_UART_MspInit+0xb8>)
 800a5ce:	f043 0304 	orr.w	r3, r3, #4
 800a5d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a5d4:	4b11      	ldr	r3, [pc, #68]	; (800a61c <HAL_UART_MspInit+0xb8>)
 800a5d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5d8:	f003 0304 	and.w	r3, r3, #4
 800a5dc:	60bb      	str	r3, [r7, #8]
 800a5de:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PC4_USART1_TX_Pin|PC5_USART1_RX_Pin;
 800a5e0:	2330      	movs	r3, #48	; 0x30
 800a5e2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5e4:	2302      	movs	r3, #2
 800a5e6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a5f0:	2307      	movs	r3, #7
 800a5f2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a5f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	4809      	ldr	r0, [pc, #36]	; (800a620 <HAL_UART_MspInit+0xbc>)
 800a5fc:	f000 fc9a 	bl	800af34 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800a600:	2200      	movs	r2, #0
 800a602:	2100      	movs	r1, #0
 800a604:	2025      	movs	r0, #37	; 0x25
 800a606:	f000 fba0 	bl	800ad4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a60a:	2025      	movs	r0, #37	; 0x25
 800a60c:	f000 fbb7 	bl	800ad7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800a610:	bf00      	nop
 800a612:	3778      	adds	r7, #120	; 0x78
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	40013800 	.word	0x40013800
 800a61c:	40021000 	.word	0x40021000
 800a620:	48000800 	.word	0x48000800

0800a624 <usbInit>:
#endif



bool usbInit(void)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b086      	sub	sp, #24
 800a628:	af00      	add	r7, sp, #0
  bool ret = true;
 800a62a:	2301      	movs	r3, #1
 800a62c:	75fb      	strb	r3, [r7, #23]

  /* USB - RESET 시 장치관리자 해제 연결 안될 시 */

  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 800a62e:	463b      	mov	r3, r7
 800a630:	2200      	movs	r2, #0
 800a632:	601a      	str	r2, [r3, #0]
 800a634:	605a      	str	r2, [r3, #4]
 800a636:	609a      	str	r2, [r3, #8]
 800a638:	60da      	str	r2, [r3, #12]
 800a63a:	611a      	str	r2, [r3, #16]
  // PA12(USB_DP) 출력 설정
  GPIO_InitStructure.Pin = GPIO_PIN_12;
 800a63c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a640:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 800a642:	2311      	movs	r3, #17
 800a644:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800a646:	2300      	movs	r3, #0
 800a648:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 800a64a:	2300      	movs	r3, #0
 800a64c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800a64e:	463b      	mov	r3, r7
 800a650:	4619      	mov	r1, r3
 800a652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a656:	f000 fc6d 	bl	800af34 <HAL_GPIO_Init>

  //회로에 PULL UP 이 걸려있다면 - 내리고
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800a65a:	2200      	movs	r2, #0
 800a65c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a664:	f000 fe00 	bl	800b268 <HAL_GPIO_WritePin>
  delay(200);
 800a668:	20c8      	movs	r0, #200	; 0xc8
 800a66a:	f7fe f93f 	bl	80088ec <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800a66e:	2201      	movs	r2, #1
 800a670:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a678:	f000 fdf6 	bl	800b268 <HAL_GPIO_WritePin>

  // INPUT 으로 다시 변경
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800a67c:	2300      	movs	r3, #0
 800a67e:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800a680:	463b      	mov	r3, r7
 800a682:	4619      	mov	r1, r3
 800a684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a688:	f000 fc54 	bl	800af34 <HAL_GPIO_Init>

  MX_USB_Device_Init();
 800a68c:	f009 fe02 	bl	8014294 <MX_USB_Device_Init>

#ifdef _USE_HW_CLI
  cliAdd("usb", cliCmd);
 800a690:	4904      	ldr	r1, [pc, #16]	; (800a6a4 <usbInit+0x80>)
 800a692:	4805      	ldr	r0, [pc, #20]	; (800a6a8 <usbInit+0x84>)
 800a694:	f7ff f96e 	bl	8009974 <cliAdd>
#endif
  return ret;
 800a698:	7dfb      	ldrb	r3, [r7, #23]
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3718      	adds	r7, #24
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	0800a791 	.word	0x0800a791
 800a6a8:	080183a0 	.word	0x080183a0

0800a6ac <usbIsOpen>:
    USBD_DeInit(&hUsbDeviceFS);
  }
}

bool usbIsOpen(void)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	af00      	add	r7, sp, #0
  return cdcIsConnect();
 800a6b0:	f7fe ffc6 	bl	8009640 <cdcIsConnect>
 800a6b4:	4603      	mov	r3, r0
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	bd80      	pop	{r7, pc}
	...

0800a6bc <usbIsConnect>:

bool usbIsConnect(void)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	af00      	add	r7, sp, #0
  if (hUsbDeviceFS.pClassData == NULL)
 800a6c0:	4b0d      	ldr	r3, [pc, #52]	; (800a6f8 <usbIsConnect+0x3c>)
 800a6c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d101      	bne.n	800a6ce <usbIsConnect+0x12>
  {
    return false;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	e00e      	b.n	800a6ec <usbIsConnect+0x30>
  }
  if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 800a6ce:	4b0a      	ldr	r3, [pc, #40]	; (800a6f8 <usbIsConnect+0x3c>)
 800a6d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	2b03      	cmp	r3, #3
 800a6d8:	d001      	beq.n	800a6de <usbIsConnect+0x22>
  {
    return false;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	e006      	b.n	800a6ec <usbIsConnect+0x30>
  }
  if (hUsbDeviceFS.dev_config == 0)
 800a6de:	4b06      	ldr	r3, [pc, #24]	; (800a6f8 <usbIsConnect+0x3c>)
 800a6e0:	685b      	ldr	r3, [r3, #4]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d101      	bne.n	800a6ea <usbIsConnect+0x2e>
  {
    return false;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	e000      	b.n	800a6ec <usbIsConnect+0x30>
  }

  return true;
 800a6ea:	2301      	movs	r3, #1
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr
 800a6f6:	bf00      	nop
 800a6f8:	20000b5c 	.word	0x20000b5c

0800a6fc <usbBegin>:
{
  return is_usb_mode;
}

bool usbBegin(UsbMode usb_mode)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	4603      	mov	r3, r0
 800a704:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800a706:	2300      	movs	r3, #0
 800a708:	73fb      	strb	r3, [r7, #15]


#if HW_USE_CDC == 1

  if (usb_mode == USB_CDC_MODE)
 800a70a:	79fb      	ldrb	r3, [r7, #7]
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d12a      	bne.n	800a766 <usbBegin+0x6a>
  {
    if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK)
 800a710:	2200      	movs	r2, #0
 800a712:	4919      	ldr	r1, [pc, #100]	; (800a778 <usbBegin+0x7c>)
 800a714:	4819      	ldr	r0, [pc, #100]	; (800a77c <usbBegin+0x80>)
 800a716:	f008 fc9d 	bl	8013054 <USBD_Init>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d001      	beq.n	800a724 <usbBegin+0x28>
    {
      return false;
 800a720:	2300      	movs	r3, #0
 800a722:	e024      	b.n	800a76e <usbBegin+0x72>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a724:	4916      	ldr	r1, [pc, #88]	; (800a780 <usbBegin+0x84>)
 800a726:	4815      	ldr	r0, [pc, #84]	; (800a77c <usbBegin+0x80>)
 800a728:	f008 fcc4 	bl	80130b4 <USBD_RegisterClass>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d001      	beq.n	800a736 <usbBegin+0x3a>
    {
      return false;
 800a732:	2300      	movs	r3, #0
 800a734:	e01b      	b.n	800a76e <usbBegin+0x72>
    }
    if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a736:	4913      	ldr	r1, [pc, #76]	; (800a784 <usbBegin+0x88>)
 800a738:	4810      	ldr	r0, [pc, #64]	; (800a77c <usbBegin+0x80>)
 800a73a:	f008 fc15 	bl	8012f68 <USBD_CDC_RegisterInterface>
 800a73e:	4603      	mov	r3, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d001      	beq.n	800a748 <usbBegin+0x4c>
    {
      return false;
 800a744:	2300      	movs	r3, #0
 800a746:	e012      	b.n	800a76e <usbBegin+0x72>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a748:	480c      	ldr	r0, [pc, #48]	; (800a77c <usbBegin+0x80>)
 800a74a:	f008 fcda 	bl	8013102 <USBD_Start>
 800a74e:	4603      	mov	r3, r0
 800a750:	2b00      	cmp	r3, #0
 800a752:	d001      	beq.n	800a758 <usbBegin+0x5c>
    {
      return false;
 800a754:	2300      	movs	r3, #0
 800a756:	e00a      	b.n	800a76e <usbBegin+0x72>
    }


    cdcInit();
 800a758:	f7fe ff5e 	bl	8009618 <cdcInit>

    is_usb_mode = USB_CDC_MODE;
 800a75c:	4b0a      	ldr	r3, [pc, #40]	; (800a788 <usbBegin+0x8c>)
 800a75e:	2201      	movs	r2, #1
 800a760:	701a      	strb	r2, [r3, #0]
    ret = true;
 800a762:	2301      	movs	r3, #1
 800a764:	73fb      	strb	r3, [r7, #15]
    ret = true;
  }
#endif


  is_init = ret;
 800a766:	4a09      	ldr	r2, [pc, #36]	; (800a78c <usbBegin+0x90>)
 800a768:	7bfb      	ldrb	r3, [r7, #15]
 800a76a:	7013      	strb	r3, [r2, #0]

  return ret;
 800a76c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3710      	adds	r7, #16
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	20000144 	.word	0x20000144
 800a77c:	20000b5c 	.word	0x20000b5c
 800a780:	20000024 	.word	0x20000024
 800a784:	20000130 	.word	0x20000130
 800a788:	20000b51 	.word	0x20000b51
 800a78c:	20000b50 	.word	0x20000b50

0800a790 <cliCmd>:


#ifdef _USE_HW_CLI
void cliCmd(cli_args_t *args)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b08a      	sub	sp, #40	; 0x28
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800a798:	2300      	movs	r3, #0
 800a79a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (args->argc == 1 && args->isStr(0, "info") == true)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	881b      	ldrh	r3, [r3, #0]
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	d129      	bne.n	800a7fa <cliCmd+0x6a>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	695b      	ldr	r3, [r3, #20]
 800a7aa:	4959      	ldr	r1, [pc, #356]	; (800a910 <cliCmd+0x180>)
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	4798      	blx	r3
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d021      	beq.n	800a7fa <cliCmd+0x6a>
  {
    while(cliKeepLoop())
 800a7b6:	e014      	b.n	800a7e2 <cliCmd+0x52>
    {
      cliPrintf("USB Connect : %d\n", usbIsConnect());
 800a7b8:	f7ff ff80 	bl	800a6bc <usbIsConnect>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	4619      	mov	r1, r3
 800a7c0:	4854      	ldr	r0, [pc, #336]	; (800a914 <cliCmd+0x184>)
 800a7c2:	f7fe ffc7 	bl	8009754 <cliPrintf>
      cliPrintf("USB Open    : %d\n", usbIsOpen());
 800a7c6:	f7ff ff71 	bl	800a6ac <usbIsOpen>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	4852      	ldr	r0, [pc, #328]	; (800a918 <cliCmd+0x188>)
 800a7d0:	f7fe ffc0 	bl	8009754 <cliPrintf>
      cliPrintf("\x1B[%dA", 2);
 800a7d4:	2102      	movs	r1, #2
 800a7d6:	4851      	ldr	r0, [pc, #324]	; (800a91c <cliCmd+0x18c>)
 800a7d8:	f7fe ffbc 	bl	8009754 <cliPrintf>
      delay(100);
 800a7dc:	2064      	movs	r0, #100	; 0x64
 800a7de:	f7fe f885 	bl	80088ec <delay>
    while(cliKeepLoop())
 800a7e2:	f7ff f8b1 	bl	8009948 <cliKeepLoop>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d1e5      	bne.n	800a7b8 <cliCmd+0x28>
    }
    cliPrintf("\x1B[%dB", 2);
 800a7ec:	2102      	movs	r1, #2
 800a7ee:	484c      	ldr	r0, [pc, #304]	; (800a920 <cliCmd+0x190>)
 800a7f0:	f7fe ffb0 	bl	8009754 <cliPrintf>

    ret = true;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (args->argc == 1 && args->isStr(0, "tx") == true)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	881b      	ldrh	r3, [r3, #0]
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d130      	bne.n	800a864 <cliCmd+0xd4>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	695b      	ldr	r3, [r3, #20]
 800a806:	4947      	ldr	r1, [pc, #284]	; (800a924 <cliCmd+0x194>)
 800a808:	2000      	movs	r0, #0
 800a80a:	4798      	blx	r3
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d028      	beq.n	800a864 <cliCmd+0xd4>
  {
    uint32_t pre_time;
    uint32_t tx_cnt = 0;
 800a812:	2300      	movs	r3, #0
 800a814:	61fb      	str	r3, [r7, #28]

    while(cliKeepLoop())
 800a816:	e019      	b.n	800a84c <cliCmd+0xbc>
    {
      if (millis()-pre_time >= 1000)
 800a818:	f7fe f873 	bl	8008902 <millis>
 800a81c:	4602      	mov	r2, r0
 800a81e:	6a3b      	ldr	r3, [r7, #32]
 800a820:	1ad3      	subs	r3, r2, r3
 800a822:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a826:	d30a      	bcc.n	800a83e <cliCmd+0xae>
      {
        pre_time = millis();
 800a828:	f7fe f86b 	bl	8008902 <millis>
 800a82c:	6238      	str	r0, [r7, #32]
        logPrintf("tx : %d KB/s\n", tx_cnt/1024);
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	0a9b      	lsrs	r3, r3, #10
 800a832:	4619      	mov	r1, r3
 800a834:	483c      	ldr	r0, [pc, #240]	; (800a928 <cliCmd+0x198>)
 800a836:	f7ff fb19 	bl	8009e6c <logPrintf>
        tx_cnt = 0;
 800a83a:	2300      	movs	r3, #0
 800a83c:	61fb      	str	r3, [r7, #28]
      }
      cdcWrite((uint8_t *)"123456789012345678901234567890\n", 31);
 800a83e:	211f      	movs	r1, #31
 800a840:	483a      	ldr	r0, [pc, #232]	; (800a92c <cliCmd+0x19c>)
 800a842:	f7fe ff12 	bl	800966a <cdcWrite>
      tx_cnt += 31;
 800a846:	69fb      	ldr	r3, [r7, #28]
 800a848:	331f      	adds	r3, #31
 800a84a:	61fb      	str	r3, [r7, #28]
    while(cliKeepLoop())
 800a84c:	f7ff f87c 	bl	8009948 <cliKeepLoop>
 800a850:	4603      	mov	r3, r0
 800a852:	2b00      	cmp	r3, #0
 800a854:	d1e0      	bne.n	800a818 <cliCmd+0x88>
    }
    cliPrintf("\x1B[%dB", 2);
 800a856:	2102      	movs	r1, #2
 800a858:	4831      	ldr	r0, [pc, #196]	; (800a920 <cliCmd+0x190>)
 800a85a:	f7fe ff7b 	bl	8009754 <cliPrintf>

    ret = true;
 800a85e:	2301      	movs	r3, #1
 800a860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (args->argc == 1 && args->isStr(0, "rx") == true)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	881b      	ldrh	r3, [r3, #0]
 800a868:	2b01      	cmp	r3, #1
 800a86a:	d13c      	bne.n	800a8e6 <cliCmd+0x156>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	695b      	ldr	r3, [r3, #20]
 800a870:	492f      	ldr	r1, [pc, #188]	; (800a930 <cliCmd+0x1a0>)
 800a872:	2000      	movs	r0, #0
 800a874:	4798      	blx	r3
 800a876:	4603      	mov	r3, r0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d034      	beq.n	800a8e6 <cliCmd+0x156>
  {
    uint32_t pre_time;
    uint32_t rx_cnt = 0;
 800a87c:	2300      	movs	r3, #0
 800a87e:	617b      	str	r3, [r7, #20]
    uint32_t rx_len;

    while(cliKeepLoop())
 800a880:	e025      	b.n	800a8ce <cliCmd+0x13e>
    {
      if (millis()-pre_time >= 1000)
 800a882:	f7fe f83e 	bl	8008902 <millis>
 800a886:	4602      	mov	r2, r0
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	1ad3      	subs	r3, r2, r3
 800a88c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a890:	d30a      	bcc.n	800a8a8 <cliCmd+0x118>
      {
        pre_time = millis();
 800a892:	f7fe f836 	bl	8008902 <millis>
 800a896:	61b8      	str	r0, [r7, #24]
        logPrintf("rx : %d KB/s\n", rx_cnt/1024);
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	0a9b      	lsrs	r3, r3, #10
 800a89c:	4619      	mov	r1, r3
 800a89e:	4825      	ldr	r0, [pc, #148]	; (800a934 <cliCmd+0x1a4>)
 800a8a0:	f7ff fae4 	bl	8009e6c <logPrintf>
        rx_cnt = 0;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	617b      	str	r3, [r7, #20]
      }

      rx_len = cdcAvailable();
 800a8a8:	f7fe fed1 	bl	800964e <cdcAvailable>
 800a8ac:	60f8      	str	r0, [r7, #12]

      for (int i=0; i<rx_len; i++)
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	613b      	str	r3, [r7, #16]
 800a8b2:	e004      	b.n	800a8be <cliCmd+0x12e>
      {
        cdcRead();
 800a8b4:	f7fe fed2 	bl	800965c <cdcRead>
      for (int i=0; i<rx_len; i++)
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	613b      	str	r3, [r7, #16]
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	68fa      	ldr	r2, [r7, #12]
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d8f6      	bhi.n	800a8b4 <cliCmd+0x124>
      }

      rx_cnt += rx_len;
 800a8c6:	697a      	ldr	r2, [r7, #20]
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	4413      	add	r3, r2
 800a8cc:	617b      	str	r3, [r7, #20]
    while(cliKeepLoop())
 800a8ce:	f7ff f83b 	bl	8009948 <cliKeepLoop>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d1d4      	bne.n	800a882 <cliCmd+0xf2>
    }
    cliPrintf("\x1B[%dB", 2);
 800a8d8:	2102      	movs	r1, #2
 800a8da:	4811      	ldr	r0, [pc, #68]	; (800a920 <cliCmd+0x190>)
 800a8dc:	f7fe ff3a 	bl	8009754 <cliPrintf>

    ret = true;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (ret == false)
 800a8e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8ea:	f083 0301 	eor.w	r3, r3, #1
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d008      	beq.n	800a906 <cliCmd+0x176>
  {
    cliPrintf("usb info\n");
 800a8f4:	4810      	ldr	r0, [pc, #64]	; (800a938 <cliCmd+0x1a8>)
 800a8f6:	f7fe ff2d 	bl	8009754 <cliPrintf>
    cliPrintf("usb tx\n");
 800a8fa:	4810      	ldr	r0, [pc, #64]	; (800a93c <cliCmd+0x1ac>)
 800a8fc:	f7fe ff2a 	bl	8009754 <cliPrintf>
    cliPrintf("usb rx\n");
 800a900:	480f      	ldr	r0, [pc, #60]	; (800a940 <cliCmd+0x1b0>)
 800a902:	f7fe ff27 	bl	8009754 <cliPrintf>
  }
}
 800a906:	bf00      	nop
 800a908:	3728      	adds	r7, #40	; 0x28
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	080183a4 	.word	0x080183a4
 800a914:	080183ac 	.word	0x080183ac
 800a918:	080183c0 	.word	0x080183c0
 800a91c:	080183d4 	.word	0x080183d4
 800a920:	080183dc 	.word	0x080183dc
 800a924:	080183e4 	.word	0x080183e4
 800a928:	080183e8 	.word	0x080183e8
 800a92c:	080183f8 	.word	0x080183f8
 800a930:	08018418 	.word	0x08018418
 800a934:	0801841c 	.word	0x0801841c
 800a938:	0801842c 	.word	0x0801842c
 800a93c:	08018438 	.word	0x08018438
 800a940:	08018440 	.word	0x08018440

0800a944 <hwInit>:
 *      Author: mm940
 */
#include "hw.h"

bool hwInit(void)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
  bool ret = true;
 800a94a:	2301      	movs	r3, #1
 800a94c:	71fb      	strb	r3, [r7, #7]

  ret &= bspInit();
 800a94e:	f7fd ff7b 	bl	8008848 <bspInit>
 800a952:	4603      	mov	r3, r0
 800a954:	461a      	mov	r2, r3
 800a956:	79fb      	ldrb	r3, [r7, #7]
 800a958:	4013      	ands	r3, r2
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	bf14      	ite	ne
 800a95e:	2301      	movne	r3, #1
 800a960:	2300      	moveq	r3, #0
 800a962:	71fb      	strb	r3, [r7, #7]
  ret &= rtcInit();
 800a964:	f7ff fb3a 	bl	8009fdc <rtcInit>
 800a968:	4603      	mov	r3, r0
 800a96a:	461a      	mov	r2, r3
 800a96c:	79fb      	ldrb	r3, [r7, #7]
 800a96e:	4013      	ands	r3, r2
 800a970:	2b00      	cmp	r3, #0
 800a972:	bf14      	ite	ne
 800a974:	2301      	movne	r3, #1
 800a976:	2300      	moveq	r3, #0
 800a978:	71fb      	strb	r3, [r7, #7]
  ret &= swtimerInit();
 800a97a:	f7ff fbbd 	bl	800a0f8 <swtimerInit>
 800a97e:	4603      	mov	r3, r0
 800a980:	461a      	mov	r2, r3
 800a982:	79fb      	ldrb	r3, [r7, #7]
 800a984:	4013      	ands	r3, r2
 800a986:	2b00      	cmp	r3, #0
 800a988:	bf14      	ite	ne
 800a98a:	2301      	movne	r3, #1
 800a98c:	2300      	moveq	r3, #0
 800a98e:	71fb      	strb	r3, [r7, #7]


#ifdef _USE_HW_RESET
  ret &= resetInit();  // 500 ms delay
 800a990:	f7ff fa8e 	bl	8009eb0 <resetInit>
 800a994:	4603      	mov	r3, r0
 800a996:	461a      	mov	r2, r3
 800a998:	79fb      	ldrb	r3, [r7, #7]
 800a99a:	4013      	ands	r3, r2
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	bf14      	ite	ne
 800a9a0:	2301      	movne	r3, #1
 800a9a2:	2300      	moveq	r3, #0
 800a9a4:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef _USE_HW_RESET
  if (resetGetCount() == 2)
 800a9a6:	f7ff fac9 	bl	8009f3c <resetGetCount>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d101      	bne.n	800a9b4 <hwInit+0x70>
  {
    // Jump To SystemBootloader
    resetToSystemBoot();
 800a9b0:	f7ff fad0 	bl	8009f54 <resetToSystemBoot>
  }
#endif
  ret &= flashInit();
 800a9b4:	f7ff f902 	bl	8009bbc <flashInit>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	79fb      	ldrb	r3, [r7, #7]
 800a9be:	4013      	ands	r3, r2
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	bf14      	ite	ne
 800a9c4:	2301      	movne	r3, #1
 800a9c6:	2300      	moveq	r3, #0
 800a9c8:	71fb      	strb	r3, [r7, #7]
  ret &= buttonInit();
 800a9ca:	f7fe fa55 	bl	8008e78 <buttonInit>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	79fb      	ldrb	r3, [r7, #7]
 800a9d4:	4013      	ands	r3, r2
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	bf14      	ite	ne
 800a9da:	2301      	movne	r3, #1
 800a9dc:	2300      	moveq	r3, #0
 800a9de:	71fb      	strb	r3, [r7, #7]
  ret &= ledInit();
 800a9e0:	f7ff f8f8 	bl	8009bd4 <ledInit>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	79fb      	ldrb	r3, [r7, #7]
 800a9ea:	4013      	ands	r3, r2
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	bf14      	ite	ne
 800a9f0:	2301      	movne	r3, #1
 800a9f2:	2300      	moveq	r3, #0
 800a9f4:	71fb      	strb	r3, [r7, #7]
  ret &= usbInit();
 800a9f6:	f7ff fe15 	bl	800a624 <usbInit>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	79fb      	ldrb	r3, [r7, #7]
 800aa00:	4013      	ands	r3, r2
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	bf14      	ite	ne
 800aa06:	2301      	movne	r3, #1
 800aa08:	2300      	moveq	r3, #0
 800aa0a:	71fb      	strb	r3, [r7, #7]
  ret &= usbBegin(USB_CDC_MODE);
 800aa0c:	2001      	movs	r0, #1
 800aa0e:	f7ff fe75 	bl	800a6fc <usbBegin>
 800aa12:	4603      	mov	r3, r0
 800aa14:	461a      	mov	r2, r3
 800aa16:	79fb      	ldrb	r3, [r7, #7]
 800aa18:	4013      	ands	r3, r2
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	bf14      	ite	ne
 800aa1e:	2301      	movne	r3, #1
 800aa20:	2300      	moveq	r3, #0
 800aa22:	71fb      	strb	r3, [r7, #7]
  ret &= uartInit();
 800aa24:	f7ff fc4e 	bl	800a2c4 <uartInit>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	79fb      	ldrb	r3, [r7, #7]
 800aa2e:	4013      	ands	r3, r2
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	bf14      	ite	ne
 800aa34:	2301      	movne	r3, #1
 800aa36:	2300      	moveq	r3, #0
 800aa38:	71fb      	strb	r3, [r7, #7]
  ret &= logInit();
 800aa3a:	f7ff fa0f 	bl	8009e5c <logInit>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	461a      	mov	r2, r3
 800aa42:	79fb      	ldrb	r3, [r7, #7]
 800aa44:	4013      	ands	r3, r2
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	bf14      	ite	ne
 800aa4a:	2301      	movne	r3, #1
 800aa4c:	2300      	moveq	r3, #0
 800aa4e:	71fb      	strb	r3, [r7, #7]
  ret &= cliInit();
 800aa50:	f7fe fe1a 	bl	8009688 <cliInit>
 800aa54:	4603      	mov	r3, r0
 800aa56:	461a      	mov	r2, r3
 800aa58:	79fb      	ldrb	r3, [r7, #7]
 800aa5a:	4013      	ands	r3, r2
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	bf14      	ite	ne
 800aa60:	2301      	movne	r3, #1
 800aa62:	2300      	moveq	r3, #0
 800aa64:	71fb      	strb	r3, [r7, #7]
  return ret;
 800aa66:	79fb      	ldrb	r3, [r7, #7]
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3708      	adds	r7, #8
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b082      	sub	sp, #8
 800aa74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800aa76:	2300      	movs	r3, #0
 800aa78:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800aa7a:	2003      	movs	r0, #3
 800aa7c:	f000 f95a 	bl	800ad34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800aa80:	200f      	movs	r0, #15
 800aa82:	f000 f80d 	bl	800aaa0 <HAL_InitTick>
 800aa86:	4603      	mov	r3, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d002      	beq.n	800aa92 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	71fb      	strb	r3, [r7, #7]
 800aa90:	e001      	b.n	800aa96 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800aa92:	f7fd ff9f 	bl	80089d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800aa96:	79fb      	ldrb	r3, [r7, #7]

}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3708      	adds	r7, #8
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800aaac:	4b16      	ldr	r3, [pc, #88]	; (800ab08 <HAL_InitTick+0x68>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d022      	beq.n	800aafa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800aab4:	4b15      	ldr	r3, [pc, #84]	; (800ab0c <HAL_InitTick+0x6c>)
 800aab6:	681a      	ldr	r2, [r3, #0]
 800aab8:	4b13      	ldr	r3, [pc, #76]	; (800ab08 <HAL_InitTick+0x68>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800aac0:	fbb1 f3f3 	udiv	r3, r1, r3
 800aac4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aac8:	4618      	mov	r0, r3
 800aaca:	f000 f966 	bl	800ad9a <HAL_SYSTICK_Config>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d10f      	bne.n	800aaf4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2b0f      	cmp	r3, #15
 800aad8:	d809      	bhi.n	800aaee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800aada:	2200      	movs	r2, #0
 800aadc:	6879      	ldr	r1, [r7, #4]
 800aade:	f04f 30ff 	mov.w	r0, #4294967295
 800aae2:	f000 f932 	bl	800ad4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800aae6:	4a0a      	ldr	r2, [pc, #40]	; (800ab10 <HAL_InitTick+0x70>)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6013      	str	r3, [r2, #0]
 800aaec:	e007      	b.n	800aafe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	73fb      	strb	r3, [r7, #15]
 800aaf2:	e004      	b.n	800aafe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	73fb      	strb	r3, [r7, #15]
 800aaf8:	e001      	b.n	800aafe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800aafa:	2301      	movs	r3, #1
 800aafc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800aafe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3710      	adds	r7, #16
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	20000014 	.word	0x20000014
 800ab0c:	20000000 	.word	0x20000000
 800ab10:	20000010 	.word	0x20000010

0800ab14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ab14:	b480      	push	{r7}
 800ab16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ab18:	4b05      	ldr	r3, [pc, #20]	; (800ab30 <HAL_IncTick+0x1c>)
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	4b05      	ldr	r3, [pc, #20]	; (800ab34 <HAL_IncTick+0x20>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4413      	add	r3, r2
 800ab22:	4a03      	ldr	r2, [pc, #12]	; (800ab30 <HAL_IncTick+0x1c>)
 800ab24:	6013      	str	r3, [r2, #0]
}
 800ab26:	bf00      	nop
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr
 800ab30:	20000b54 	.word	0x20000b54
 800ab34:	20000014 	.word	0x20000014

0800ab38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	af00      	add	r7, sp, #0
  return uwTick;
 800ab3c:	4b03      	ldr	r3, [pc, #12]	; (800ab4c <HAL_GetTick+0x14>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr
 800ab4a:	bf00      	nop
 800ab4c:	20000b54 	.word	0x20000b54

0800ab50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ab58:	f7ff ffee 	bl	800ab38 <HAL_GetTick>
 800ab5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab68:	d004      	beq.n	800ab74 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800ab6a:	4b09      	ldr	r3, [pc, #36]	; (800ab90 <HAL_Delay+0x40>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	4413      	add	r3, r2
 800ab72:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800ab74:	bf00      	nop
 800ab76:	f7ff ffdf 	bl	800ab38 <HAL_GetTick>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	1ad3      	subs	r3, r2, r3
 800ab80:	68fa      	ldr	r2, [r7, #12]
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d8f7      	bhi.n	800ab76 <HAL_Delay+0x26>
  {
  }
}
 800ab86:	bf00      	nop
 800ab88:	bf00      	nop
 800ab8a:	3710      	adds	r7, #16
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	20000014 	.word	0x20000014

0800ab94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b085      	sub	sp, #20
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f003 0307 	and.w	r3, r3, #7
 800aba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800aba4:	4b0c      	ldr	r3, [pc, #48]	; (800abd8 <__NVIC_SetPriorityGrouping+0x44>)
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800abaa:	68ba      	ldr	r2, [r7, #8]
 800abac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800abb0:	4013      	ands	r3, r2
 800abb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800abbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800abc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800abc6:	4a04      	ldr	r2, [pc, #16]	; (800abd8 <__NVIC_SetPriorityGrouping+0x44>)
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	60d3      	str	r3, [r2, #12]
}
 800abcc:	bf00      	nop
 800abce:	3714      	adds	r7, #20
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr
 800abd8:	e000ed00 	.word	0xe000ed00

0800abdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800abdc:	b480      	push	{r7}
 800abde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800abe0:	4b04      	ldr	r3, [pc, #16]	; (800abf4 <__NVIC_GetPriorityGrouping+0x18>)
 800abe2:	68db      	ldr	r3, [r3, #12]
 800abe4:	0a1b      	lsrs	r3, r3, #8
 800abe6:	f003 0307 	and.w	r3, r3, #7
}
 800abea:	4618      	mov	r0, r3
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr
 800abf4:	e000ed00 	.word	0xe000ed00

0800abf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b083      	sub	sp, #12
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	4603      	mov	r3, r0
 800ac00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ac02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	db0b      	blt.n	800ac22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ac0a:	79fb      	ldrb	r3, [r7, #7]
 800ac0c:	f003 021f 	and.w	r2, r3, #31
 800ac10:	4907      	ldr	r1, [pc, #28]	; (800ac30 <__NVIC_EnableIRQ+0x38>)
 800ac12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac16:	095b      	lsrs	r3, r3, #5
 800ac18:	2001      	movs	r0, #1
 800ac1a:	fa00 f202 	lsl.w	r2, r0, r2
 800ac1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800ac22:	bf00      	nop
 800ac24:	370c      	adds	r7, #12
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	e000e100 	.word	0xe000e100

0800ac34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	6039      	str	r1, [r7, #0]
 800ac3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ac40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	db0a      	blt.n	800ac5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	b2da      	uxtb	r2, r3
 800ac4c:	490c      	ldr	r1, [pc, #48]	; (800ac80 <__NVIC_SetPriority+0x4c>)
 800ac4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac52:	0112      	lsls	r2, r2, #4
 800ac54:	b2d2      	uxtb	r2, r2
 800ac56:	440b      	add	r3, r1
 800ac58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ac5c:	e00a      	b.n	800ac74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	b2da      	uxtb	r2, r3
 800ac62:	4908      	ldr	r1, [pc, #32]	; (800ac84 <__NVIC_SetPriority+0x50>)
 800ac64:	79fb      	ldrb	r3, [r7, #7]
 800ac66:	f003 030f 	and.w	r3, r3, #15
 800ac6a:	3b04      	subs	r3, #4
 800ac6c:	0112      	lsls	r2, r2, #4
 800ac6e:	b2d2      	uxtb	r2, r2
 800ac70:	440b      	add	r3, r1
 800ac72:	761a      	strb	r2, [r3, #24]
}
 800ac74:	bf00      	nop
 800ac76:	370c      	adds	r7, #12
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr
 800ac80:	e000e100 	.word	0xe000e100
 800ac84:	e000ed00 	.word	0xe000ed00

0800ac88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b089      	sub	sp, #36	; 0x24
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f003 0307 	and.w	r3, r3, #7
 800ac9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ac9c:	69fb      	ldr	r3, [r7, #28]
 800ac9e:	f1c3 0307 	rsb	r3, r3, #7
 800aca2:	2b04      	cmp	r3, #4
 800aca4:	bf28      	it	cs
 800aca6:	2304      	movcs	r3, #4
 800aca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800acaa:	69fb      	ldr	r3, [r7, #28]
 800acac:	3304      	adds	r3, #4
 800acae:	2b06      	cmp	r3, #6
 800acb0:	d902      	bls.n	800acb8 <NVIC_EncodePriority+0x30>
 800acb2:	69fb      	ldr	r3, [r7, #28]
 800acb4:	3b03      	subs	r3, #3
 800acb6:	e000      	b.n	800acba <NVIC_EncodePriority+0x32>
 800acb8:	2300      	movs	r3, #0
 800acba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800acbc:	f04f 32ff 	mov.w	r2, #4294967295
 800acc0:	69bb      	ldr	r3, [r7, #24]
 800acc2:	fa02 f303 	lsl.w	r3, r2, r3
 800acc6:	43da      	mvns	r2, r3
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	401a      	ands	r2, r3
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800acd0:	f04f 31ff 	mov.w	r1, #4294967295
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	fa01 f303 	lsl.w	r3, r1, r3
 800acda:	43d9      	mvns	r1, r3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ace0:	4313      	orrs	r3, r2
         );
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3724      	adds	r7, #36	; 0x24
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr
	...

0800acf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b082      	sub	sp, #8
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	3b01      	subs	r3, #1
 800acfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ad00:	d301      	bcc.n	800ad06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ad02:	2301      	movs	r3, #1
 800ad04:	e00f      	b.n	800ad26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ad06:	4a0a      	ldr	r2, [pc, #40]	; (800ad30 <SysTick_Config+0x40>)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ad0e:	210f      	movs	r1, #15
 800ad10:	f04f 30ff 	mov.w	r0, #4294967295
 800ad14:	f7ff ff8e 	bl	800ac34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ad18:	4b05      	ldr	r3, [pc, #20]	; (800ad30 <SysTick_Config+0x40>)
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ad1e:	4b04      	ldr	r3, [pc, #16]	; (800ad30 <SysTick_Config+0x40>)
 800ad20:	2207      	movs	r2, #7
 800ad22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ad24:	2300      	movs	r3, #0
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3708      	adds	r7, #8
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	e000e010 	.word	0xe000e010

0800ad34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f7ff ff29 	bl	800ab94 <__NVIC_SetPriorityGrouping>
}
 800ad42:	bf00      	nop
 800ad44:	3708      	adds	r7, #8
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}

0800ad4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b086      	sub	sp, #24
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	4603      	mov	r3, r0
 800ad52:	60b9      	str	r1, [r7, #8]
 800ad54:	607a      	str	r2, [r7, #4]
 800ad56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800ad58:	f7ff ff40 	bl	800abdc <__NVIC_GetPriorityGrouping>
 800ad5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	68b9      	ldr	r1, [r7, #8]
 800ad62:	6978      	ldr	r0, [r7, #20]
 800ad64:	f7ff ff90 	bl	800ac88 <NVIC_EncodePriority>
 800ad68:	4602      	mov	r2, r0
 800ad6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad6e:	4611      	mov	r1, r2
 800ad70:	4618      	mov	r0, r3
 800ad72:	f7ff ff5f 	bl	800ac34 <__NVIC_SetPriority>
}
 800ad76:	bf00      	nop
 800ad78:	3718      	adds	r7, #24
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b082      	sub	sp, #8
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	4603      	mov	r3, r0
 800ad86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ad88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f7ff ff33 	bl	800abf8 <__NVIC_EnableIRQ>
}
 800ad92:	bf00      	nop
 800ad94:	3708      	adds	r7, #8
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ad9a:	b580      	push	{r7, lr}
 800ad9c:	b082      	sub	sp, #8
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f7ff ffa4 	bl	800acf0 <SysTick_Config>
 800ada8:	4603      	mov	r3, r0
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3708      	adds	r7, #8
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}

0800adb2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800adb2:	b480      	push	{r7}
 800adb4:	b085      	sub	sp, #20
 800adb6:	af00      	add	r7, sp, #0
 800adb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800adba:	2300      	movs	r3, #0
 800adbc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	2b02      	cmp	r3, #2
 800adc8:	d005      	beq.n	800add6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2204      	movs	r2, #4
 800adce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800add0:	2301      	movs	r3, #1
 800add2:	73fb      	strb	r3, [r7, #15]
 800add4:	e037      	b.n	800ae46 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	681a      	ldr	r2, [r3, #0]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f022 020e 	bic.w	r2, r2, #14
 800ade4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800adf4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f022 0201 	bic.w	r2, r2, #1
 800ae04:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae0a:	f003 021f 	and.w	r2, r3, #31
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae12:	2101      	movs	r1, #1
 800ae14:	fa01 f202 	lsl.w	r2, r1, r2
 800ae18:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae1e:	687a      	ldr	r2, [r7, #4]
 800ae20:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ae22:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00c      	beq.n	800ae46 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae30:	681a      	ldr	r2, [r3, #0]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ae3a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800ae44:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2201      	movs	r2, #1
 800ae4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2200      	movs	r2, #0
 800ae52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800ae56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3714      	adds	r7, #20
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	2b02      	cmp	r3, #2
 800ae7a:	d00d      	beq.n	800ae98 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2204      	movs	r2, #4
 800ae80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2201      	movs	r2, #1
 800ae86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800ae92:	2301      	movs	r3, #1
 800ae94:	73fb      	strb	r3, [r7, #15]
 800ae96:	e047      	b.n	800af28 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	681a      	ldr	r2, [r3, #0]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f022 020e 	bic.w	r2, r2, #14
 800aea6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f022 0201 	bic.w	r2, r2, #1
 800aeb6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aebc:	681a      	ldr	r2, [r3, #0]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aec2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aec6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aecc:	f003 021f 	and.w	r2, r3, #31
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aed4:	2101      	movs	r1, #1
 800aed6:	fa01 f202 	lsl.w	r2, r1, r2
 800aeda:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800aee4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d00c      	beq.n	800af08 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aefc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800af06:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2201      	movs	r2, #1
 800af0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2200      	movs	r2, #0
 800af14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d003      	beq.n	800af28 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	4798      	blx	r3
    }
  }
  return status;
 800af28:	7bfb      	ldrb	r3, [r7, #15]
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3710      	adds	r7, #16
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
	...

0800af34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800af34:	b480      	push	{r7}
 800af36:	b087      	sub	sp, #28
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800af3e:	2300      	movs	r3, #0
 800af40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800af42:	e15a      	b.n	800b1fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	681a      	ldr	r2, [r3, #0]
 800af48:	2101      	movs	r1, #1
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	fa01 f303 	lsl.w	r3, r1, r3
 800af50:	4013      	ands	r3, r2
 800af52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2b00      	cmp	r3, #0
 800af58:	f000 814c 	beq.w	800b1f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	f003 0303 	and.w	r3, r3, #3
 800af64:	2b01      	cmp	r3, #1
 800af66:	d005      	beq.n	800af74 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800af70:	2b02      	cmp	r3, #2
 800af72:	d130      	bne.n	800afd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	005b      	lsls	r3, r3, #1
 800af7e:	2203      	movs	r2, #3
 800af80:	fa02 f303 	lsl.w	r3, r2, r3
 800af84:	43db      	mvns	r3, r3
 800af86:	693a      	ldr	r2, [r7, #16]
 800af88:	4013      	ands	r3, r2
 800af8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	68da      	ldr	r2, [r3, #12]
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	005b      	lsls	r3, r3, #1
 800af94:	fa02 f303 	lsl.w	r3, r2, r3
 800af98:	693a      	ldr	r2, [r7, #16]
 800af9a:	4313      	orrs	r3, r2
 800af9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	693a      	ldr	r2, [r7, #16]
 800afa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800afaa:	2201      	movs	r2, #1
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	fa02 f303 	lsl.w	r3, r2, r3
 800afb2:	43db      	mvns	r3, r3
 800afb4:	693a      	ldr	r2, [r7, #16]
 800afb6:	4013      	ands	r3, r2
 800afb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	091b      	lsrs	r3, r3, #4
 800afc0:	f003 0201 	and.w	r2, r3, #1
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	fa02 f303 	lsl.w	r3, r2, r3
 800afca:	693a      	ldr	r2, [r7, #16]
 800afcc:	4313      	orrs	r3, r2
 800afce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	693a      	ldr	r2, [r7, #16]
 800afd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	f003 0303 	and.w	r3, r3, #3
 800afde:	2b03      	cmp	r3, #3
 800afe0:	d017      	beq.n	800b012 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	68db      	ldr	r3, [r3, #12]
 800afe6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	005b      	lsls	r3, r3, #1
 800afec:	2203      	movs	r2, #3
 800afee:	fa02 f303 	lsl.w	r3, r2, r3
 800aff2:	43db      	mvns	r3, r3
 800aff4:	693a      	ldr	r2, [r7, #16]
 800aff6:	4013      	ands	r3, r2
 800aff8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	689a      	ldr	r2, [r3, #8]
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	005b      	lsls	r3, r3, #1
 800b002:	fa02 f303 	lsl.w	r3, r2, r3
 800b006:	693a      	ldr	r2, [r7, #16]
 800b008:	4313      	orrs	r3, r2
 800b00a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	693a      	ldr	r2, [r7, #16]
 800b010:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b012:	683b      	ldr	r3, [r7, #0]
 800b014:	685b      	ldr	r3, [r3, #4]
 800b016:	f003 0303 	and.w	r3, r3, #3
 800b01a:	2b02      	cmp	r3, #2
 800b01c:	d123      	bne.n	800b066 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	08da      	lsrs	r2, r3, #3
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	3208      	adds	r2, #8
 800b026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b02a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	f003 0307 	and.w	r3, r3, #7
 800b032:	009b      	lsls	r3, r3, #2
 800b034:	220f      	movs	r2, #15
 800b036:	fa02 f303 	lsl.w	r3, r2, r3
 800b03a:	43db      	mvns	r3, r3
 800b03c:	693a      	ldr	r2, [r7, #16]
 800b03e:	4013      	ands	r3, r2
 800b040:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	691a      	ldr	r2, [r3, #16]
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	f003 0307 	and.w	r3, r3, #7
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	fa02 f303 	lsl.w	r3, r2, r3
 800b052:	693a      	ldr	r2, [r7, #16]
 800b054:	4313      	orrs	r3, r2
 800b056:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	08da      	lsrs	r2, r3, #3
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	3208      	adds	r2, #8
 800b060:	6939      	ldr	r1, [r7, #16]
 800b062:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	005b      	lsls	r3, r3, #1
 800b070:	2203      	movs	r2, #3
 800b072:	fa02 f303 	lsl.w	r3, r2, r3
 800b076:	43db      	mvns	r3, r3
 800b078:	693a      	ldr	r2, [r7, #16]
 800b07a:	4013      	ands	r3, r2
 800b07c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	f003 0203 	and.w	r2, r3, #3
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	005b      	lsls	r3, r3, #1
 800b08a:	fa02 f303 	lsl.w	r3, r2, r3
 800b08e:	693a      	ldr	r2, [r7, #16]
 800b090:	4313      	orrs	r3, r2
 800b092:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	693a      	ldr	r2, [r7, #16]
 800b098:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	f000 80a6 	beq.w	800b1f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b0a8:	4b5b      	ldr	r3, [pc, #364]	; (800b218 <HAL_GPIO_Init+0x2e4>)
 800b0aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0ac:	4a5a      	ldr	r2, [pc, #360]	; (800b218 <HAL_GPIO_Init+0x2e4>)
 800b0ae:	f043 0301 	orr.w	r3, r3, #1
 800b0b2:	6613      	str	r3, [r2, #96]	; 0x60
 800b0b4:	4b58      	ldr	r3, [pc, #352]	; (800b218 <HAL_GPIO_Init+0x2e4>)
 800b0b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0b8:	f003 0301 	and.w	r3, r3, #1
 800b0bc:	60bb      	str	r3, [r7, #8]
 800b0be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b0c0:	4a56      	ldr	r2, [pc, #344]	; (800b21c <HAL_GPIO_Init+0x2e8>)
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	089b      	lsrs	r3, r3, #2
 800b0c6:	3302      	adds	r3, #2
 800b0c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	f003 0303 	and.w	r3, r3, #3
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	220f      	movs	r2, #15
 800b0d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b0dc:	43db      	mvns	r3, r3
 800b0de:	693a      	ldr	r2, [r7, #16]
 800b0e0:	4013      	ands	r3, r2
 800b0e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b0ea:	d01f      	beq.n	800b12c <HAL_GPIO_Init+0x1f8>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	4a4c      	ldr	r2, [pc, #304]	; (800b220 <HAL_GPIO_Init+0x2ec>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d019      	beq.n	800b128 <HAL_GPIO_Init+0x1f4>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	4a4b      	ldr	r2, [pc, #300]	; (800b224 <HAL_GPIO_Init+0x2f0>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d013      	beq.n	800b124 <HAL_GPIO_Init+0x1f0>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	4a4a      	ldr	r2, [pc, #296]	; (800b228 <HAL_GPIO_Init+0x2f4>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d00d      	beq.n	800b120 <HAL_GPIO_Init+0x1ec>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	4a49      	ldr	r2, [pc, #292]	; (800b22c <HAL_GPIO_Init+0x2f8>)
 800b108:	4293      	cmp	r3, r2
 800b10a:	d007      	beq.n	800b11c <HAL_GPIO_Init+0x1e8>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	4a48      	ldr	r2, [pc, #288]	; (800b230 <HAL_GPIO_Init+0x2fc>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d101      	bne.n	800b118 <HAL_GPIO_Init+0x1e4>
 800b114:	2305      	movs	r3, #5
 800b116:	e00a      	b.n	800b12e <HAL_GPIO_Init+0x1fa>
 800b118:	2306      	movs	r3, #6
 800b11a:	e008      	b.n	800b12e <HAL_GPIO_Init+0x1fa>
 800b11c:	2304      	movs	r3, #4
 800b11e:	e006      	b.n	800b12e <HAL_GPIO_Init+0x1fa>
 800b120:	2303      	movs	r3, #3
 800b122:	e004      	b.n	800b12e <HAL_GPIO_Init+0x1fa>
 800b124:	2302      	movs	r3, #2
 800b126:	e002      	b.n	800b12e <HAL_GPIO_Init+0x1fa>
 800b128:	2301      	movs	r3, #1
 800b12a:	e000      	b.n	800b12e <HAL_GPIO_Init+0x1fa>
 800b12c:	2300      	movs	r3, #0
 800b12e:	697a      	ldr	r2, [r7, #20]
 800b130:	f002 0203 	and.w	r2, r2, #3
 800b134:	0092      	lsls	r2, r2, #2
 800b136:	4093      	lsls	r3, r2
 800b138:	693a      	ldr	r2, [r7, #16]
 800b13a:	4313      	orrs	r3, r2
 800b13c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b13e:	4937      	ldr	r1, [pc, #220]	; (800b21c <HAL_GPIO_Init+0x2e8>)
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	089b      	lsrs	r3, r3, #2
 800b144:	3302      	adds	r3, #2
 800b146:	693a      	ldr	r2, [r7, #16]
 800b148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b14c:	4b39      	ldr	r3, [pc, #228]	; (800b234 <HAL_GPIO_Init+0x300>)
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	43db      	mvns	r3, r3
 800b156:	693a      	ldr	r2, [r7, #16]
 800b158:	4013      	ands	r3, r2
 800b15a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b164:	2b00      	cmp	r3, #0
 800b166:	d003      	beq.n	800b170 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800b168:	693a      	ldr	r2, [r7, #16]
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	4313      	orrs	r3, r2
 800b16e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b170:	4a30      	ldr	r2, [pc, #192]	; (800b234 <HAL_GPIO_Init+0x300>)
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800b176:	4b2f      	ldr	r3, [pc, #188]	; (800b234 <HAL_GPIO_Init+0x300>)
 800b178:	68db      	ldr	r3, [r3, #12]
 800b17a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	43db      	mvns	r3, r3
 800b180:	693a      	ldr	r2, [r7, #16]
 800b182:	4013      	ands	r3, r2
 800b184:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	685b      	ldr	r3, [r3, #4]
 800b18a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d003      	beq.n	800b19a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800b192:	693a      	ldr	r2, [r7, #16]
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	4313      	orrs	r3, r2
 800b198:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b19a:	4a26      	ldr	r2, [pc, #152]	; (800b234 <HAL_GPIO_Init+0x300>)
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800b1a0:	4b24      	ldr	r3, [pc, #144]	; (800b234 <HAL_GPIO_Init+0x300>)
 800b1a2:	685b      	ldr	r3, [r3, #4]
 800b1a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	43db      	mvns	r3, r3
 800b1aa:	693a      	ldr	r2, [r7, #16]
 800b1ac:	4013      	ands	r3, r2
 800b1ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d003      	beq.n	800b1c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800b1bc:	693a      	ldr	r2, [r7, #16]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b1c4:	4a1b      	ldr	r2, [pc, #108]	; (800b234 <HAL_GPIO_Init+0x300>)
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800b1ca:	4b1a      	ldr	r3, [pc, #104]	; (800b234 <HAL_GPIO_Init+0x300>)
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	43db      	mvns	r3, r3
 800b1d4:	693a      	ldr	r2, [r7, #16]
 800b1d6:	4013      	ands	r3, r2
 800b1d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d003      	beq.n	800b1ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800b1e6:	693a      	ldr	r2, [r7, #16]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b1ee:	4a11      	ldr	r2, [pc, #68]	; (800b234 <HAL_GPIO_Init+0x300>)
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	681a      	ldr	r2, [r3, #0]
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	fa22 f303 	lsr.w	r3, r2, r3
 800b204:	2b00      	cmp	r3, #0
 800b206:	f47f ae9d 	bne.w	800af44 <HAL_GPIO_Init+0x10>
  }
}
 800b20a:	bf00      	nop
 800b20c:	bf00      	nop
 800b20e:	371c      	adds	r7, #28
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr
 800b218:	40021000 	.word	0x40021000
 800b21c:	40010000 	.word	0x40010000
 800b220:	48000400 	.word	0x48000400
 800b224:	48000800 	.word	0x48000800
 800b228:	48000c00 	.word	0x48000c00
 800b22c:	48001000 	.word	0x48001000
 800b230:	48001400 	.word	0x48001400
 800b234:	40010400 	.word	0x40010400

0800b238 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b238:	b480      	push	{r7}
 800b23a:	b085      	sub	sp, #20
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	460b      	mov	r3, r1
 800b242:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	691a      	ldr	r2, [r3, #16]
 800b248:	887b      	ldrh	r3, [r7, #2]
 800b24a:	4013      	ands	r3, r2
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d002      	beq.n	800b256 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b250:	2301      	movs	r3, #1
 800b252:	73fb      	strb	r3, [r7, #15]
 800b254:	e001      	b.n	800b25a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b256:	2300      	movs	r3, #0
 800b258:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3714      	adds	r7, #20
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr

0800b268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	460b      	mov	r3, r1
 800b272:	807b      	strh	r3, [r7, #2]
 800b274:	4613      	mov	r3, r2
 800b276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b278:	787b      	ldrb	r3, [r7, #1]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d003      	beq.n	800b286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b27e:	887a      	ldrh	r2, [r7, #2]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b284:	e002      	b.n	800b28c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b286:	887a      	ldrh	r2, [r7, #2]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b28c:	bf00      	nop
 800b28e:	370c      	adds	r7, #12
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr

0800b298 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b298:	b480      	push	{r7}
 800b29a:	b085      	sub	sp, #20
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	460b      	mov	r3, r1
 800b2a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	695b      	ldr	r3, [r3, #20]
 800b2a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b2aa:	887a      	ldrh	r2, [r7, #2]
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	4013      	ands	r3, r2
 800b2b0:	041a      	lsls	r2, r3, #16
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	43d9      	mvns	r1, r3
 800b2b6:	887b      	ldrh	r3, [r7, #2]
 800b2b8:	400b      	ands	r3, r1
 800b2ba:	431a      	orrs	r2, r3
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	619a      	str	r2, [r3, #24]
}
 800b2c0:	bf00      	nop
 800b2c2:	3714      	adds	r7, #20
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr

0800b2cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b084      	sub	sp, #16
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d101      	bne.n	800b2de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b2da:	2301      	movs	r3, #1
 800b2dc:	e0c0      	b.n	800b460 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d106      	bne.n	800b2f8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f009 faee 	bl	80148d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2203      	movs	r2, #3
 800b2fc:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4618      	mov	r0, r3
 800b306:	f005 f84c 	bl	80103a2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b30a:	2300      	movs	r3, #0
 800b30c:	73fb      	strb	r3, [r7, #15]
 800b30e:	e03e      	b.n	800b38e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b310:	7bfa      	ldrb	r2, [r7, #15]
 800b312:	6879      	ldr	r1, [r7, #4]
 800b314:	4613      	mov	r3, r2
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	4413      	add	r3, r2
 800b31a:	00db      	lsls	r3, r3, #3
 800b31c:	440b      	add	r3, r1
 800b31e:	3311      	adds	r3, #17
 800b320:	2201      	movs	r2, #1
 800b322:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b324:	7bfa      	ldrb	r2, [r7, #15]
 800b326:	6879      	ldr	r1, [r7, #4]
 800b328:	4613      	mov	r3, r2
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	4413      	add	r3, r2
 800b32e:	00db      	lsls	r3, r3, #3
 800b330:	440b      	add	r3, r1
 800b332:	3310      	adds	r3, #16
 800b334:	7bfa      	ldrb	r2, [r7, #15]
 800b336:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b338:	7bfa      	ldrb	r2, [r7, #15]
 800b33a:	6879      	ldr	r1, [r7, #4]
 800b33c:	4613      	mov	r3, r2
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	4413      	add	r3, r2
 800b342:	00db      	lsls	r3, r3, #3
 800b344:	440b      	add	r3, r1
 800b346:	3313      	adds	r3, #19
 800b348:	2200      	movs	r2, #0
 800b34a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b34c:	7bfa      	ldrb	r2, [r7, #15]
 800b34e:	6879      	ldr	r1, [r7, #4]
 800b350:	4613      	mov	r3, r2
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	4413      	add	r3, r2
 800b356:	00db      	lsls	r3, r3, #3
 800b358:	440b      	add	r3, r1
 800b35a:	3320      	adds	r3, #32
 800b35c:	2200      	movs	r2, #0
 800b35e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b360:	7bfa      	ldrb	r2, [r7, #15]
 800b362:	6879      	ldr	r1, [r7, #4]
 800b364:	4613      	mov	r3, r2
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	4413      	add	r3, r2
 800b36a:	00db      	lsls	r3, r3, #3
 800b36c:	440b      	add	r3, r1
 800b36e:	3324      	adds	r3, #36	; 0x24
 800b370:	2200      	movs	r2, #0
 800b372:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b374:	7bfb      	ldrb	r3, [r7, #15]
 800b376:	6879      	ldr	r1, [r7, #4]
 800b378:	1c5a      	adds	r2, r3, #1
 800b37a:	4613      	mov	r3, r2
 800b37c:	009b      	lsls	r3, r3, #2
 800b37e:	4413      	add	r3, r2
 800b380:	00db      	lsls	r3, r3, #3
 800b382:	440b      	add	r3, r1
 800b384:	2200      	movs	r2, #0
 800b386:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b388:	7bfb      	ldrb	r3, [r7, #15]
 800b38a:	3301      	adds	r3, #1
 800b38c:	73fb      	strb	r3, [r7, #15]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	791b      	ldrb	r3, [r3, #4]
 800b392:	7bfa      	ldrb	r2, [r7, #15]
 800b394:	429a      	cmp	r2, r3
 800b396:	d3bb      	bcc.n	800b310 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b398:	2300      	movs	r3, #0
 800b39a:	73fb      	strb	r3, [r7, #15]
 800b39c:	e044      	b.n	800b428 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b39e:	7bfa      	ldrb	r2, [r7, #15]
 800b3a0:	6879      	ldr	r1, [r7, #4]
 800b3a2:	4613      	mov	r3, r2
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	4413      	add	r3, r2
 800b3a8:	00db      	lsls	r3, r3, #3
 800b3aa:	440b      	add	r3, r1
 800b3ac:	f203 1351 	addw	r3, r3, #337	; 0x151
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b3b4:	7bfa      	ldrb	r2, [r7, #15]
 800b3b6:	6879      	ldr	r1, [r7, #4]
 800b3b8:	4613      	mov	r3, r2
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	4413      	add	r3, r2
 800b3be:	00db      	lsls	r3, r3, #3
 800b3c0:	440b      	add	r3, r1
 800b3c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b3c6:	7bfa      	ldrb	r2, [r7, #15]
 800b3c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b3ca:	7bfa      	ldrb	r2, [r7, #15]
 800b3cc:	6879      	ldr	r1, [r7, #4]
 800b3ce:	4613      	mov	r3, r2
 800b3d0:	009b      	lsls	r3, r3, #2
 800b3d2:	4413      	add	r3, r2
 800b3d4:	00db      	lsls	r3, r3, #3
 800b3d6:	440b      	add	r3, r1
 800b3d8:	f203 1353 	addw	r3, r3, #339	; 0x153
 800b3dc:	2200      	movs	r2, #0
 800b3de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b3e0:	7bfa      	ldrb	r2, [r7, #15]
 800b3e2:	6879      	ldr	r1, [r7, #4]
 800b3e4:	4613      	mov	r3, r2
 800b3e6:	009b      	lsls	r3, r3, #2
 800b3e8:	4413      	add	r3, r2
 800b3ea:	00db      	lsls	r3, r3, #3
 800b3ec:	440b      	add	r3, r1
 800b3ee:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b3f6:	7bfa      	ldrb	r2, [r7, #15]
 800b3f8:	6879      	ldr	r1, [r7, #4]
 800b3fa:	4613      	mov	r3, r2
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	4413      	add	r3, r2
 800b400:	00db      	lsls	r3, r3, #3
 800b402:	440b      	add	r3, r1
 800b404:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b408:	2200      	movs	r2, #0
 800b40a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b40c:	7bfa      	ldrb	r2, [r7, #15]
 800b40e:	6879      	ldr	r1, [r7, #4]
 800b410:	4613      	mov	r3, r2
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	4413      	add	r3, r2
 800b416:	00db      	lsls	r3, r3, #3
 800b418:	440b      	add	r3, r1
 800b41a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800b41e:	2200      	movs	r2, #0
 800b420:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b422:	7bfb      	ldrb	r3, [r7, #15]
 800b424:	3301      	adds	r3, #1
 800b426:	73fb      	strb	r3, [r7, #15]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	791b      	ldrb	r3, [r3, #4]
 800b42c:	7bfa      	ldrb	r2, [r7, #15]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d3b5      	bcc.n	800b39e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6818      	ldr	r0, [r3, #0]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	3304      	adds	r3, #4
 800b43a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b43e:	f004 ffcb 	bl	80103d8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2200      	movs	r2, #0
 800b446:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2201      	movs	r2, #1
 800b44c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	7a9b      	ldrb	r3, [r3, #10]
 800b454:	2b01      	cmp	r3, #1
 800b456:	d102      	bne.n	800b45e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f001 fc41 	bl	800cce0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800b45e:	2300      	movs	r3, #0
}
 800b460:	4618      	mov	r0, r3
 800b462:	3710      	adds	r7, #16
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}

0800b468 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800b476:	2b01      	cmp	r3, #1
 800b478:	d101      	bne.n	800b47e <HAL_PCD_Start+0x16>
 800b47a:	2302      	movs	r3, #2
 800b47c:	e012      	b.n	800b4a4 <HAL_PCD_Start+0x3c>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2201      	movs	r2, #1
 800b482:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4618      	mov	r0, r3
 800b48c:	f004 ff72 	bl	8010374 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4618      	mov	r0, r3
 800b496:	f007 fa32 	bl	80128fe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2200      	movs	r2, #0
 800b49e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800b4a2:	2300      	movs	r3, #0
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3708      	adds	r7, #8
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b084      	sub	sp, #16
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f007 fa37 	bl	801292c <USB_ReadInterrupts>
 800b4be:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d003      	beq.n	800b4d2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 fb04 	bl	800bad8 <PCD_EP_ISR_Handler>

    return;
 800b4d0:	e110      	b.n	800b6f4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d013      	beq.n	800b504 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b4e4:	b29a      	uxth	r2, r3
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4ee:	b292      	uxth	r2, r2
 800b4f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f009 fa7e 	bl	80149f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800b4fa:	2100      	movs	r1, #0
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f000 f8fc 	bl	800b6fa <HAL_PCD_SetAddress>

    return;
 800b502:	e0f7      	b.n	800b6f4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d00c      	beq.n	800b528 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b516:	b29a      	uxth	r2, r3
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b520:	b292      	uxth	r2, r2
 800b522:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b526:	e0e5      	b.n	800b6f4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d00c      	beq.n	800b54c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b53a:	b29a      	uxth	r2, r3
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b544:	b292      	uxth	r2, r2
 800b546:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b54a:	e0d3      	b.n	800b6f4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b552:	2b00      	cmp	r3, #0
 800b554:	d034      	beq.n	800b5c0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b55e:	b29a      	uxth	r2, r3
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f022 0204 	bic.w	r2, r2, #4
 800b568:	b292      	uxth	r2, r2
 800b56a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b576:	b29a      	uxth	r2, r3
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f022 0208 	bic.w	r2, r2, #8
 800b580:	b292      	uxth	r2, r2
 800b582:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	d107      	bne.n	800b5a0 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2200      	movs	r2, #0
 800b594:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b598:	2100      	movs	r1, #0
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f009 fc1e 	bl	8014ddc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f009 fa61 	bl	8014a68 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b5ae:	b29a      	uxth	r2, r3
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b5b8:	b292      	uxth	r2, r2
 800b5ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b5be:	e099      	b.n	800b6f4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d027      	beq.n	800b61a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b5d2:	b29a      	uxth	r2, r3
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f042 0208 	orr.w	r2, r2, #8
 800b5dc:	b292      	uxth	r2, r2
 800b5de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b5ea:	b29a      	uxth	r2, r3
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b5f4:	b292      	uxth	r2, r2
 800b5f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b602:	b29a      	uxth	r2, r3
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f042 0204 	orr.w	r2, r2, #4
 800b60c:	b292      	uxth	r2, r2
 800b60e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f009 fa0e 	bl	8014a34 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b618:	e06c      	b.n	800b6f4 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b620:	2b00      	cmp	r3, #0
 800b622:	d040      	beq.n	800b6a6 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b62c:	b29a      	uxth	r2, r3
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b636:	b292      	uxth	r2, r2
 800b638:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800b642:	2b00      	cmp	r3, #0
 800b644:	d12b      	bne.n	800b69e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b64e:	b29a      	uxth	r2, r3
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f042 0204 	orr.w	r2, r2, #4
 800b658:	b292      	uxth	r2, r2
 800b65a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b666:	b29a      	uxth	r2, r3
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f042 0208 	orr.w	r2, r2, #8
 800b670:	b292      	uxth	r2, r2
 800b672:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2201      	movs	r2, #1
 800b67a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b686:	b29b      	uxth	r3, r3
 800b688:	089b      	lsrs	r3, r3, #2
 800b68a:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b694:	2101      	movs	r1, #1
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f009 fba0 	bl	8014ddc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800b69c:	e02a      	b.n	800b6f4 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f009 f9c8 	bl	8014a34 <HAL_PCD_SuspendCallback>
    return;
 800b6a4:	e026      	b.n	800b6f4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d00f      	beq.n	800b6d0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b6b8:	b29a      	uxth	r2, r3
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800b6c2:	b292      	uxth	r2, r2
 800b6c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f009 f986 	bl	80149da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800b6ce:	e011      	b.n	800b6f4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d00c      	beq.n	800b6f4 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b6e2:	b29a      	uxth	r2, r3
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b6ec:	b292      	uxth	r2, r2
 800b6ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800b6f2:	bf00      	nop
  }
}
 800b6f4:	3710      	adds	r7, #16
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}

0800b6fa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b6fa:	b580      	push	{r7, lr}
 800b6fc:	b082      	sub	sp, #8
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
 800b702:	460b      	mov	r3, r1
 800b704:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d101      	bne.n	800b714 <HAL_PCD_SetAddress+0x1a>
 800b710:	2302      	movs	r3, #2
 800b712:	e012      	b.n	800b73a <HAL_PCD_SetAddress+0x40>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2201      	movs	r2, #1
 800b718:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	78fa      	ldrb	r2, [r7, #3]
 800b720:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	78fa      	ldrb	r2, [r7, #3]
 800b728:	4611      	mov	r1, r2
 800b72a:	4618      	mov	r0, r3
 800b72c:	f007 f8d3 	bl	80128d6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2200      	movs	r2, #0
 800b734:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800b738:	2300      	movs	r3, #0
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3708      	adds	r7, #8
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}

0800b742 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b742:	b580      	push	{r7, lr}
 800b744:	b084      	sub	sp, #16
 800b746:	af00      	add	r7, sp, #0
 800b748:	6078      	str	r0, [r7, #4]
 800b74a:	4608      	mov	r0, r1
 800b74c:	4611      	mov	r1, r2
 800b74e:	461a      	mov	r2, r3
 800b750:	4603      	mov	r3, r0
 800b752:	70fb      	strb	r3, [r7, #3]
 800b754:	460b      	mov	r3, r1
 800b756:	803b      	strh	r3, [r7, #0]
 800b758:	4613      	mov	r3, r2
 800b75a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b75c:	2300      	movs	r3, #0
 800b75e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b760:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b764:	2b00      	cmp	r3, #0
 800b766:	da0e      	bge.n	800b786 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b768:	78fb      	ldrb	r3, [r7, #3]
 800b76a:	f003 0207 	and.w	r2, r3, #7
 800b76e:	4613      	mov	r3, r2
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	4413      	add	r3, r2
 800b774:	00db      	lsls	r3, r3, #3
 800b776:	3310      	adds	r3, #16
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	4413      	add	r3, r2
 800b77c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2201      	movs	r2, #1
 800b782:	705a      	strb	r2, [r3, #1]
 800b784:	e00e      	b.n	800b7a4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b786:	78fb      	ldrb	r3, [r7, #3]
 800b788:	f003 0207 	and.w	r2, r3, #7
 800b78c:	4613      	mov	r3, r2
 800b78e:	009b      	lsls	r3, r3, #2
 800b790:	4413      	add	r3, r2
 800b792:	00db      	lsls	r3, r3, #3
 800b794:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b798:	687a      	ldr	r2, [r7, #4]
 800b79a:	4413      	add	r3, r2
 800b79c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b7a4:	78fb      	ldrb	r3, [r7, #3]
 800b7a6:	f003 0307 	and.w	r3, r3, #7
 800b7aa:	b2da      	uxtb	r2, r3
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b7b0:	883a      	ldrh	r2, [r7, #0]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	78ba      	ldrb	r2, [r7, #2]
 800b7ba:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b7bc:	78bb      	ldrb	r3, [r7, #2]
 800b7be:	2b02      	cmp	r3, #2
 800b7c0:	d102      	bne.n	800b7c8 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	d101      	bne.n	800b7d6 <HAL_PCD_EP_Open+0x94>
 800b7d2:	2302      	movs	r3, #2
 800b7d4:	e00e      	b.n	800b7f4 <HAL_PCD_EP_Open+0xb2>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2201      	movs	r2, #1
 800b7da:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	68f9      	ldr	r1, [r7, #12]
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f004 fe15 	bl	8010414 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800b7f2:	7afb      	ldrb	r3, [r7, #11]
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3710      	adds	r7, #16
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	460b      	mov	r3, r1
 800b806:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b808:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	da0e      	bge.n	800b82e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b810:	78fb      	ldrb	r3, [r7, #3]
 800b812:	f003 0207 	and.w	r2, r3, #7
 800b816:	4613      	mov	r3, r2
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	4413      	add	r3, r2
 800b81c:	00db      	lsls	r3, r3, #3
 800b81e:	3310      	adds	r3, #16
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	4413      	add	r3, r2
 800b824:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2201      	movs	r2, #1
 800b82a:	705a      	strb	r2, [r3, #1]
 800b82c:	e00e      	b.n	800b84c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b82e:	78fb      	ldrb	r3, [r7, #3]
 800b830:	f003 0207 	and.w	r2, r3, #7
 800b834:	4613      	mov	r3, r2
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	4413      	add	r3, r2
 800b83a:	00db      	lsls	r3, r3, #3
 800b83c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b840:	687a      	ldr	r2, [r7, #4]
 800b842:	4413      	add	r3, r2
 800b844:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2200      	movs	r2, #0
 800b84a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800b84c:	78fb      	ldrb	r3, [r7, #3]
 800b84e:	f003 0307 	and.w	r3, r3, #7
 800b852:	b2da      	uxtb	r2, r3
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d101      	bne.n	800b866 <HAL_PCD_EP_Close+0x6a>
 800b862:	2302      	movs	r3, #2
 800b864:	e00e      	b.n	800b884 <HAL_PCD_EP_Close+0x88>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2201      	movs	r2, #1
 800b86a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	68f9      	ldr	r1, [r7, #12]
 800b874:	4618      	mov	r0, r3
 800b876:	f005 f991 	bl	8010b9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2200      	movs	r2, #0
 800b87e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800b882:	2300      	movs	r3, #0
}
 800b884:	4618      	mov	r0, r3
 800b886:	3710      	adds	r7, #16
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b086      	sub	sp, #24
 800b890:	af00      	add	r7, sp, #0
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	607a      	str	r2, [r7, #4]
 800b896:	603b      	str	r3, [r7, #0]
 800b898:	460b      	mov	r3, r1
 800b89a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b89c:	7afb      	ldrb	r3, [r7, #11]
 800b89e:	f003 0207 	and.w	r2, r3, #7
 800b8a2:	4613      	mov	r3, r2
 800b8a4:	009b      	lsls	r3, r3, #2
 800b8a6:	4413      	add	r3, r2
 800b8a8:	00db      	lsls	r3, r3, #3
 800b8aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b8ae:	68fa      	ldr	r2, [r7, #12]
 800b8b0:	4413      	add	r3, r2
 800b8b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	683a      	ldr	r2, [r7, #0]
 800b8be:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b8cc:	7afb      	ldrb	r3, [r7, #11]
 800b8ce:	f003 0307 	and.w	r3, r3, #7
 800b8d2:	b2da      	uxtb	r2, r3
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	6979      	ldr	r1, [r7, #20]
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f005 fb49 	bl	8010f76 <USB_EPStartXfer>

  return HAL_OK;
 800b8e4:	2300      	movs	r3, #0
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3718      	adds	r7, #24
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}

0800b8ee <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800b8ee:	b480      	push	{r7}
 800b8f0:	b083      	sub	sp, #12
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	6078      	str	r0, [r7, #4]
 800b8f6:	460b      	mov	r3, r1
 800b8f8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b8fa:	78fb      	ldrb	r3, [r7, #3]
 800b8fc:	f003 0207 	and.w	r2, r3, #7
 800b900:	6879      	ldr	r1, [r7, #4]
 800b902:	4613      	mov	r3, r2
 800b904:	009b      	lsls	r3, r3, #2
 800b906:	4413      	add	r3, r2
 800b908:	00db      	lsls	r3, r3, #3
 800b90a:	440b      	add	r3, r1
 800b90c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800b910:	681b      	ldr	r3, [r3, #0]
}
 800b912:	4618      	mov	r0, r3
 800b914:	370c      	adds	r7, #12
 800b916:	46bd      	mov	sp, r7
 800b918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91c:	4770      	bx	lr

0800b91e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b91e:	b580      	push	{r7, lr}
 800b920:	b086      	sub	sp, #24
 800b922:	af00      	add	r7, sp, #0
 800b924:	60f8      	str	r0, [r7, #12]
 800b926:	607a      	str	r2, [r7, #4]
 800b928:	603b      	str	r3, [r7, #0]
 800b92a:	460b      	mov	r3, r1
 800b92c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b92e:	7afb      	ldrb	r3, [r7, #11]
 800b930:	f003 0207 	and.w	r2, r3, #7
 800b934:	4613      	mov	r3, r2
 800b936:	009b      	lsls	r3, r3, #2
 800b938:	4413      	add	r3, r2
 800b93a:	00db      	lsls	r3, r3, #3
 800b93c:	3310      	adds	r3, #16
 800b93e:	68fa      	ldr	r2, [r7, #12]
 800b940:	4413      	add	r3, r2
 800b942:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	683a      	ldr	r2, [r7, #0]
 800b94e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	2201      	movs	r2, #1
 800b954:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	683a      	ldr	r2, [r7, #0]
 800b95c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	2200      	movs	r2, #0
 800b962:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	2201      	movs	r2, #1
 800b968:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b96a:	7afb      	ldrb	r3, [r7, #11]
 800b96c:	f003 0307 	and.w	r3, r3, #7
 800b970:	b2da      	uxtb	r2, r3
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	6979      	ldr	r1, [r7, #20]
 800b97c:	4618      	mov	r0, r3
 800b97e:	f005 fafa 	bl	8010f76 <USB_EPStartXfer>

  return HAL_OK;
 800b982:	2300      	movs	r3, #0
}
 800b984:	4618      	mov	r0, r3
 800b986:	3718      	adds	r7, #24
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	460b      	mov	r3, r1
 800b996:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b998:	78fb      	ldrb	r3, [r7, #3]
 800b99a:	f003 0307 	and.w	r3, r3, #7
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	7912      	ldrb	r2, [r2, #4]
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d901      	bls.n	800b9aa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	e03e      	b.n	800ba28 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b9aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	da0e      	bge.n	800b9d0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b9b2:	78fb      	ldrb	r3, [r7, #3]
 800b9b4:	f003 0207 	and.w	r2, r3, #7
 800b9b8:	4613      	mov	r3, r2
 800b9ba:	009b      	lsls	r3, r3, #2
 800b9bc:	4413      	add	r3, r2
 800b9be:	00db      	lsls	r3, r3, #3
 800b9c0:	3310      	adds	r3, #16
 800b9c2:	687a      	ldr	r2, [r7, #4]
 800b9c4:	4413      	add	r3, r2
 800b9c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	705a      	strb	r2, [r3, #1]
 800b9ce:	e00c      	b.n	800b9ea <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b9d0:	78fa      	ldrb	r2, [r7, #3]
 800b9d2:	4613      	mov	r3, r2
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	4413      	add	r3, r2
 800b9d8:	00db      	lsls	r3, r3, #3
 800b9da:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	4413      	add	r3, r2
 800b9e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b9f0:	78fb      	ldrb	r3, [r7, #3]
 800b9f2:	f003 0307 	and.w	r3, r3, #7
 800b9f6:	b2da      	uxtb	r2, r3
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d101      	bne.n	800ba0a <HAL_PCD_EP_SetStall+0x7e>
 800ba06:	2302      	movs	r3, #2
 800ba08:	e00e      	b.n	800ba28 <HAL_PCD_EP_SetStall+0x9c>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	68f9      	ldr	r1, [r7, #12]
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f006 fe5d 	bl	80126d8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2200      	movs	r2, #0
 800ba22:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800ba26:	2300      	movs	r3, #0
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3710      	adds	r7, #16
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	460b      	mov	r3, r1
 800ba3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ba3c:	78fb      	ldrb	r3, [r7, #3]
 800ba3e:	f003 030f 	and.w	r3, r3, #15
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	7912      	ldrb	r2, [r2, #4]
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d901      	bls.n	800ba4e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	e040      	b.n	800bad0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ba4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	da0e      	bge.n	800ba74 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ba56:	78fb      	ldrb	r3, [r7, #3]
 800ba58:	f003 0207 	and.w	r2, r3, #7
 800ba5c:	4613      	mov	r3, r2
 800ba5e:	009b      	lsls	r3, r3, #2
 800ba60:	4413      	add	r3, r2
 800ba62:	00db      	lsls	r3, r3, #3
 800ba64:	3310      	adds	r3, #16
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	4413      	add	r3, r2
 800ba6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2201      	movs	r2, #1
 800ba70:	705a      	strb	r2, [r3, #1]
 800ba72:	e00e      	b.n	800ba92 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ba74:	78fb      	ldrb	r3, [r7, #3]
 800ba76:	f003 0207 	and.w	r2, r3, #7
 800ba7a:	4613      	mov	r3, r2
 800ba7c:	009b      	lsls	r3, r3, #2
 800ba7e:	4413      	add	r3, r2
 800ba80:	00db      	lsls	r3, r3, #3
 800ba82:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ba86:	687a      	ldr	r2, [r7, #4]
 800ba88:	4413      	add	r3, r2
 800ba8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2200      	movs	r2, #0
 800ba96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ba98:	78fb      	ldrb	r3, [r7, #3]
 800ba9a:	f003 0307 	and.w	r3, r3, #7
 800ba9e:	b2da      	uxtb	r2, r3
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d101      	bne.n	800bab2 <HAL_PCD_EP_ClrStall+0x82>
 800baae:	2302      	movs	r3, #2
 800bab0:	e00e      	b.n	800bad0 <HAL_PCD_EP_ClrStall+0xa0>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2201      	movs	r2, #1
 800bab6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	68f9      	ldr	r1, [r7, #12]
 800bac0:	4618      	mov	r0, r3
 800bac2:	f006 fe5a 	bl	801277a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2200      	movs	r2, #0
 800baca:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800bace:	2300      	movs	r3, #0
}
 800bad0:	4618      	mov	r0, r3
 800bad2:	3710      	adds	r7, #16
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b096      	sub	sp, #88	; 0x58
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800bae0:	e3ae      	b.n	800c240 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800baea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800baee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800baf2:	b2db      	uxtb	r3, r3
 800baf4:	f003 030f 	and.w	r3, r3, #15
 800baf8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800bafc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	f040 8170 	bne.w	800bde6 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800bb06:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bb0a:	f003 0310 	and.w	r3, r3, #16
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d14d      	bne.n	800bbae <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	881b      	ldrh	r3, [r3, #0]
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800bb1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb22:	81fb      	strh	r3, [r7, #14]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681a      	ldr	r2, [r3, #0]
 800bb28:	89fb      	ldrh	r3, [r7, #14]
 800bb2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	3310      	adds	r3, #16
 800bb3a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	461a      	mov	r2, r3
 800bb48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb4a:	781b      	ldrb	r3, [r3, #0]
 800bb4c:	00db      	lsls	r3, r3, #3
 800bb4e:	4413      	add	r3, r2
 800bb50:	687a      	ldr	r2, [r7, #4]
 800bb52:	6812      	ldr	r2, [r2, #0]
 800bb54:	4413      	add	r3, r2
 800bb56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bb5a:	881b      	ldrh	r3, [r3, #0]
 800bb5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bb60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb62:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800bb64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb66:	695a      	ldr	r2, [r3, #20]
 800bb68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb6a:	69db      	ldr	r3, [r3, #28]
 800bb6c:	441a      	add	r2, r3
 800bb6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb70:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800bb72:	2100      	movs	r1, #0
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f008 ff16 	bl	80149a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	7b1b      	ldrb	r3, [r3, #12]
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	f000 835d 	beq.w	800c240 <PCD_EP_ISR_Handler+0x768>
 800bb86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb88:	699b      	ldr	r3, [r3, #24]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	f040 8358 	bne.w	800c240 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	7b1b      	ldrb	r3, [r3, #12]
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bb9a:	b2da      	uxtb	r2, r3
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	b292      	uxth	r2, r2
 800bba2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	731a      	strb	r2, [r3, #12]
 800bbac:	e348      	b.n	800c240 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bbb4:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	881b      	ldrh	r3, [r3, #0]
 800bbbc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800bbc0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bbc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d032      	beq.n	800bc32 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbd4:	b29b      	uxth	r3, r3
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	00db      	lsls	r3, r3, #3
 800bbde:	4413      	add	r3, r2
 800bbe0:	687a      	ldr	r2, [r7, #4]
 800bbe2:	6812      	ldr	r2, [r2, #0]
 800bbe4:	4413      	add	r3, r2
 800bbe6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bbea:	881b      	ldrh	r3, [r3, #0]
 800bbec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bbf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bbf2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6818      	ldr	r0, [r3, #0]
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800bbfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc00:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800bc02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc04:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800bc06:	b29b      	uxth	r3, r3
 800bc08:	f006 fee2 	bl	80129d0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	881b      	ldrh	r3, [r3, #0]
 800bc12:	b29a      	uxth	r2, r3
 800bc14:	f640 738f 	movw	r3, #3983	; 0xf8f
 800bc18:	4013      	ands	r3, r2
 800bc1a:	823b      	strh	r3, [r7, #16]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	8a3a      	ldrh	r2, [r7, #16]
 800bc22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bc26:	b292      	uxth	r2, r2
 800bc28:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f008 fe8e 	bl	801494c <HAL_PCD_SetupStageCallback>
 800bc30:	e306      	b.n	800c240 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800bc32:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	f280 8302 	bge.w	800c240 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	881b      	ldrh	r3, [r3, #0]
 800bc42:	b29a      	uxth	r2, r3
 800bc44:	f640 738f 	movw	r3, #3983	; 0xf8f
 800bc48:	4013      	ands	r3, r2
 800bc4a:	83fb      	strh	r3, [r7, #30]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	8bfa      	ldrh	r2, [r7, #30]
 800bc52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bc56:	b292      	uxth	r2, r2
 800bc58:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc62:	b29b      	uxth	r3, r3
 800bc64:	461a      	mov	r2, r3
 800bc66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc68:	781b      	ldrb	r3, [r3, #0]
 800bc6a:	00db      	lsls	r3, r3, #3
 800bc6c:	4413      	add	r3, r2
 800bc6e:	687a      	ldr	r2, [r7, #4]
 800bc70:	6812      	ldr	r2, [r2, #0]
 800bc72:	4413      	add	r3, r2
 800bc74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bc78:	881b      	ldrh	r3, [r3, #0]
 800bc7a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800bc7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc80:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800bc82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc84:	69db      	ldr	r3, [r3, #28]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d019      	beq.n	800bcbe <PCD_EP_ISR_Handler+0x1e6>
 800bc8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc8c:	695b      	ldr	r3, [r3, #20]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d015      	beq.n	800bcbe <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6818      	ldr	r0, [r3, #0]
 800bc96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc98:	6959      	ldr	r1, [r3, #20]
 800bc9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc9c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800bc9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bca0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	f006 fe94 	bl	80129d0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800bca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcaa:	695a      	ldr	r2, [r3, #20]
 800bcac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcae:	69db      	ldr	r3, [r3, #28]
 800bcb0:	441a      	add	r2, r3
 800bcb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bcb4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800bcb6:	2100      	movs	r1, #0
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f008 fe59 	bl	8014970 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	881b      	ldrh	r3, [r3, #0]
 800bcc4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800bcc8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	f040 82b5 	bne.w	800c240 <PCD_EP_ISR_Handler+0x768>
 800bcd6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bcda:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800bcde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bce2:	f000 82ad 	beq.w	800c240 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	61bb      	str	r3, [r7, #24]
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bcf4:	b29b      	uxth	r3, r3
 800bcf6:	461a      	mov	r2, r3
 800bcf8:	69bb      	ldr	r3, [r7, #24]
 800bcfa:	4413      	add	r3, r2
 800bcfc:	61bb      	str	r3, [r7, #24]
 800bcfe:	69bb      	ldr	r3, [r7, #24]
 800bd00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bd04:	617b      	str	r3, [r7, #20]
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	881b      	ldrh	r3, [r3, #0]
 800bd0a:	b29b      	uxth	r3, r3
 800bd0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bd10:	b29a      	uxth	r2, r3
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	801a      	strh	r2, [r3, #0]
 800bd16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd18:	691b      	ldr	r3, [r3, #16]
 800bd1a:	2b3e      	cmp	r3, #62	; 0x3e
 800bd1c:	d91d      	bls.n	800bd5a <PCD_EP_ISR_Handler+0x282>
 800bd1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd20:	691b      	ldr	r3, [r3, #16]
 800bd22:	095b      	lsrs	r3, r3, #5
 800bd24:	647b      	str	r3, [r7, #68]	; 0x44
 800bd26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd28:	691b      	ldr	r3, [r3, #16]
 800bd2a:	f003 031f 	and.w	r3, r3, #31
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d102      	bne.n	800bd38 <PCD_EP_ISR_Handler+0x260>
 800bd32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd34:	3b01      	subs	r3, #1
 800bd36:	647b      	str	r3, [r7, #68]	; 0x44
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	881b      	ldrh	r3, [r3, #0]
 800bd3c:	b29a      	uxth	r2, r3
 800bd3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd40:	b29b      	uxth	r3, r3
 800bd42:	029b      	lsls	r3, r3, #10
 800bd44:	b29b      	uxth	r3, r3
 800bd46:	4313      	orrs	r3, r2
 800bd48:	b29b      	uxth	r3, r3
 800bd4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd52:	b29a      	uxth	r2, r3
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	801a      	strh	r2, [r3, #0]
 800bd58:	e026      	b.n	800bda8 <PCD_EP_ISR_Handler+0x2d0>
 800bd5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd5c:	691b      	ldr	r3, [r3, #16]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d10a      	bne.n	800bd78 <PCD_EP_ISR_Handler+0x2a0>
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	881b      	ldrh	r3, [r3, #0]
 800bd66:	b29b      	uxth	r3, r3
 800bd68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bd6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bd70:	b29a      	uxth	r2, r3
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	801a      	strh	r2, [r3, #0]
 800bd76:	e017      	b.n	800bda8 <PCD_EP_ISR_Handler+0x2d0>
 800bd78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd7a:	691b      	ldr	r3, [r3, #16]
 800bd7c:	085b      	lsrs	r3, r3, #1
 800bd7e:	647b      	str	r3, [r7, #68]	; 0x44
 800bd80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd82:	691b      	ldr	r3, [r3, #16]
 800bd84:	f003 0301 	and.w	r3, r3, #1
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d002      	beq.n	800bd92 <PCD_EP_ISR_Handler+0x2ba>
 800bd8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd8e:	3301      	adds	r3, #1
 800bd90:	647b      	str	r3, [r7, #68]	; 0x44
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	881b      	ldrh	r3, [r3, #0]
 800bd96:	b29a      	uxth	r2, r3
 800bd98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	029b      	lsls	r3, r3, #10
 800bd9e:	b29b      	uxth	r3, r3
 800bda0:	4313      	orrs	r3, r2
 800bda2:	b29a      	uxth	r2, r3
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	881b      	ldrh	r3, [r3, #0]
 800bdae:	b29b      	uxth	r3, r3
 800bdb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bdb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdb8:	827b      	strh	r3, [r7, #18]
 800bdba:	8a7b      	ldrh	r3, [r7, #18]
 800bdbc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bdc0:	827b      	strh	r3, [r7, #18]
 800bdc2:	8a7b      	ldrh	r3, [r7, #18]
 800bdc4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bdc8:	827b      	strh	r3, [r7, #18]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681a      	ldr	r2, [r3, #0]
 800bdce:	8a7b      	ldrh	r3, [r7, #18]
 800bdd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bdd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bdd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	8013      	strh	r3, [r2, #0]
 800bde4:	e22c      	b.n	800c240 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	461a      	mov	r2, r3
 800bdec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800bdf0:	009b      	lsls	r3, r3, #2
 800bdf2:	4413      	add	r3, r2
 800bdf4:	881b      	ldrh	r3, [r3, #0]
 800bdf6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800bdfa:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	f280 80f6 	bge.w	800bff0 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	461a      	mov	r2, r3
 800be0a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800be0e:	009b      	lsls	r3, r3, #2
 800be10:	4413      	add	r3, r2
 800be12:	881b      	ldrh	r3, [r3, #0]
 800be14:	b29a      	uxth	r2, r3
 800be16:	f640 738f 	movw	r3, #3983	; 0xf8f
 800be1a:	4013      	ands	r3, r2
 800be1c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	461a      	mov	r2, r3
 800be26:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800be2a:	009b      	lsls	r3, r3, #2
 800be2c:	4413      	add	r3, r2
 800be2e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800be32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800be36:	b292      	uxth	r2, r2
 800be38:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800be3a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800be3e:	4613      	mov	r3, r2
 800be40:	009b      	lsls	r3, r3, #2
 800be42:	4413      	add	r3, r2
 800be44:	00db      	lsls	r3, r3, #3
 800be46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800be4a:	687a      	ldr	r2, [r7, #4]
 800be4c:	4413      	add	r3, r2
 800be4e:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800be50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be52:	7b1b      	ldrb	r3, [r3, #12]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d123      	bne.n	800bea0 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be60:	b29b      	uxth	r3, r3
 800be62:	461a      	mov	r2, r3
 800be64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	00db      	lsls	r3, r3, #3
 800be6a:	4413      	add	r3, r2
 800be6c:	687a      	ldr	r2, [r7, #4]
 800be6e:	6812      	ldr	r2, [r2, #0]
 800be70:	4413      	add	r3, r2
 800be72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800be76:	881b      	ldrh	r3, [r3, #0]
 800be78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be7c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800be80:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800be84:	2b00      	cmp	r3, #0
 800be86:	f000 808e 	beq.w	800bfa6 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6818      	ldr	r0, [r3, #0]
 800be8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be90:	6959      	ldr	r1, [r3, #20]
 800be92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be94:	88da      	ldrh	r2, [r3, #6]
 800be96:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800be9a:	f006 fd99 	bl	80129d0 <USB_ReadPMA>
 800be9e:	e082      	b.n	800bfa6 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800bea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bea2:	78db      	ldrb	r3, [r3, #3]
 800bea4:	2b02      	cmp	r3, #2
 800bea6:	d10a      	bne.n	800bebe <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800bea8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800beac:	461a      	mov	r2, r3
 800beae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f000 f9d3 	bl	800c25c <HAL_PCD_EP_DB_Receive>
 800beb6:	4603      	mov	r3, r0
 800beb8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800bebc:	e073      	b.n	800bfa6 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	461a      	mov	r2, r3
 800bec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	4413      	add	r3, r2
 800becc:	881b      	ldrh	r3, [r3, #0]
 800bece:	b29b      	uxth	r3, r3
 800bed0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bed8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	461a      	mov	r2, r3
 800bee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bee4:	781b      	ldrb	r3, [r3, #0]
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	441a      	add	r2, r3
 800beea:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800beee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800befa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800befe:	b29b      	uxth	r3, r3
 800bf00:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	461a      	mov	r2, r3
 800bf08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf0a:	781b      	ldrb	r3, [r3, #0]
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	4413      	add	r3, r2
 800bf10:	881b      	ldrh	r3, [r3, #0]
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d022      	beq.n	800bf62 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf24:	b29b      	uxth	r3, r3
 800bf26:	461a      	mov	r2, r3
 800bf28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	00db      	lsls	r3, r3, #3
 800bf2e:	4413      	add	r3, r2
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	6812      	ldr	r2, [r2, #0]
 800bf34:	4413      	add	r3, r2
 800bf36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bf3a:	881b      	ldrh	r3, [r3, #0]
 800bf3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf40:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800bf44:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d02c      	beq.n	800bfa6 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6818      	ldr	r0, [r3, #0]
 800bf50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf52:	6959      	ldr	r1, [r3, #20]
 800bf54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf56:	891a      	ldrh	r2, [r3, #8]
 800bf58:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800bf5c:	f006 fd38 	bl	80129d0 <USB_ReadPMA>
 800bf60:	e021      	b.n	800bfa6 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf6a:	b29b      	uxth	r3, r3
 800bf6c:	461a      	mov	r2, r3
 800bf6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf70:	781b      	ldrb	r3, [r3, #0]
 800bf72:	00db      	lsls	r3, r3, #3
 800bf74:	4413      	add	r3, r2
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	6812      	ldr	r2, [r2, #0]
 800bf7a:	4413      	add	r3, r2
 800bf7c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bf80:	881b      	ldrh	r3, [r3, #0]
 800bf82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf86:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800bf8a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d009      	beq.n	800bfa6 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6818      	ldr	r0, [r3, #0]
 800bf96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf98:	6959      	ldr	r1, [r3, #20]
 800bf9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf9c:	895a      	ldrh	r2, [r3, #10]
 800bf9e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800bfa2:	f006 fd15 	bl	80129d0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800bfa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfa8:	69da      	ldr	r2, [r3, #28]
 800bfaa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800bfae:	441a      	add	r2, r3
 800bfb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfb2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800bfb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfb6:	695a      	ldr	r2, [r3, #20]
 800bfb8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800bfbc:	441a      	add	r2, r3
 800bfbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfc0:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800bfc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfc4:	699b      	ldr	r3, [r3, #24]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d005      	beq.n	800bfd6 <PCD_EP_ISR_Handler+0x4fe>
 800bfca:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800bfce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfd0:	691b      	ldr	r3, [r3, #16]
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d206      	bcs.n	800bfe4 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800bfd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	4619      	mov	r1, r3
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f008 fcc7 	bl	8014970 <HAL_PCD_DataOutStageCallback>
 800bfe2:	e005      	b.n	800bff0 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bfea:	4618      	mov	r0, r3
 800bfec:	f004 ffc3 	bl	8010f76 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800bff0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	f000 8121 	beq.w	800c240 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 800bffe:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800c002:	4613      	mov	r3, r2
 800c004:	009b      	lsls	r3, r3, #2
 800c006:	4413      	add	r3, r2
 800c008:	00db      	lsls	r3, r3, #3
 800c00a:	3310      	adds	r3, #16
 800c00c:	687a      	ldr	r2, [r7, #4]
 800c00e:	4413      	add	r3, r2
 800c010:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	461a      	mov	r2, r3
 800c018:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800c01c:	009b      	lsls	r3, r3, #2
 800c01e:	4413      	add	r3, r2
 800c020:	881b      	ldrh	r3, [r3, #0]
 800c022:	b29b      	uxth	r3, r3
 800c024:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800c028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c02c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	461a      	mov	r2, r3
 800c036:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	441a      	add	r2, r3
 800c03e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c042:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c046:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c04a:	b29b      	uxth	r3, r3
 800c04c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800c04e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c050:	78db      	ldrb	r3, [r3, #3]
 800c052:	2b01      	cmp	r3, #1
 800c054:	f040 80a2 	bne.w	800c19c <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 800c058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c05a:	2200      	movs	r2, #0
 800c05c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800c05e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c060:	7b1b      	ldrb	r3, [r3, #12]
 800c062:	2b00      	cmp	r3, #0
 800c064:	f000 8093 	beq.w	800c18e <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800c068:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c06c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c070:	2b00      	cmp	r3, #0
 800c072:	d046      	beq.n	800c102 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c076:	785b      	ldrb	r3, [r3, #1]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d126      	bne.n	800c0ca <PCD_EP_ISR_Handler+0x5f2>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	627b      	str	r3, [r7, #36]	; 0x24
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c08a:	b29b      	uxth	r3, r3
 800c08c:	461a      	mov	r2, r3
 800c08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c090:	4413      	add	r3, r2
 800c092:	627b      	str	r3, [r7, #36]	; 0x24
 800c094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	00da      	lsls	r2, r3, #3
 800c09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09c:	4413      	add	r3, r2
 800c09e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c0a2:	623b      	str	r3, [r7, #32]
 800c0a4:	6a3b      	ldr	r3, [r7, #32]
 800c0a6:	881b      	ldrh	r3, [r3, #0]
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c0ae:	b29a      	uxth	r2, r3
 800c0b0:	6a3b      	ldr	r3, [r7, #32]
 800c0b2:	801a      	strh	r2, [r3, #0]
 800c0b4:	6a3b      	ldr	r3, [r7, #32]
 800c0b6:	881b      	ldrh	r3, [r3, #0]
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0c2:	b29a      	uxth	r2, r3
 800c0c4:	6a3b      	ldr	r3, [r7, #32]
 800c0c6:	801a      	strh	r2, [r3, #0]
 800c0c8:	e061      	b.n	800c18e <PCD_EP_ISR_Handler+0x6b6>
 800c0ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0cc:	785b      	ldrb	r3, [r3, #1]
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	d15d      	bne.n	800c18e <PCD_EP_ISR_Handler+0x6b6>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e6:	4413      	add	r3, r2
 800c0e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	00da      	lsls	r2, r3, #3
 800c0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f2:	4413      	add	r3, r2
 800c0f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c0f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	801a      	strh	r2, [r3, #0]
 800c100:	e045      	b.n	800c18e <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c10a:	785b      	ldrb	r3, [r3, #1]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d126      	bne.n	800c15e <PCD_EP_ISR_Handler+0x686>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	637b      	str	r3, [r7, #52]	; 0x34
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c11e:	b29b      	uxth	r3, r3
 800c120:	461a      	mov	r2, r3
 800c122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c124:	4413      	add	r3, r2
 800c126:	637b      	str	r3, [r7, #52]	; 0x34
 800c128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	00da      	lsls	r2, r3, #3
 800c12e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c130:	4413      	add	r3, r2
 800c132:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c136:	633b      	str	r3, [r7, #48]	; 0x30
 800c138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c13a:	881b      	ldrh	r3, [r3, #0]
 800c13c:	b29b      	uxth	r3, r3
 800c13e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c142:	b29a      	uxth	r2, r3
 800c144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c146:	801a      	strh	r2, [r3, #0]
 800c148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14a:	881b      	ldrh	r3, [r3, #0]
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c156:	b29a      	uxth	r2, r3
 800c158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15a:	801a      	strh	r2, [r3, #0]
 800c15c:	e017      	b.n	800c18e <PCD_EP_ISR_Handler+0x6b6>
 800c15e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c160:	785b      	ldrb	r3, [r3, #1]
 800c162:	2b01      	cmp	r3, #1
 800c164:	d113      	bne.n	800c18e <PCD_EP_ISR_Handler+0x6b6>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c16e:	b29b      	uxth	r3, r3
 800c170:	461a      	mov	r2, r3
 800c172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c174:	4413      	add	r3, r2
 800c176:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	00da      	lsls	r2, r3, #3
 800c17e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c180:	4413      	add	r3, r2
 800c182:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c186:	63bb      	str	r3, [r7, #56]	; 0x38
 800c188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c18a:	2200      	movs	r2, #0
 800c18c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c18e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	4619      	mov	r1, r3
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f008 fc06 	bl	80149a6 <HAL_PCD_DataInStageCallback>
 800c19a:	e051      	b.n	800c240 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800c19c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c1a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d144      	bne.n	800c232 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	00db      	lsls	r3, r3, #3
 800c1ba:	4413      	add	r3, r2
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	6812      	ldr	r2, [r2, #0]
 800c1c0:	4413      	add	r3, r2
 800c1c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c1c6:	881b      	ldrh	r3, [r3, #0]
 800c1c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c1cc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800c1d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1d2:	699a      	ldr	r2, [r3, #24]
 800c1d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d907      	bls.n	800c1ec <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 800c1dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1de:	699a      	ldr	r2, [r3, #24]
 800c1e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c1e4:	1ad2      	subs	r2, r2, r3
 800c1e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1e8:	619a      	str	r2, [r3, #24]
 800c1ea:	e002      	b.n	800c1f2 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 800c1ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800c1f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1f4:	699b      	ldr	r3, [r3, #24]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d106      	bne.n	800c208 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c1fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	4619      	mov	r1, r3
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f008 fbd0 	bl	80149a6 <HAL_PCD_DataInStageCallback>
 800c206:	e01b      	b.n	800c240 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800c208:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c20a:	695a      	ldr	r2, [r3, #20]
 800c20c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c210:	441a      	add	r2, r3
 800c212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c214:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800c216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c218:	69da      	ldr	r2, [r3, #28]
 800c21a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800c21e:	441a      	add	r2, r3
 800c220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c222:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c22a:	4618      	mov	r0, r3
 800c22c:	f004 fea3 	bl	8010f76 <USB_EPStartXfer>
 800c230:	e006      	b.n	800c240 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800c232:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c236:	461a      	mov	r2, r3
 800c238:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 f917 	bl	800c46e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c248:	b29b      	uxth	r3, r3
 800c24a:	b21b      	sxth	r3, r3
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	f6ff ac48 	blt.w	800bae2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800c252:	2300      	movs	r3, #0
}
 800c254:	4618      	mov	r0, r3
 800c256:	3758      	adds	r7, #88	; 0x58
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b088      	sub	sp, #32
 800c260:	af00      	add	r7, sp, #0
 800c262:	60f8      	str	r0, [r7, #12]
 800c264:	60b9      	str	r1, [r7, #8]
 800c266:	4613      	mov	r3, r2
 800c268:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c26a:	88fb      	ldrh	r3, [r7, #6]
 800c26c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c270:	2b00      	cmp	r3, #0
 800c272:	d07c      	beq.n	800c36e <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c27c:	b29b      	uxth	r3, r3
 800c27e:	461a      	mov	r2, r3
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	00db      	lsls	r3, r3, #3
 800c286:	4413      	add	r3, r2
 800c288:	68fa      	ldr	r2, [r7, #12]
 800c28a:	6812      	ldr	r2, [r2, #0]
 800c28c:	4413      	add	r3, r2
 800c28e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c292:	881b      	ldrh	r3, [r3, #0]
 800c294:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c298:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	699a      	ldr	r2, [r3, #24]
 800c29e:	8b7b      	ldrh	r3, [r7, #26]
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d306      	bcc.n	800c2b2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	699a      	ldr	r2, [r3, #24]
 800c2a8:	8b7b      	ldrh	r3, [r7, #26]
 800c2aa:	1ad2      	subs	r2, r2, r3
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	619a      	str	r2, [r3, #24]
 800c2b0:	e002      	b.n	800c2b8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	699b      	ldr	r3, [r3, #24]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d123      	bne.n	800c308 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	461a      	mov	r2, r3
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	009b      	lsls	r3, r3, #2
 800c2cc:	4413      	add	r3, r2
 800c2ce:	881b      	ldrh	r3, [r3, #0]
 800c2d0:	b29b      	uxth	r3, r3
 800c2d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c2d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2da:	833b      	strh	r3, [r7, #24]
 800c2dc:	8b3b      	ldrh	r3, [r7, #24]
 800c2de:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c2e2:	833b      	strh	r3, [r7, #24]
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	781b      	ldrb	r3, [r3, #0]
 800c2ee:	009b      	lsls	r3, r3, #2
 800c2f0:	441a      	add	r2, r3
 800c2f2:	8b3b      	ldrh	r3, [r7, #24]
 800c2f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c2f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c2fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c304:	b29b      	uxth	r3, r3
 800c306:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800c308:	88fb      	ldrh	r3, [r7, #6]
 800c30a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d01f      	beq.n	800c352 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	461a      	mov	r2, r3
 800c318:	68bb      	ldr	r3, [r7, #8]
 800c31a:	781b      	ldrb	r3, [r3, #0]
 800c31c:	009b      	lsls	r3, r3, #2
 800c31e:	4413      	add	r3, r2
 800c320:	881b      	ldrh	r3, [r3, #0]
 800c322:	b29b      	uxth	r3, r3
 800c324:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c32c:	82fb      	strh	r3, [r7, #22]
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	461a      	mov	r2, r3
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	781b      	ldrb	r3, [r3, #0]
 800c338:	009b      	lsls	r3, r3, #2
 800c33a:	441a      	add	r2, r3
 800c33c:	8afb      	ldrh	r3, [r7, #22]
 800c33e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c342:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c34a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c34e:	b29b      	uxth	r3, r3
 800c350:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800c352:	8b7b      	ldrh	r3, [r7, #26]
 800c354:	2b00      	cmp	r3, #0
 800c356:	f000 8085 	beq.w	800c464 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	6818      	ldr	r0, [r3, #0]
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	6959      	ldr	r1, [r3, #20]
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	891a      	ldrh	r2, [r3, #8]
 800c366:	8b7b      	ldrh	r3, [r7, #26]
 800c368:	f006 fb32 	bl	80129d0 <USB_ReadPMA>
 800c36c:	e07a      	b.n	800c464 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c376:	b29b      	uxth	r3, r3
 800c378:	461a      	mov	r2, r3
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	781b      	ldrb	r3, [r3, #0]
 800c37e:	00db      	lsls	r3, r3, #3
 800c380:	4413      	add	r3, r2
 800c382:	68fa      	ldr	r2, [r7, #12]
 800c384:	6812      	ldr	r2, [r2, #0]
 800c386:	4413      	add	r3, r2
 800c388:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c38c:	881b      	ldrh	r3, [r3, #0]
 800c38e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c392:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	699a      	ldr	r2, [r3, #24]
 800c398:	8b7b      	ldrh	r3, [r7, #26]
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d306      	bcc.n	800c3ac <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	699a      	ldr	r2, [r3, #24]
 800c3a2:	8b7b      	ldrh	r3, [r7, #26]
 800c3a4:	1ad2      	subs	r2, r2, r3
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	619a      	str	r2, [r3, #24]
 800c3aa:	e002      	b.n	800c3b2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	699b      	ldr	r3, [r3, #24]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d123      	bne.n	800c402 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	461a      	mov	r2, r3
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	009b      	lsls	r3, r3, #2
 800c3c6:	4413      	add	r3, r2
 800c3c8:	881b      	ldrh	r3, [r3, #0]
 800c3ca:	b29b      	uxth	r3, r3
 800c3cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c3d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3d4:	83fb      	strh	r3, [r7, #30]
 800c3d6:	8bfb      	ldrh	r3, [r7, #30]
 800c3d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c3dc:	83fb      	strh	r3, [r7, #30]
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	461a      	mov	r2, r3
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	009b      	lsls	r3, r3, #2
 800c3ea:	441a      	add	r2, r3
 800c3ec:	8bfb      	ldrh	r3, [r7, #30]
 800c3ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c3f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c3f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c3fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3fe:	b29b      	uxth	r3, r3
 800c400:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800c402:	88fb      	ldrh	r3, [r7, #6]
 800c404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d11f      	bne.n	800c44c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	461a      	mov	r2, r3
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	009b      	lsls	r3, r3, #2
 800c418:	4413      	add	r3, r2
 800c41a:	881b      	ldrh	r3, [r3, #0]
 800c41c:	b29b      	uxth	r3, r3
 800c41e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c426:	83bb      	strh	r3, [r7, #28]
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	461a      	mov	r2, r3
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	009b      	lsls	r3, r3, #2
 800c434:	441a      	add	r2, r3
 800c436:	8bbb      	ldrh	r3, [r7, #28]
 800c438:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c43c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c444:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c448:	b29b      	uxth	r3, r3
 800c44a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800c44c:	8b7b      	ldrh	r3, [r7, #26]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d008      	beq.n	800c464 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	6818      	ldr	r0, [r3, #0]
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	6959      	ldr	r1, [r3, #20]
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	895a      	ldrh	r2, [r3, #10]
 800c45e:	8b7b      	ldrh	r3, [r7, #26]
 800c460:	f006 fab6 	bl	80129d0 <USB_ReadPMA>
    }
  }

  return count;
 800c464:	8b7b      	ldrh	r3, [r7, #26]
}
 800c466:	4618      	mov	r0, r3
 800c468:	3720      	adds	r7, #32
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}

0800c46e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800c46e:	b580      	push	{r7, lr}
 800c470:	b0a4      	sub	sp, #144	; 0x90
 800c472:	af00      	add	r7, sp, #0
 800c474:	60f8      	str	r0, [r7, #12]
 800c476:	60b9      	str	r1, [r7, #8]
 800c478:	4613      	mov	r3, r2
 800c47a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800c47c:	88fb      	ldrh	r3, [r7, #6]
 800c47e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c482:	2b00      	cmp	r3, #0
 800c484:	f000 81db 	beq.w	800c83e <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c490:	b29b      	uxth	r3, r3
 800c492:	461a      	mov	r2, r3
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	00db      	lsls	r3, r3, #3
 800c49a:	4413      	add	r3, r2
 800c49c:	68fa      	ldr	r2, [r7, #12]
 800c49e:	6812      	ldr	r2, [r2, #0]
 800c4a0:	4413      	add	r3, r2
 800c4a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c4a6:	881b      	ldrh	r3, [r3, #0]
 800c4a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c4ac:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	699a      	ldr	r2, [r3, #24]
 800c4b4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	d907      	bls.n	800c4cc <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	699a      	ldr	r2, [r3, #24]
 800c4c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c4c4:	1ad2      	subs	r2, r2, r3
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	619a      	str	r2, [r3, #24]
 800c4ca:	e002      	b.n	800c4d2 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	699b      	ldr	r3, [r3, #24]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	f040 80b9 	bne.w	800c64e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	785b      	ldrb	r3, [r3, #1]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d126      	bne.n	800c532 <HAL_PCD_EP_DB_Transmit+0xc4>
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c4f2:	b29b      	uxth	r3, r3
 800c4f4:	461a      	mov	r2, r3
 800c4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f8:	4413      	add	r3, r2
 800c4fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	781b      	ldrb	r3, [r3, #0]
 800c500:	00da      	lsls	r2, r3, #3
 800c502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c504:	4413      	add	r3, r2
 800c506:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c50a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c50e:	881b      	ldrh	r3, [r3, #0]
 800c510:	b29b      	uxth	r3, r3
 800c512:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c516:	b29a      	uxth	r2, r3
 800c518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c51a:	801a      	strh	r2, [r3, #0]
 800c51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c51e:	881b      	ldrh	r3, [r3, #0]
 800c520:	b29b      	uxth	r3, r3
 800c522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c52a:	b29a      	uxth	r2, r3
 800c52c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c52e:	801a      	strh	r2, [r3, #0]
 800c530:	e01a      	b.n	800c568 <HAL_PCD_EP_DB_Transmit+0xfa>
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	785b      	ldrb	r3, [r3, #1]
 800c536:	2b01      	cmp	r3, #1
 800c538:	d116      	bne.n	800c568 <HAL_PCD_EP_DB_Transmit+0xfa>
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	637b      	str	r3, [r7, #52]	; 0x34
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c548:	b29b      	uxth	r3, r3
 800c54a:	461a      	mov	r2, r3
 800c54c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c54e:	4413      	add	r3, r2
 800c550:	637b      	str	r3, [r7, #52]	; 0x34
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	781b      	ldrb	r3, [r3, #0]
 800c556:	00da      	lsls	r2, r3, #3
 800c558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c55a:	4413      	add	r3, r2
 800c55c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c560:	633b      	str	r3, [r7, #48]	; 0x30
 800c562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c564:	2200      	movs	r2, #0
 800c566:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	627b      	str	r3, [r7, #36]	; 0x24
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	785b      	ldrb	r3, [r3, #1]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d126      	bne.n	800c5c4 <HAL_PCD_EP_DB_Transmit+0x156>
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	61fb      	str	r3, [r7, #28]
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c584:	b29b      	uxth	r3, r3
 800c586:	461a      	mov	r2, r3
 800c588:	69fb      	ldr	r3, [r7, #28]
 800c58a:	4413      	add	r3, r2
 800c58c:	61fb      	str	r3, [r7, #28]
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	00da      	lsls	r2, r3, #3
 800c594:	69fb      	ldr	r3, [r7, #28]
 800c596:	4413      	add	r3, r2
 800c598:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c59c:	61bb      	str	r3, [r7, #24]
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	881b      	ldrh	r3, [r3, #0]
 800c5a2:	b29b      	uxth	r3, r3
 800c5a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c5a8:	b29a      	uxth	r2, r3
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	801a      	strh	r2, [r3, #0]
 800c5ae:	69bb      	ldr	r3, [r7, #24]
 800c5b0:	881b      	ldrh	r3, [r3, #0]
 800c5b2:	b29b      	uxth	r3, r3
 800c5b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c5bc:	b29a      	uxth	r2, r3
 800c5be:	69bb      	ldr	r3, [r7, #24]
 800c5c0:	801a      	strh	r2, [r3, #0]
 800c5c2:	e017      	b.n	800c5f4 <HAL_PCD_EP_DB_Transmit+0x186>
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	785b      	ldrb	r3, [r3, #1]
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d113      	bne.n	800c5f4 <HAL_PCD_EP_DB_Transmit+0x186>
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c5d4:	b29b      	uxth	r3, r3
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5da:	4413      	add	r3, r2
 800c5dc:	627b      	str	r3, [r7, #36]	; 0x24
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	781b      	ldrb	r3, [r3, #0]
 800c5e2:	00da      	lsls	r2, r3, #3
 800c5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e6:	4413      	add	r3, r2
 800c5e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c5ec:	623b      	str	r3, [r7, #32]
 800c5ee:	6a3b      	ldr	r3, [r7, #32]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	68f8      	ldr	r0, [r7, #12]
 800c5fc:	f008 f9d3 	bl	80149a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c600:	88fb      	ldrh	r3, [r7, #6]
 800c602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c606:	2b00      	cmp	r3, #0
 800c608:	f000 82fa 	beq.w	800cc00 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	461a      	mov	r2, r3
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	781b      	ldrb	r3, [r3, #0]
 800c616:	009b      	lsls	r3, r3, #2
 800c618:	4413      	add	r3, r2
 800c61a:	881b      	ldrh	r3, [r3, #0]
 800c61c:	b29b      	uxth	r3, r3
 800c61e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c626:	82fb      	strh	r3, [r7, #22]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	461a      	mov	r2, r3
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	009b      	lsls	r3, r3, #2
 800c634:	441a      	add	r2, r3
 800c636:	8afb      	ldrh	r3, [r7, #22]
 800c638:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c63c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c640:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c648:	b29b      	uxth	r3, r3
 800c64a:	8013      	strh	r3, [r2, #0]
 800c64c:	e2d8      	b.n	800cc00 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800c64e:	88fb      	ldrh	r3, [r7, #6]
 800c650:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c654:	2b00      	cmp	r3, #0
 800c656:	d021      	beq.n	800c69c <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	461a      	mov	r2, r3
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	009b      	lsls	r3, r3, #2
 800c664:	4413      	add	r3, r2
 800c666:	881b      	ldrh	r3, [r3, #0]
 800c668:	b29b      	uxth	r3, r3
 800c66a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c66e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c672:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	461a      	mov	r2, r3
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	009b      	lsls	r3, r3, #2
 800c682:	441a      	add	r2, r3
 800c684:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c688:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c68c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c690:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c698:	b29b      	uxth	r3, r3
 800c69a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	f040 82ac 	bne.w	800cc00 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	695a      	ldr	r2, [r3, #20]
 800c6ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c6b0:	441a      	add	r2, r3
 800c6b2:	68bb      	ldr	r3, [r7, #8]
 800c6b4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	69da      	ldr	r2, [r3, #28]
 800c6ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c6be:	441a      	add	r2, r3
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	6a1a      	ldr	r2, [r3, #32]
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	691b      	ldr	r3, [r3, #16]
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d30b      	bcc.n	800c6e8 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	691b      	ldr	r3, [r3, #16]
 800c6d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	6a1a      	ldr	r2, [r3, #32]
 800c6dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c6e0:	1ad2      	subs	r2, r2, r3
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	621a      	str	r2, [r3, #32]
 800c6e6:	e017      	b.n	800c718 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	6a1b      	ldr	r3, [r3, #32]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d108      	bne.n	800c702 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800c6f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c6f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800c700:	e00a      	b.n	800c718 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	2200      	movs	r2, #0
 800c706:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	6a1b      	ldr	r3, [r3, #32]
 800c70e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	2200      	movs	r2, #0
 800c716:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	785b      	ldrb	r3, [r3, #1]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d165      	bne.n	800c7ec <HAL_PCD_EP_DB_Transmit+0x37e>
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c72e:	b29b      	uxth	r3, r3
 800c730:	461a      	mov	r2, r3
 800c732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c734:	4413      	add	r3, r2
 800c736:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	00da      	lsls	r2, r3, #3
 800c73e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c740:	4413      	add	r3, r2
 800c742:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c746:	63bb      	str	r3, [r7, #56]	; 0x38
 800c748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74a:	881b      	ldrh	r3, [r3, #0]
 800c74c:	b29b      	uxth	r3, r3
 800c74e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c752:	b29a      	uxth	r2, r3
 800c754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c756:	801a      	strh	r2, [r3, #0]
 800c758:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c75c:	2b3e      	cmp	r3, #62	; 0x3e
 800c75e:	d91d      	bls.n	800c79c <HAL_PCD_EP_DB_Transmit+0x32e>
 800c760:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c764:	095b      	lsrs	r3, r3, #5
 800c766:	64bb      	str	r3, [r7, #72]	; 0x48
 800c768:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c76c:	f003 031f 	and.w	r3, r3, #31
 800c770:	2b00      	cmp	r3, #0
 800c772:	d102      	bne.n	800c77a <HAL_PCD_EP_DB_Transmit+0x30c>
 800c774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c776:	3b01      	subs	r3, #1
 800c778:	64bb      	str	r3, [r7, #72]	; 0x48
 800c77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c77c:	881b      	ldrh	r3, [r3, #0]
 800c77e:	b29a      	uxth	r2, r3
 800c780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c782:	b29b      	uxth	r3, r3
 800c784:	029b      	lsls	r3, r3, #10
 800c786:	b29b      	uxth	r3, r3
 800c788:	4313      	orrs	r3, r2
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c794:	b29a      	uxth	r2, r3
 800c796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c798:	801a      	strh	r2, [r3, #0]
 800c79a:	e044      	b.n	800c826 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800c79c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d10a      	bne.n	800c7ba <HAL_PCD_EP_DB_Transmit+0x34c>
 800c7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a6:	881b      	ldrh	r3, [r3, #0]
 800c7a8:	b29b      	uxth	r3, r3
 800c7aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c7ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c7b2:	b29a      	uxth	r2, r3
 800c7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b6:	801a      	strh	r2, [r3, #0]
 800c7b8:	e035      	b.n	800c826 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800c7ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c7be:	085b      	lsrs	r3, r3, #1
 800c7c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c7c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c7c6:	f003 0301 	and.w	r3, r3, #1
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d002      	beq.n	800c7d4 <HAL_PCD_EP_DB_Transmit+0x366>
 800c7ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7d0:	3301      	adds	r3, #1
 800c7d2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d6:	881b      	ldrh	r3, [r3, #0]
 800c7d8:	b29a      	uxth	r2, r3
 800c7da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7dc:	b29b      	uxth	r3, r3
 800c7de:	029b      	lsls	r3, r3, #10
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	b29a      	uxth	r2, r3
 800c7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e8:	801a      	strh	r2, [r3, #0]
 800c7ea:	e01c      	b.n	800c826 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	785b      	ldrb	r3, [r3, #1]
 800c7f0:	2b01      	cmp	r3, #1
 800c7f2:	d118      	bne.n	800c826 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	647b      	str	r3, [r7, #68]	; 0x44
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c802:	b29b      	uxth	r3, r3
 800c804:	461a      	mov	r2, r3
 800c806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c808:	4413      	add	r3, r2
 800c80a:	647b      	str	r3, [r7, #68]	; 0x44
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	00da      	lsls	r2, r3, #3
 800c812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c814:	4413      	add	r3, r2
 800c816:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c81a:	643b      	str	r3, [r7, #64]	; 0x40
 800c81c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c820:	b29a      	uxth	r2, r3
 800c822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c824:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	6818      	ldr	r0, [r3, #0]
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	6959      	ldr	r1, [r3, #20]
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	891a      	ldrh	r2, [r3, #8]
 800c832:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c836:	b29b      	uxth	r3, r3
 800c838:	f006 f888 	bl	801294c <USB_WritePMA>
 800c83c:	e1e0      	b.n	800cc00 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c846:	b29b      	uxth	r3, r3
 800c848:	461a      	mov	r2, r3
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	781b      	ldrb	r3, [r3, #0]
 800c84e:	00db      	lsls	r3, r3, #3
 800c850:	4413      	add	r3, r2
 800c852:	68fa      	ldr	r2, [r7, #12]
 800c854:	6812      	ldr	r2, [r2, #0]
 800c856:	4413      	add	r3, r2
 800c858:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c85c:	881b      	ldrh	r3, [r3, #0]
 800c85e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c862:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	699a      	ldr	r2, [r3, #24]
 800c86a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c86e:	429a      	cmp	r2, r3
 800c870:	d307      	bcc.n	800c882 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	699a      	ldr	r2, [r3, #24]
 800c876:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800c87a:	1ad2      	subs	r2, r2, r3
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	619a      	str	r2, [r3, #24]
 800c880:	e002      	b.n	800c888 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	2200      	movs	r2, #0
 800c886:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	699b      	ldr	r3, [r3, #24]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	f040 80c0 	bne.w	800ca12 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	785b      	ldrb	r3, [r3, #1]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d126      	bne.n	800c8e8 <HAL_PCD_EP_DB_Transmit+0x47a>
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c8a8:	b29b      	uxth	r3, r3
 800c8aa:	461a      	mov	r2, r3
 800c8ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c8ae:	4413      	add	r3, r2
 800c8b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	781b      	ldrb	r3, [r3, #0]
 800c8b6:	00da      	lsls	r2, r3, #3
 800c8b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c8ba:	4413      	add	r3, r2
 800c8bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c8c0:	67bb      	str	r3, [r7, #120]	; 0x78
 800c8c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c8c4:	881b      	ldrh	r3, [r3, #0]
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c8cc:	b29a      	uxth	r2, r3
 800c8ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c8d0:	801a      	strh	r2, [r3, #0]
 800c8d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c8d4:	881b      	ldrh	r3, [r3, #0]
 800c8d6:	b29b      	uxth	r3, r3
 800c8d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c8dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c8e0:	b29a      	uxth	r2, r3
 800c8e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c8e4:	801a      	strh	r2, [r3, #0]
 800c8e6:	e01a      	b.n	800c91e <HAL_PCD_EP_DB_Transmit+0x4b0>
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	785b      	ldrb	r3, [r3, #1]
 800c8ec:	2b01      	cmp	r3, #1
 800c8ee:	d116      	bne.n	800c91e <HAL_PCD_EP_DB_Transmit+0x4b0>
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	667b      	str	r3, [r7, #100]	; 0x64
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c8fe:	b29b      	uxth	r3, r3
 800c900:	461a      	mov	r2, r3
 800c902:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c904:	4413      	add	r3, r2
 800c906:	667b      	str	r3, [r7, #100]	; 0x64
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	781b      	ldrb	r3, [r3, #0]
 800c90c:	00da      	lsls	r2, r3, #3
 800c90e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c910:	4413      	add	r3, r2
 800c912:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c916:	663b      	str	r3, [r7, #96]	; 0x60
 800c918:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c91a:	2200      	movs	r2, #0
 800c91c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	677b      	str	r3, [r7, #116]	; 0x74
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	785b      	ldrb	r3, [r3, #1]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d12b      	bne.n	800c984 <HAL_PCD_EP_DB_Transmit+0x516>
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	461a      	mov	r2, r3
 800c93e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c940:	4413      	add	r3, r2
 800c942:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	781b      	ldrb	r3, [r3, #0]
 800c948:	00da      	lsls	r2, r3, #3
 800c94a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c94c:	4413      	add	r3, r2
 800c94e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c952:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c956:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c95a:	881b      	ldrh	r3, [r3, #0]
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c962:	b29a      	uxth	r2, r3
 800c964:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c968:	801a      	strh	r2, [r3, #0]
 800c96a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c96e:	881b      	ldrh	r3, [r3, #0]
 800c970:	b29b      	uxth	r3, r3
 800c972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c97a:	b29a      	uxth	r2, r3
 800c97c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c980:	801a      	strh	r2, [r3, #0]
 800c982:	e017      	b.n	800c9b4 <HAL_PCD_EP_DB_Transmit+0x546>
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	785b      	ldrb	r3, [r3, #1]
 800c988:	2b01      	cmp	r3, #1
 800c98a:	d113      	bne.n	800c9b4 <HAL_PCD_EP_DB_Transmit+0x546>
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c994:	b29b      	uxth	r3, r3
 800c996:	461a      	mov	r2, r3
 800c998:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c99a:	4413      	add	r3, r2
 800c99c:	677b      	str	r3, [r7, #116]	; 0x74
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	00da      	lsls	r2, r3, #3
 800c9a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c9a6:	4413      	add	r3, r2
 800c9a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c9ac:	673b      	str	r3, [r7, #112]	; 0x70
 800c9ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	68f8      	ldr	r0, [r7, #12]
 800c9bc:	f007 fff3 	bl	80149a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800c9c0:	88fb      	ldrh	r3, [r7, #6]
 800c9c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	f040 811a 	bne.w	800cc00 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	461a      	mov	r2, r3
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	009b      	lsls	r3, r3, #2
 800c9d8:	4413      	add	r3, r2
 800c9da:	881b      	ldrh	r3, [r3, #0]
 800c9dc:	b29b      	uxth	r3, r3
 800c9de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c9e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9e6:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	781b      	ldrb	r3, [r3, #0]
 800c9f4:	009b      	lsls	r3, r3, #2
 800c9f6:	441a      	add	r2, r3
 800c9f8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800c9fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ca08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	8013      	strh	r3, [r2, #0]
 800ca10:	e0f6      	b.n	800cc00 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800ca12:	88fb      	ldrh	r3, [r7, #6]
 800ca14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d121      	bne.n	800ca60 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	461a      	mov	r2, r3
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	009b      	lsls	r3, r3, #2
 800ca28:	4413      	add	r3, r2
 800ca2a:	881b      	ldrh	r3, [r3, #0]
 800ca2c:	b29b      	uxth	r3, r3
 800ca2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	461a      	mov	r2, r3
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	781b      	ldrb	r3, [r3, #0]
 800ca44:	009b      	lsls	r3, r3, #2
 800ca46:	441a      	add	r2, r3
 800ca48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ca4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ca58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca5c:	b29b      	uxth	r3, r3
 800ca5e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	f040 80ca 	bne.w	800cc00 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	695a      	ldr	r2, [r3, #20]
 800ca70:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ca74:	441a      	add	r2, r3
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	69da      	ldr	r2, [r3, #28]
 800ca7e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ca82:	441a      	add	r2, r3
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	6a1a      	ldr	r2, [r3, #32]
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	691b      	ldr	r3, [r3, #16]
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d30b      	bcc.n	800caac <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	691b      	ldr	r3, [r3, #16]
 800ca98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	6a1a      	ldr	r2, [r3, #32]
 800caa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800caa4:	1ad2      	subs	r2, r2, r3
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	621a      	str	r2, [r3, #32]
 800caaa:	e017      	b.n	800cadc <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	6a1b      	ldr	r3, [r3, #32]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d108      	bne.n	800cac6 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800cab4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800cab8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	2200      	movs	r2, #0
 800cac0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800cac4:	e00a      	b.n	800cadc <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	6a1b      	ldr	r3, [r3, #32]
 800caca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	2200      	movs	r2, #0
 800cad2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	2200      	movs	r2, #0
 800cad8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	657b      	str	r3, [r7, #84]	; 0x54
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	785b      	ldrb	r3, [r3, #1]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d165      	bne.n	800cbb6 <HAL_PCD_EP_DB_Transmit+0x748>
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	461a      	mov	r2, r3
 800cafc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cafe:	4413      	add	r3, r2
 800cb00:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	00da      	lsls	r2, r3, #3
 800cb08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb0a:	4413      	add	r3, r2
 800cb0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cb10:	65bb      	str	r3, [r7, #88]	; 0x58
 800cb12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb14:	881b      	ldrh	r3, [r3, #0]
 800cb16:	b29b      	uxth	r3, r3
 800cb18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cb1c:	b29a      	uxth	r2, r3
 800cb1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb20:	801a      	strh	r2, [r3, #0]
 800cb22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cb26:	2b3e      	cmp	r3, #62	; 0x3e
 800cb28:	d91d      	bls.n	800cb66 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800cb2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cb2e:	095b      	lsrs	r3, r3, #5
 800cb30:	66bb      	str	r3, [r7, #104]	; 0x68
 800cb32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cb36:	f003 031f 	and.w	r3, r3, #31
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d102      	bne.n	800cb44 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800cb3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cb40:	3b01      	subs	r3, #1
 800cb42:	66bb      	str	r3, [r7, #104]	; 0x68
 800cb44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb46:	881b      	ldrh	r3, [r3, #0]
 800cb48:	b29a      	uxth	r2, r3
 800cb4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	029b      	lsls	r3, r3, #10
 800cb50:	b29b      	uxth	r3, r3
 800cb52:	4313      	orrs	r3, r2
 800cb54:	b29b      	uxth	r3, r3
 800cb56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb5e:	b29a      	uxth	r2, r3
 800cb60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb62:	801a      	strh	r2, [r3, #0]
 800cb64:	e041      	b.n	800cbea <HAL_PCD_EP_DB_Transmit+0x77c>
 800cb66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d10a      	bne.n	800cb84 <HAL_PCD_EP_DB_Transmit+0x716>
 800cb6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb70:	881b      	ldrh	r3, [r3, #0]
 800cb72:	b29b      	uxth	r3, r3
 800cb74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb7c:	b29a      	uxth	r2, r3
 800cb7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb80:	801a      	strh	r2, [r3, #0]
 800cb82:	e032      	b.n	800cbea <HAL_PCD_EP_DB_Transmit+0x77c>
 800cb84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cb88:	085b      	lsrs	r3, r3, #1
 800cb8a:	66bb      	str	r3, [r7, #104]	; 0x68
 800cb8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cb90:	f003 0301 	and.w	r3, r3, #1
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d002      	beq.n	800cb9e <HAL_PCD_EP_DB_Transmit+0x730>
 800cb98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cb9a:	3301      	adds	r3, #1
 800cb9c:	66bb      	str	r3, [r7, #104]	; 0x68
 800cb9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cba0:	881b      	ldrh	r3, [r3, #0]
 800cba2:	b29a      	uxth	r2, r3
 800cba4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cba6:	b29b      	uxth	r3, r3
 800cba8:	029b      	lsls	r3, r3, #10
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	4313      	orrs	r3, r2
 800cbae:	b29a      	uxth	r2, r3
 800cbb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cbb2:	801a      	strh	r2, [r3, #0]
 800cbb4:	e019      	b.n	800cbea <HAL_PCD_EP_DB_Transmit+0x77c>
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	785b      	ldrb	r3, [r3, #1]
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	d115      	bne.n	800cbea <HAL_PCD_EP_DB_Transmit+0x77c>
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cbc6:	b29b      	uxth	r3, r3
 800cbc8:	461a      	mov	r2, r3
 800cbca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbcc:	4413      	add	r3, r2
 800cbce:	657b      	str	r3, [r7, #84]	; 0x54
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	00da      	lsls	r2, r3, #3
 800cbd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbd8:	4413      	add	r3, r2
 800cbda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cbde:	653b      	str	r3, [r7, #80]	; 0x50
 800cbe0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cbe4:	b29a      	uxth	r2, r3
 800cbe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbe8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	6818      	ldr	r0, [r3, #0]
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	6959      	ldr	r1, [r3, #20]
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	895a      	ldrh	r2, [r3, #10]
 800cbf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cbfa:	b29b      	uxth	r3, r3
 800cbfc:	f005 fea6 	bl	801294c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	461a      	mov	r2, r3
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	009b      	lsls	r3, r3, #2
 800cc0c:	4413      	add	r3, r2
 800cc0e:	881b      	ldrh	r3, [r3, #0]
 800cc10:	b29b      	uxth	r3, r3
 800cc12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cc16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc1a:	82bb      	strh	r3, [r7, #20]
 800cc1c:	8abb      	ldrh	r3, [r7, #20]
 800cc1e:	f083 0310 	eor.w	r3, r3, #16
 800cc22:	82bb      	strh	r3, [r7, #20]
 800cc24:	8abb      	ldrh	r3, [r7, #20]
 800cc26:	f083 0320 	eor.w	r3, r3, #32
 800cc2a:	82bb      	strh	r3, [r7, #20]
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	461a      	mov	r2, r3
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	781b      	ldrb	r3, [r3, #0]
 800cc36:	009b      	lsls	r3, r3, #2
 800cc38:	441a      	add	r2, r3
 800cc3a:	8abb      	ldrh	r3, [r7, #20]
 800cc3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cc40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cc44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc4c:	b29b      	uxth	r3, r3
 800cc4e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800cc50:	2300      	movs	r3, #0
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3790      	adds	r7, #144	; 0x90
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}

0800cc5a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800cc5a:	b480      	push	{r7}
 800cc5c:	b087      	sub	sp, #28
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	60f8      	str	r0, [r7, #12]
 800cc62:	607b      	str	r3, [r7, #4]
 800cc64:	460b      	mov	r3, r1
 800cc66:	817b      	strh	r3, [r7, #10]
 800cc68:	4613      	mov	r3, r2
 800cc6a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800cc6c:	897b      	ldrh	r3, [r7, #10]
 800cc6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc72:	b29b      	uxth	r3, r3
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d00b      	beq.n	800cc90 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cc78:	897b      	ldrh	r3, [r7, #10]
 800cc7a:	f003 0207 	and.w	r2, r3, #7
 800cc7e:	4613      	mov	r3, r2
 800cc80:	009b      	lsls	r3, r3, #2
 800cc82:	4413      	add	r3, r2
 800cc84:	00db      	lsls	r3, r3, #3
 800cc86:	3310      	adds	r3, #16
 800cc88:	68fa      	ldr	r2, [r7, #12]
 800cc8a:	4413      	add	r3, r2
 800cc8c:	617b      	str	r3, [r7, #20]
 800cc8e:	e009      	b.n	800cca4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800cc90:	897a      	ldrh	r2, [r7, #10]
 800cc92:	4613      	mov	r3, r2
 800cc94:	009b      	lsls	r3, r3, #2
 800cc96:	4413      	add	r3, r2
 800cc98:	00db      	lsls	r3, r3, #3
 800cc9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cc9e:	68fa      	ldr	r2, [r7, #12]
 800cca0:	4413      	add	r3, r2
 800cca2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800cca4:	893b      	ldrh	r3, [r7, #8]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d107      	bne.n	800ccba <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	2200      	movs	r2, #0
 800ccae:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	b29a      	uxth	r2, r3
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	80da      	strh	r2, [r3, #6]
 800ccb8:	e00b      	b.n	800ccd2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	2201      	movs	r2, #1
 800ccbe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	b29a      	uxth	r2, r3
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	0c1b      	lsrs	r3, r3, #16
 800cccc:	b29a      	uxth	r2, r3
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800ccd2:	2300      	movs	r3, #0
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	371c      	adds	r7, #28
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr

0800cce0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b085      	sub	sp, #20
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2201      	movs	r2, #1
 800ccf2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800cd04:	b29b      	uxth	r3, r3
 800cd06:	f043 0301 	orr.w	r3, r3, #1
 800cd0a:	b29a      	uxth	r2, r3
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800cd18:	b29b      	uxth	r3, r3
 800cd1a:	f043 0302 	orr.w	r3, r3, #2
 800cd1e:	b29a      	uxth	r2, r3
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800cd26:	2300      	movs	r3, #0
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3714      	adds	r7, #20
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd32:	4770      	bx	lr

0800cd34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800cd34:	b480      	push	{r7}
 800cd36:	b085      	sub	sp, #20
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d141      	bne.n	800cdc6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800cd42:	4b4b      	ldr	r3, [pc, #300]	; (800ce70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cd4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd4e:	d131      	bne.n	800cdb4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cd50:	4b47      	ldr	r3, [pc, #284]	; (800ce70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cd52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd56:	4a46      	ldr	r2, [pc, #280]	; (800ce70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cd58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800cd60:	4b43      	ldr	r3, [pc, #268]	; (800ce70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800cd68:	4a41      	ldr	r2, [pc, #260]	; (800ce70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cd6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cd6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800cd70:	4b40      	ldr	r3, [pc, #256]	; (800ce74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	2232      	movs	r2, #50	; 0x32
 800cd76:	fb02 f303 	mul.w	r3, r2, r3
 800cd7a:	4a3f      	ldr	r2, [pc, #252]	; (800ce78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800cd7c:	fba2 2303 	umull	r2, r3, r2, r3
 800cd80:	0c9b      	lsrs	r3, r3, #18
 800cd82:	3301      	adds	r3, #1
 800cd84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cd86:	e002      	b.n	800cd8e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	3b01      	subs	r3, #1
 800cd8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800cd8e:	4b38      	ldr	r3, [pc, #224]	; (800ce70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cd90:	695b      	ldr	r3, [r3, #20]
 800cd92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cd96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd9a:	d102      	bne.n	800cda2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d1f2      	bne.n	800cd88 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800cda2:	4b33      	ldr	r3, [pc, #204]	; (800ce70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cda4:	695b      	ldr	r3, [r3, #20]
 800cda6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cdaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cdae:	d158      	bne.n	800ce62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800cdb0:	2303      	movs	r3, #3
 800cdb2:	e057      	b.n	800ce64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cdb4:	4b2e      	ldr	r3, [pc, #184]	; (800ce70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cdb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cdba:	4a2d      	ldr	r2, [pc, #180]	; (800ce70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cdbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cdc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800cdc4:	e04d      	b.n	800ce62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdcc:	d141      	bne.n	800ce52 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800cdce:	4b28      	ldr	r3, [pc, #160]	; (800ce70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cdd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cdda:	d131      	bne.n	800ce40 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800cddc:	4b24      	ldr	r3, [pc, #144]	; (800ce70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cdde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cde2:	4a23      	ldr	r2, [pc, #140]	; (800ce70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cde4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cde8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800cdec:	4b20      	ldr	r3, [pc, #128]	; (800ce70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800cdf4:	4a1e      	ldr	r2, [pc, #120]	; (800ce70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800cdf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cdfa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800cdfc:	4b1d      	ldr	r3, [pc, #116]	; (800ce74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	2232      	movs	r2, #50	; 0x32
 800ce02:	fb02 f303 	mul.w	r3, r2, r3
 800ce06:	4a1c      	ldr	r2, [pc, #112]	; (800ce78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800ce08:	fba2 2303 	umull	r2, r3, r2, r3
 800ce0c:	0c9b      	lsrs	r3, r3, #18
 800ce0e:	3301      	adds	r3, #1
 800ce10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ce12:	e002      	b.n	800ce1a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	3b01      	subs	r3, #1
 800ce18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ce1a:	4b15      	ldr	r3, [pc, #84]	; (800ce70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce1c:	695b      	ldr	r3, [r3, #20]
 800ce1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce26:	d102      	bne.n	800ce2e <HAL_PWREx_ControlVoltageScaling+0xfa>
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d1f2      	bne.n	800ce14 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ce2e:	4b10      	ldr	r3, [pc, #64]	; (800ce70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce30:	695b      	ldr	r3, [r3, #20]
 800ce32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce3a:	d112      	bne.n	800ce62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800ce3c:	2303      	movs	r3, #3
 800ce3e:	e011      	b.n	800ce64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ce40:	4b0b      	ldr	r3, [pc, #44]	; (800ce70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ce46:	4a0a      	ldr	r2, [pc, #40]	; (800ce70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800ce50:	e007      	b.n	800ce62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ce52:	4b07      	ldr	r3, [pc, #28]	; (800ce70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ce5a:	4a05      	ldr	r2, [pc, #20]	; (800ce70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ce5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ce60:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800ce62:	2300      	movs	r3, #0
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3714      	adds	r7, #20
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6e:	4770      	bx	lr
 800ce70:	40007000 	.word	0x40007000
 800ce74:	20000000 	.word	0x20000000
 800ce78:	431bde83 	.word	0x431bde83

0800ce7c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800ce80:	4b05      	ldr	r3, [pc, #20]	; (800ce98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800ce82:	689b      	ldr	r3, [r3, #8]
 800ce84:	4a04      	ldr	r2, [pc, #16]	; (800ce98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800ce86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ce8a:	6093      	str	r3, [r2, #8]
}
 800ce8c:	bf00      	nop
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce94:	4770      	bx	lr
 800ce96:	bf00      	nop
 800ce98:	40007000 	.word	0x40007000

0800ce9c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b082      	sub	sp, #8
 800cea0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800cea2:	f7fd fe49 	bl	800ab38 <HAL_GetTick>
 800cea6:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800cea8:	4b39      	ldr	r3, [pc, #228]	; (800cf90 <HAL_RCC_DeInit+0xf4>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	4a38      	ldr	r2, [pc, #224]	; (800cf90 <HAL_RCC_DeInit+0xf4>)
 800ceae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ceb2:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ceb4:	e008      	b.n	800cec8 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ceb6:	f7fd fe3f 	bl	800ab38 <HAL_GetTick>
 800ceba:	4602      	mov	r2, r0
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	1ad3      	subs	r3, r2, r3
 800cec0:	2b02      	cmp	r3, #2
 800cec2:	d901      	bls.n	800cec8 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800cec4:	2303      	movs	r3, #3
 800cec6:	e05f      	b.n	800cf88 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cec8:	4b31      	ldr	r3, [pc, #196]	; (800cf90 <HAL_RCC_DeInit+0xf4>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d0f0      	beq.n	800ceb6 <HAL_RCC_DeInit+0x1a>
    }
  }

 /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->ICSCR, RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos);
 800ced4:	4b2e      	ldr	r3, [pc, #184]	; (800cf90 <HAL_RCC_DeInit+0xf4>)
 800ced6:	685b      	ldr	r3, [r3, #4]
 800ced8:	4a2d      	ldr	r2, [pc, #180]	; (800cf90 <HAL_RCC_DeInit+0xf4>)
 800ceda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cede:	6053      	str	r3, [r2, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800cee0:	f7fd fe2a 	bl	800ab38 <HAL_GetTick>
 800cee4:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000001u;
 800cee6:	4b2a      	ldr	r3, [pc, #168]	; (800cf90 <HAL_RCC_DeInit+0xf4>)
 800cee8:	2201      	movs	r2, #1
 800ceea:	609a      	str	r2, [r3, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800ceec:	e00a      	b.n	800cf04 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ceee:	f7fd fe23 	bl	800ab38 <HAL_GetTick>
 800cef2:	4602      	mov	r2, r0
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	1ad3      	subs	r3, r2, r3
 800cef8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cefc:	4293      	cmp	r3, r2
 800cefe:	d901      	bls.n	800cf04 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 800cf00:	2303      	movs	r3, #3
 800cf02:	e041      	b.n	800cf88 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800cf04:	4b22      	ldr	r3, [pc, #136]	; (800cf90 <HAL_RCC_DeInit+0xf4>)
 800cf06:	689b      	ldr	r3, [r3, #8]
 800cf08:	f003 030c 	and.w	r3, r3, #12
 800cf0c:	2b04      	cmp	r3, #4
 800cf0e:	d1ee      	bne.n	800ceee <HAL_RCC_DeInit+0x52>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800cf10:	4b20      	ldr	r3, [pc, #128]	; (800cf94 <HAL_RCC_DeInit+0xf8>)
 800cf12:	4a21      	ldr	r2, [pc, #132]	; (800cf98 <HAL_RCC_DeInit+0xfc>)
 800cf14:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800cf16:	4b21      	ldr	r3, [pc, #132]	; (800cf9c <HAL_RCC_DeInit+0x100>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	f7fd fdc0 	bl	800aaa0 <HAL_InitTick>
 800cf20:	4603      	mov	r3, r0
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d001      	beq.n	800cf2a <HAL_RCC_DeInit+0x8e>
  {
    return HAL_ERROR;
 800cf26:	2301      	movs	r3, #1
 800cf28:	e02e      	b.n	800cf88 <HAL_RCC_DeInit+0xec>
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 800cf2a:	4b19      	ldr	r3, [pc, #100]	; (800cf90 <HAL_RCC_DeInit+0xf4>)
 800cf2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cf30:	601a      	str	r2, [r3, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 800cf32:	4b17      	ldr	r3, [pc, #92]	; (800cf90 <HAL_RCC_DeInit+0xf4>)
 800cf34:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cf38:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800cf3a:	f7fd fdfd 	bl	800ab38 <HAL_GetTick>
 800cf3e:	6078      	str	r0, [r7, #4]

  /* Wait till PLL is OFF */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cf40:	e008      	b.n	800cf54 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cf42:	f7fd fdf9 	bl	800ab38 <HAL_GetTick>
 800cf46:	4602      	mov	r2, r0
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	1ad3      	subs	r3, r2, r3
 800cf4c:	2b02      	cmp	r3, #2
 800cf4e:	d901      	bls.n	800cf54 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 800cf50:	2303      	movs	r3, #3
 800cf52:	e019      	b.n	800cf88 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cf54:	4b0e      	ldr	r3, [pc, #56]	; (800cf90 <HAL_RCC_DeInit+0xf4>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d1f0      	bne.n	800cf42 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 800cf60:	4b0b      	ldr	r3, [pc, #44]	; (800cf90 <HAL_RCC_DeInit+0xf4>)
 800cf62:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cf66:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 800cf68:	4b09      	ldr	r3, [pc, #36]	; (800cf90 <HAL_RCC_DeInit+0xf4>)
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 800cf6e:	4b08      	ldr	r3, [pc, #32]	; (800cf90 <HAL_RCC_DeInit+0xf4>)
 800cf70:	f04f 32ff 	mov.w	r2, #4294967295
 800cf74:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800cf76:	4b06      	ldr	r3, [pc, #24]	; (800cf90 <HAL_RCC_DeInit+0xf4>)
 800cf78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cf7c:	4a04      	ldr	r2, [pc, #16]	; (800cf90 <HAL_RCC_DeInit+0xf4>)
 800cf7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cf82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 800cf86:	2300      	movs	r3, #0
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3708      	adds	r7, #8
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	40021000 	.word	0x40021000
 800cf94:	20000000 	.word	0x20000000
 800cf98:	00f42400 	.word	0x00f42400
 800cf9c:	20000010 	.word	0x20000010

0800cfa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b088      	sub	sp, #32
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d101      	bne.n	800cfb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cfae:	2301      	movs	r3, #1
 800cfb0:	e2fe      	b.n	800d5b0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f003 0301 	and.w	r3, r3, #1
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d075      	beq.n	800d0aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cfbe:	4b97      	ldr	r3, [pc, #604]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800cfc0:	689b      	ldr	r3, [r3, #8]
 800cfc2:	f003 030c 	and.w	r3, r3, #12
 800cfc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cfc8:	4b94      	ldr	r3, [pc, #592]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800cfca:	68db      	ldr	r3, [r3, #12]
 800cfcc:	f003 0303 	and.w	r3, r3, #3
 800cfd0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800cfd2:	69bb      	ldr	r3, [r7, #24]
 800cfd4:	2b0c      	cmp	r3, #12
 800cfd6:	d102      	bne.n	800cfde <HAL_RCC_OscConfig+0x3e>
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	2b03      	cmp	r3, #3
 800cfdc:	d002      	beq.n	800cfe4 <HAL_RCC_OscConfig+0x44>
 800cfde:	69bb      	ldr	r3, [r7, #24]
 800cfe0:	2b08      	cmp	r3, #8
 800cfe2:	d10b      	bne.n	800cffc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cfe4:	4b8d      	ldr	r3, [pc, #564]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d05b      	beq.n	800d0a8 <HAL_RCC_OscConfig+0x108>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	685b      	ldr	r3, [r3, #4]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d157      	bne.n	800d0a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800cff8:	2301      	movs	r3, #1
 800cffa:	e2d9      	b.n	800d5b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	685b      	ldr	r3, [r3, #4]
 800d000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d004:	d106      	bne.n	800d014 <HAL_RCC_OscConfig+0x74>
 800d006:	4b85      	ldr	r3, [pc, #532]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	4a84      	ldr	r2, [pc, #528]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800d00c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d010:	6013      	str	r3, [r2, #0]
 800d012:	e01d      	b.n	800d050 <HAL_RCC_OscConfig+0xb0>
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d01c:	d10c      	bne.n	800d038 <HAL_RCC_OscConfig+0x98>
 800d01e:	4b7f      	ldr	r3, [pc, #508]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	4a7e      	ldr	r2, [pc, #504]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800d024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d028:	6013      	str	r3, [r2, #0]
 800d02a:	4b7c      	ldr	r3, [pc, #496]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	4a7b      	ldr	r2, [pc, #492]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800d030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d034:	6013      	str	r3, [r2, #0]
 800d036:	e00b      	b.n	800d050 <HAL_RCC_OscConfig+0xb0>
 800d038:	4b78      	ldr	r3, [pc, #480]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	4a77      	ldr	r2, [pc, #476]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800d03e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d042:	6013      	str	r3, [r2, #0]
 800d044:	4b75      	ldr	r3, [pc, #468]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4a74      	ldr	r2, [pc, #464]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800d04a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d04e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	685b      	ldr	r3, [r3, #4]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d013      	beq.n	800d080 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d058:	f7fd fd6e 	bl	800ab38 <HAL_GetTick>
 800d05c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d05e:	e008      	b.n	800d072 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d060:	f7fd fd6a 	bl	800ab38 <HAL_GetTick>
 800d064:	4602      	mov	r2, r0
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	1ad3      	subs	r3, r2, r3
 800d06a:	2b64      	cmp	r3, #100	; 0x64
 800d06c:	d901      	bls.n	800d072 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d06e:	2303      	movs	r3, #3
 800d070:	e29e      	b.n	800d5b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d072:	4b6a      	ldr	r3, [pc, #424]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d0f0      	beq.n	800d060 <HAL_RCC_OscConfig+0xc0>
 800d07e:	e014      	b.n	800d0aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d080:	f7fd fd5a 	bl	800ab38 <HAL_GetTick>
 800d084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d086:	e008      	b.n	800d09a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d088:	f7fd fd56 	bl	800ab38 <HAL_GetTick>
 800d08c:	4602      	mov	r2, r0
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	1ad3      	subs	r3, r2, r3
 800d092:	2b64      	cmp	r3, #100	; 0x64
 800d094:	d901      	bls.n	800d09a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d096:	2303      	movs	r3, #3
 800d098:	e28a      	b.n	800d5b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d09a:	4b60      	ldr	r3, [pc, #384]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d1f0      	bne.n	800d088 <HAL_RCC_OscConfig+0xe8>
 800d0a6:	e000      	b.n	800d0aa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d0a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f003 0302 	and.w	r3, r3, #2
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d075      	beq.n	800d1a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d0b6:	4b59      	ldr	r3, [pc, #356]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800d0b8:	689b      	ldr	r3, [r3, #8]
 800d0ba:	f003 030c 	and.w	r3, r3, #12
 800d0be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d0c0:	4b56      	ldr	r3, [pc, #344]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800d0c2:	68db      	ldr	r3, [r3, #12]
 800d0c4:	f003 0303 	and.w	r3, r3, #3
 800d0c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800d0ca:	69bb      	ldr	r3, [r7, #24]
 800d0cc:	2b0c      	cmp	r3, #12
 800d0ce:	d102      	bne.n	800d0d6 <HAL_RCC_OscConfig+0x136>
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	2b02      	cmp	r3, #2
 800d0d4:	d002      	beq.n	800d0dc <HAL_RCC_OscConfig+0x13c>
 800d0d6:	69bb      	ldr	r3, [r7, #24]
 800d0d8:	2b04      	cmp	r3, #4
 800d0da:	d11f      	bne.n	800d11c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d0dc:	4b4f      	ldr	r3, [pc, #316]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d005      	beq.n	800d0f4 <HAL_RCC_OscConfig+0x154>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	68db      	ldr	r3, [r3, #12]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d101      	bne.n	800d0f4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	e25d      	b.n	800d5b0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d0f4:	4b49      	ldr	r3, [pc, #292]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	691b      	ldr	r3, [r3, #16]
 800d100:	061b      	lsls	r3, r3, #24
 800d102:	4946      	ldr	r1, [pc, #280]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800d104:	4313      	orrs	r3, r2
 800d106:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800d108:	4b45      	ldr	r3, [pc, #276]	; (800d220 <HAL_RCC_OscConfig+0x280>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	4618      	mov	r0, r3
 800d10e:	f7fd fcc7 	bl	800aaa0 <HAL_InitTick>
 800d112:	4603      	mov	r3, r0
 800d114:	2b00      	cmp	r3, #0
 800d116:	d043      	beq.n	800d1a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800d118:	2301      	movs	r3, #1
 800d11a:	e249      	b.n	800d5b0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	68db      	ldr	r3, [r3, #12]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d023      	beq.n	800d16c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d124:	4b3d      	ldr	r3, [pc, #244]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	4a3c      	ldr	r2, [pc, #240]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800d12a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d12e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d130:	f7fd fd02 	bl	800ab38 <HAL_GetTick>
 800d134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d136:	e008      	b.n	800d14a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d138:	f7fd fcfe 	bl	800ab38 <HAL_GetTick>
 800d13c:	4602      	mov	r2, r0
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	1ad3      	subs	r3, r2, r3
 800d142:	2b02      	cmp	r3, #2
 800d144:	d901      	bls.n	800d14a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800d146:	2303      	movs	r3, #3
 800d148:	e232      	b.n	800d5b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d14a:	4b34      	ldr	r3, [pc, #208]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d152:	2b00      	cmp	r3, #0
 800d154:	d0f0      	beq.n	800d138 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d156:	4b31      	ldr	r3, [pc, #196]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800d158:	685b      	ldr	r3, [r3, #4]
 800d15a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	691b      	ldr	r3, [r3, #16]
 800d162:	061b      	lsls	r3, r3, #24
 800d164:	492d      	ldr	r1, [pc, #180]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800d166:	4313      	orrs	r3, r2
 800d168:	604b      	str	r3, [r1, #4]
 800d16a:	e01a      	b.n	800d1a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d16c:	4b2b      	ldr	r3, [pc, #172]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	4a2a      	ldr	r2, [pc, #168]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800d172:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d178:	f7fd fcde 	bl	800ab38 <HAL_GetTick>
 800d17c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d17e:	e008      	b.n	800d192 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d180:	f7fd fcda 	bl	800ab38 <HAL_GetTick>
 800d184:	4602      	mov	r2, r0
 800d186:	693b      	ldr	r3, [r7, #16]
 800d188:	1ad3      	subs	r3, r2, r3
 800d18a:	2b02      	cmp	r3, #2
 800d18c:	d901      	bls.n	800d192 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800d18e:	2303      	movs	r3, #3
 800d190:	e20e      	b.n	800d5b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d192:	4b22      	ldr	r3, [pc, #136]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d1f0      	bne.n	800d180 <HAL_RCC_OscConfig+0x1e0>
 800d19e:	e000      	b.n	800d1a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d1a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f003 0308 	and.w	r3, r3, #8
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d041      	beq.n	800d232 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	695b      	ldr	r3, [r3, #20]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d01c      	beq.n	800d1f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d1b6:	4b19      	ldr	r3, [pc, #100]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800d1b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d1bc:	4a17      	ldr	r2, [pc, #92]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800d1be:	f043 0301 	orr.w	r3, r3, #1
 800d1c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d1c6:	f7fd fcb7 	bl	800ab38 <HAL_GetTick>
 800d1ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d1cc:	e008      	b.n	800d1e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d1ce:	f7fd fcb3 	bl	800ab38 <HAL_GetTick>
 800d1d2:	4602      	mov	r2, r0
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	1ad3      	subs	r3, r2, r3
 800d1d8:	2b02      	cmp	r3, #2
 800d1da:	d901      	bls.n	800d1e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d1dc:	2303      	movs	r3, #3
 800d1de:	e1e7      	b.n	800d5b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d1e0:	4b0e      	ldr	r3, [pc, #56]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800d1e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d1e6:	f003 0302 	and.w	r3, r3, #2
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d0ef      	beq.n	800d1ce <HAL_RCC_OscConfig+0x22e>
 800d1ee:	e020      	b.n	800d232 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d1f0:	4b0a      	ldr	r3, [pc, #40]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800d1f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d1f6:	4a09      	ldr	r2, [pc, #36]	; (800d21c <HAL_RCC_OscConfig+0x27c>)
 800d1f8:	f023 0301 	bic.w	r3, r3, #1
 800d1fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d200:	f7fd fc9a 	bl	800ab38 <HAL_GetTick>
 800d204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d206:	e00d      	b.n	800d224 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d208:	f7fd fc96 	bl	800ab38 <HAL_GetTick>
 800d20c:	4602      	mov	r2, r0
 800d20e:	693b      	ldr	r3, [r7, #16]
 800d210:	1ad3      	subs	r3, r2, r3
 800d212:	2b02      	cmp	r3, #2
 800d214:	d906      	bls.n	800d224 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d216:	2303      	movs	r3, #3
 800d218:	e1ca      	b.n	800d5b0 <HAL_RCC_OscConfig+0x610>
 800d21a:	bf00      	nop
 800d21c:	40021000 	.word	0x40021000
 800d220:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d224:	4b8c      	ldr	r3, [pc, #560]	; (800d458 <HAL_RCC_OscConfig+0x4b8>)
 800d226:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d22a:	f003 0302 	and.w	r3, r3, #2
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d1ea      	bne.n	800d208 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f003 0304 	and.w	r3, r3, #4
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	f000 80a6 	beq.w	800d38c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d240:	2300      	movs	r3, #0
 800d242:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800d244:	4b84      	ldr	r3, [pc, #528]	; (800d458 <HAL_RCC_OscConfig+0x4b8>)
 800d246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d101      	bne.n	800d254 <HAL_RCC_OscConfig+0x2b4>
 800d250:	2301      	movs	r3, #1
 800d252:	e000      	b.n	800d256 <HAL_RCC_OscConfig+0x2b6>
 800d254:	2300      	movs	r3, #0
 800d256:	2b00      	cmp	r3, #0
 800d258:	d00d      	beq.n	800d276 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d25a:	4b7f      	ldr	r3, [pc, #508]	; (800d458 <HAL_RCC_OscConfig+0x4b8>)
 800d25c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d25e:	4a7e      	ldr	r2, [pc, #504]	; (800d458 <HAL_RCC_OscConfig+0x4b8>)
 800d260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d264:	6593      	str	r3, [r2, #88]	; 0x58
 800d266:	4b7c      	ldr	r3, [pc, #496]	; (800d458 <HAL_RCC_OscConfig+0x4b8>)
 800d268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d26a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d26e:	60fb      	str	r3, [r7, #12]
 800d270:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800d272:	2301      	movs	r3, #1
 800d274:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d276:	4b79      	ldr	r3, [pc, #484]	; (800d45c <HAL_RCC_OscConfig+0x4bc>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d118      	bne.n	800d2b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d282:	4b76      	ldr	r3, [pc, #472]	; (800d45c <HAL_RCC_OscConfig+0x4bc>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	4a75      	ldr	r2, [pc, #468]	; (800d45c <HAL_RCC_OscConfig+0x4bc>)
 800d288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d28c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d28e:	f7fd fc53 	bl	800ab38 <HAL_GetTick>
 800d292:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d294:	e008      	b.n	800d2a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d296:	f7fd fc4f 	bl	800ab38 <HAL_GetTick>
 800d29a:	4602      	mov	r2, r0
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	1ad3      	subs	r3, r2, r3
 800d2a0:	2b02      	cmp	r3, #2
 800d2a2:	d901      	bls.n	800d2a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800d2a4:	2303      	movs	r3, #3
 800d2a6:	e183      	b.n	800d5b0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d2a8:	4b6c      	ldr	r3, [pc, #432]	; (800d45c <HAL_RCC_OscConfig+0x4bc>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d0f0      	beq.n	800d296 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	689b      	ldr	r3, [r3, #8]
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	d108      	bne.n	800d2ce <HAL_RCC_OscConfig+0x32e>
 800d2bc:	4b66      	ldr	r3, [pc, #408]	; (800d458 <HAL_RCC_OscConfig+0x4b8>)
 800d2be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2c2:	4a65      	ldr	r2, [pc, #404]	; (800d458 <HAL_RCC_OscConfig+0x4b8>)
 800d2c4:	f043 0301 	orr.w	r3, r3, #1
 800d2c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d2cc:	e024      	b.n	800d318 <HAL_RCC_OscConfig+0x378>
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	689b      	ldr	r3, [r3, #8]
 800d2d2:	2b05      	cmp	r3, #5
 800d2d4:	d110      	bne.n	800d2f8 <HAL_RCC_OscConfig+0x358>
 800d2d6:	4b60      	ldr	r3, [pc, #384]	; (800d458 <HAL_RCC_OscConfig+0x4b8>)
 800d2d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2dc:	4a5e      	ldr	r2, [pc, #376]	; (800d458 <HAL_RCC_OscConfig+0x4b8>)
 800d2de:	f043 0304 	orr.w	r3, r3, #4
 800d2e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d2e6:	4b5c      	ldr	r3, [pc, #368]	; (800d458 <HAL_RCC_OscConfig+0x4b8>)
 800d2e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2ec:	4a5a      	ldr	r2, [pc, #360]	; (800d458 <HAL_RCC_OscConfig+0x4b8>)
 800d2ee:	f043 0301 	orr.w	r3, r3, #1
 800d2f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d2f6:	e00f      	b.n	800d318 <HAL_RCC_OscConfig+0x378>
 800d2f8:	4b57      	ldr	r3, [pc, #348]	; (800d458 <HAL_RCC_OscConfig+0x4b8>)
 800d2fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2fe:	4a56      	ldr	r2, [pc, #344]	; (800d458 <HAL_RCC_OscConfig+0x4b8>)
 800d300:	f023 0301 	bic.w	r3, r3, #1
 800d304:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800d308:	4b53      	ldr	r3, [pc, #332]	; (800d458 <HAL_RCC_OscConfig+0x4b8>)
 800d30a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d30e:	4a52      	ldr	r2, [pc, #328]	; (800d458 <HAL_RCC_OscConfig+0x4b8>)
 800d310:	f023 0304 	bic.w	r3, r3, #4
 800d314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	689b      	ldr	r3, [r3, #8]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d016      	beq.n	800d34e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d320:	f7fd fc0a 	bl	800ab38 <HAL_GetTick>
 800d324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d326:	e00a      	b.n	800d33e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d328:	f7fd fc06 	bl	800ab38 <HAL_GetTick>
 800d32c:	4602      	mov	r2, r0
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	1ad3      	subs	r3, r2, r3
 800d332:	f241 3288 	movw	r2, #5000	; 0x1388
 800d336:	4293      	cmp	r3, r2
 800d338:	d901      	bls.n	800d33e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800d33a:	2303      	movs	r3, #3
 800d33c:	e138      	b.n	800d5b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d33e:	4b46      	ldr	r3, [pc, #280]	; (800d458 <HAL_RCC_OscConfig+0x4b8>)
 800d340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d344:	f003 0302 	and.w	r3, r3, #2
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d0ed      	beq.n	800d328 <HAL_RCC_OscConfig+0x388>
 800d34c:	e015      	b.n	800d37a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d34e:	f7fd fbf3 	bl	800ab38 <HAL_GetTick>
 800d352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d354:	e00a      	b.n	800d36c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d356:	f7fd fbef 	bl	800ab38 <HAL_GetTick>
 800d35a:	4602      	mov	r2, r0
 800d35c:	693b      	ldr	r3, [r7, #16]
 800d35e:	1ad3      	subs	r3, r2, r3
 800d360:	f241 3288 	movw	r2, #5000	; 0x1388
 800d364:	4293      	cmp	r3, r2
 800d366:	d901      	bls.n	800d36c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800d368:	2303      	movs	r3, #3
 800d36a:	e121      	b.n	800d5b0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d36c:	4b3a      	ldr	r3, [pc, #232]	; (800d458 <HAL_RCC_OscConfig+0x4b8>)
 800d36e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d372:	f003 0302 	and.w	r3, r3, #2
 800d376:	2b00      	cmp	r3, #0
 800d378:	d1ed      	bne.n	800d356 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d37a:	7ffb      	ldrb	r3, [r7, #31]
 800d37c:	2b01      	cmp	r3, #1
 800d37e:	d105      	bne.n	800d38c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d380:	4b35      	ldr	r3, [pc, #212]	; (800d458 <HAL_RCC_OscConfig+0x4b8>)
 800d382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d384:	4a34      	ldr	r2, [pc, #208]	; (800d458 <HAL_RCC_OscConfig+0x4b8>)
 800d386:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d38a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f003 0320 	and.w	r3, r3, #32
 800d394:	2b00      	cmp	r3, #0
 800d396:	d03c      	beq.n	800d412 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	699b      	ldr	r3, [r3, #24]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d01c      	beq.n	800d3da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d3a0:	4b2d      	ldr	r3, [pc, #180]	; (800d458 <HAL_RCC_OscConfig+0x4b8>)
 800d3a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d3a6:	4a2c      	ldr	r2, [pc, #176]	; (800d458 <HAL_RCC_OscConfig+0x4b8>)
 800d3a8:	f043 0301 	orr.w	r3, r3, #1
 800d3ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d3b0:	f7fd fbc2 	bl	800ab38 <HAL_GetTick>
 800d3b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d3b6:	e008      	b.n	800d3ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d3b8:	f7fd fbbe 	bl	800ab38 <HAL_GetTick>
 800d3bc:	4602      	mov	r2, r0
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	1ad3      	subs	r3, r2, r3
 800d3c2:	2b02      	cmp	r3, #2
 800d3c4:	d901      	bls.n	800d3ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800d3c6:	2303      	movs	r3, #3
 800d3c8:	e0f2      	b.n	800d5b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d3ca:	4b23      	ldr	r3, [pc, #140]	; (800d458 <HAL_RCC_OscConfig+0x4b8>)
 800d3cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d3d0:	f003 0302 	and.w	r3, r3, #2
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d0ef      	beq.n	800d3b8 <HAL_RCC_OscConfig+0x418>
 800d3d8:	e01b      	b.n	800d412 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d3da:	4b1f      	ldr	r3, [pc, #124]	; (800d458 <HAL_RCC_OscConfig+0x4b8>)
 800d3dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d3e0:	4a1d      	ldr	r2, [pc, #116]	; (800d458 <HAL_RCC_OscConfig+0x4b8>)
 800d3e2:	f023 0301 	bic.w	r3, r3, #1
 800d3e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d3ea:	f7fd fba5 	bl	800ab38 <HAL_GetTick>
 800d3ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d3f0:	e008      	b.n	800d404 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d3f2:	f7fd fba1 	bl	800ab38 <HAL_GetTick>
 800d3f6:	4602      	mov	r2, r0
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	1ad3      	subs	r3, r2, r3
 800d3fc:	2b02      	cmp	r3, #2
 800d3fe:	d901      	bls.n	800d404 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800d400:	2303      	movs	r3, #3
 800d402:	e0d5      	b.n	800d5b0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d404:	4b14      	ldr	r3, [pc, #80]	; (800d458 <HAL_RCC_OscConfig+0x4b8>)
 800d406:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d40a:	f003 0302 	and.w	r3, r3, #2
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d1ef      	bne.n	800d3f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	69db      	ldr	r3, [r3, #28]
 800d416:	2b00      	cmp	r3, #0
 800d418:	f000 80c9 	beq.w	800d5ae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d41c:	4b0e      	ldr	r3, [pc, #56]	; (800d458 <HAL_RCC_OscConfig+0x4b8>)
 800d41e:	689b      	ldr	r3, [r3, #8]
 800d420:	f003 030c 	and.w	r3, r3, #12
 800d424:	2b0c      	cmp	r3, #12
 800d426:	f000 8083 	beq.w	800d530 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	69db      	ldr	r3, [r3, #28]
 800d42e:	2b02      	cmp	r3, #2
 800d430:	d15e      	bne.n	800d4f0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d432:	4b09      	ldr	r3, [pc, #36]	; (800d458 <HAL_RCC_OscConfig+0x4b8>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	4a08      	ldr	r2, [pc, #32]	; (800d458 <HAL_RCC_OscConfig+0x4b8>)
 800d438:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d43c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d43e:	f7fd fb7b 	bl	800ab38 <HAL_GetTick>
 800d442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d444:	e00c      	b.n	800d460 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d446:	f7fd fb77 	bl	800ab38 <HAL_GetTick>
 800d44a:	4602      	mov	r2, r0
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	1ad3      	subs	r3, r2, r3
 800d450:	2b02      	cmp	r3, #2
 800d452:	d905      	bls.n	800d460 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800d454:	2303      	movs	r3, #3
 800d456:	e0ab      	b.n	800d5b0 <HAL_RCC_OscConfig+0x610>
 800d458:	40021000 	.word	0x40021000
 800d45c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d460:	4b55      	ldr	r3, [pc, #340]	; (800d5b8 <HAL_RCC_OscConfig+0x618>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d1ec      	bne.n	800d446 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d46c:	4b52      	ldr	r3, [pc, #328]	; (800d5b8 <HAL_RCC_OscConfig+0x618>)
 800d46e:	68da      	ldr	r2, [r3, #12]
 800d470:	4b52      	ldr	r3, [pc, #328]	; (800d5bc <HAL_RCC_OscConfig+0x61c>)
 800d472:	4013      	ands	r3, r2
 800d474:	687a      	ldr	r2, [r7, #4]
 800d476:	6a11      	ldr	r1, [r2, #32]
 800d478:	687a      	ldr	r2, [r7, #4]
 800d47a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d47c:	3a01      	subs	r2, #1
 800d47e:	0112      	lsls	r2, r2, #4
 800d480:	4311      	orrs	r1, r2
 800d482:	687a      	ldr	r2, [r7, #4]
 800d484:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800d486:	0212      	lsls	r2, r2, #8
 800d488:	4311      	orrs	r1, r2
 800d48a:	687a      	ldr	r2, [r7, #4]
 800d48c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d48e:	0852      	lsrs	r2, r2, #1
 800d490:	3a01      	subs	r2, #1
 800d492:	0552      	lsls	r2, r2, #21
 800d494:	4311      	orrs	r1, r2
 800d496:	687a      	ldr	r2, [r7, #4]
 800d498:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d49a:	0852      	lsrs	r2, r2, #1
 800d49c:	3a01      	subs	r2, #1
 800d49e:	0652      	lsls	r2, r2, #25
 800d4a0:	4311      	orrs	r1, r2
 800d4a2:	687a      	ldr	r2, [r7, #4]
 800d4a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d4a6:	06d2      	lsls	r2, r2, #27
 800d4a8:	430a      	orrs	r2, r1
 800d4aa:	4943      	ldr	r1, [pc, #268]	; (800d5b8 <HAL_RCC_OscConfig+0x618>)
 800d4ac:	4313      	orrs	r3, r2
 800d4ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d4b0:	4b41      	ldr	r3, [pc, #260]	; (800d5b8 <HAL_RCC_OscConfig+0x618>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	4a40      	ldr	r2, [pc, #256]	; (800d5b8 <HAL_RCC_OscConfig+0x618>)
 800d4b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d4ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d4bc:	4b3e      	ldr	r3, [pc, #248]	; (800d5b8 <HAL_RCC_OscConfig+0x618>)
 800d4be:	68db      	ldr	r3, [r3, #12]
 800d4c0:	4a3d      	ldr	r2, [pc, #244]	; (800d5b8 <HAL_RCC_OscConfig+0x618>)
 800d4c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d4c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d4c8:	f7fd fb36 	bl	800ab38 <HAL_GetTick>
 800d4cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d4ce:	e008      	b.n	800d4e2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d4d0:	f7fd fb32 	bl	800ab38 <HAL_GetTick>
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	1ad3      	subs	r3, r2, r3
 800d4da:	2b02      	cmp	r3, #2
 800d4dc:	d901      	bls.n	800d4e2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800d4de:	2303      	movs	r3, #3
 800d4e0:	e066      	b.n	800d5b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d4e2:	4b35      	ldr	r3, [pc, #212]	; (800d5b8 <HAL_RCC_OscConfig+0x618>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d0f0      	beq.n	800d4d0 <HAL_RCC_OscConfig+0x530>
 800d4ee:	e05e      	b.n	800d5ae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d4f0:	4b31      	ldr	r3, [pc, #196]	; (800d5b8 <HAL_RCC_OscConfig+0x618>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	4a30      	ldr	r2, [pc, #192]	; (800d5b8 <HAL_RCC_OscConfig+0x618>)
 800d4f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d4fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d4fc:	f7fd fb1c 	bl	800ab38 <HAL_GetTick>
 800d500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d502:	e008      	b.n	800d516 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d504:	f7fd fb18 	bl	800ab38 <HAL_GetTick>
 800d508:	4602      	mov	r2, r0
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	1ad3      	subs	r3, r2, r3
 800d50e:	2b02      	cmp	r3, #2
 800d510:	d901      	bls.n	800d516 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800d512:	2303      	movs	r3, #3
 800d514:	e04c      	b.n	800d5b0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d516:	4b28      	ldr	r3, [pc, #160]	; (800d5b8 <HAL_RCC_OscConfig+0x618>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d1f0      	bne.n	800d504 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800d522:	4b25      	ldr	r3, [pc, #148]	; (800d5b8 <HAL_RCC_OscConfig+0x618>)
 800d524:	68da      	ldr	r2, [r3, #12]
 800d526:	4924      	ldr	r1, [pc, #144]	; (800d5b8 <HAL_RCC_OscConfig+0x618>)
 800d528:	4b25      	ldr	r3, [pc, #148]	; (800d5c0 <HAL_RCC_OscConfig+0x620>)
 800d52a:	4013      	ands	r3, r2
 800d52c:	60cb      	str	r3, [r1, #12]
 800d52e:	e03e      	b.n	800d5ae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	69db      	ldr	r3, [r3, #28]
 800d534:	2b01      	cmp	r3, #1
 800d536:	d101      	bne.n	800d53c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800d538:	2301      	movs	r3, #1
 800d53a:	e039      	b.n	800d5b0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800d53c:	4b1e      	ldr	r3, [pc, #120]	; (800d5b8 <HAL_RCC_OscConfig+0x618>)
 800d53e:	68db      	ldr	r3, [r3, #12]
 800d540:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	f003 0203 	and.w	r2, r3, #3
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6a1b      	ldr	r3, [r3, #32]
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d12c      	bne.n	800d5aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d55a:	3b01      	subs	r3, #1
 800d55c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d55e:	429a      	cmp	r2, r3
 800d560:	d123      	bne.n	800d5aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d56c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d56e:	429a      	cmp	r2, r3
 800d570:	d11b      	bne.n	800d5aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d57c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d57e:	429a      	cmp	r2, r3
 800d580:	d113      	bne.n	800d5aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d58c:	085b      	lsrs	r3, r3, #1
 800d58e:	3b01      	subs	r3, #1
 800d590:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d592:	429a      	cmp	r2, r3
 800d594:	d109      	bne.n	800d5aa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5a0:	085b      	lsrs	r3, r3, #1
 800d5a2:	3b01      	subs	r3, #1
 800d5a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d001      	beq.n	800d5ae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	e000      	b.n	800d5b0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800d5ae:	2300      	movs	r3, #0
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	3720      	adds	r7, #32
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}
 800d5b8:	40021000 	.word	0x40021000
 800d5bc:	019f800c 	.word	0x019f800c
 800d5c0:	feeefffc 	.word	0xfeeefffc

0800d5c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b086      	sub	sp, #24
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d101      	bne.n	800d5dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	e11e      	b.n	800d81a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d5dc:	4b91      	ldr	r3, [pc, #580]	; (800d824 <HAL_RCC_ClockConfig+0x260>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f003 030f 	and.w	r3, r3, #15
 800d5e4:	683a      	ldr	r2, [r7, #0]
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d910      	bls.n	800d60c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d5ea:	4b8e      	ldr	r3, [pc, #568]	; (800d824 <HAL_RCC_ClockConfig+0x260>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f023 020f 	bic.w	r2, r3, #15
 800d5f2:	498c      	ldr	r1, [pc, #560]	; (800d824 <HAL_RCC_ClockConfig+0x260>)
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	4313      	orrs	r3, r2
 800d5f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d5fa:	4b8a      	ldr	r3, [pc, #552]	; (800d824 <HAL_RCC_ClockConfig+0x260>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f003 030f 	and.w	r3, r3, #15
 800d602:	683a      	ldr	r2, [r7, #0]
 800d604:	429a      	cmp	r2, r3
 800d606:	d001      	beq.n	800d60c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d608:	2301      	movs	r3, #1
 800d60a:	e106      	b.n	800d81a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	f003 0301 	and.w	r3, r3, #1
 800d614:	2b00      	cmp	r3, #0
 800d616:	d073      	beq.n	800d700 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	685b      	ldr	r3, [r3, #4]
 800d61c:	2b03      	cmp	r3, #3
 800d61e:	d129      	bne.n	800d674 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d620:	4b81      	ldr	r3, [pc, #516]	; (800d828 <HAL_RCC_ClockConfig+0x264>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d101      	bne.n	800d630 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800d62c:	2301      	movs	r3, #1
 800d62e:	e0f4      	b.n	800d81a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800d630:	f000 f99e 	bl	800d970 <RCC_GetSysClockFreqFromPLLSource>
 800d634:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	4a7c      	ldr	r2, [pc, #496]	; (800d82c <HAL_RCC_ClockConfig+0x268>)
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d93f      	bls.n	800d6be <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d63e:	4b7a      	ldr	r3, [pc, #488]	; (800d828 <HAL_RCC_ClockConfig+0x264>)
 800d640:	689b      	ldr	r3, [r3, #8]
 800d642:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d646:	2b00      	cmp	r3, #0
 800d648:	d009      	beq.n	800d65e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d652:	2b00      	cmp	r3, #0
 800d654:	d033      	beq.n	800d6be <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d12f      	bne.n	800d6be <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d65e:	4b72      	ldr	r3, [pc, #456]	; (800d828 <HAL_RCC_ClockConfig+0x264>)
 800d660:	689b      	ldr	r3, [r3, #8]
 800d662:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d666:	4a70      	ldr	r2, [pc, #448]	; (800d828 <HAL_RCC_ClockConfig+0x264>)
 800d668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d66c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800d66e:	2380      	movs	r3, #128	; 0x80
 800d670:	617b      	str	r3, [r7, #20]
 800d672:	e024      	b.n	800d6be <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	2b02      	cmp	r3, #2
 800d67a:	d107      	bne.n	800d68c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d67c:	4b6a      	ldr	r3, [pc, #424]	; (800d828 <HAL_RCC_ClockConfig+0x264>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d684:	2b00      	cmp	r3, #0
 800d686:	d109      	bne.n	800d69c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d688:	2301      	movs	r3, #1
 800d68a:	e0c6      	b.n	800d81a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d68c:	4b66      	ldr	r3, [pc, #408]	; (800d828 <HAL_RCC_ClockConfig+0x264>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d694:	2b00      	cmp	r3, #0
 800d696:	d101      	bne.n	800d69c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d698:	2301      	movs	r3, #1
 800d69a:	e0be      	b.n	800d81a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800d69c:	f000 f8ce 	bl	800d83c <HAL_RCC_GetSysClockFreq>
 800d6a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800d6a2:	693b      	ldr	r3, [r7, #16]
 800d6a4:	4a61      	ldr	r2, [pc, #388]	; (800d82c <HAL_RCC_ClockConfig+0x268>)
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d909      	bls.n	800d6be <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d6aa:	4b5f      	ldr	r3, [pc, #380]	; (800d828 <HAL_RCC_ClockConfig+0x264>)
 800d6ac:	689b      	ldr	r3, [r3, #8]
 800d6ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d6b2:	4a5d      	ldr	r2, [pc, #372]	; (800d828 <HAL_RCC_ClockConfig+0x264>)
 800d6b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800d6ba:	2380      	movs	r3, #128	; 0x80
 800d6bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d6be:	4b5a      	ldr	r3, [pc, #360]	; (800d828 <HAL_RCC_ClockConfig+0x264>)
 800d6c0:	689b      	ldr	r3, [r3, #8]
 800d6c2:	f023 0203 	bic.w	r2, r3, #3
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	685b      	ldr	r3, [r3, #4]
 800d6ca:	4957      	ldr	r1, [pc, #348]	; (800d828 <HAL_RCC_ClockConfig+0x264>)
 800d6cc:	4313      	orrs	r3, r2
 800d6ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d6d0:	f7fd fa32 	bl	800ab38 <HAL_GetTick>
 800d6d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d6d6:	e00a      	b.n	800d6ee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d6d8:	f7fd fa2e 	bl	800ab38 <HAL_GetTick>
 800d6dc:	4602      	mov	r2, r0
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	1ad3      	subs	r3, r2, r3
 800d6e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6e6:	4293      	cmp	r3, r2
 800d6e8:	d901      	bls.n	800d6ee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800d6ea:	2303      	movs	r3, #3
 800d6ec:	e095      	b.n	800d81a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d6ee:	4b4e      	ldr	r3, [pc, #312]	; (800d828 <HAL_RCC_ClockConfig+0x264>)
 800d6f0:	689b      	ldr	r3, [r3, #8]
 800d6f2:	f003 020c 	and.w	r2, r3, #12
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	685b      	ldr	r3, [r3, #4]
 800d6fa:	009b      	lsls	r3, r3, #2
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	d1eb      	bne.n	800d6d8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	f003 0302 	and.w	r3, r3, #2
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d023      	beq.n	800d754 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	f003 0304 	and.w	r3, r3, #4
 800d714:	2b00      	cmp	r3, #0
 800d716:	d005      	beq.n	800d724 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d718:	4b43      	ldr	r3, [pc, #268]	; (800d828 <HAL_RCC_ClockConfig+0x264>)
 800d71a:	689b      	ldr	r3, [r3, #8]
 800d71c:	4a42      	ldr	r2, [pc, #264]	; (800d828 <HAL_RCC_ClockConfig+0x264>)
 800d71e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800d722:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	f003 0308 	and.w	r3, r3, #8
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d007      	beq.n	800d740 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800d730:	4b3d      	ldr	r3, [pc, #244]	; (800d828 <HAL_RCC_ClockConfig+0x264>)
 800d732:	689b      	ldr	r3, [r3, #8]
 800d734:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d738:	4a3b      	ldr	r2, [pc, #236]	; (800d828 <HAL_RCC_ClockConfig+0x264>)
 800d73a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800d73e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d740:	4b39      	ldr	r3, [pc, #228]	; (800d828 <HAL_RCC_ClockConfig+0x264>)
 800d742:	689b      	ldr	r3, [r3, #8]
 800d744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	689b      	ldr	r3, [r3, #8]
 800d74c:	4936      	ldr	r1, [pc, #216]	; (800d828 <HAL_RCC_ClockConfig+0x264>)
 800d74e:	4313      	orrs	r3, r2
 800d750:	608b      	str	r3, [r1, #8]
 800d752:	e008      	b.n	800d766 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	2b80      	cmp	r3, #128	; 0x80
 800d758:	d105      	bne.n	800d766 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800d75a:	4b33      	ldr	r3, [pc, #204]	; (800d828 <HAL_RCC_ClockConfig+0x264>)
 800d75c:	689b      	ldr	r3, [r3, #8]
 800d75e:	4a32      	ldr	r2, [pc, #200]	; (800d828 <HAL_RCC_ClockConfig+0x264>)
 800d760:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d764:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d766:	4b2f      	ldr	r3, [pc, #188]	; (800d824 <HAL_RCC_ClockConfig+0x260>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	f003 030f 	and.w	r3, r3, #15
 800d76e:	683a      	ldr	r2, [r7, #0]
 800d770:	429a      	cmp	r2, r3
 800d772:	d21d      	bcs.n	800d7b0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d774:	4b2b      	ldr	r3, [pc, #172]	; (800d824 <HAL_RCC_ClockConfig+0x260>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f023 020f 	bic.w	r2, r3, #15
 800d77c:	4929      	ldr	r1, [pc, #164]	; (800d824 <HAL_RCC_ClockConfig+0x260>)
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	4313      	orrs	r3, r2
 800d782:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800d784:	f7fd f9d8 	bl	800ab38 <HAL_GetTick>
 800d788:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d78a:	e00a      	b.n	800d7a2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d78c:	f7fd f9d4 	bl	800ab38 <HAL_GetTick>
 800d790:	4602      	mov	r2, r0
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	1ad3      	subs	r3, r2, r3
 800d796:	f241 3288 	movw	r2, #5000	; 0x1388
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d901      	bls.n	800d7a2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800d79e:	2303      	movs	r3, #3
 800d7a0:	e03b      	b.n	800d81a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d7a2:	4b20      	ldr	r3, [pc, #128]	; (800d824 <HAL_RCC_ClockConfig+0x260>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f003 030f 	and.w	r3, r3, #15
 800d7aa:	683a      	ldr	r2, [r7, #0]
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	d1ed      	bne.n	800d78c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	f003 0304 	and.w	r3, r3, #4
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d008      	beq.n	800d7ce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d7bc:	4b1a      	ldr	r3, [pc, #104]	; (800d828 <HAL_RCC_ClockConfig+0x264>)
 800d7be:	689b      	ldr	r3, [r3, #8]
 800d7c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	68db      	ldr	r3, [r3, #12]
 800d7c8:	4917      	ldr	r1, [pc, #92]	; (800d828 <HAL_RCC_ClockConfig+0x264>)
 800d7ca:	4313      	orrs	r3, r2
 800d7cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f003 0308 	and.w	r3, r3, #8
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d009      	beq.n	800d7ee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d7da:	4b13      	ldr	r3, [pc, #76]	; (800d828 <HAL_RCC_ClockConfig+0x264>)
 800d7dc:	689b      	ldr	r3, [r3, #8]
 800d7de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	691b      	ldr	r3, [r3, #16]
 800d7e6:	00db      	lsls	r3, r3, #3
 800d7e8:	490f      	ldr	r1, [pc, #60]	; (800d828 <HAL_RCC_ClockConfig+0x264>)
 800d7ea:	4313      	orrs	r3, r2
 800d7ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d7ee:	f000 f825 	bl	800d83c <HAL_RCC_GetSysClockFreq>
 800d7f2:	4602      	mov	r2, r0
 800d7f4:	4b0c      	ldr	r3, [pc, #48]	; (800d828 <HAL_RCC_ClockConfig+0x264>)
 800d7f6:	689b      	ldr	r3, [r3, #8]
 800d7f8:	091b      	lsrs	r3, r3, #4
 800d7fa:	f003 030f 	and.w	r3, r3, #15
 800d7fe:	490c      	ldr	r1, [pc, #48]	; (800d830 <HAL_RCC_ClockConfig+0x26c>)
 800d800:	5ccb      	ldrb	r3, [r1, r3]
 800d802:	f003 031f 	and.w	r3, r3, #31
 800d806:	fa22 f303 	lsr.w	r3, r2, r3
 800d80a:	4a0a      	ldr	r2, [pc, #40]	; (800d834 <HAL_RCC_ClockConfig+0x270>)
 800d80c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800d80e:	4b0a      	ldr	r3, [pc, #40]	; (800d838 <HAL_RCC_ClockConfig+0x274>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	4618      	mov	r0, r3
 800d814:	f7fd f944 	bl	800aaa0 <HAL_InitTick>
 800d818:	4603      	mov	r3, r0
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3718      	adds	r7, #24
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}
 800d822:	bf00      	nop
 800d824:	40022000 	.word	0x40022000
 800d828:	40021000 	.word	0x40021000
 800d82c:	04c4b400 	.word	0x04c4b400
 800d830:	08018490 	.word	0x08018490
 800d834:	20000000 	.word	0x20000000
 800d838:	20000010 	.word	0x20000010

0800d83c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d83c:	b480      	push	{r7}
 800d83e:	b087      	sub	sp, #28
 800d840:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800d842:	4b2c      	ldr	r3, [pc, #176]	; (800d8f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d844:	689b      	ldr	r3, [r3, #8]
 800d846:	f003 030c 	and.w	r3, r3, #12
 800d84a:	2b04      	cmp	r3, #4
 800d84c:	d102      	bne.n	800d854 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d84e:	4b2a      	ldr	r3, [pc, #168]	; (800d8f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d850:	613b      	str	r3, [r7, #16]
 800d852:	e047      	b.n	800d8e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800d854:	4b27      	ldr	r3, [pc, #156]	; (800d8f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d856:	689b      	ldr	r3, [r3, #8]
 800d858:	f003 030c 	and.w	r3, r3, #12
 800d85c:	2b08      	cmp	r3, #8
 800d85e:	d102      	bne.n	800d866 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d860:	4b26      	ldr	r3, [pc, #152]	; (800d8fc <HAL_RCC_GetSysClockFreq+0xc0>)
 800d862:	613b      	str	r3, [r7, #16]
 800d864:	e03e      	b.n	800d8e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800d866:	4b23      	ldr	r3, [pc, #140]	; (800d8f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d868:	689b      	ldr	r3, [r3, #8]
 800d86a:	f003 030c 	and.w	r3, r3, #12
 800d86e:	2b0c      	cmp	r3, #12
 800d870:	d136      	bne.n	800d8e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d872:	4b20      	ldr	r3, [pc, #128]	; (800d8f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d874:	68db      	ldr	r3, [r3, #12]
 800d876:	f003 0303 	and.w	r3, r3, #3
 800d87a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d87c:	4b1d      	ldr	r3, [pc, #116]	; (800d8f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d87e:	68db      	ldr	r3, [r3, #12]
 800d880:	091b      	lsrs	r3, r3, #4
 800d882:	f003 030f 	and.w	r3, r3, #15
 800d886:	3301      	adds	r3, #1
 800d888:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	2b03      	cmp	r3, #3
 800d88e:	d10c      	bne.n	800d8aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d890:	4a1a      	ldr	r2, [pc, #104]	; (800d8fc <HAL_RCC_GetSysClockFreq+0xc0>)
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	fbb2 f3f3 	udiv	r3, r2, r3
 800d898:	4a16      	ldr	r2, [pc, #88]	; (800d8f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d89a:	68d2      	ldr	r2, [r2, #12]
 800d89c:	0a12      	lsrs	r2, r2, #8
 800d89e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d8a2:	fb02 f303 	mul.w	r3, r2, r3
 800d8a6:	617b      	str	r3, [r7, #20]
      break;
 800d8a8:	e00c      	b.n	800d8c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d8aa:	4a13      	ldr	r2, [pc, #76]	; (800d8f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8b2:	4a10      	ldr	r2, [pc, #64]	; (800d8f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d8b4:	68d2      	ldr	r2, [r2, #12]
 800d8b6:	0a12      	lsrs	r2, r2, #8
 800d8b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d8bc:	fb02 f303 	mul.w	r3, r2, r3
 800d8c0:	617b      	str	r3, [r7, #20]
      break;
 800d8c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d8c4:	4b0b      	ldr	r3, [pc, #44]	; (800d8f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800d8c6:	68db      	ldr	r3, [r3, #12]
 800d8c8:	0e5b      	lsrs	r3, r3, #25
 800d8ca:	f003 0303 	and.w	r3, r3, #3
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	005b      	lsls	r3, r3, #1
 800d8d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800d8d4:	697a      	ldr	r2, [r7, #20]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8dc:	613b      	str	r3, [r7, #16]
 800d8de:	e001      	b.n	800d8e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800d8e4:	693b      	ldr	r3, [r7, #16]
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	371c      	adds	r7, #28
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f0:	4770      	bx	lr
 800d8f2:	bf00      	nop
 800d8f4:	40021000 	.word	0x40021000
 800d8f8:	00f42400 	.word	0x00f42400
 800d8fc:	016e3600 	.word	0x016e3600

0800d900 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d900:	b480      	push	{r7}
 800d902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d904:	4b03      	ldr	r3, [pc, #12]	; (800d914 <HAL_RCC_GetHCLKFreq+0x14>)
 800d906:	681b      	ldr	r3, [r3, #0]
}
 800d908:	4618      	mov	r0, r3
 800d90a:	46bd      	mov	sp, r7
 800d90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d910:	4770      	bx	lr
 800d912:	bf00      	nop
 800d914:	20000000 	.word	0x20000000

0800d918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800d91c:	f7ff fff0 	bl	800d900 <HAL_RCC_GetHCLKFreq>
 800d920:	4602      	mov	r2, r0
 800d922:	4b06      	ldr	r3, [pc, #24]	; (800d93c <HAL_RCC_GetPCLK1Freq+0x24>)
 800d924:	689b      	ldr	r3, [r3, #8]
 800d926:	0a1b      	lsrs	r3, r3, #8
 800d928:	f003 0307 	and.w	r3, r3, #7
 800d92c:	4904      	ldr	r1, [pc, #16]	; (800d940 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d92e:	5ccb      	ldrb	r3, [r1, r3]
 800d930:	f003 031f 	and.w	r3, r3, #31
 800d934:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d938:	4618      	mov	r0, r3
 800d93a:	bd80      	pop	{r7, pc}
 800d93c:	40021000 	.word	0x40021000
 800d940:	080184a0 	.word	0x080184a0

0800d944 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800d948:	f7ff ffda 	bl	800d900 <HAL_RCC_GetHCLKFreq>
 800d94c:	4602      	mov	r2, r0
 800d94e:	4b06      	ldr	r3, [pc, #24]	; (800d968 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d950:	689b      	ldr	r3, [r3, #8]
 800d952:	0adb      	lsrs	r3, r3, #11
 800d954:	f003 0307 	and.w	r3, r3, #7
 800d958:	4904      	ldr	r1, [pc, #16]	; (800d96c <HAL_RCC_GetPCLK2Freq+0x28>)
 800d95a:	5ccb      	ldrb	r3, [r1, r3]
 800d95c:	f003 031f 	and.w	r3, r3, #31
 800d960:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d964:	4618      	mov	r0, r3
 800d966:	bd80      	pop	{r7, pc}
 800d968:	40021000 	.word	0x40021000
 800d96c:	080184a0 	.word	0x080184a0

0800d970 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800d970:	b480      	push	{r7}
 800d972:	b087      	sub	sp, #28
 800d974:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d976:	4b1e      	ldr	r3, [pc, #120]	; (800d9f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d978:	68db      	ldr	r3, [r3, #12]
 800d97a:	f003 0303 	and.w	r3, r3, #3
 800d97e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d980:	4b1b      	ldr	r3, [pc, #108]	; (800d9f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d982:	68db      	ldr	r3, [r3, #12]
 800d984:	091b      	lsrs	r3, r3, #4
 800d986:	f003 030f 	and.w	r3, r3, #15
 800d98a:	3301      	adds	r3, #1
 800d98c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	2b03      	cmp	r3, #3
 800d992:	d10c      	bne.n	800d9ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d994:	4a17      	ldr	r2, [pc, #92]	; (800d9f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	fbb2 f3f3 	udiv	r3, r2, r3
 800d99c:	4a14      	ldr	r2, [pc, #80]	; (800d9f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d99e:	68d2      	ldr	r2, [r2, #12]
 800d9a0:	0a12      	lsrs	r2, r2, #8
 800d9a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d9a6:	fb02 f303 	mul.w	r3, r2, r3
 800d9aa:	617b      	str	r3, [r7, #20]
    break;
 800d9ac:	e00c      	b.n	800d9c8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d9ae:	4a12      	ldr	r2, [pc, #72]	; (800d9f8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9b6:	4a0e      	ldr	r2, [pc, #56]	; (800d9f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d9b8:	68d2      	ldr	r2, [r2, #12]
 800d9ba:	0a12      	lsrs	r2, r2, #8
 800d9bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d9c0:	fb02 f303 	mul.w	r3, r2, r3
 800d9c4:	617b      	str	r3, [r7, #20]
    break;
 800d9c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d9c8:	4b09      	ldr	r3, [pc, #36]	; (800d9f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	0e5b      	lsrs	r3, r3, #25
 800d9ce:	f003 0303 	and.w	r3, r3, #3
 800d9d2:	3301      	adds	r3, #1
 800d9d4:	005b      	lsls	r3, r3, #1
 800d9d6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800d9d8:	697a      	ldr	r2, [r7, #20]
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9e0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800d9e2:	687b      	ldr	r3, [r7, #4]
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	371c      	adds	r7, #28
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr
 800d9f0:	40021000 	.word	0x40021000
 800d9f4:	016e3600 	.word	0x016e3600
 800d9f8:	00f42400 	.word	0x00f42400

0800d9fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b086      	sub	sp, #24
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800da04:	2300      	movs	r3, #0
 800da06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800da08:	2300      	movs	r3, #0
 800da0a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800da14:	2b00      	cmp	r3, #0
 800da16:	f000 8098 	beq.w	800db4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800da1a:	2300      	movs	r3, #0
 800da1c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800da1e:	4b43      	ldr	r3, [pc, #268]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800da20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da26:	2b00      	cmp	r3, #0
 800da28:	d10d      	bne.n	800da46 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800da2a:	4b40      	ldr	r3, [pc, #256]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800da2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da2e:	4a3f      	ldr	r2, [pc, #252]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800da30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da34:	6593      	str	r3, [r2, #88]	; 0x58
 800da36:	4b3d      	ldr	r3, [pc, #244]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800da38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da3e:	60bb      	str	r3, [r7, #8]
 800da40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800da42:	2301      	movs	r3, #1
 800da44:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800da46:	4b3a      	ldr	r3, [pc, #232]	; (800db30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	4a39      	ldr	r2, [pc, #228]	; (800db30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800da4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800da52:	f7fd f871 	bl	800ab38 <HAL_GetTick>
 800da56:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800da58:	e009      	b.n	800da6e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800da5a:	f7fd f86d 	bl	800ab38 <HAL_GetTick>
 800da5e:	4602      	mov	r2, r0
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	1ad3      	subs	r3, r2, r3
 800da64:	2b02      	cmp	r3, #2
 800da66:	d902      	bls.n	800da6e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800da68:	2303      	movs	r3, #3
 800da6a:	74fb      	strb	r3, [r7, #19]
        break;
 800da6c:	e005      	b.n	800da7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800da6e:	4b30      	ldr	r3, [pc, #192]	; (800db30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da76:	2b00      	cmp	r3, #0
 800da78:	d0ef      	beq.n	800da5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800da7a:	7cfb      	ldrb	r3, [r7, #19]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d159      	bne.n	800db34 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800da80:	4b2a      	ldr	r3, [pc, #168]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800da82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da8a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d01e      	beq.n	800dad0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da96:	697a      	ldr	r2, [r7, #20]
 800da98:	429a      	cmp	r2, r3
 800da9a:	d019      	beq.n	800dad0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800da9c:	4b23      	ldr	r3, [pc, #140]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800da9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800daa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800daa6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800daa8:	4b20      	ldr	r3, [pc, #128]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800daaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800daae:	4a1f      	ldr	r2, [pc, #124]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800dab8:	4b1c      	ldr	r3, [pc, #112]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800daba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dabe:	4a1b      	ldr	r2, [pc, #108]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800dac8:	4a18      	ldr	r2, [pc, #96]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	f003 0301 	and.w	r3, r3, #1
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d016      	beq.n	800db08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dada:	f7fd f82d 	bl	800ab38 <HAL_GetTick>
 800dade:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800dae0:	e00b      	b.n	800dafa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dae2:	f7fd f829 	bl	800ab38 <HAL_GetTick>
 800dae6:	4602      	mov	r2, r0
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	1ad3      	subs	r3, r2, r3
 800daec:	f241 3288 	movw	r2, #5000	; 0x1388
 800daf0:	4293      	cmp	r3, r2
 800daf2:	d902      	bls.n	800dafa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800daf4:	2303      	movs	r3, #3
 800daf6:	74fb      	strb	r3, [r7, #19]
            break;
 800daf8:	e006      	b.n	800db08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800dafa:	4b0c      	ldr	r3, [pc, #48]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dafc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db00:	f003 0302 	and.w	r3, r3, #2
 800db04:	2b00      	cmp	r3, #0
 800db06:	d0ec      	beq.n	800dae2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800db08:	7cfb      	ldrb	r3, [r7, #19]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d10b      	bne.n	800db26 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800db0e:	4b07      	ldr	r3, [pc, #28]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800db10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800db14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db1c:	4903      	ldr	r1, [pc, #12]	; (800db2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800db1e:	4313      	orrs	r3, r2
 800db20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800db24:	e008      	b.n	800db38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800db26:	7cfb      	ldrb	r3, [r7, #19]
 800db28:	74bb      	strb	r3, [r7, #18]
 800db2a:	e005      	b.n	800db38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800db2c:	40021000 	.word	0x40021000
 800db30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db34:	7cfb      	ldrb	r3, [r7, #19]
 800db36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800db38:	7c7b      	ldrb	r3, [r7, #17]
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d105      	bne.n	800db4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800db3e:	4ba7      	ldr	r3, [pc, #668]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db42:	4aa6      	ldr	r2, [pc, #664]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800db48:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	f003 0301 	and.w	r3, r3, #1
 800db52:	2b00      	cmp	r3, #0
 800db54:	d00a      	beq.n	800db6c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800db56:	4ba1      	ldr	r3, [pc, #644]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db5c:	f023 0203 	bic.w	r2, r3, #3
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	685b      	ldr	r3, [r3, #4]
 800db64:	499d      	ldr	r1, [pc, #628]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db66:	4313      	orrs	r3, r2
 800db68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f003 0302 	and.w	r3, r3, #2
 800db74:	2b00      	cmp	r3, #0
 800db76:	d00a      	beq.n	800db8e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800db78:	4b98      	ldr	r3, [pc, #608]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db7e:	f023 020c 	bic.w	r2, r3, #12
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	689b      	ldr	r3, [r3, #8]
 800db86:	4995      	ldr	r1, [pc, #596]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db88:	4313      	orrs	r3, r2
 800db8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	f003 0304 	and.w	r3, r3, #4
 800db96:	2b00      	cmp	r3, #0
 800db98:	d00a      	beq.n	800dbb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800db9a:	4b90      	ldr	r3, [pc, #576]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800db9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dba0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	68db      	ldr	r3, [r3, #12]
 800dba8:	498c      	ldr	r1, [pc, #560]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbaa:	4313      	orrs	r3, r2
 800dbac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	f003 0308 	and.w	r3, r3, #8
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d00a      	beq.n	800dbd2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800dbbc:	4b87      	ldr	r3, [pc, #540]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	691b      	ldr	r3, [r3, #16]
 800dbca:	4984      	ldr	r1, [pc, #528]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbcc:	4313      	orrs	r3, r2
 800dbce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f003 0310 	and.w	r3, r3, #16
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d00a      	beq.n	800dbf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800dbde:	4b7f      	ldr	r3, [pc, #508]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dbe4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	695b      	ldr	r3, [r3, #20]
 800dbec:	497b      	ldr	r1, [pc, #492]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dbee:	4313      	orrs	r3, r2
 800dbf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f003 0320 	and.w	r3, r3, #32
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d00a      	beq.n	800dc16 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800dc00:	4b76      	ldr	r3, [pc, #472]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	699b      	ldr	r3, [r3, #24]
 800dc0e:	4973      	ldr	r1, [pc, #460]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc10:	4313      	orrs	r3, r2
 800dc12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d00a      	beq.n	800dc38 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800dc22:	4b6e      	ldr	r3, [pc, #440]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	69db      	ldr	r3, [r3, #28]
 800dc30:	496a      	ldr	r1, [pc, #424]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc32:	4313      	orrs	r3, r2
 800dc34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d00a      	beq.n	800dc5a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800dc44:	4b65      	ldr	r3, [pc, #404]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6a1b      	ldr	r3, [r3, #32]
 800dc52:	4962      	ldr	r1, [pc, #392]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc54:	4313      	orrs	r3, r2
 800dc56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d00a      	beq.n	800dc7c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800dc66:	4b5d      	ldr	r3, [pc, #372]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc74:	4959      	ldr	r1, [pc, #356]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc76:	4313      	orrs	r3, r2
 800dc78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d00a      	beq.n	800dc9e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800dc88:	4b54      	ldr	r3, [pc, #336]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800dc8e:	f023 0203 	bic.w	r2, r3, #3
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc96:	4951      	ldr	r1, [pc, #324]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dc98:	4313      	orrs	r3, r2
 800dc9a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d00a      	beq.n	800dcc0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800dcaa:	4b4c      	ldr	r3, [pc, #304]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dcb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcb8:	4948      	ldr	r1, [pc, #288]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcba:	4313      	orrs	r3, r2
 800dcbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d015      	beq.n	800dcf8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800dccc:	4b43      	ldr	r3, [pc, #268]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dcd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcda:	4940      	ldr	r1, [pc, #256]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcdc:	4313      	orrs	r3, r2
 800dcde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dce6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dcea:	d105      	bne.n	800dcf8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dcec:	4b3b      	ldr	r3, [pc, #236]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcee:	68db      	ldr	r3, [r3, #12]
 800dcf0:	4a3a      	ldr	r2, [pc, #232]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dcf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dcf6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d015      	beq.n	800dd30 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800dd04:	4b35      	ldr	r3, [pc, #212]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd12:	4932      	ldr	r1, [pc, #200]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd14:	4313      	orrs	r3, r2
 800dd16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dd22:	d105      	bne.n	800dd30 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dd24:	4b2d      	ldr	r3, [pc, #180]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd26:	68db      	ldr	r3, [r3, #12]
 800dd28:	4a2c      	ldr	r2, [pc, #176]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd2e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d015      	beq.n	800dd68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800dd3c:	4b27      	ldr	r3, [pc, #156]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd42:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd4a:	4924      	ldr	r1, [pc, #144]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd4c:	4313      	orrs	r3, r2
 800dd4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800dd5a:	d105      	bne.n	800dd68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dd5c:	4b1f      	ldr	r3, [pc, #124]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd5e:	68db      	ldr	r3, [r3, #12]
 800dd60:	4a1e      	ldr	r2, [pc, #120]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd66:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d015      	beq.n	800dda0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800dd74:	4b19      	ldr	r3, [pc, #100]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd82:	4916      	ldr	r1, [pc, #88]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd84:	4313      	orrs	r3, r2
 800dd86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dd92:	d105      	bne.n	800dda0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dd94:	4b11      	ldr	r3, [pc, #68]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd96:	68db      	ldr	r3, [r3, #12]
 800dd98:	4a10      	ldr	r2, [pc, #64]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dd9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd9e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d019      	beq.n	800dde0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ddac:	4b0b      	ldr	r3, [pc, #44]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ddae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddba:	4908      	ldr	r1, [pc, #32]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ddbc:	4313      	orrs	r3, r2
 800ddbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ddca:	d109      	bne.n	800dde0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ddcc:	4b03      	ldr	r3, [pc, #12]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ddce:	68db      	ldr	r3, [r3, #12]
 800ddd0:	4a02      	ldr	r2, [pc, #8]	; (800dddc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ddd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ddd6:	60d3      	str	r3, [r2, #12]
 800ddd8:	e002      	b.n	800dde0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800ddda:	bf00      	nop
 800dddc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d015      	beq.n	800de18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800ddec:	4b29      	ldr	r3, [pc, #164]	; (800de94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ddee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddf2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddfa:	4926      	ldr	r1, [pc, #152]	; (800de94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800ddfc:	4313      	orrs	r3, r2
 800ddfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800de0a:	d105      	bne.n	800de18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800de0c:	4b21      	ldr	r3, [pc, #132]	; (800de94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800de0e:	68db      	ldr	r3, [r3, #12]
 800de10:	4a20      	ldr	r2, [pc, #128]	; (800de94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800de12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800de16:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800de20:	2b00      	cmp	r3, #0
 800de22:	d015      	beq.n	800de50 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800de24:	4b1b      	ldr	r3, [pc, #108]	; (800de94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800de26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de2a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de32:	4918      	ldr	r1, [pc, #96]	; (800de94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800de34:	4313      	orrs	r3, r2
 800de36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de42:	d105      	bne.n	800de50 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800de44:	4b13      	ldr	r3, [pc, #76]	; (800de94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800de46:	68db      	ldr	r3, [r3, #12]
 800de48:	4a12      	ldr	r2, [pc, #72]	; (800de94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800de4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800de4e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d015      	beq.n	800de88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800de5c:	4b0d      	ldr	r3, [pc, #52]	; (800de94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800de5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800de62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de6a:	490a      	ldr	r1, [pc, #40]	; (800de94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800de6c:	4313      	orrs	r3, r2
 800de6e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800de7a:	d105      	bne.n	800de88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800de7c:	4b05      	ldr	r3, [pc, #20]	; (800de94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800de7e:	68db      	ldr	r3, [r3, #12]
 800de80:	4a04      	ldr	r2, [pc, #16]	; (800de94 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800de82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800de86:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800de88:	7cbb      	ldrb	r3, [r7, #18]
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3718      	adds	r7, #24
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}
 800de92:	bf00      	nop
 800de94:	40021000 	.word	0x40021000

0800de98 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b084      	sub	sp, #16
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800dea0:	2301      	movs	r3, #1
 800dea2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d070      	beq.n	800df8c <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d106      	bne.n	800dec4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2200      	movs	r2, #0
 800deba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f7fc f8de 	bl	800a080 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2202      	movs	r2, #2
 800dec8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	68db      	ldr	r3, [r3, #12]
 800ded2:	f003 0310 	and.w	r3, r3, #16
 800ded6:	2b10      	cmp	r3, #16
 800ded8:	d04f      	beq.n	800df7a <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	22ca      	movs	r2, #202	; 0xca
 800dee0:	625a      	str	r2, [r3, #36]	; 0x24
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	2253      	movs	r2, #83	; 0x53
 800dee8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f000 f878 	bl	800dfe0 <RTC_EnterInitMode>
 800def0:	4603      	mov	r3, r0
 800def2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800def4:	7bfb      	ldrb	r3, [r7, #15]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d126      	bne.n	800df48 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	699b      	ldr	r3, [r3, #24]
 800df00:	687a      	ldr	r2, [r7, #4]
 800df02:	6812      	ldr	r2, [r2, #0]
 800df04:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800df08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df0c:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	6999      	ldr	r1, [r3, #24]
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	685a      	ldr	r2, [r3, #4]
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	691b      	ldr	r3, [r3, #16]
 800df1c:	431a      	orrs	r2, r3
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	699b      	ldr	r3, [r3, #24]
 800df22:	431a      	orrs	r2, r3
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	430a      	orrs	r2, r1
 800df2a:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	68d9      	ldr	r1, [r3, #12]
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	689b      	ldr	r3, [r3, #8]
 800df34:	041a      	lsls	r2, r3, #16
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	430a      	orrs	r2, r1
 800df3c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f000 f884 	bl	800e04c <RTC_ExitInitMode>
 800df44:	4603      	mov	r3, r0
 800df46:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800df48:	7bfb      	ldrb	r3, [r7, #15]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d110      	bne.n	800df70 <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	699b      	ldr	r3, [r3, #24]
 800df54:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6a1a      	ldr	r2, [r3, #32]
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	69db      	ldr	r3, [r3, #28]
 800df60:	431a      	orrs	r2, r3
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	695b      	ldr	r3, [r3, #20]
 800df66:	431a      	orrs	r2, r3
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	430a      	orrs	r2, r1
 800df6e:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	22ff      	movs	r2, #255	; 0xff
 800df76:	625a      	str	r2, [r3, #36]	; 0x24
 800df78:	e001      	b.n	800df7e <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800df7a:	2300      	movs	r3, #0
 800df7c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800df7e:	7bfb      	ldrb	r3, [r7, #15]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d103      	bne.n	800df8c <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2201      	movs	r2, #1
 800df88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 800df8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df8e:	4618      	mov	r0, r3
 800df90:	3710      	adds	r7, #16
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}
	...

0800df98 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b084      	sub	sp, #16
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	4a0d      	ldr	r2, [pc, #52]	; (800dfdc <HAL_RTC_WaitForSynchro+0x44>)
 800dfa6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800dfa8:	f7fc fdc6 	bl	800ab38 <HAL_GetTick>
 800dfac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 800dfae:	e009      	b.n	800dfc4 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dfb0:	f7fc fdc2 	bl	800ab38 <HAL_GetTick>
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	1ad3      	subs	r3, r2, r3
 800dfba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dfbe:	d901      	bls.n	800dfc4 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800dfc0:	2303      	movs	r3, #3
 800dfc2:	e007      	b.n	800dfd4 <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	68db      	ldr	r3, [r3, #12]
 800dfca:	f003 0320 	and.w	r3, r3, #32
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d0ee      	beq.n	800dfb0 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800dfd2:	2300      	movs	r3, #0
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3710      	adds	r7, #16
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	0001005f 	.word	0x0001005f

0800dfe0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b084      	sub	sp, #16
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dfe8:	2300      	movs	r3, #0
 800dfea:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	68db      	ldr	r3, [r3, #12]
 800dff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d123      	bne.n	800e042 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	68da      	ldr	r2, [r3, #12]
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e008:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800e00a:	f7fc fd95 	bl	800ab38 <HAL_GetTick>
 800e00e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e010:	e00d      	b.n	800e02e <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800e012:	f7fc fd91 	bl	800ab38 <HAL_GetTick>
 800e016:	4602      	mov	r2, r0
 800e018:	68bb      	ldr	r3, [r7, #8]
 800e01a:	1ad3      	subs	r3, r2, r3
 800e01c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e020:	d905      	bls.n	800e02e <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800e022:	2303      	movs	r3, #3
 800e024:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2203      	movs	r2, #3
 800e02a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	68db      	ldr	r3, [r3, #12]
 800e034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d102      	bne.n	800e042 <RTC_EnterInitMode+0x62>
 800e03c:	7bfb      	ldrb	r3, [r7, #15]
 800e03e:	2b03      	cmp	r3, #3
 800e040:	d1e7      	bne.n	800e012 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800e042:	7bfb      	ldrb	r3, [r7, #15]
}
 800e044:	4618      	mov	r0, r3
 800e046:	3710      	adds	r7, #16
 800e048:	46bd      	mov	sp, r7
 800e04a:	bd80      	pop	{r7, pc}

0800e04c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b084      	sub	sp, #16
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e054:	2300      	movs	r3, #0
 800e056:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	68da      	ldr	r2, [r3, #12]
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e066:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	699b      	ldr	r3, [r3, #24]
 800e06e:	f003 0320 	and.w	r3, r3, #32
 800e072:	2b00      	cmp	r3, #0
 800e074:	d10c      	bne.n	800e090 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f7ff ff8e 	bl	800df98 <HAL_RTC_WaitForSynchro>
 800e07c:	4603      	mov	r3, r0
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d022      	beq.n	800e0c8 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2203      	movs	r2, #3
 800e086:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800e08a:	2303      	movs	r3, #3
 800e08c:	73fb      	strb	r3, [r7, #15]
 800e08e:	e01b      	b.n	800e0c8 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	699a      	ldr	r2, [r3, #24]
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	f022 0220 	bic.w	r2, r2, #32
 800e09e:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f7ff ff79 	bl	800df98 <HAL_RTC_WaitForSynchro>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d005      	beq.n	800e0b8 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2203      	movs	r2, #3
 800e0b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800e0b4:	2303      	movs	r3, #3
 800e0b6:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	699a      	ldr	r2, [r3, #24]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	f042 0220 	orr.w	r2, r2, #32
 800e0c6:	619a      	str	r2, [r3, #24]
  }

  return status;
 800e0c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3710      	adds	r7, #16
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}
	...

0800e0d4 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified TAMP Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b087      	sub	sp, #28
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	60f8      	str	r0, [r7, #12]
 800e0dc:	60b9      	str	r1, [r7, #8]
 800e0de:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
 800e0e0:	4b07      	ldr	r3, [pc, #28]	; (800e100 <HAL_RTCEx_BKUPWrite+0x2c>)
 800e0e2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	009b      	lsls	r3, r3, #2
 800e0e8:	697a      	ldr	r2, [r7, #20]
 800e0ea:	4413      	add	r3, r2
 800e0ec:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	687a      	ldr	r2, [r7, #4]
 800e0f2:	601a      	str	r2, [r3, #0]
}
 800e0f4:	bf00      	nop
 800e0f6:	371c      	adds	r7, #28
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fe:	4770      	bx	lr
 800e100:	40002500 	.word	0x40002500

0800e104 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB to
  *          specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800e104:	b480      	push	{r7}
 800e106:	b085      	sub	sp, #20
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
 800e10e:	4b07      	ldr	r3, [pc, #28]	; (800e12c <HAL_RTCEx_BKUPRead+0x28>)
 800e110:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	009b      	lsls	r3, r3, #2
 800e116:	68fa      	ldr	r2, [r7, #12]
 800e118:	4413      	add	r3, r2
 800e11a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
}
 800e120:	4618      	mov	r0, r3
 800e122:	3714      	adds	r7, #20
 800e124:	46bd      	mov	sp, r7
 800e126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12a:	4770      	bx	lr
 800e12c:	40002500 	.word	0x40002500

0800e130 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b082      	sub	sp, #8
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d101      	bne.n	800e142 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e13e:	2301      	movs	r3, #1
 800e140:	e042      	b.n	800e1c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d106      	bne.n	800e15a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2200      	movs	r2, #0
 800e150:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f7fc fa05 	bl	800a564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2224      	movs	r2, #36	; 0x24
 800e15e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	681a      	ldr	r2, [r3, #0]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	f022 0201 	bic.w	r2, r2, #1
 800e170:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e176:	2b00      	cmp	r3, #0
 800e178:	d002      	beq.n	800e180 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f000 ff38 	bl	800eff0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f000 fc39 	bl	800e9f8 <UART_SetConfig>
 800e186:	4603      	mov	r3, r0
 800e188:	2b01      	cmp	r3, #1
 800e18a:	d101      	bne.n	800e190 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e18c:	2301      	movs	r3, #1
 800e18e:	e01b      	b.n	800e1c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	685a      	ldr	r2, [r3, #4]
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e19e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	689a      	ldr	r2, [r3, #8]
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e1ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	681a      	ldr	r2, [r3, #0]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f042 0201 	orr.w	r2, r2, #1
 800e1be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f000 ffb7 	bl	800f134 <UART_CheckIdleState>
 800e1c6:	4603      	mov	r3, r0
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3708      	adds	r7, #8
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b08a      	sub	sp, #40	; 0x28
 800e1d4:	af02      	add	r7, sp, #8
 800e1d6:	60f8      	str	r0, [r7, #12]
 800e1d8:	60b9      	str	r1, [r7, #8]
 800e1da:	603b      	str	r3, [r7, #0]
 800e1dc:	4613      	mov	r3, r2
 800e1de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e1e6:	2b20      	cmp	r3, #32
 800e1e8:	d17b      	bne.n	800e2e2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d002      	beq.n	800e1f6 <HAL_UART_Transmit+0x26>
 800e1f0:	88fb      	ldrh	r3, [r7, #6]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d101      	bne.n	800e1fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	e074      	b.n	800e2e4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	2221      	movs	r2, #33	; 0x21
 800e206:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e20a:	f7fc fc95 	bl	800ab38 <HAL_GetTick>
 800e20e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	88fa      	ldrh	r2, [r7, #6]
 800e214:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	88fa      	ldrh	r2, [r7, #6]
 800e21c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	689b      	ldr	r3, [r3, #8]
 800e224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e228:	d108      	bne.n	800e23c <HAL_UART_Transmit+0x6c>
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	691b      	ldr	r3, [r3, #16]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d104      	bne.n	800e23c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e232:	2300      	movs	r3, #0
 800e234:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	61bb      	str	r3, [r7, #24]
 800e23a:	e003      	b.n	800e244 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e23c:	68bb      	ldr	r3, [r7, #8]
 800e23e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e240:	2300      	movs	r3, #0
 800e242:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e244:	e030      	b.n	800e2a8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	9300      	str	r3, [sp, #0]
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	2200      	movs	r2, #0
 800e24e:	2180      	movs	r1, #128	; 0x80
 800e250:	68f8      	ldr	r0, [r7, #12]
 800e252:	f001 f819 	bl	800f288 <UART_WaitOnFlagUntilTimeout>
 800e256:	4603      	mov	r3, r0
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d005      	beq.n	800e268 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	2220      	movs	r2, #32
 800e260:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800e264:	2303      	movs	r3, #3
 800e266:	e03d      	b.n	800e2e4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e268:	69fb      	ldr	r3, [r7, #28]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d10b      	bne.n	800e286 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e26e:	69bb      	ldr	r3, [r7, #24]
 800e270:	881b      	ldrh	r3, [r3, #0]
 800e272:	461a      	mov	r2, r3
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e27c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e27e:	69bb      	ldr	r3, [r7, #24]
 800e280:	3302      	adds	r3, #2
 800e282:	61bb      	str	r3, [r7, #24]
 800e284:	e007      	b.n	800e296 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e286:	69fb      	ldr	r3, [r7, #28]
 800e288:	781a      	ldrb	r2, [r3, #0]
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e290:	69fb      	ldr	r3, [r7, #28]
 800e292:	3301      	adds	r3, #1
 800e294:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e29c:	b29b      	uxth	r3, r3
 800e29e:	3b01      	subs	r3, #1
 800e2a0:	b29a      	uxth	r2, r3
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e2ae:	b29b      	uxth	r3, r3
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d1c8      	bne.n	800e246 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	9300      	str	r3, [sp, #0]
 800e2b8:	697b      	ldr	r3, [r7, #20]
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	2140      	movs	r1, #64	; 0x40
 800e2be:	68f8      	ldr	r0, [r7, #12]
 800e2c0:	f000 ffe2 	bl	800f288 <UART_WaitOnFlagUntilTimeout>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d005      	beq.n	800e2d6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	2220      	movs	r2, #32
 800e2ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800e2d2:	2303      	movs	r3, #3
 800e2d4:	e006      	b.n	800e2e4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	2220      	movs	r2, #32
 800e2da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	e000      	b.n	800e2e4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e2e2:	2302      	movs	r3, #2
  }
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	3720      	adds	r7, #32
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}

0800e2ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b08a      	sub	sp, #40	; 0x28
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	60f8      	str	r0, [r7, #12]
 800e2f4:	60b9      	str	r1, [r7, #8]
 800e2f6:	4613      	mov	r3, r2
 800e2f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e300:	2b20      	cmp	r3, #32
 800e302:	d137      	bne.n	800e374 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d002      	beq.n	800e310 <HAL_UART_Receive_IT+0x24>
 800e30a:	88fb      	ldrh	r3, [r7, #6]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d101      	bne.n	800e314 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e310:	2301      	movs	r3, #1
 800e312:	e030      	b.n	800e376 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2200      	movs	r2, #0
 800e318:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	4a18      	ldr	r2, [pc, #96]	; (800e380 <HAL_UART_Receive_IT+0x94>)
 800e320:	4293      	cmp	r3, r2
 800e322:	d01f      	beq.n	800e364 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	685b      	ldr	r3, [r3, #4]
 800e32a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d018      	beq.n	800e364 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	e853 3f00 	ldrex	r3, [r3]
 800e33e:	613b      	str	r3, [r7, #16]
   return(result);
 800e340:	693b      	ldr	r3, [r7, #16]
 800e342:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e346:	627b      	str	r3, [r7, #36]	; 0x24
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	461a      	mov	r2, r3
 800e34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e350:	623b      	str	r3, [r7, #32]
 800e352:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e354:	69f9      	ldr	r1, [r7, #28]
 800e356:	6a3a      	ldr	r2, [r7, #32]
 800e358:	e841 2300 	strex	r3, r2, [r1]
 800e35c:	61bb      	str	r3, [r7, #24]
   return(result);
 800e35e:	69bb      	ldr	r3, [r7, #24]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d1e6      	bne.n	800e332 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e364:	88fb      	ldrh	r3, [r7, #6]
 800e366:	461a      	mov	r2, r3
 800e368:	68b9      	ldr	r1, [r7, #8]
 800e36a:	68f8      	ldr	r0, [r7, #12]
 800e36c:	f000 fffa 	bl	800f364 <UART_Start_Receive_IT>
 800e370:	4603      	mov	r3, r0
 800e372:	e000      	b.n	800e376 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e374:	2302      	movs	r3, #2
  }
}
 800e376:	4618      	mov	r0, r3
 800e378:	3728      	adds	r7, #40	; 0x28
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}
 800e37e:	bf00      	nop
 800e380:	40008000 	.word	0x40008000

0800e384 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b0ba      	sub	sp, #232	; 0xe8
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	69db      	ldr	r3, [r3, #28]
 800e392:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	689b      	ldr	r3, [r3, #8]
 800e3a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e3aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e3ae:	f640 030f 	movw	r3, #2063	; 0x80f
 800e3b2:	4013      	ands	r3, r2
 800e3b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e3b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d11b      	bne.n	800e3f8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e3c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3c4:	f003 0320 	and.w	r3, r3, #32
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d015      	beq.n	800e3f8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e3cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3d0:	f003 0320 	and.w	r3, r3, #32
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d105      	bne.n	800e3e4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e3d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e3dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d009      	beq.n	800e3f8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	f000 82e3 	beq.w	800e9b4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	4798      	blx	r3
      }
      return;
 800e3f6:	e2dd      	b.n	800e9b4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e3f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	f000 8123 	beq.w	800e648 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e402:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e406:	4b8d      	ldr	r3, [pc, #564]	; (800e63c <HAL_UART_IRQHandler+0x2b8>)
 800e408:	4013      	ands	r3, r2
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d106      	bne.n	800e41c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e40e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e412:	4b8b      	ldr	r3, [pc, #556]	; (800e640 <HAL_UART_IRQHandler+0x2bc>)
 800e414:	4013      	ands	r3, r2
 800e416:	2b00      	cmp	r3, #0
 800e418:	f000 8116 	beq.w	800e648 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e41c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e420:	f003 0301 	and.w	r3, r3, #1
 800e424:	2b00      	cmp	r3, #0
 800e426:	d011      	beq.n	800e44c <HAL_UART_IRQHandler+0xc8>
 800e428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e42c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e430:	2b00      	cmp	r3, #0
 800e432:	d00b      	beq.n	800e44c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	2201      	movs	r2, #1
 800e43a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e442:	f043 0201 	orr.w	r2, r3, #1
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e44c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e450:	f003 0302 	and.w	r3, r3, #2
 800e454:	2b00      	cmp	r3, #0
 800e456:	d011      	beq.n	800e47c <HAL_UART_IRQHandler+0xf8>
 800e458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e45c:	f003 0301 	and.w	r3, r3, #1
 800e460:	2b00      	cmp	r3, #0
 800e462:	d00b      	beq.n	800e47c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	2202      	movs	r2, #2
 800e46a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e472:	f043 0204 	orr.w	r2, r3, #4
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e47c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e480:	f003 0304 	and.w	r3, r3, #4
 800e484:	2b00      	cmp	r3, #0
 800e486:	d011      	beq.n	800e4ac <HAL_UART_IRQHandler+0x128>
 800e488:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e48c:	f003 0301 	and.w	r3, r3, #1
 800e490:	2b00      	cmp	r3, #0
 800e492:	d00b      	beq.n	800e4ac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	2204      	movs	r2, #4
 800e49a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4a2:	f043 0202 	orr.w	r2, r3, #2
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e4ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4b0:	f003 0308 	and.w	r3, r3, #8
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d017      	beq.n	800e4e8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e4b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4bc:	f003 0320 	and.w	r3, r3, #32
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d105      	bne.n	800e4d0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e4c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e4c8:	4b5c      	ldr	r3, [pc, #368]	; (800e63c <HAL_UART_IRQHandler+0x2b8>)
 800e4ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d00b      	beq.n	800e4e8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	2208      	movs	r2, #8
 800e4d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4de:	f043 0208 	orr.w	r2, r3, #8
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e4e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d012      	beq.n	800e51a <HAL_UART_IRQHandler+0x196>
 800e4f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d00c      	beq.n	800e51a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e508:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e510:	f043 0220 	orr.w	r2, r3, #32
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e520:	2b00      	cmp	r3, #0
 800e522:	f000 8249 	beq.w	800e9b8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e52a:	f003 0320 	and.w	r3, r3, #32
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d013      	beq.n	800e55a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e536:	f003 0320 	and.w	r3, r3, #32
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d105      	bne.n	800e54a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e53e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e546:	2b00      	cmp	r3, #0
 800e548:	d007      	beq.n	800e55a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d003      	beq.n	800e55a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e560:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	689b      	ldr	r3, [r3, #8]
 800e56a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e56e:	2b40      	cmp	r3, #64	; 0x40
 800e570:	d005      	beq.n	800e57e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e576:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d054      	beq.n	800e628 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f001 f812 	bl	800f5a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	689b      	ldr	r3, [r3, #8]
 800e58a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e58e:	2b40      	cmp	r3, #64	; 0x40
 800e590:	d146      	bne.n	800e620 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	3308      	adds	r3, #8
 800e598:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e59c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e5a0:	e853 3f00 	ldrex	r3, [r3]
 800e5a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e5a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e5ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e5b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	3308      	adds	r3, #8
 800e5ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e5be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e5c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e5ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e5ce:	e841 2300 	strex	r3, r2, [r1]
 800e5d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e5d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d1d9      	bne.n	800e592 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d017      	beq.n	800e618 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e5ee:	4a15      	ldr	r2, [pc, #84]	; (800e644 <HAL_UART_IRQHandler+0x2c0>)
 800e5f0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f7fc fc33 	bl	800ae64 <HAL_DMA_Abort_IT>
 800e5fe:	4603      	mov	r3, r0
 800e600:	2b00      	cmp	r3, #0
 800e602:	d019      	beq.n	800e638 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e60c:	687a      	ldr	r2, [r7, #4]
 800e60e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800e612:	4610      	mov	r0, r2
 800e614:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e616:	e00f      	b.n	800e638 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f7fb ff79 	bl	800a510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e61e:	e00b      	b.n	800e638 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f7fb ff75 	bl	800a510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e626:	e007      	b.n	800e638 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	f7fb ff71 	bl	800a510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2200      	movs	r2, #0
 800e632:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800e636:	e1bf      	b.n	800e9b8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e638:	bf00      	nop
    return;
 800e63a:	e1bd      	b.n	800e9b8 <HAL_UART_IRQHandler+0x634>
 800e63c:	10000001 	.word	0x10000001
 800e640:	04000120 	.word	0x04000120
 800e644:	0800f675 	.word	0x0800f675

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e64c:	2b01      	cmp	r3, #1
 800e64e:	f040 8153 	bne.w	800e8f8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e656:	f003 0310 	and.w	r3, r3, #16
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	f000 814c 	beq.w	800e8f8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e664:	f003 0310 	and.w	r3, r3, #16
 800e668:	2b00      	cmp	r3, #0
 800e66a:	f000 8145 	beq.w	800e8f8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	2210      	movs	r2, #16
 800e674:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	689b      	ldr	r3, [r3, #8]
 800e67c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e680:	2b40      	cmp	r3, #64	; 0x40
 800e682:	f040 80bb 	bne.w	800e7fc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	685b      	ldr	r3, [r3, #4]
 800e690:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e694:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e698:	2b00      	cmp	r3, #0
 800e69a:	f000 818f 	beq.w	800e9bc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e6a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e6a8:	429a      	cmp	r2, r3
 800e6aa:	f080 8187 	bcs.w	800e9bc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e6b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	f003 0320 	and.w	r3, r3, #32
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	f040 8087 	bne.w	800e7da <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e6d8:	e853 3f00 	ldrex	r3, [r3]
 800e6dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e6e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e6e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e6e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	461a      	mov	r2, r3
 800e6f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e6f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e6fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e702:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e706:	e841 2300 	strex	r3, r2, [r1]
 800e70a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e70e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e712:	2b00      	cmp	r3, #0
 800e714:	d1da      	bne.n	800e6cc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	3308      	adds	r3, #8
 800e71c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e71e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e720:	e853 3f00 	ldrex	r3, [r3]
 800e724:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e726:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e728:	f023 0301 	bic.w	r3, r3, #1
 800e72c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	3308      	adds	r3, #8
 800e736:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e73a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e73e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e740:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e742:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e746:	e841 2300 	strex	r3, r2, [r1]
 800e74a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e74c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d1e1      	bne.n	800e716 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	3308      	adds	r3, #8
 800e758:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e75a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e75c:	e853 3f00 	ldrex	r3, [r3]
 800e760:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e768:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	3308      	adds	r3, #8
 800e772:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e776:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e778:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e77a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e77c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e77e:	e841 2300 	strex	r3, r2, [r1]
 800e782:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e786:	2b00      	cmp	r3, #0
 800e788:	d1e3      	bne.n	800e752 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	2220      	movs	r2, #32
 800e78e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2200      	movs	r2, #0
 800e796:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e79e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7a0:	e853 3f00 	ldrex	r3, [r3]
 800e7a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e7a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e7a8:	f023 0310 	bic.w	r3, r3, #16
 800e7ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	461a      	mov	r2, r3
 800e7b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e7ba:	65bb      	str	r3, [r7, #88]	; 0x58
 800e7bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e7c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e7c2:	e841 2300 	strex	r3, r2, [r1]
 800e7c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e7c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d1e4      	bne.n	800e798 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f7fc faec 	bl	800adb2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2202      	movs	r2, #2
 800e7de:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e7ec:	b29b      	uxth	r3, r3
 800e7ee:	1ad3      	subs	r3, r2, r3
 800e7f0:	b29b      	uxth	r3, r3
 800e7f2:	4619      	mov	r1, r3
 800e7f4:	6878      	ldr	r0, [r7, #4]
 800e7f6:	f000 f8f3 	bl	800e9e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e7fa:	e0df      	b.n	800e9bc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e808:	b29b      	uxth	r3, r3
 800e80a:	1ad3      	subs	r3, r2, r3
 800e80c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e816:	b29b      	uxth	r3, r3
 800e818:	2b00      	cmp	r3, #0
 800e81a:	f000 80d1 	beq.w	800e9c0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800e81e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e822:	2b00      	cmp	r3, #0
 800e824:	f000 80cc 	beq.w	800e9c0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e830:	e853 3f00 	ldrex	r3, [r3]
 800e834:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e838:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e83c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	461a      	mov	r2, r3
 800e846:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e84a:	647b      	str	r3, [r7, #68]	; 0x44
 800e84c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e84e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e850:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e852:	e841 2300 	strex	r3, r2, [r1]
 800e856:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d1e4      	bne.n	800e828 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	3308      	adds	r3, #8
 800e864:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e868:	e853 3f00 	ldrex	r3, [r3]
 800e86c:	623b      	str	r3, [r7, #32]
   return(result);
 800e86e:	6a3b      	ldr	r3, [r7, #32]
 800e870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e874:	f023 0301 	bic.w	r3, r3, #1
 800e878:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	3308      	adds	r3, #8
 800e882:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e886:	633a      	str	r2, [r7, #48]	; 0x30
 800e888:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e88a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e88c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e88e:	e841 2300 	strex	r3, r2, [r1]
 800e892:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e896:	2b00      	cmp	r3, #0
 800e898:	d1e1      	bne.n	800e85e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2220      	movs	r2, #32
 800e89e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8b4:	693b      	ldr	r3, [r7, #16]
 800e8b6:	e853 3f00 	ldrex	r3, [r3]
 800e8ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	f023 0310 	bic.w	r3, r3, #16
 800e8c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	461a      	mov	r2, r3
 800e8cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e8d0:	61fb      	str	r3, [r7, #28]
 800e8d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8d4:	69b9      	ldr	r1, [r7, #24]
 800e8d6:	69fa      	ldr	r2, [r7, #28]
 800e8d8:	e841 2300 	strex	r3, r2, [r1]
 800e8dc:	617b      	str	r3, [r7, #20]
   return(result);
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d1e4      	bne.n	800e8ae <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2202      	movs	r2, #2
 800e8e8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e8ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e8ee:	4619      	mov	r1, r3
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	f000 f875 	bl	800e9e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e8f6:	e063      	b.n	800e9c0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e8f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e900:	2b00      	cmp	r3, #0
 800e902:	d00e      	beq.n	800e922 <HAL_UART_IRQHandler+0x59e>
 800e904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d008      	beq.n	800e922 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e918:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f001 fc08 	bl	8010130 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e920:	e051      	b.n	800e9c6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d014      	beq.n	800e958 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e92e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e936:	2b00      	cmp	r3, #0
 800e938:	d105      	bne.n	800e946 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e93a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e93e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e942:	2b00      	cmp	r3, #0
 800e944:	d008      	beq.n	800e958 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d03a      	beq.n	800e9c4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	4798      	blx	r3
    }
    return;
 800e956:	e035      	b.n	800e9c4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e95c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e960:	2b00      	cmp	r3, #0
 800e962:	d009      	beq.n	800e978 <HAL_UART_IRQHandler+0x5f4>
 800e964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d003      	beq.n	800e978 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f000 fe95 	bl	800f6a0 <UART_EndTransmit_IT>
    return;
 800e976:	e026      	b.n	800e9c6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e97c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e980:	2b00      	cmp	r3, #0
 800e982:	d009      	beq.n	800e998 <HAL_UART_IRQHandler+0x614>
 800e984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e988:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d003      	beq.n	800e998 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f001 fbe1 	bl	8010158 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e996:	e016      	b.n	800e9c6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e99c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d010      	beq.n	800e9c6 <HAL_UART_IRQHandler+0x642>
 800e9a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	da0c      	bge.n	800e9c6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f001 fbc9 	bl	8010144 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e9b2:	e008      	b.n	800e9c6 <HAL_UART_IRQHandler+0x642>
      return;
 800e9b4:	bf00      	nop
 800e9b6:	e006      	b.n	800e9c6 <HAL_UART_IRQHandler+0x642>
    return;
 800e9b8:	bf00      	nop
 800e9ba:	e004      	b.n	800e9c6 <HAL_UART_IRQHandler+0x642>
      return;
 800e9bc:	bf00      	nop
 800e9be:	e002      	b.n	800e9c6 <HAL_UART_IRQHandler+0x642>
      return;
 800e9c0:	bf00      	nop
 800e9c2:	e000      	b.n	800e9c6 <HAL_UART_IRQHandler+0x642>
    return;
 800e9c4:	bf00      	nop
  }
}
 800e9c6:	37e8      	adds	r7, #232	; 0xe8
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}

0800e9cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	b083      	sub	sp, #12
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e9d4:	bf00      	nop
 800e9d6:	370c      	adds	r7, #12
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9de:	4770      	bx	lr

0800e9e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	b083      	sub	sp, #12
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	460b      	mov	r3, r1
 800e9ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e9ec:	bf00      	nop
 800e9ee:	370c      	adds	r7, #12
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f6:	4770      	bx	lr

0800e9f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e9f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e9fc:	b08c      	sub	sp, #48	; 0x30
 800e9fe:	af00      	add	r7, sp, #0
 800ea00:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ea02:	2300      	movs	r3, #0
 800ea04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	689a      	ldr	r2, [r3, #8]
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	691b      	ldr	r3, [r3, #16]
 800ea10:	431a      	orrs	r2, r3
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	695b      	ldr	r3, [r3, #20]
 800ea16:	431a      	orrs	r2, r3
 800ea18:	697b      	ldr	r3, [r7, #20]
 800ea1a:	69db      	ldr	r3, [r3, #28]
 800ea1c:	4313      	orrs	r3, r2
 800ea1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	681a      	ldr	r2, [r3, #0]
 800ea26:	4baa      	ldr	r3, [pc, #680]	; (800ecd0 <UART_SetConfig+0x2d8>)
 800ea28:	4013      	ands	r3, r2
 800ea2a:	697a      	ldr	r2, [r7, #20]
 800ea2c:	6812      	ldr	r2, [r2, #0]
 800ea2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea30:	430b      	orrs	r3, r1
 800ea32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	685b      	ldr	r3, [r3, #4]
 800ea3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	68da      	ldr	r2, [r3, #12]
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	430a      	orrs	r2, r1
 800ea48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	699b      	ldr	r3, [r3, #24]
 800ea4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	4a9f      	ldr	r2, [pc, #636]	; (800ecd4 <UART_SetConfig+0x2dc>)
 800ea56:	4293      	cmp	r3, r2
 800ea58:	d004      	beq.n	800ea64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	6a1b      	ldr	r3, [r3, #32]
 800ea5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea60:	4313      	orrs	r3, r2
 800ea62:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	689b      	ldr	r3, [r3, #8]
 800ea6a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800ea6e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800ea72:	697a      	ldr	r2, [r7, #20]
 800ea74:	6812      	ldr	r2, [r2, #0]
 800ea76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea78:	430b      	orrs	r3, r1
 800ea7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea82:	f023 010f 	bic.w	r1, r3, #15
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea8a:	697b      	ldr	r3, [r7, #20]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	430a      	orrs	r2, r1
 800ea90:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ea92:	697b      	ldr	r3, [r7, #20]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	4a90      	ldr	r2, [pc, #576]	; (800ecd8 <UART_SetConfig+0x2e0>)
 800ea98:	4293      	cmp	r3, r2
 800ea9a:	d125      	bne.n	800eae8 <UART_SetConfig+0xf0>
 800ea9c:	4b8f      	ldr	r3, [pc, #572]	; (800ecdc <UART_SetConfig+0x2e4>)
 800ea9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eaa2:	f003 0303 	and.w	r3, r3, #3
 800eaa6:	2b03      	cmp	r3, #3
 800eaa8:	d81a      	bhi.n	800eae0 <UART_SetConfig+0xe8>
 800eaaa:	a201      	add	r2, pc, #4	; (adr r2, 800eab0 <UART_SetConfig+0xb8>)
 800eaac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eab0:	0800eac1 	.word	0x0800eac1
 800eab4:	0800ead1 	.word	0x0800ead1
 800eab8:	0800eac9 	.word	0x0800eac9
 800eabc:	0800ead9 	.word	0x0800ead9
 800eac0:	2301      	movs	r3, #1
 800eac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eac6:	e116      	b.n	800ecf6 <UART_SetConfig+0x2fe>
 800eac8:	2302      	movs	r3, #2
 800eaca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eace:	e112      	b.n	800ecf6 <UART_SetConfig+0x2fe>
 800ead0:	2304      	movs	r3, #4
 800ead2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ead6:	e10e      	b.n	800ecf6 <UART_SetConfig+0x2fe>
 800ead8:	2308      	movs	r3, #8
 800eada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eade:	e10a      	b.n	800ecf6 <UART_SetConfig+0x2fe>
 800eae0:	2310      	movs	r3, #16
 800eae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eae6:	e106      	b.n	800ecf6 <UART_SetConfig+0x2fe>
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	4a7c      	ldr	r2, [pc, #496]	; (800ece0 <UART_SetConfig+0x2e8>)
 800eaee:	4293      	cmp	r3, r2
 800eaf0:	d138      	bne.n	800eb64 <UART_SetConfig+0x16c>
 800eaf2:	4b7a      	ldr	r3, [pc, #488]	; (800ecdc <UART_SetConfig+0x2e4>)
 800eaf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eaf8:	f003 030c 	and.w	r3, r3, #12
 800eafc:	2b0c      	cmp	r3, #12
 800eafe:	d82d      	bhi.n	800eb5c <UART_SetConfig+0x164>
 800eb00:	a201      	add	r2, pc, #4	; (adr r2, 800eb08 <UART_SetConfig+0x110>)
 800eb02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb06:	bf00      	nop
 800eb08:	0800eb3d 	.word	0x0800eb3d
 800eb0c:	0800eb5d 	.word	0x0800eb5d
 800eb10:	0800eb5d 	.word	0x0800eb5d
 800eb14:	0800eb5d 	.word	0x0800eb5d
 800eb18:	0800eb4d 	.word	0x0800eb4d
 800eb1c:	0800eb5d 	.word	0x0800eb5d
 800eb20:	0800eb5d 	.word	0x0800eb5d
 800eb24:	0800eb5d 	.word	0x0800eb5d
 800eb28:	0800eb45 	.word	0x0800eb45
 800eb2c:	0800eb5d 	.word	0x0800eb5d
 800eb30:	0800eb5d 	.word	0x0800eb5d
 800eb34:	0800eb5d 	.word	0x0800eb5d
 800eb38:	0800eb55 	.word	0x0800eb55
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eb42:	e0d8      	b.n	800ecf6 <UART_SetConfig+0x2fe>
 800eb44:	2302      	movs	r3, #2
 800eb46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eb4a:	e0d4      	b.n	800ecf6 <UART_SetConfig+0x2fe>
 800eb4c:	2304      	movs	r3, #4
 800eb4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eb52:	e0d0      	b.n	800ecf6 <UART_SetConfig+0x2fe>
 800eb54:	2308      	movs	r3, #8
 800eb56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eb5a:	e0cc      	b.n	800ecf6 <UART_SetConfig+0x2fe>
 800eb5c:	2310      	movs	r3, #16
 800eb5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eb62:	e0c8      	b.n	800ecf6 <UART_SetConfig+0x2fe>
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	4a5e      	ldr	r2, [pc, #376]	; (800ece4 <UART_SetConfig+0x2ec>)
 800eb6a:	4293      	cmp	r3, r2
 800eb6c:	d125      	bne.n	800ebba <UART_SetConfig+0x1c2>
 800eb6e:	4b5b      	ldr	r3, [pc, #364]	; (800ecdc <UART_SetConfig+0x2e4>)
 800eb70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800eb78:	2b30      	cmp	r3, #48	; 0x30
 800eb7a:	d016      	beq.n	800ebaa <UART_SetConfig+0x1b2>
 800eb7c:	2b30      	cmp	r3, #48	; 0x30
 800eb7e:	d818      	bhi.n	800ebb2 <UART_SetConfig+0x1ba>
 800eb80:	2b20      	cmp	r3, #32
 800eb82:	d00a      	beq.n	800eb9a <UART_SetConfig+0x1a2>
 800eb84:	2b20      	cmp	r3, #32
 800eb86:	d814      	bhi.n	800ebb2 <UART_SetConfig+0x1ba>
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d002      	beq.n	800eb92 <UART_SetConfig+0x19a>
 800eb8c:	2b10      	cmp	r3, #16
 800eb8e:	d008      	beq.n	800eba2 <UART_SetConfig+0x1aa>
 800eb90:	e00f      	b.n	800ebb2 <UART_SetConfig+0x1ba>
 800eb92:	2300      	movs	r3, #0
 800eb94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eb98:	e0ad      	b.n	800ecf6 <UART_SetConfig+0x2fe>
 800eb9a:	2302      	movs	r3, #2
 800eb9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eba0:	e0a9      	b.n	800ecf6 <UART_SetConfig+0x2fe>
 800eba2:	2304      	movs	r3, #4
 800eba4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eba8:	e0a5      	b.n	800ecf6 <UART_SetConfig+0x2fe>
 800ebaa:	2308      	movs	r3, #8
 800ebac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ebb0:	e0a1      	b.n	800ecf6 <UART_SetConfig+0x2fe>
 800ebb2:	2310      	movs	r3, #16
 800ebb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ebb8:	e09d      	b.n	800ecf6 <UART_SetConfig+0x2fe>
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	4a4a      	ldr	r2, [pc, #296]	; (800ece8 <UART_SetConfig+0x2f0>)
 800ebc0:	4293      	cmp	r3, r2
 800ebc2:	d125      	bne.n	800ec10 <UART_SetConfig+0x218>
 800ebc4:	4b45      	ldr	r3, [pc, #276]	; (800ecdc <UART_SetConfig+0x2e4>)
 800ebc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ebca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ebce:	2bc0      	cmp	r3, #192	; 0xc0
 800ebd0:	d016      	beq.n	800ec00 <UART_SetConfig+0x208>
 800ebd2:	2bc0      	cmp	r3, #192	; 0xc0
 800ebd4:	d818      	bhi.n	800ec08 <UART_SetConfig+0x210>
 800ebd6:	2b80      	cmp	r3, #128	; 0x80
 800ebd8:	d00a      	beq.n	800ebf0 <UART_SetConfig+0x1f8>
 800ebda:	2b80      	cmp	r3, #128	; 0x80
 800ebdc:	d814      	bhi.n	800ec08 <UART_SetConfig+0x210>
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d002      	beq.n	800ebe8 <UART_SetConfig+0x1f0>
 800ebe2:	2b40      	cmp	r3, #64	; 0x40
 800ebe4:	d008      	beq.n	800ebf8 <UART_SetConfig+0x200>
 800ebe6:	e00f      	b.n	800ec08 <UART_SetConfig+0x210>
 800ebe8:	2300      	movs	r3, #0
 800ebea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ebee:	e082      	b.n	800ecf6 <UART_SetConfig+0x2fe>
 800ebf0:	2302      	movs	r3, #2
 800ebf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ebf6:	e07e      	b.n	800ecf6 <UART_SetConfig+0x2fe>
 800ebf8:	2304      	movs	r3, #4
 800ebfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ebfe:	e07a      	b.n	800ecf6 <UART_SetConfig+0x2fe>
 800ec00:	2308      	movs	r3, #8
 800ec02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ec06:	e076      	b.n	800ecf6 <UART_SetConfig+0x2fe>
 800ec08:	2310      	movs	r3, #16
 800ec0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ec0e:	e072      	b.n	800ecf6 <UART_SetConfig+0x2fe>
 800ec10:	697b      	ldr	r3, [r7, #20]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	4a35      	ldr	r2, [pc, #212]	; (800ecec <UART_SetConfig+0x2f4>)
 800ec16:	4293      	cmp	r3, r2
 800ec18:	d12a      	bne.n	800ec70 <UART_SetConfig+0x278>
 800ec1a:	4b30      	ldr	r3, [pc, #192]	; (800ecdc <UART_SetConfig+0x2e4>)
 800ec1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ec24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ec28:	d01a      	beq.n	800ec60 <UART_SetConfig+0x268>
 800ec2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ec2e:	d81b      	bhi.n	800ec68 <UART_SetConfig+0x270>
 800ec30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec34:	d00c      	beq.n	800ec50 <UART_SetConfig+0x258>
 800ec36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec3a:	d815      	bhi.n	800ec68 <UART_SetConfig+0x270>
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d003      	beq.n	800ec48 <UART_SetConfig+0x250>
 800ec40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec44:	d008      	beq.n	800ec58 <UART_SetConfig+0x260>
 800ec46:	e00f      	b.n	800ec68 <UART_SetConfig+0x270>
 800ec48:	2300      	movs	r3, #0
 800ec4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ec4e:	e052      	b.n	800ecf6 <UART_SetConfig+0x2fe>
 800ec50:	2302      	movs	r3, #2
 800ec52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ec56:	e04e      	b.n	800ecf6 <UART_SetConfig+0x2fe>
 800ec58:	2304      	movs	r3, #4
 800ec5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ec5e:	e04a      	b.n	800ecf6 <UART_SetConfig+0x2fe>
 800ec60:	2308      	movs	r3, #8
 800ec62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ec66:	e046      	b.n	800ecf6 <UART_SetConfig+0x2fe>
 800ec68:	2310      	movs	r3, #16
 800ec6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ec6e:	e042      	b.n	800ecf6 <UART_SetConfig+0x2fe>
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	4a17      	ldr	r2, [pc, #92]	; (800ecd4 <UART_SetConfig+0x2dc>)
 800ec76:	4293      	cmp	r3, r2
 800ec78:	d13a      	bne.n	800ecf0 <UART_SetConfig+0x2f8>
 800ec7a:	4b18      	ldr	r3, [pc, #96]	; (800ecdc <UART_SetConfig+0x2e4>)
 800ec7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ec84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ec88:	d01a      	beq.n	800ecc0 <UART_SetConfig+0x2c8>
 800ec8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ec8e:	d81b      	bhi.n	800ecc8 <UART_SetConfig+0x2d0>
 800ec90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec94:	d00c      	beq.n	800ecb0 <UART_SetConfig+0x2b8>
 800ec96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec9a:	d815      	bhi.n	800ecc8 <UART_SetConfig+0x2d0>
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d003      	beq.n	800eca8 <UART_SetConfig+0x2b0>
 800eca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eca4:	d008      	beq.n	800ecb8 <UART_SetConfig+0x2c0>
 800eca6:	e00f      	b.n	800ecc8 <UART_SetConfig+0x2d0>
 800eca8:	2300      	movs	r3, #0
 800ecaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ecae:	e022      	b.n	800ecf6 <UART_SetConfig+0x2fe>
 800ecb0:	2302      	movs	r3, #2
 800ecb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ecb6:	e01e      	b.n	800ecf6 <UART_SetConfig+0x2fe>
 800ecb8:	2304      	movs	r3, #4
 800ecba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ecbe:	e01a      	b.n	800ecf6 <UART_SetConfig+0x2fe>
 800ecc0:	2308      	movs	r3, #8
 800ecc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ecc6:	e016      	b.n	800ecf6 <UART_SetConfig+0x2fe>
 800ecc8:	2310      	movs	r3, #16
 800ecca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ecce:	e012      	b.n	800ecf6 <UART_SetConfig+0x2fe>
 800ecd0:	cfff69f3 	.word	0xcfff69f3
 800ecd4:	40008000 	.word	0x40008000
 800ecd8:	40013800 	.word	0x40013800
 800ecdc:	40021000 	.word	0x40021000
 800ece0:	40004400 	.word	0x40004400
 800ece4:	40004800 	.word	0x40004800
 800ece8:	40004c00 	.word	0x40004c00
 800ecec:	40005000 	.word	0x40005000
 800ecf0:	2310      	movs	r3, #16
 800ecf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	4aae      	ldr	r2, [pc, #696]	; (800efb4 <UART_SetConfig+0x5bc>)
 800ecfc:	4293      	cmp	r3, r2
 800ecfe:	f040 8097 	bne.w	800ee30 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ed02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ed06:	2b08      	cmp	r3, #8
 800ed08:	d823      	bhi.n	800ed52 <UART_SetConfig+0x35a>
 800ed0a:	a201      	add	r2, pc, #4	; (adr r2, 800ed10 <UART_SetConfig+0x318>)
 800ed0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed10:	0800ed35 	.word	0x0800ed35
 800ed14:	0800ed53 	.word	0x0800ed53
 800ed18:	0800ed3d 	.word	0x0800ed3d
 800ed1c:	0800ed53 	.word	0x0800ed53
 800ed20:	0800ed43 	.word	0x0800ed43
 800ed24:	0800ed53 	.word	0x0800ed53
 800ed28:	0800ed53 	.word	0x0800ed53
 800ed2c:	0800ed53 	.word	0x0800ed53
 800ed30:	0800ed4b 	.word	0x0800ed4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ed34:	f7fe fdf0 	bl	800d918 <HAL_RCC_GetPCLK1Freq>
 800ed38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ed3a:	e010      	b.n	800ed5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ed3c:	4b9e      	ldr	r3, [pc, #632]	; (800efb8 <UART_SetConfig+0x5c0>)
 800ed3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ed40:	e00d      	b.n	800ed5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ed42:	f7fe fd7b 	bl	800d83c <HAL_RCC_GetSysClockFreq>
 800ed46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ed48:	e009      	b.n	800ed5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ed4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ed50:	e005      	b.n	800ed5e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ed52:	2300      	movs	r3, #0
 800ed54:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ed56:	2301      	movs	r3, #1
 800ed58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ed5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ed5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	f000 8130 	beq.w	800efc6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed6a:	4a94      	ldr	r2, [pc, #592]	; (800efbc <UART_SetConfig+0x5c4>)
 800ed6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed70:	461a      	mov	r2, r3
 800ed72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed74:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed78:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ed7a:	697b      	ldr	r3, [r7, #20]
 800ed7c:	685a      	ldr	r2, [r3, #4]
 800ed7e:	4613      	mov	r3, r2
 800ed80:	005b      	lsls	r3, r3, #1
 800ed82:	4413      	add	r3, r2
 800ed84:	69ba      	ldr	r2, [r7, #24]
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d305      	bcc.n	800ed96 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	685b      	ldr	r3, [r3, #4]
 800ed8e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ed90:	69ba      	ldr	r2, [r7, #24]
 800ed92:	429a      	cmp	r2, r3
 800ed94:	d903      	bls.n	800ed9e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ed96:	2301      	movs	r3, #1
 800ed98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ed9c:	e113      	b.n	800efc6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ed9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eda0:	2200      	movs	r2, #0
 800eda2:	60bb      	str	r3, [r7, #8]
 800eda4:	60fa      	str	r2, [r7, #12]
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edaa:	4a84      	ldr	r2, [pc, #528]	; (800efbc <UART_SetConfig+0x5c4>)
 800edac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800edb0:	b29b      	uxth	r3, r3
 800edb2:	2200      	movs	r2, #0
 800edb4:	603b      	str	r3, [r7, #0]
 800edb6:	607a      	str	r2, [r7, #4]
 800edb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800edbc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800edc0:	f7f9 fb6a 	bl	8008498 <__aeabi_uldivmod>
 800edc4:	4602      	mov	r2, r0
 800edc6:	460b      	mov	r3, r1
 800edc8:	4610      	mov	r0, r2
 800edca:	4619      	mov	r1, r3
 800edcc:	f04f 0200 	mov.w	r2, #0
 800edd0:	f04f 0300 	mov.w	r3, #0
 800edd4:	020b      	lsls	r3, r1, #8
 800edd6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800edda:	0202      	lsls	r2, r0, #8
 800eddc:	6979      	ldr	r1, [r7, #20]
 800edde:	6849      	ldr	r1, [r1, #4]
 800ede0:	0849      	lsrs	r1, r1, #1
 800ede2:	2000      	movs	r0, #0
 800ede4:	460c      	mov	r4, r1
 800ede6:	4605      	mov	r5, r0
 800ede8:	eb12 0804 	adds.w	r8, r2, r4
 800edec:	eb43 0905 	adc.w	r9, r3, r5
 800edf0:	697b      	ldr	r3, [r7, #20]
 800edf2:	685b      	ldr	r3, [r3, #4]
 800edf4:	2200      	movs	r2, #0
 800edf6:	469a      	mov	sl, r3
 800edf8:	4693      	mov	fp, r2
 800edfa:	4652      	mov	r2, sl
 800edfc:	465b      	mov	r3, fp
 800edfe:	4640      	mov	r0, r8
 800ee00:	4649      	mov	r1, r9
 800ee02:	f7f9 fb49 	bl	8008498 <__aeabi_uldivmod>
 800ee06:	4602      	mov	r2, r0
 800ee08:	460b      	mov	r3, r1
 800ee0a:	4613      	mov	r3, r2
 800ee0c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ee0e:	6a3b      	ldr	r3, [r7, #32]
 800ee10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ee14:	d308      	bcc.n	800ee28 <UART_SetConfig+0x430>
 800ee16:	6a3b      	ldr	r3, [r7, #32]
 800ee18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee1c:	d204      	bcs.n	800ee28 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ee1e:	697b      	ldr	r3, [r7, #20]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	6a3a      	ldr	r2, [r7, #32]
 800ee24:	60da      	str	r2, [r3, #12]
 800ee26:	e0ce      	b.n	800efc6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ee28:	2301      	movs	r3, #1
 800ee2a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ee2e:	e0ca      	b.n	800efc6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ee30:	697b      	ldr	r3, [r7, #20]
 800ee32:	69db      	ldr	r3, [r3, #28]
 800ee34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ee38:	d166      	bne.n	800ef08 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ee3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ee3e:	2b08      	cmp	r3, #8
 800ee40:	d827      	bhi.n	800ee92 <UART_SetConfig+0x49a>
 800ee42:	a201      	add	r2, pc, #4	; (adr r2, 800ee48 <UART_SetConfig+0x450>)
 800ee44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee48:	0800ee6d 	.word	0x0800ee6d
 800ee4c:	0800ee75 	.word	0x0800ee75
 800ee50:	0800ee7d 	.word	0x0800ee7d
 800ee54:	0800ee93 	.word	0x0800ee93
 800ee58:	0800ee83 	.word	0x0800ee83
 800ee5c:	0800ee93 	.word	0x0800ee93
 800ee60:	0800ee93 	.word	0x0800ee93
 800ee64:	0800ee93 	.word	0x0800ee93
 800ee68:	0800ee8b 	.word	0x0800ee8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ee6c:	f7fe fd54 	bl	800d918 <HAL_RCC_GetPCLK1Freq>
 800ee70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ee72:	e014      	b.n	800ee9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ee74:	f7fe fd66 	bl	800d944 <HAL_RCC_GetPCLK2Freq>
 800ee78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ee7a:	e010      	b.n	800ee9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ee7c:	4b4e      	ldr	r3, [pc, #312]	; (800efb8 <UART_SetConfig+0x5c0>)
 800ee7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ee80:	e00d      	b.n	800ee9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ee82:	f7fe fcdb 	bl	800d83c <HAL_RCC_GetSysClockFreq>
 800ee86:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ee88:	e009      	b.n	800ee9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ee8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ee90:	e005      	b.n	800ee9e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ee92:	2300      	movs	r3, #0
 800ee94:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ee96:	2301      	movs	r3, #1
 800ee98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ee9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ee9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	f000 8090 	beq.w	800efc6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eeaa:	4a44      	ldr	r2, [pc, #272]	; (800efbc <UART_SetConfig+0x5c4>)
 800eeac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eeb0:	461a      	mov	r2, r3
 800eeb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb4:	fbb3 f3f2 	udiv	r3, r3, r2
 800eeb8:	005a      	lsls	r2, r3, #1
 800eeba:	697b      	ldr	r3, [r7, #20]
 800eebc:	685b      	ldr	r3, [r3, #4]
 800eebe:	085b      	lsrs	r3, r3, #1
 800eec0:	441a      	add	r2, r3
 800eec2:	697b      	ldr	r3, [r7, #20]
 800eec4:	685b      	ldr	r3, [r3, #4]
 800eec6:	fbb2 f3f3 	udiv	r3, r2, r3
 800eeca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eecc:	6a3b      	ldr	r3, [r7, #32]
 800eece:	2b0f      	cmp	r3, #15
 800eed0:	d916      	bls.n	800ef00 <UART_SetConfig+0x508>
 800eed2:	6a3b      	ldr	r3, [r7, #32]
 800eed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eed8:	d212      	bcs.n	800ef00 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800eeda:	6a3b      	ldr	r3, [r7, #32]
 800eedc:	b29b      	uxth	r3, r3
 800eede:	f023 030f 	bic.w	r3, r3, #15
 800eee2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800eee4:	6a3b      	ldr	r3, [r7, #32]
 800eee6:	085b      	lsrs	r3, r3, #1
 800eee8:	b29b      	uxth	r3, r3
 800eeea:	f003 0307 	and.w	r3, r3, #7
 800eeee:	b29a      	uxth	r2, r3
 800eef0:	8bfb      	ldrh	r3, [r7, #30]
 800eef2:	4313      	orrs	r3, r2
 800eef4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	8bfa      	ldrh	r2, [r7, #30]
 800eefc:	60da      	str	r2, [r3, #12]
 800eefe:	e062      	b.n	800efc6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ef00:	2301      	movs	r3, #1
 800ef02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ef06:	e05e      	b.n	800efc6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ef08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ef0c:	2b08      	cmp	r3, #8
 800ef0e:	d828      	bhi.n	800ef62 <UART_SetConfig+0x56a>
 800ef10:	a201      	add	r2, pc, #4	; (adr r2, 800ef18 <UART_SetConfig+0x520>)
 800ef12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef16:	bf00      	nop
 800ef18:	0800ef3d 	.word	0x0800ef3d
 800ef1c:	0800ef45 	.word	0x0800ef45
 800ef20:	0800ef4d 	.word	0x0800ef4d
 800ef24:	0800ef63 	.word	0x0800ef63
 800ef28:	0800ef53 	.word	0x0800ef53
 800ef2c:	0800ef63 	.word	0x0800ef63
 800ef30:	0800ef63 	.word	0x0800ef63
 800ef34:	0800ef63 	.word	0x0800ef63
 800ef38:	0800ef5b 	.word	0x0800ef5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef3c:	f7fe fcec 	bl	800d918 <HAL_RCC_GetPCLK1Freq>
 800ef40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ef42:	e014      	b.n	800ef6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ef44:	f7fe fcfe 	bl	800d944 <HAL_RCC_GetPCLK2Freq>
 800ef48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ef4a:	e010      	b.n	800ef6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ef4c:	4b1a      	ldr	r3, [pc, #104]	; (800efb8 <UART_SetConfig+0x5c0>)
 800ef4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ef50:	e00d      	b.n	800ef6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ef52:	f7fe fc73 	bl	800d83c <HAL_RCC_GetSysClockFreq>
 800ef56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ef58:	e009      	b.n	800ef6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ef5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ef5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ef60:	e005      	b.n	800ef6e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800ef62:	2300      	movs	r3, #0
 800ef64:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ef66:	2301      	movs	r3, #1
 800ef68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ef6c:	bf00      	nop
    }

    if (pclk != 0U)
 800ef6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d028      	beq.n	800efc6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ef74:	697b      	ldr	r3, [r7, #20]
 800ef76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef78:	4a10      	ldr	r2, [pc, #64]	; (800efbc <UART_SetConfig+0x5c4>)
 800ef7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ef7e:	461a      	mov	r2, r3
 800ef80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef82:	fbb3 f2f2 	udiv	r2, r3, r2
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	685b      	ldr	r3, [r3, #4]
 800ef8a:	085b      	lsrs	r3, r3, #1
 800ef8c:	441a      	add	r2, r3
 800ef8e:	697b      	ldr	r3, [r7, #20]
 800ef90:	685b      	ldr	r3, [r3, #4]
 800ef92:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef96:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ef98:	6a3b      	ldr	r3, [r7, #32]
 800ef9a:	2b0f      	cmp	r3, #15
 800ef9c:	d910      	bls.n	800efc0 <UART_SetConfig+0x5c8>
 800ef9e:	6a3b      	ldr	r3, [r7, #32]
 800efa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800efa4:	d20c      	bcs.n	800efc0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800efa6:	6a3b      	ldr	r3, [r7, #32]
 800efa8:	b29a      	uxth	r2, r3
 800efaa:	697b      	ldr	r3, [r7, #20]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	60da      	str	r2, [r3, #12]
 800efb0:	e009      	b.n	800efc6 <UART_SetConfig+0x5ce>
 800efb2:	bf00      	nop
 800efb4:	40008000 	.word	0x40008000
 800efb8:	00f42400 	.word	0x00f42400
 800efbc:	080184bc 	.word	0x080184bc
      }
      else
      {
        ret = HAL_ERROR;
 800efc0:	2301      	movs	r3, #1
 800efc2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	2201      	movs	r2, #1
 800efca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800efce:	697b      	ldr	r3, [r7, #20]
 800efd0:	2201      	movs	r2, #1
 800efd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800efd6:	697b      	ldr	r3, [r7, #20]
 800efd8:	2200      	movs	r2, #0
 800efda:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	2200      	movs	r2, #0
 800efe0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800efe2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	3730      	adds	r7, #48	; 0x30
 800efea:	46bd      	mov	sp, r7
 800efec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800eff0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800eff0:	b480      	push	{r7}
 800eff2:	b083      	sub	sp, #12
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800effc:	f003 0308 	and.w	r3, r3, #8
 800f000:	2b00      	cmp	r3, #0
 800f002:	d00a      	beq.n	800f01a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	685b      	ldr	r3, [r3, #4]
 800f00a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	430a      	orrs	r2, r1
 800f018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f01e:	f003 0301 	and.w	r3, r3, #1
 800f022:	2b00      	cmp	r3, #0
 800f024:	d00a      	beq.n	800f03c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	685b      	ldr	r3, [r3, #4]
 800f02c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	430a      	orrs	r2, r1
 800f03a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f040:	f003 0302 	and.w	r3, r3, #2
 800f044:	2b00      	cmp	r3, #0
 800f046:	d00a      	beq.n	800f05e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	685b      	ldr	r3, [r3, #4]
 800f04e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	430a      	orrs	r2, r1
 800f05c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f062:	f003 0304 	and.w	r3, r3, #4
 800f066:	2b00      	cmp	r3, #0
 800f068:	d00a      	beq.n	800f080 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	685b      	ldr	r3, [r3, #4]
 800f070:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	430a      	orrs	r2, r1
 800f07e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f084:	f003 0310 	and.w	r3, r3, #16
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d00a      	beq.n	800f0a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	689b      	ldr	r3, [r3, #8]
 800f092:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	430a      	orrs	r2, r1
 800f0a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0a6:	f003 0320 	and.w	r3, r3, #32
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d00a      	beq.n	800f0c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	689b      	ldr	r3, [r3, #8]
 800f0b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	430a      	orrs	r2, r1
 800f0c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d01a      	beq.n	800f106 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	685b      	ldr	r3, [r3, #4]
 800f0d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	430a      	orrs	r2, r1
 800f0e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f0ee:	d10a      	bne.n	800f106 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	685b      	ldr	r3, [r3, #4]
 800f0f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	430a      	orrs	r2, r1
 800f104:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f10a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d00a      	beq.n	800f128 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	685b      	ldr	r3, [r3, #4]
 800f118:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	430a      	orrs	r2, r1
 800f126:	605a      	str	r2, [r3, #4]
  }
}
 800f128:	bf00      	nop
 800f12a:	370c      	adds	r7, #12
 800f12c:	46bd      	mov	sp, r7
 800f12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f132:	4770      	bx	lr

0800f134 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b098      	sub	sp, #96	; 0x60
 800f138:	af02      	add	r7, sp, #8
 800f13a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2200      	movs	r2, #0
 800f140:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f144:	f7fb fcf8 	bl	800ab38 <HAL_GetTick>
 800f148:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	f003 0308 	and.w	r3, r3, #8
 800f154:	2b08      	cmp	r3, #8
 800f156:	d12f      	bne.n	800f1b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f158:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f15c:	9300      	str	r3, [sp, #0]
 800f15e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f160:	2200      	movs	r2, #0
 800f162:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f166:	6878      	ldr	r0, [r7, #4]
 800f168:	f000 f88e 	bl	800f288 <UART_WaitOnFlagUntilTimeout>
 800f16c:	4603      	mov	r3, r0
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d022      	beq.n	800f1b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f17a:	e853 3f00 	ldrex	r3, [r3]
 800f17e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f186:	653b      	str	r3, [r7, #80]	; 0x50
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	461a      	mov	r2, r3
 800f18e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f190:	647b      	str	r3, [r7, #68]	; 0x44
 800f192:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f194:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f196:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f198:	e841 2300 	strex	r3, r2, [r1]
 800f19c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f19e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d1e6      	bne.n	800f172 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2220      	movs	r2, #32
 800f1a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f1b4:	2303      	movs	r3, #3
 800f1b6:	e063      	b.n	800f280 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	f003 0304 	and.w	r3, r3, #4
 800f1c2:	2b04      	cmp	r3, #4
 800f1c4:	d149      	bne.n	800f25a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f1c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f1ca:	9300      	str	r3, [sp, #0]
 800f1cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f000 f857 	bl	800f288 <UART_WaitOnFlagUntilTimeout>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d03c      	beq.n	800f25a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e8:	e853 3f00 	ldrex	r3, [r3]
 800f1ec:	623b      	str	r3, [r7, #32]
   return(result);
 800f1ee:	6a3b      	ldr	r3, [r7, #32]
 800f1f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f1f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	461a      	mov	r2, r3
 800f1fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1fe:	633b      	str	r3, [r7, #48]	; 0x30
 800f200:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f202:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f206:	e841 2300 	strex	r3, r2, [r1]
 800f20a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d1e6      	bne.n	800f1e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	3308      	adds	r3, #8
 800f218:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f21a:	693b      	ldr	r3, [r7, #16]
 800f21c:	e853 3f00 	ldrex	r3, [r3]
 800f220:	60fb      	str	r3, [r7, #12]
   return(result);
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	f023 0301 	bic.w	r3, r3, #1
 800f228:	64bb      	str	r3, [r7, #72]	; 0x48
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	3308      	adds	r3, #8
 800f230:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f232:	61fa      	str	r2, [r7, #28]
 800f234:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f236:	69b9      	ldr	r1, [r7, #24]
 800f238:	69fa      	ldr	r2, [r7, #28]
 800f23a:	e841 2300 	strex	r3, r2, [r1]
 800f23e:	617b      	str	r3, [r7, #20]
   return(result);
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d1e5      	bne.n	800f212 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	2220      	movs	r2, #32
 800f24a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2200      	movs	r2, #0
 800f252:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f256:	2303      	movs	r3, #3
 800f258:	e012      	b.n	800f280 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	2220      	movs	r2, #32
 800f25e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2220      	movs	r2, #32
 800f266:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2200      	movs	r2, #0
 800f26e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2200      	movs	r2, #0
 800f274:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2200      	movs	r2, #0
 800f27a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f27e:	2300      	movs	r3, #0
}
 800f280:	4618      	mov	r0, r3
 800f282:	3758      	adds	r7, #88	; 0x58
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}

0800f288 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b084      	sub	sp, #16
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	60f8      	str	r0, [r7, #12]
 800f290:	60b9      	str	r1, [r7, #8]
 800f292:	603b      	str	r3, [r7, #0]
 800f294:	4613      	mov	r3, r2
 800f296:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f298:	e04f      	b.n	800f33a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f29a:	69bb      	ldr	r3, [r7, #24]
 800f29c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2a0:	d04b      	beq.n	800f33a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f2a2:	f7fb fc49 	bl	800ab38 <HAL_GetTick>
 800f2a6:	4602      	mov	r2, r0
 800f2a8:	683b      	ldr	r3, [r7, #0]
 800f2aa:	1ad3      	subs	r3, r2, r3
 800f2ac:	69ba      	ldr	r2, [r7, #24]
 800f2ae:	429a      	cmp	r2, r3
 800f2b0:	d302      	bcc.n	800f2b8 <UART_WaitOnFlagUntilTimeout+0x30>
 800f2b2:	69bb      	ldr	r3, [r7, #24]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d101      	bne.n	800f2bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f2b8:	2303      	movs	r3, #3
 800f2ba:	e04e      	b.n	800f35a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	f003 0304 	and.w	r3, r3, #4
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d037      	beq.n	800f33a <UART_WaitOnFlagUntilTimeout+0xb2>
 800f2ca:	68bb      	ldr	r3, [r7, #8]
 800f2cc:	2b80      	cmp	r3, #128	; 0x80
 800f2ce:	d034      	beq.n	800f33a <UART_WaitOnFlagUntilTimeout+0xb2>
 800f2d0:	68bb      	ldr	r3, [r7, #8]
 800f2d2:	2b40      	cmp	r3, #64	; 0x40
 800f2d4:	d031      	beq.n	800f33a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	69db      	ldr	r3, [r3, #28]
 800f2dc:	f003 0308 	and.w	r3, r3, #8
 800f2e0:	2b08      	cmp	r3, #8
 800f2e2:	d110      	bne.n	800f306 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	2208      	movs	r2, #8
 800f2ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f2ec:	68f8      	ldr	r0, [r7, #12]
 800f2ee:	f000 f95b 	bl	800f5a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	2208      	movs	r2, #8
 800f2f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800f302:	2301      	movs	r3, #1
 800f304:	e029      	b.n	800f35a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	69db      	ldr	r3, [r3, #28]
 800f30c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f314:	d111      	bne.n	800f33a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f31e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f320:	68f8      	ldr	r0, [r7, #12]
 800f322:	f000 f941 	bl	800f5a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	2220      	movs	r2, #32
 800f32a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	2200      	movs	r2, #0
 800f332:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f336:	2303      	movs	r3, #3
 800f338:	e00f      	b.n	800f35a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	69da      	ldr	r2, [r3, #28]
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	4013      	ands	r3, r2
 800f344:	68ba      	ldr	r2, [r7, #8]
 800f346:	429a      	cmp	r2, r3
 800f348:	bf0c      	ite	eq
 800f34a:	2301      	moveq	r3, #1
 800f34c:	2300      	movne	r3, #0
 800f34e:	b2db      	uxtb	r3, r3
 800f350:	461a      	mov	r2, r3
 800f352:	79fb      	ldrb	r3, [r7, #7]
 800f354:	429a      	cmp	r2, r3
 800f356:	d0a0      	beq.n	800f29a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f358:	2300      	movs	r3, #0
}
 800f35a:	4618      	mov	r0, r3
 800f35c:	3710      	adds	r7, #16
 800f35e:	46bd      	mov	sp, r7
 800f360:	bd80      	pop	{r7, pc}
	...

0800f364 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f364:	b480      	push	{r7}
 800f366:	b0a3      	sub	sp, #140	; 0x8c
 800f368:	af00      	add	r7, sp, #0
 800f36a:	60f8      	str	r0, [r7, #12]
 800f36c:	60b9      	str	r1, [r7, #8]
 800f36e:	4613      	mov	r3, r2
 800f370:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	68ba      	ldr	r2, [r7, #8]
 800f376:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	88fa      	ldrh	r2, [r7, #6]
 800f37c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	88fa      	ldrh	r2, [r7, #6]
 800f384:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	2200      	movs	r2, #0
 800f38c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	689b      	ldr	r3, [r3, #8]
 800f392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f396:	d10e      	bne.n	800f3b6 <UART_Start_Receive_IT+0x52>
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	691b      	ldr	r3, [r3, #16]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d105      	bne.n	800f3ac <UART_Start_Receive_IT+0x48>
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f3a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f3aa:	e02d      	b.n	800f408 <UART_Start_Receive_IT+0xa4>
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	22ff      	movs	r2, #255	; 0xff
 800f3b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f3b4:	e028      	b.n	800f408 <UART_Start_Receive_IT+0xa4>
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	689b      	ldr	r3, [r3, #8]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d10d      	bne.n	800f3da <UART_Start_Receive_IT+0x76>
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	691b      	ldr	r3, [r3, #16]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d104      	bne.n	800f3d0 <UART_Start_Receive_IT+0x6c>
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	22ff      	movs	r2, #255	; 0xff
 800f3ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f3ce:	e01b      	b.n	800f408 <UART_Start_Receive_IT+0xa4>
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	227f      	movs	r2, #127	; 0x7f
 800f3d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f3d8:	e016      	b.n	800f408 <UART_Start_Receive_IT+0xa4>
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	689b      	ldr	r3, [r3, #8]
 800f3de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f3e2:	d10d      	bne.n	800f400 <UART_Start_Receive_IT+0x9c>
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	691b      	ldr	r3, [r3, #16]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d104      	bne.n	800f3f6 <UART_Start_Receive_IT+0x92>
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	227f      	movs	r2, #127	; 0x7f
 800f3f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f3f4:	e008      	b.n	800f408 <UART_Start_Receive_IT+0xa4>
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	223f      	movs	r2, #63	; 0x3f
 800f3fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f3fe:	e003      	b.n	800f408 <UART_Start_Receive_IT+0xa4>
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	2200      	movs	r2, #0
 800f404:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	2200      	movs	r2, #0
 800f40c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	2222      	movs	r2, #34	; 0x22
 800f414:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	3308      	adds	r3, #8
 800f41e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f422:	e853 3f00 	ldrex	r3, [r3]
 800f426:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f428:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f42a:	f043 0301 	orr.w	r3, r3, #1
 800f42e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	3308      	adds	r3, #8
 800f438:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f43c:	673a      	str	r2, [r7, #112]	; 0x70
 800f43e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f440:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f442:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f444:	e841 2300 	strex	r3, r2, [r1]
 800f448:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800f44a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d1e3      	bne.n	800f418 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f458:	d14f      	bne.n	800f4fa <UART_Start_Receive_IT+0x196>
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f460:	88fa      	ldrh	r2, [r7, #6]
 800f462:	429a      	cmp	r2, r3
 800f464:	d349      	bcc.n	800f4fa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	689b      	ldr	r3, [r3, #8]
 800f46a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f46e:	d107      	bne.n	800f480 <UART_Start_Receive_IT+0x11c>
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	691b      	ldr	r3, [r3, #16]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d103      	bne.n	800f480 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	4a47      	ldr	r2, [pc, #284]	; (800f598 <UART_Start_Receive_IT+0x234>)
 800f47c:	675a      	str	r2, [r3, #116]	; 0x74
 800f47e:	e002      	b.n	800f486 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	4a46      	ldr	r2, [pc, #280]	; (800f59c <UART_Start_Receive_IT+0x238>)
 800f484:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	691b      	ldr	r3, [r3, #16]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d01a      	beq.n	800f4c4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f496:	e853 3f00 	ldrex	r3, [r3]
 800f49a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f49c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f49e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f4a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	461a      	mov	r2, r3
 800f4ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f4b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f4b2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f4b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f4b8:	e841 2300 	strex	r3, r2, [r1]
 800f4bc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f4be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d1e4      	bne.n	800f48e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	3308      	adds	r3, #8
 800f4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4ce:	e853 3f00 	ldrex	r3, [r3]
 800f4d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f4da:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	3308      	adds	r3, #8
 800f4e2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f4e4:	64ba      	str	r2, [r7, #72]	; 0x48
 800f4e6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f4ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f4ec:	e841 2300 	strex	r3, r2, [r1]
 800f4f0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f4f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d1e5      	bne.n	800f4c4 <UART_Start_Receive_IT+0x160>
 800f4f8:	e046      	b.n	800f588 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	689b      	ldr	r3, [r3, #8]
 800f4fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f502:	d107      	bne.n	800f514 <UART_Start_Receive_IT+0x1b0>
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	691b      	ldr	r3, [r3, #16]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d103      	bne.n	800f514 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	4a24      	ldr	r2, [pc, #144]	; (800f5a0 <UART_Start_Receive_IT+0x23c>)
 800f510:	675a      	str	r2, [r3, #116]	; 0x74
 800f512:	e002      	b.n	800f51a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	4a23      	ldr	r2, [pc, #140]	; (800f5a4 <UART_Start_Receive_IT+0x240>)
 800f518:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	691b      	ldr	r3, [r3, #16]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d019      	beq.n	800f556 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f52a:	e853 3f00 	ldrex	r3, [r3]
 800f52e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f532:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f536:	677b      	str	r3, [r7, #116]	; 0x74
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	461a      	mov	r2, r3
 800f53e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f540:	637b      	str	r3, [r7, #52]	; 0x34
 800f542:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f544:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f546:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f548:	e841 2300 	strex	r3, r2, [r1]
 800f54c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f550:	2b00      	cmp	r3, #0
 800f552:	d1e6      	bne.n	800f522 <UART_Start_Receive_IT+0x1be>
 800f554:	e018      	b.n	800f588 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f55c:	697b      	ldr	r3, [r7, #20]
 800f55e:	e853 3f00 	ldrex	r3, [r3]
 800f562:	613b      	str	r3, [r7, #16]
   return(result);
 800f564:	693b      	ldr	r3, [r7, #16]
 800f566:	f043 0320 	orr.w	r3, r3, #32
 800f56a:	67bb      	str	r3, [r7, #120]	; 0x78
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	461a      	mov	r2, r3
 800f572:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f574:	623b      	str	r3, [r7, #32]
 800f576:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f578:	69f9      	ldr	r1, [r7, #28]
 800f57a:	6a3a      	ldr	r2, [r7, #32]
 800f57c:	e841 2300 	strex	r3, r2, [r1]
 800f580:	61bb      	str	r3, [r7, #24]
   return(result);
 800f582:	69bb      	ldr	r3, [r7, #24]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d1e6      	bne.n	800f556 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800f588:	2300      	movs	r3, #0
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	378c      	adds	r7, #140	; 0x8c
 800f58e:	46bd      	mov	sp, r7
 800f590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f594:	4770      	bx	lr
 800f596:	bf00      	nop
 800f598:	0800fdc9 	.word	0x0800fdc9
 800f59c:	0800fa69 	.word	0x0800fa69
 800f5a0:	0800f8b1 	.word	0x0800f8b1
 800f5a4:	0800f6f9 	.word	0x0800f6f9

0800f5a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f5a8:	b480      	push	{r7}
 800f5aa:	b095      	sub	sp, #84	; 0x54
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5b8:	e853 3f00 	ldrex	r3, [r3]
 800f5bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f5c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	461a      	mov	r2, r3
 800f5cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5ce:	643b      	str	r3, [r7, #64]	; 0x40
 800f5d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f5d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f5d6:	e841 2300 	strex	r3, r2, [r1]
 800f5da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d1e6      	bne.n	800f5b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	3308      	adds	r3, #8
 800f5e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5ea:	6a3b      	ldr	r3, [r7, #32]
 800f5ec:	e853 3f00 	ldrex	r3, [r3]
 800f5f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800f5f2:	69fb      	ldr	r3, [r7, #28]
 800f5f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f5f8:	f023 0301 	bic.w	r3, r3, #1
 800f5fc:	64bb      	str	r3, [r7, #72]	; 0x48
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	3308      	adds	r3, #8
 800f604:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f606:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f608:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f60a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f60c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f60e:	e841 2300 	strex	r3, r2, [r1]
 800f612:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f616:	2b00      	cmp	r3, #0
 800f618:	d1e3      	bne.n	800f5e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f61e:	2b01      	cmp	r3, #1
 800f620:	d118      	bne.n	800f654 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	e853 3f00 	ldrex	r3, [r3]
 800f62e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	f023 0310 	bic.w	r3, r3, #16
 800f636:	647b      	str	r3, [r7, #68]	; 0x44
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	461a      	mov	r2, r3
 800f63e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f640:	61bb      	str	r3, [r7, #24]
 800f642:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f644:	6979      	ldr	r1, [r7, #20]
 800f646:	69ba      	ldr	r2, [r7, #24]
 800f648:	e841 2300 	strex	r3, r2, [r1]
 800f64c:	613b      	str	r3, [r7, #16]
   return(result);
 800f64e:	693b      	ldr	r3, [r7, #16]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d1e6      	bne.n	800f622 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2220      	movs	r2, #32
 800f658:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	2200      	movs	r2, #0
 800f660:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2200      	movs	r2, #0
 800f666:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f668:	bf00      	nop
 800f66a:	3754      	adds	r7, #84	; 0x54
 800f66c:	46bd      	mov	sp, r7
 800f66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f672:	4770      	bx	lr

0800f674 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b084      	sub	sp, #16
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f680:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	2200      	movs	r2, #0
 800f686:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	2200      	movs	r2, #0
 800f68e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f692:	68f8      	ldr	r0, [r7, #12]
 800f694:	f7fa ff3c 	bl	800a510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f698:	bf00      	nop
 800f69a:	3710      	adds	r7, #16
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}

0800f6a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b088      	sub	sp, #32
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	e853 3f00 	ldrex	r3, [r3]
 800f6b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800f6b6:	68bb      	ldr	r3, [r7, #8]
 800f6b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f6bc:	61fb      	str	r3, [r7, #28]
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	461a      	mov	r2, r3
 800f6c4:	69fb      	ldr	r3, [r7, #28]
 800f6c6:	61bb      	str	r3, [r7, #24]
 800f6c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6ca:	6979      	ldr	r1, [r7, #20]
 800f6cc:	69ba      	ldr	r2, [r7, #24]
 800f6ce:	e841 2300 	strex	r3, r2, [r1]
 800f6d2:	613b      	str	r3, [r7, #16]
   return(result);
 800f6d4:	693b      	ldr	r3, [r7, #16]
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d1e6      	bne.n	800f6a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2220      	movs	r2, #32
 800f6de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f7ff f96f 	bl	800e9cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f6ee:	bf00      	nop
 800f6f0:	3720      	adds	r7, #32
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}
	...

0800f6f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b09c      	sub	sp, #112	; 0x70
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f706:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f710:	2b22      	cmp	r3, #34	; 0x22
 800f712:	f040 80be 	bne.w	800f892 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f71c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f720:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f724:	b2d9      	uxtb	r1, r3
 800f726:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800f72a:	b2da      	uxtb	r2, r3
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f730:	400a      	ands	r2, r1
 800f732:	b2d2      	uxtb	r2, r2
 800f734:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f73a:	1c5a      	adds	r2, r3, #1
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f746:	b29b      	uxth	r3, r3
 800f748:	3b01      	subs	r3, #1
 800f74a:	b29a      	uxth	r2, r3
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f758:	b29b      	uxth	r3, r3
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	f040 80a1 	bne.w	800f8a2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f768:	e853 3f00 	ldrex	r3, [r3]
 800f76c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f76e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f770:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f774:	66bb      	str	r3, [r7, #104]	; 0x68
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	461a      	mov	r2, r3
 800f77c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f77e:	65bb      	str	r3, [r7, #88]	; 0x58
 800f780:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f782:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f784:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f786:	e841 2300 	strex	r3, r2, [r1]
 800f78a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f78c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d1e6      	bne.n	800f760 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	3308      	adds	r3, #8
 800f798:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f79a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f79c:	e853 3f00 	ldrex	r3, [r3]
 800f7a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f7a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7a4:	f023 0301 	bic.w	r3, r3, #1
 800f7a8:	667b      	str	r3, [r7, #100]	; 0x64
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	3308      	adds	r3, #8
 800f7b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f7b2:	647a      	str	r2, [r7, #68]	; 0x44
 800f7b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f7b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f7ba:	e841 2300 	strex	r3, r2, [r1]
 800f7be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f7c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d1e5      	bne.n	800f792 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	2220      	movs	r2, #32
 800f7ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	4a33      	ldr	r2, [pc, #204]	; (800f8ac <UART_RxISR_8BIT+0x1b4>)
 800f7e0:	4293      	cmp	r3, r2
 800f7e2:	d01f      	beq.n	800f824 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	685b      	ldr	r3, [r3, #4]
 800f7ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d018      	beq.n	800f824 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7fa:	e853 3f00 	ldrex	r3, [r3]
 800f7fe:	623b      	str	r3, [r7, #32]
   return(result);
 800f800:	6a3b      	ldr	r3, [r7, #32]
 800f802:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f806:	663b      	str	r3, [r7, #96]	; 0x60
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	461a      	mov	r2, r3
 800f80e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f810:	633b      	str	r3, [r7, #48]	; 0x30
 800f812:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f814:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f816:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f818:	e841 2300 	strex	r3, r2, [r1]
 800f81c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f820:	2b00      	cmp	r3, #0
 800f822:	d1e6      	bne.n	800f7f2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f828:	2b01      	cmp	r3, #1
 800f82a:	d12e      	bne.n	800f88a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	2200      	movs	r2, #0
 800f830:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f838:	693b      	ldr	r3, [r7, #16]
 800f83a:	e853 3f00 	ldrex	r3, [r3]
 800f83e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	f023 0310 	bic.w	r3, r3, #16
 800f846:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	461a      	mov	r2, r3
 800f84e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f850:	61fb      	str	r3, [r7, #28]
 800f852:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f854:	69b9      	ldr	r1, [r7, #24]
 800f856:	69fa      	ldr	r2, [r7, #28]
 800f858:	e841 2300 	strex	r3, r2, [r1]
 800f85c:	617b      	str	r3, [r7, #20]
   return(result);
 800f85e:	697b      	ldr	r3, [r7, #20]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d1e6      	bne.n	800f832 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	69db      	ldr	r3, [r3, #28]
 800f86a:	f003 0310 	and.w	r3, r3, #16
 800f86e:	2b10      	cmp	r3, #16
 800f870:	d103      	bne.n	800f87a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	2210      	movs	r2, #16
 800f878:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f880:	4619      	mov	r1, r3
 800f882:	6878      	ldr	r0, [r7, #4]
 800f884:	f7ff f8ac 	bl	800e9e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f888:	e00b      	b.n	800f8a2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800f88a:	6878      	ldr	r0, [r7, #4]
 800f88c:	f7fa fe4a 	bl	800a524 <HAL_UART_RxCpltCallback>
}
 800f890:	e007      	b.n	800f8a2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	699a      	ldr	r2, [r3, #24]
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	f042 0208 	orr.w	r2, r2, #8
 800f8a0:	619a      	str	r2, [r3, #24]
}
 800f8a2:	bf00      	nop
 800f8a4:	3770      	adds	r7, #112	; 0x70
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}
 800f8aa:	bf00      	nop
 800f8ac:	40008000 	.word	0x40008000

0800f8b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b09c      	sub	sp, #112	; 0x70
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f8be:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f8c8:	2b22      	cmp	r3, #34	; 0x22
 800f8ca:	f040 80be 	bne.w	800fa4a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8dc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800f8de:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800f8e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800f8e6:	4013      	ands	r3, r2
 800f8e8:	b29a      	uxth	r2, r3
 800f8ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f8ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8f2:	1c9a      	adds	r2, r3, #2
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f8fe:	b29b      	uxth	r3, r3
 800f900:	3b01      	subs	r3, #1
 800f902:	b29a      	uxth	r2, r3
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f910:	b29b      	uxth	r3, r3
 800f912:	2b00      	cmp	r3, #0
 800f914:	f040 80a1 	bne.w	800fa5a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f91e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f920:	e853 3f00 	ldrex	r3, [r3]
 800f924:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f928:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f92c:	667b      	str	r3, [r7, #100]	; 0x64
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	461a      	mov	r2, r3
 800f934:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f936:	657b      	str	r3, [r7, #84]	; 0x54
 800f938:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f93a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f93c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f93e:	e841 2300 	strex	r3, r2, [r1]
 800f942:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f946:	2b00      	cmp	r3, #0
 800f948:	d1e6      	bne.n	800f918 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	3308      	adds	r3, #8
 800f950:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f954:	e853 3f00 	ldrex	r3, [r3]
 800f958:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f95c:	f023 0301 	bic.w	r3, r3, #1
 800f960:	663b      	str	r3, [r7, #96]	; 0x60
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	3308      	adds	r3, #8
 800f968:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f96a:	643a      	str	r2, [r7, #64]	; 0x40
 800f96c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f96e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f970:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f972:	e841 2300 	strex	r3, r2, [r1]
 800f976:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d1e5      	bne.n	800f94a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	2220      	movs	r2, #32
 800f982:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	2200      	movs	r2, #0
 800f98a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	2200      	movs	r2, #0
 800f990:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	4a33      	ldr	r2, [pc, #204]	; (800fa64 <UART_RxISR_16BIT+0x1b4>)
 800f998:	4293      	cmp	r3, r2
 800f99a:	d01f      	beq.n	800f9dc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	685b      	ldr	r3, [r3, #4]
 800f9a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d018      	beq.n	800f9dc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9b0:	6a3b      	ldr	r3, [r7, #32]
 800f9b2:	e853 3f00 	ldrex	r3, [r3]
 800f9b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800f9b8:	69fb      	ldr	r3, [r7, #28]
 800f9ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f9be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	461a      	mov	r2, r3
 800f9c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f9ca:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f9ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f9d0:	e841 2300 	strex	r3, r2, [r1]
 800f9d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d1e6      	bne.n	800f9aa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9e0:	2b01      	cmp	r3, #1
 800f9e2:	d12e      	bne.n	800fa42 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	e853 3f00 	ldrex	r3, [r3]
 800f9f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	f023 0310 	bic.w	r3, r3, #16
 800f9fe:	65bb      	str	r3, [r7, #88]	; 0x58
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	461a      	mov	r2, r3
 800fa06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fa08:	61bb      	str	r3, [r7, #24]
 800fa0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa0c:	6979      	ldr	r1, [r7, #20]
 800fa0e:	69ba      	ldr	r2, [r7, #24]
 800fa10:	e841 2300 	strex	r3, r2, [r1]
 800fa14:	613b      	str	r3, [r7, #16]
   return(result);
 800fa16:	693b      	ldr	r3, [r7, #16]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d1e6      	bne.n	800f9ea <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	69db      	ldr	r3, [r3, #28]
 800fa22:	f003 0310 	and.w	r3, r3, #16
 800fa26:	2b10      	cmp	r3, #16
 800fa28:	d103      	bne.n	800fa32 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	2210      	movs	r2, #16
 800fa30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fa38:	4619      	mov	r1, r3
 800fa3a:	6878      	ldr	r0, [r7, #4]
 800fa3c:	f7fe ffd0 	bl	800e9e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fa40:	e00b      	b.n	800fa5a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f7fa fd6e 	bl	800a524 <HAL_UART_RxCpltCallback>
}
 800fa48:	e007      	b.n	800fa5a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	699a      	ldr	r2, [r3, #24]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	f042 0208 	orr.w	r2, r2, #8
 800fa58:	619a      	str	r2, [r3, #24]
}
 800fa5a:	bf00      	nop
 800fa5c:	3770      	adds	r7, #112	; 0x70
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	bd80      	pop	{r7, pc}
 800fa62:	bf00      	nop
 800fa64:	40008000 	.word	0x40008000

0800fa68 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b0ac      	sub	sp, #176	; 0xb0
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fa76:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	69db      	ldr	r3, [r3, #28]
 800fa80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	689b      	ldr	r3, [r3, #8]
 800fa94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fa9e:	2b22      	cmp	r3, #34	; 0x22
 800faa0:	f040 8182 	bne.w	800fda8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800faaa:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800faae:	e125      	b.n	800fcfc <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fab6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800faba:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800fabe:	b2d9      	uxtb	r1, r3
 800fac0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800fac4:	b2da      	uxtb	r2, r3
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800faca:	400a      	ands	r2, r1
 800facc:	b2d2      	uxtb	r2, r2
 800face:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fad4:	1c5a      	adds	r2, r3, #1
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fae0:	b29b      	uxth	r3, r3
 800fae2:	3b01      	subs	r3, #1
 800fae4:	b29a      	uxth	r2, r3
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	69db      	ldr	r3, [r3, #28]
 800faf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800faf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fafa:	f003 0307 	and.w	r3, r3, #7
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d053      	beq.n	800fbaa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fb02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fb06:	f003 0301 	and.w	r3, r3, #1
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d011      	beq.n	800fb32 <UART_RxISR_8BIT_FIFOEN+0xca>
 800fb0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fb12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d00b      	beq.n	800fb32 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	2201      	movs	r2, #1
 800fb20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb28:	f043 0201 	orr.w	r2, r3, #1
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fb32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fb36:	f003 0302 	and.w	r3, r3, #2
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d011      	beq.n	800fb62 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800fb3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fb42:	f003 0301 	and.w	r3, r3, #1
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d00b      	beq.n	800fb62 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	2202      	movs	r2, #2
 800fb50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb58:	f043 0204 	orr.w	r2, r3, #4
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fb62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fb66:	f003 0304 	and.w	r3, r3, #4
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d011      	beq.n	800fb92 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800fb6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fb72:	f003 0301 	and.w	r3, r3, #1
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d00b      	beq.n	800fb92 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	2204      	movs	r2, #4
 800fb80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb88:	f043 0202 	orr.w	r2, r3, #2
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d006      	beq.n	800fbaa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	f7fa fcb7 	bl	800a510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2200      	movs	r2, #0
 800fba6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fbb0:	b29b      	uxth	r3, r3
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	f040 80a2 	bne.w	800fcfc <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fbc0:	e853 3f00 	ldrex	r3, [r3]
 800fbc4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800fbc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fbc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fbcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	461a      	mov	r2, r3
 800fbd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fbda:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fbdc:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbde:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800fbe0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fbe2:	e841 2300 	strex	r3, r2, [r1]
 800fbe6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800fbe8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d1e4      	bne.n	800fbb8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	3308      	adds	r3, #8
 800fbf4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fbf8:	e853 3f00 	ldrex	r3, [r3]
 800fbfc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800fbfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fc04:	f023 0301 	bic.w	r3, r3, #1
 800fc08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	3308      	adds	r3, #8
 800fc12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fc16:	66ba      	str	r2, [r7, #104]	; 0x68
 800fc18:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc1a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800fc1c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fc1e:	e841 2300 	strex	r3, r2, [r1]
 800fc22:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800fc24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d1e1      	bne.n	800fbee <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2220      	movs	r2, #32
 800fc2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	2200      	movs	r2, #0
 800fc36:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	4a5f      	ldr	r2, [pc, #380]	; (800fdc0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800fc44:	4293      	cmp	r3, r2
 800fc46:	d021      	beq.n	800fc8c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	685b      	ldr	r3, [r3, #4]
 800fc4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d01a      	beq.n	800fc8c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fc5e:	e853 3f00 	ldrex	r3, [r3]
 800fc62:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800fc64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fc6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	461a      	mov	r2, r3
 800fc74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fc78:	657b      	str	r3, [r7, #84]	; 0x54
 800fc7a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc7c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fc7e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fc80:	e841 2300 	strex	r3, r2, [r1]
 800fc84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fc86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d1e4      	bne.n	800fc56 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc90:	2b01      	cmp	r3, #1
 800fc92:	d130      	bne.n	800fcf6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	2200      	movs	r2, #0
 800fc98:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fca2:	e853 3f00 	ldrex	r3, [r3]
 800fca6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcaa:	f023 0310 	bic.w	r3, r3, #16
 800fcae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	461a      	mov	r2, r3
 800fcb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fcbc:	643b      	str	r3, [r7, #64]	; 0x40
 800fcbe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fcc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fcc4:	e841 2300 	strex	r3, r2, [r1]
 800fcc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fcca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d1e4      	bne.n	800fc9a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	69db      	ldr	r3, [r3, #28]
 800fcd6:	f003 0310 	and.w	r3, r3, #16
 800fcda:	2b10      	cmp	r3, #16
 800fcdc:	d103      	bne.n	800fce6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	2210      	movs	r2, #16
 800fce4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fcec:	4619      	mov	r1, r3
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	f7fe fe76 	bl	800e9e0 <HAL_UARTEx_RxEventCallback>
 800fcf4:	e002      	b.n	800fcfc <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fcf6:	6878      	ldr	r0, [r7, #4]
 800fcf8:	f7fa fc14 	bl	800a524 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fcfc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d006      	beq.n	800fd12 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800fd04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fd08:	f003 0320 	and.w	r3, r3, #32
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	f47f aecf 	bne.w	800fab0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fd18:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fd1c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d049      	beq.n	800fdb8 <UART_RxISR_8BIT_FIFOEN+0x350>
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fd2a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800fd2e:	429a      	cmp	r2, r3
 800fd30:	d242      	bcs.n	800fdb8 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	3308      	adds	r3, #8
 800fd38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd3a:	6a3b      	ldr	r3, [r7, #32]
 800fd3c:	e853 3f00 	ldrex	r3, [r3]
 800fd40:	61fb      	str	r3, [r7, #28]
   return(result);
 800fd42:	69fb      	ldr	r3, [r7, #28]
 800fd44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fd48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	3308      	adds	r3, #8
 800fd52:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fd56:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fd58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fd5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd5e:	e841 2300 	strex	r3, r2, [r1]
 800fd62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d1e3      	bne.n	800fd32 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	4a15      	ldr	r2, [pc, #84]	; (800fdc4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800fd6e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	e853 3f00 	ldrex	r3, [r3]
 800fd7c:	60bb      	str	r3, [r7, #8]
   return(result);
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	f043 0320 	orr.w	r3, r3, #32
 800fd84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	461a      	mov	r2, r3
 800fd8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fd92:	61bb      	str	r3, [r7, #24]
 800fd94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd96:	6979      	ldr	r1, [r7, #20]
 800fd98:	69ba      	ldr	r2, [r7, #24]
 800fd9a:	e841 2300 	strex	r3, r2, [r1]
 800fd9e:	613b      	str	r3, [r7, #16]
   return(result);
 800fda0:	693b      	ldr	r3, [r7, #16]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d1e4      	bne.n	800fd70 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fda6:	e007      	b.n	800fdb8 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	699a      	ldr	r2, [r3, #24]
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	f042 0208 	orr.w	r2, r2, #8
 800fdb6:	619a      	str	r2, [r3, #24]
}
 800fdb8:	bf00      	nop
 800fdba:	37b0      	adds	r7, #176	; 0xb0
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bd80      	pop	{r7, pc}
 800fdc0:	40008000 	.word	0x40008000
 800fdc4:	0800f6f9 	.word	0x0800f6f9

0800fdc8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b0ae      	sub	sp, #184	; 0xb8
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fdd6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	69db      	ldr	r3, [r3, #28]
 800fde0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	689b      	ldr	r3, [r3, #8]
 800fdf4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fdfe:	2b22      	cmp	r3, #34	; 0x22
 800fe00:	f040 8186 	bne.w	8010110 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fe0a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fe0e:	e129      	b.n	8010064 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe16:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800fe22:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800fe26:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800fe2a:	4013      	ands	r3, r2
 800fe2c:	b29a      	uxth	r2, r3
 800fe2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fe32:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe38:	1c9a      	adds	r2, r3, #2
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fe44:	b29b      	uxth	r3, r3
 800fe46:	3b01      	subs	r3, #1
 800fe48:	b29a      	uxth	r2, r3
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	69db      	ldr	r3, [r3, #28]
 800fe56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fe5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fe5e:	f003 0307 	and.w	r3, r3, #7
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d053      	beq.n	800ff0e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fe66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fe6a:	f003 0301 	and.w	r3, r3, #1
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d011      	beq.n	800fe96 <UART_RxISR_16BIT_FIFOEN+0xce>
 800fe72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fe76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d00b      	beq.n	800fe96 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	2201      	movs	r2, #1
 800fe84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe8c:	f043 0201 	orr.w	r2, r3, #1
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fe96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fe9a:	f003 0302 	and.w	r3, r3, #2
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d011      	beq.n	800fec6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800fea2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fea6:	f003 0301 	and.w	r3, r3, #1
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d00b      	beq.n	800fec6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	2202      	movs	r2, #2
 800feb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800febc:	f043 0204 	orr.w	r2, r3, #4
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fec6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800feca:	f003 0304 	and.w	r3, r3, #4
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d011      	beq.n	800fef6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800fed2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fed6:	f003 0301 	and.w	r3, r3, #1
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d00b      	beq.n	800fef6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	2204      	movs	r2, #4
 800fee4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800feec:	f043 0202 	orr.w	r2, r3, #2
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d006      	beq.n	800ff0e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ff00:	6878      	ldr	r0, [r7, #4]
 800ff02:	f7fa fb05 	bl	800a510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	2200      	movs	r2, #0
 800ff0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ff14:	b29b      	uxth	r3, r3
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	f040 80a4 	bne.w	8010064 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ff24:	e853 3f00 	ldrex	r3, [r3]
 800ff28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ff2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ff2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ff30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	461a      	mov	r2, r3
 800ff3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ff3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ff42:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ff46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ff4a:	e841 2300 	strex	r3, r2, [r1]
 800ff4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ff50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d1e2      	bne.n	800ff1c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	3308      	adds	r3, #8
 800ff5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ff60:	e853 3f00 	ldrex	r3, [r3]
 800ff64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ff66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ff6c:	f023 0301 	bic.w	r3, r3, #1
 800ff70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	3308      	adds	r3, #8
 800ff7a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ff7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ff80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ff84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ff86:	e841 2300 	strex	r3, r2, [r1]
 800ff8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ff8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d1e1      	bne.n	800ff56 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	2220      	movs	r2, #32
 800ff96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	4a5f      	ldr	r2, [pc, #380]	; (8010128 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800ffac:	4293      	cmp	r3, r2
 800ffae:	d021      	beq.n	800fff4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	685b      	ldr	r3, [r3, #4]
 800ffb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d01a      	beq.n	800fff4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffc6:	e853 3f00 	ldrex	r3, [r3]
 800ffca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ffcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ffd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	461a      	mov	r2, r3
 800ffdc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ffe0:	65bb      	str	r3, [r7, #88]	; 0x58
 800ffe2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffe4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ffe6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ffe8:	e841 2300 	strex	r3, r2, [r1]
 800ffec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ffee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d1e4      	bne.n	800ffbe <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fff8:	2b01      	cmp	r3, #1
 800fffa:	d130      	bne.n	801005e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2200      	movs	r2, #0
 8010000:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801000a:	e853 3f00 	ldrex	r3, [r3]
 801000e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010012:	f023 0310 	bic.w	r3, r3, #16
 8010016:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	461a      	mov	r2, r3
 8010020:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010024:	647b      	str	r3, [r7, #68]	; 0x44
 8010026:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010028:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801002a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801002c:	e841 2300 	strex	r3, r2, [r1]
 8010030:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010034:	2b00      	cmp	r3, #0
 8010036:	d1e4      	bne.n	8010002 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	69db      	ldr	r3, [r3, #28]
 801003e:	f003 0310 	and.w	r3, r3, #16
 8010042:	2b10      	cmp	r3, #16
 8010044:	d103      	bne.n	801004e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	2210      	movs	r2, #16
 801004c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010054:	4619      	mov	r1, r3
 8010056:	6878      	ldr	r0, [r7, #4]
 8010058:	f7fe fcc2 	bl	800e9e0 <HAL_UARTEx_RxEventCallback>
 801005c:	e002      	b.n	8010064 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801005e:	6878      	ldr	r0, [r7, #4]
 8010060:	f7fa fa60 	bl	800a524 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010064:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8010068:	2b00      	cmp	r3, #0
 801006a:	d006      	beq.n	801007a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 801006c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010070:	f003 0320 	and.w	r3, r3, #32
 8010074:	2b00      	cmp	r3, #0
 8010076:	f47f aecb 	bne.w	800fe10 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010080:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010084:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8010088:	2b00      	cmp	r3, #0
 801008a:	d049      	beq.n	8010120 <UART_RxISR_16BIT_FIFOEN+0x358>
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010092:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8010096:	429a      	cmp	r2, r3
 8010098:	d242      	bcs.n	8010120 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	3308      	adds	r3, #8
 80100a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100a4:	e853 3f00 	ldrex	r3, [r3]
 80100a8:	623b      	str	r3, [r7, #32]
   return(result);
 80100aa:	6a3b      	ldr	r3, [r7, #32]
 80100ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80100b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	3308      	adds	r3, #8
 80100ba:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80100be:	633a      	str	r2, [r7, #48]	; 0x30
 80100c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80100c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100c6:	e841 2300 	strex	r3, r2, [r1]
 80100ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80100cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d1e3      	bne.n	801009a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	4a15      	ldr	r2, [pc, #84]	; (801012c <UART_RxISR_16BIT_FIFOEN+0x364>)
 80100d6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100de:	693b      	ldr	r3, [r7, #16]
 80100e0:	e853 3f00 	ldrex	r3, [r3]
 80100e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	f043 0320 	orr.w	r3, r3, #32
 80100ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	461a      	mov	r2, r3
 80100f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80100fa:	61fb      	str	r3, [r7, #28]
 80100fc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100fe:	69b9      	ldr	r1, [r7, #24]
 8010100:	69fa      	ldr	r2, [r7, #28]
 8010102:	e841 2300 	strex	r3, r2, [r1]
 8010106:	617b      	str	r3, [r7, #20]
   return(result);
 8010108:	697b      	ldr	r3, [r7, #20]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d1e4      	bne.n	80100d8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801010e:	e007      	b.n	8010120 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	699a      	ldr	r2, [r3, #24]
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	f042 0208 	orr.w	r2, r2, #8
 801011e:	619a      	str	r2, [r3, #24]
}
 8010120:	bf00      	nop
 8010122:	37b8      	adds	r7, #184	; 0xb8
 8010124:	46bd      	mov	sp, r7
 8010126:	bd80      	pop	{r7, pc}
 8010128:	40008000 	.word	0x40008000
 801012c:	0800f8b1 	.word	0x0800f8b1

08010130 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010130:	b480      	push	{r7}
 8010132:	b083      	sub	sp, #12
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010138:	bf00      	nop
 801013a:	370c      	adds	r7, #12
 801013c:	46bd      	mov	sp, r7
 801013e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010142:	4770      	bx	lr

08010144 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010144:	b480      	push	{r7}
 8010146:	b083      	sub	sp, #12
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801014c:	bf00      	nop
 801014e:	370c      	adds	r7, #12
 8010150:	46bd      	mov	sp, r7
 8010152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010156:	4770      	bx	lr

08010158 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010158:	b480      	push	{r7}
 801015a:	b083      	sub	sp, #12
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010160:	bf00      	nop
 8010162:	370c      	adds	r7, #12
 8010164:	46bd      	mov	sp, r7
 8010166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016a:	4770      	bx	lr

0801016c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801016c:	b480      	push	{r7}
 801016e:	b085      	sub	sp, #20
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801017a:	2b01      	cmp	r3, #1
 801017c:	d101      	bne.n	8010182 <HAL_UARTEx_DisableFifoMode+0x16>
 801017e:	2302      	movs	r3, #2
 8010180:	e027      	b.n	80101d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	2201      	movs	r2, #1
 8010186:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	2224      	movs	r2, #36	; 0x24
 801018e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	681a      	ldr	r2, [r3, #0]
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	f022 0201 	bic.w	r2, r2, #1
 80101a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80101b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	2200      	movs	r2, #0
 80101b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	68fa      	ldr	r2, [r7, #12]
 80101be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	2220      	movs	r2, #32
 80101c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	2200      	movs	r2, #0
 80101cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80101d0:	2300      	movs	r3, #0
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	3714      	adds	r7, #20
 80101d6:	46bd      	mov	sp, r7
 80101d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101dc:	4770      	bx	lr

080101de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80101de:	b580      	push	{r7, lr}
 80101e0:	b084      	sub	sp, #16
 80101e2:	af00      	add	r7, sp, #0
 80101e4:	6078      	str	r0, [r7, #4]
 80101e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80101ee:	2b01      	cmp	r3, #1
 80101f0:	d101      	bne.n	80101f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80101f2:	2302      	movs	r3, #2
 80101f4:	e02d      	b.n	8010252 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	2201      	movs	r2, #1
 80101fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	2224      	movs	r2, #36	; 0x24
 8010202:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	681a      	ldr	r2, [r3, #0]
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	f022 0201 	bic.w	r2, r2, #1
 801021c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	689b      	ldr	r3, [r3, #8]
 8010224:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	683a      	ldr	r2, [r7, #0]
 801022e:	430a      	orrs	r2, r1
 8010230:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010232:	6878      	ldr	r0, [r7, #4]
 8010234:	f000 f850 	bl	80102d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	68fa      	ldr	r2, [r7, #12]
 801023e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2220      	movs	r2, #32
 8010244:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	2200      	movs	r2, #0
 801024c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010250:	2300      	movs	r3, #0
}
 8010252:	4618      	mov	r0, r3
 8010254:	3710      	adds	r7, #16
 8010256:	46bd      	mov	sp, r7
 8010258:	bd80      	pop	{r7, pc}

0801025a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801025a:	b580      	push	{r7, lr}
 801025c:	b084      	sub	sp, #16
 801025e:	af00      	add	r7, sp, #0
 8010260:	6078      	str	r0, [r7, #4]
 8010262:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801026a:	2b01      	cmp	r3, #1
 801026c:	d101      	bne.n	8010272 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801026e:	2302      	movs	r3, #2
 8010270:	e02d      	b.n	80102ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	2201      	movs	r2, #1
 8010276:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	2224      	movs	r2, #36	; 0x24
 801027e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	681a      	ldr	r2, [r3, #0]
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	f022 0201 	bic.w	r2, r2, #1
 8010298:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	689b      	ldr	r3, [r3, #8]
 80102a0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	683a      	ldr	r2, [r7, #0]
 80102aa:	430a      	orrs	r2, r1
 80102ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80102ae:	6878      	ldr	r0, [r7, #4]
 80102b0:	f000 f812 	bl	80102d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	68fa      	ldr	r2, [r7, #12]
 80102ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2220      	movs	r2, #32
 80102c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	2200      	movs	r2, #0
 80102c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80102cc:	2300      	movs	r3, #0
}
 80102ce:	4618      	mov	r0, r3
 80102d0:	3710      	adds	r7, #16
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}
	...

080102d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80102d8:	b480      	push	{r7}
 80102da:	b085      	sub	sp, #20
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d108      	bne.n	80102fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	2201      	movs	r2, #1
 80102ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	2201      	movs	r2, #1
 80102f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80102f8:	e031      	b.n	801035e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80102fa:	2308      	movs	r3, #8
 80102fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80102fe:	2308      	movs	r3, #8
 8010300:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	689b      	ldr	r3, [r3, #8]
 8010308:	0e5b      	lsrs	r3, r3, #25
 801030a:	b2db      	uxtb	r3, r3
 801030c:	f003 0307 	and.w	r3, r3, #7
 8010310:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	689b      	ldr	r3, [r3, #8]
 8010318:	0f5b      	lsrs	r3, r3, #29
 801031a:	b2db      	uxtb	r3, r3
 801031c:	f003 0307 	and.w	r3, r3, #7
 8010320:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010322:	7bbb      	ldrb	r3, [r7, #14]
 8010324:	7b3a      	ldrb	r2, [r7, #12]
 8010326:	4911      	ldr	r1, [pc, #68]	; (801036c <UARTEx_SetNbDataToProcess+0x94>)
 8010328:	5c8a      	ldrb	r2, [r1, r2]
 801032a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801032e:	7b3a      	ldrb	r2, [r7, #12]
 8010330:	490f      	ldr	r1, [pc, #60]	; (8010370 <UARTEx_SetNbDataToProcess+0x98>)
 8010332:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010334:	fb93 f3f2 	sdiv	r3, r3, r2
 8010338:	b29a      	uxth	r2, r3
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010340:	7bfb      	ldrb	r3, [r7, #15]
 8010342:	7b7a      	ldrb	r2, [r7, #13]
 8010344:	4909      	ldr	r1, [pc, #36]	; (801036c <UARTEx_SetNbDataToProcess+0x94>)
 8010346:	5c8a      	ldrb	r2, [r1, r2]
 8010348:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801034c:	7b7a      	ldrb	r2, [r7, #13]
 801034e:	4908      	ldr	r1, [pc, #32]	; (8010370 <UARTEx_SetNbDataToProcess+0x98>)
 8010350:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010352:	fb93 f3f2 	sdiv	r3, r3, r2
 8010356:	b29a      	uxth	r2, r3
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801035e:	bf00      	nop
 8010360:	3714      	adds	r7, #20
 8010362:	46bd      	mov	sp, r7
 8010364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010368:	4770      	bx	lr
 801036a:	bf00      	nop
 801036c:	080184d4 	.word	0x080184d4
 8010370:	080184dc 	.word	0x080184dc

08010374 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8010374:	b480      	push	{r7}
 8010376:	b085      	sub	sp, #20
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2200      	movs	r2, #0
 8010380:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8010384:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8010388:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	b29a      	uxth	r2, r3
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8010394:	2300      	movs	r3, #0
}
 8010396:	4618      	mov	r0, r3
 8010398:	3714      	adds	r7, #20
 801039a:	46bd      	mov	sp, r7
 801039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a0:	4770      	bx	lr

080103a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80103a2:	b480      	push	{r7}
 80103a4:	b085      	sub	sp, #20
 80103a6:	af00      	add	r7, sp, #0
 80103a8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80103aa:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80103ae:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80103b6:	b29a      	uxth	r2, r3
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	b29b      	uxth	r3, r3
 80103bc:	43db      	mvns	r3, r3
 80103be:	b29b      	uxth	r3, r3
 80103c0:	4013      	ands	r3, r2
 80103c2:	b29a      	uxth	r2, r3
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80103ca:	2300      	movs	r3, #0
}
 80103cc:	4618      	mov	r0, r3
 80103ce:	3714      	adds	r7, #20
 80103d0:	46bd      	mov	sp, r7
 80103d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d6:	4770      	bx	lr

080103d8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80103d8:	b480      	push	{r7}
 80103da:	b085      	sub	sp, #20
 80103dc:	af00      	add	r7, sp, #0
 80103de:	60f8      	str	r0, [r7, #12]
 80103e0:	1d3b      	adds	r3, r7, #4
 80103e2:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	2201      	movs	r2, #1
 80103ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	2200      	movs	r2, #0
 80103f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	2200      	movs	r2, #0
 80103fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	2200      	movs	r2, #0
 8010402:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8010406:	2300      	movs	r3, #0
}
 8010408:	4618      	mov	r0, r3
 801040a:	3714      	adds	r7, #20
 801040c:	46bd      	mov	sp, r7
 801040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010412:	4770      	bx	lr

08010414 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010414:	b480      	push	{r7}
 8010416:	b09d      	sub	sp, #116	; 0x74
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
 801041c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801041e:	2300      	movs	r3, #0
 8010420:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8010424:	687a      	ldr	r2, [r7, #4]
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	781b      	ldrb	r3, [r3, #0]
 801042a:	009b      	lsls	r3, r3, #2
 801042c:	4413      	add	r3, r2
 801042e:	881b      	ldrh	r3, [r3, #0]
 8010430:	b29b      	uxth	r3, r3
 8010432:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8010436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801043a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 801043e:	683b      	ldr	r3, [r7, #0]
 8010440:	78db      	ldrb	r3, [r3, #3]
 8010442:	2b03      	cmp	r3, #3
 8010444:	d81f      	bhi.n	8010486 <USB_ActivateEndpoint+0x72>
 8010446:	a201      	add	r2, pc, #4	; (adr r2, 801044c <USB_ActivateEndpoint+0x38>)
 8010448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801044c:	0801045d 	.word	0x0801045d
 8010450:	08010479 	.word	0x08010479
 8010454:	0801048f 	.word	0x0801048f
 8010458:	0801046b 	.word	0x0801046b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 801045c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8010460:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010464:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8010468:	e012      	b.n	8010490 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801046a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801046e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8010472:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8010476:	e00b      	b.n	8010490 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8010478:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801047c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010480:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8010484:	e004      	b.n	8010490 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8010486:	2301      	movs	r3, #1
 8010488:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 801048c:	e000      	b.n	8010490 <USB_ActivateEndpoint+0x7c>
      break;
 801048e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8010490:	687a      	ldr	r2, [r7, #4]
 8010492:	683b      	ldr	r3, [r7, #0]
 8010494:	781b      	ldrb	r3, [r3, #0]
 8010496:	009b      	lsls	r3, r3, #2
 8010498:	441a      	add	r2, r3
 801049a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 801049e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80104a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80104a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80104aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104ae:	b29b      	uxth	r3, r3
 80104b0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80104b2:	687a      	ldr	r2, [r7, #4]
 80104b4:	683b      	ldr	r3, [r7, #0]
 80104b6:	781b      	ldrb	r3, [r3, #0]
 80104b8:	009b      	lsls	r3, r3, #2
 80104ba:	4413      	add	r3, r2
 80104bc:	881b      	ldrh	r3, [r3, #0]
 80104be:	b29b      	uxth	r3, r3
 80104c0:	b21b      	sxth	r3, r3
 80104c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80104c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80104ca:	b21a      	sxth	r2, r3
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	781b      	ldrb	r3, [r3, #0]
 80104d0:	b21b      	sxth	r3, r3
 80104d2:	4313      	orrs	r3, r2
 80104d4:	b21b      	sxth	r3, r3
 80104d6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80104da:	687a      	ldr	r2, [r7, #4]
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	781b      	ldrb	r3, [r3, #0]
 80104e0:	009b      	lsls	r3, r3, #2
 80104e2:	441a      	add	r2, r3
 80104e4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80104e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80104ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80104f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80104f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104f8:	b29b      	uxth	r3, r3
 80104fa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80104fc:	683b      	ldr	r3, [r7, #0]
 80104fe:	7b1b      	ldrb	r3, [r3, #12]
 8010500:	2b00      	cmp	r3, #0
 8010502:	f040 8178 	bne.w	80107f6 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	785b      	ldrb	r3, [r3, #1]
 801050a:	2b00      	cmp	r3, #0
 801050c:	f000 8084 	beq.w	8010618 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	61bb      	str	r3, [r7, #24]
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801051a:	b29b      	uxth	r3, r3
 801051c:	461a      	mov	r2, r3
 801051e:	69bb      	ldr	r3, [r7, #24]
 8010520:	4413      	add	r3, r2
 8010522:	61bb      	str	r3, [r7, #24]
 8010524:	683b      	ldr	r3, [r7, #0]
 8010526:	781b      	ldrb	r3, [r3, #0]
 8010528:	00da      	lsls	r2, r3, #3
 801052a:	69bb      	ldr	r3, [r7, #24]
 801052c:	4413      	add	r3, r2
 801052e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010532:	617b      	str	r3, [r7, #20]
 8010534:	683b      	ldr	r3, [r7, #0]
 8010536:	88db      	ldrh	r3, [r3, #6]
 8010538:	085b      	lsrs	r3, r3, #1
 801053a:	b29b      	uxth	r3, r3
 801053c:	005b      	lsls	r3, r3, #1
 801053e:	b29a      	uxth	r2, r3
 8010540:	697b      	ldr	r3, [r7, #20]
 8010542:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010544:	687a      	ldr	r2, [r7, #4]
 8010546:	683b      	ldr	r3, [r7, #0]
 8010548:	781b      	ldrb	r3, [r3, #0]
 801054a:	009b      	lsls	r3, r3, #2
 801054c:	4413      	add	r3, r2
 801054e:	881b      	ldrh	r3, [r3, #0]
 8010550:	827b      	strh	r3, [r7, #18]
 8010552:	8a7b      	ldrh	r3, [r7, #18]
 8010554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010558:	2b00      	cmp	r3, #0
 801055a:	d01b      	beq.n	8010594 <USB_ActivateEndpoint+0x180>
 801055c:	687a      	ldr	r2, [r7, #4]
 801055e:	683b      	ldr	r3, [r7, #0]
 8010560:	781b      	ldrb	r3, [r3, #0]
 8010562:	009b      	lsls	r3, r3, #2
 8010564:	4413      	add	r3, r2
 8010566:	881b      	ldrh	r3, [r3, #0]
 8010568:	b29b      	uxth	r3, r3
 801056a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801056e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010572:	823b      	strh	r3, [r7, #16]
 8010574:	687a      	ldr	r2, [r7, #4]
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	781b      	ldrb	r3, [r3, #0]
 801057a:	009b      	lsls	r3, r3, #2
 801057c:	441a      	add	r2, r3
 801057e:	8a3b      	ldrh	r3, [r7, #16]
 8010580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801058c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010590:	b29b      	uxth	r3, r3
 8010592:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010594:	683b      	ldr	r3, [r7, #0]
 8010596:	78db      	ldrb	r3, [r3, #3]
 8010598:	2b01      	cmp	r3, #1
 801059a:	d020      	beq.n	80105de <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 801059c:	687a      	ldr	r2, [r7, #4]
 801059e:	683b      	ldr	r3, [r7, #0]
 80105a0:	781b      	ldrb	r3, [r3, #0]
 80105a2:	009b      	lsls	r3, r3, #2
 80105a4:	4413      	add	r3, r2
 80105a6:	881b      	ldrh	r3, [r3, #0]
 80105a8:	b29b      	uxth	r3, r3
 80105aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80105ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105b2:	81bb      	strh	r3, [r7, #12]
 80105b4:	89bb      	ldrh	r3, [r7, #12]
 80105b6:	f083 0320 	eor.w	r3, r3, #32
 80105ba:	81bb      	strh	r3, [r7, #12]
 80105bc:	687a      	ldr	r2, [r7, #4]
 80105be:	683b      	ldr	r3, [r7, #0]
 80105c0:	781b      	ldrb	r3, [r3, #0]
 80105c2:	009b      	lsls	r3, r3, #2
 80105c4:	441a      	add	r2, r3
 80105c6:	89bb      	ldrh	r3, [r7, #12]
 80105c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80105cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80105d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80105d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105d8:	b29b      	uxth	r3, r3
 80105da:	8013      	strh	r3, [r2, #0]
 80105dc:	e2d5      	b.n	8010b8a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80105de:	687a      	ldr	r2, [r7, #4]
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	781b      	ldrb	r3, [r3, #0]
 80105e4:	009b      	lsls	r3, r3, #2
 80105e6:	4413      	add	r3, r2
 80105e8:	881b      	ldrh	r3, [r3, #0]
 80105ea:	b29b      	uxth	r3, r3
 80105ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80105f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105f4:	81fb      	strh	r3, [r7, #14]
 80105f6:	687a      	ldr	r2, [r7, #4]
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	781b      	ldrb	r3, [r3, #0]
 80105fc:	009b      	lsls	r3, r3, #2
 80105fe:	441a      	add	r2, r3
 8010600:	89fb      	ldrh	r3, [r7, #14]
 8010602:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010606:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801060a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801060e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010612:	b29b      	uxth	r3, r3
 8010614:	8013      	strh	r3, [r2, #0]
 8010616:	e2b8      	b.n	8010b8a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	633b      	str	r3, [r7, #48]	; 0x30
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010622:	b29b      	uxth	r3, r3
 8010624:	461a      	mov	r2, r3
 8010626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010628:	4413      	add	r3, r2
 801062a:	633b      	str	r3, [r7, #48]	; 0x30
 801062c:	683b      	ldr	r3, [r7, #0]
 801062e:	781b      	ldrb	r3, [r3, #0]
 8010630:	00da      	lsls	r2, r3, #3
 8010632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010634:	4413      	add	r3, r2
 8010636:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801063a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	88db      	ldrh	r3, [r3, #6]
 8010640:	085b      	lsrs	r3, r3, #1
 8010642:	b29b      	uxth	r3, r3
 8010644:	005b      	lsls	r3, r3, #1
 8010646:	b29a      	uxth	r2, r3
 8010648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801064a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010656:	b29b      	uxth	r3, r3
 8010658:	461a      	mov	r2, r3
 801065a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801065c:	4413      	add	r3, r2
 801065e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010660:	683b      	ldr	r3, [r7, #0]
 8010662:	781b      	ldrb	r3, [r3, #0]
 8010664:	00da      	lsls	r2, r3, #3
 8010666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010668:	4413      	add	r3, r2
 801066a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801066e:	627b      	str	r3, [r7, #36]	; 0x24
 8010670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010672:	881b      	ldrh	r3, [r3, #0]
 8010674:	b29b      	uxth	r3, r3
 8010676:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801067a:	b29a      	uxth	r2, r3
 801067c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801067e:	801a      	strh	r2, [r3, #0]
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	691b      	ldr	r3, [r3, #16]
 8010684:	2b3e      	cmp	r3, #62	; 0x3e
 8010686:	d91d      	bls.n	80106c4 <USB_ActivateEndpoint+0x2b0>
 8010688:	683b      	ldr	r3, [r7, #0]
 801068a:	691b      	ldr	r3, [r3, #16]
 801068c:	095b      	lsrs	r3, r3, #5
 801068e:	66bb      	str	r3, [r7, #104]	; 0x68
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	691b      	ldr	r3, [r3, #16]
 8010694:	f003 031f 	and.w	r3, r3, #31
 8010698:	2b00      	cmp	r3, #0
 801069a:	d102      	bne.n	80106a2 <USB_ActivateEndpoint+0x28e>
 801069c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801069e:	3b01      	subs	r3, #1
 80106a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80106a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106a4:	881b      	ldrh	r3, [r3, #0]
 80106a6:	b29a      	uxth	r2, r3
 80106a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80106aa:	b29b      	uxth	r3, r3
 80106ac:	029b      	lsls	r3, r3, #10
 80106ae:	b29b      	uxth	r3, r3
 80106b0:	4313      	orrs	r3, r2
 80106b2:	b29b      	uxth	r3, r3
 80106b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80106b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80106bc:	b29a      	uxth	r2, r3
 80106be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106c0:	801a      	strh	r2, [r3, #0]
 80106c2:	e026      	b.n	8010712 <USB_ActivateEndpoint+0x2fe>
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	691b      	ldr	r3, [r3, #16]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d10a      	bne.n	80106e2 <USB_ActivateEndpoint+0x2ce>
 80106cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ce:	881b      	ldrh	r3, [r3, #0]
 80106d0:	b29b      	uxth	r3, r3
 80106d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80106d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80106da:	b29a      	uxth	r2, r3
 80106dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106de:	801a      	strh	r2, [r3, #0]
 80106e0:	e017      	b.n	8010712 <USB_ActivateEndpoint+0x2fe>
 80106e2:	683b      	ldr	r3, [r7, #0]
 80106e4:	691b      	ldr	r3, [r3, #16]
 80106e6:	085b      	lsrs	r3, r3, #1
 80106e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80106ea:	683b      	ldr	r3, [r7, #0]
 80106ec:	691b      	ldr	r3, [r3, #16]
 80106ee:	f003 0301 	and.w	r3, r3, #1
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d002      	beq.n	80106fc <USB_ActivateEndpoint+0x2e8>
 80106f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80106f8:	3301      	adds	r3, #1
 80106fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80106fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106fe:	881b      	ldrh	r3, [r3, #0]
 8010700:	b29a      	uxth	r2, r3
 8010702:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010704:	b29b      	uxth	r3, r3
 8010706:	029b      	lsls	r3, r3, #10
 8010708:	b29b      	uxth	r3, r3
 801070a:	4313      	orrs	r3, r2
 801070c:	b29a      	uxth	r2, r3
 801070e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010710:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010712:	687a      	ldr	r2, [r7, #4]
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	781b      	ldrb	r3, [r3, #0]
 8010718:	009b      	lsls	r3, r3, #2
 801071a:	4413      	add	r3, r2
 801071c:	881b      	ldrh	r3, [r3, #0]
 801071e:	847b      	strh	r3, [r7, #34]	; 0x22
 8010720:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010726:	2b00      	cmp	r3, #0
 8010728:	d01b      	beq.n	8010762 <USB_ActivateEndpoint+0x34e>
 801072a:	687a      	ldr	r2, [r7, #4]
 801072c:	683b      	ldr	r3, [r7, #0]
 801072e:	781b      	ldrb	r3, [r3, #0]
 8010730:	009b      	lsls	r3, r3, #2
 8010732:	4413      	add	r3, r2
 8010734:	881b      	ldrh	r3, [r3, #0]
 8010736:	b29b      	uxth	r3, r3
 8010738:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801073c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010740:	843b      	strh	r3, [r7, #32]
 8010742:	687a      	ldr	r2, [r7, #4]
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	781b      	ldrb	r3, [r3, #0]
 8010748:	009b      	lsls	r3, r3, #2
 801074a:	441a      	add	r2, r3
 801074c:	8c3b      	ldrh	r3, [r7, #32]
 801074e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010752:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010756:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801075a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801075e:	b29b      	uxth	r3, r3
 8010760:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	781b      	ldrb	r3, [r3, #0]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d124      	bne.n	80107b4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801076a:	687a      	ldr	r2, [r7, #4]
 801076c:	683b      	ldr	r3, [r7, #0]
 801076e:	781b      	ldrb	r3, [r3, #0]
 8010770:	009b      	lsls	r3, r3, #2
 8010772:	4413      	add	r3, r2
 8010774:	881b      	ldrh	r3, [r3, #0]
 8010776:	b29b      	uxth	r3, r3
 8010778:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801077c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010780:	83bb      	strh	r3, [r7, #28]
 8010782:	8bbb      	ldrh	r3, [r7, #28]
 8010784:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8010788:	83bb      	strh	r3, [r7, #28]
 801078a:	8bbb      	ldrh	r3, [r7, #28]
 801078c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8010790:	83bb      	strh	r3, [r7, #28]
 8010792:	687a      	ldr	r2, [r7, #4]
 8010794:	683b      	ldr	r3, [r7, #0]
 8010796:	781b      	ldrb	r3, [r3, #0]
 8010798:	009b      	lsls	r3, r3, #2
 801079a:	441a      	add	r2, r3
 801079c:	8bbb      	ldrh	r3, [r7, #28]
 801079e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80107a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80107a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80107aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107ae:	b29b      	uxth	r3, r3
 80107b0:	8013      	strh	r3, [r2, #0]
 80107b2:	e1ea      	b.n	8010b8a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80107b4:	687a      	ldr	r2, [r7, #4]
 80107b6:	683b      	ldr	r3, [r7, #0]
 80107b8:	781b      	ldrb	r3, [r3, #0]
 80107ba:	009b      	lsls	r3, r3, #2
 80107bc:	4413      	add	r3, r2
 80107be:	881b      	ldrh	r3, [r3, #0]
 80107c0:	b29b      	uxth	r3, r3
 80107c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80107c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80107ca:	83fb      	strh	r3, [r7, #30]
 80107cc:	8bfb      	ldrh	r3, [r7, #30]
 80107ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80107d2:	83fb      	strh	r3, [r7, #30]
 80107d4:	687a      	ldr	r2, [r7, #4]
 80107d6:	683b      	ldr	r3, [r7, #0]
 80107d8:	781b      	ldrb	r3, [r3, #0]
 80107da:	009b      	lsls	r3, r3, #2
 80107dc:	441a      	add	r2, r3
 80107de:	8bfb      	ldrh	r3, [r7, #30]
 80107e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80107e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80107e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80107ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107f0:	b29b      	uxth	r3, r3
 80107f2:	8013      	strh	r3, [r2, #0]
 80107f4:	e1c9      	b.n	8010b8a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	78db      	ldrb	r3, [r3, #3]
 80107fa:	2b02      	cmp	r3, #2
 80107fc:	d11e      	bne.n	801083c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80107fe:	687a      	ldr	r2, [r7, #4]
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	781b      	ldrb	r3, [r3, #0]
 8010804:	009b      	lsls	r3, r3, #2
 8010806:	4413      	add	r3, r2
 8010808:	881b      	ldrh	r3, [r3, #0]
 801080a:	b29b      	uxth	r3, r3
 801080c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010814:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8010818:	687a      	ldr	r2, [r7, #4]
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	781b      	ldrb	r3, [r3, #0]
 801081e:	009b      	lsls	r3, r3, #2
 8010820:	441a      	add	r2, r3
 8010822:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8010826:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801082a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801082e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8010832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010836:	b29b      	uxth	r3, r3
 8010838:	8013      	strh	r3, [r2, #0]
 801083a:	e01d      	b.n	8010878 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801083c:	687a      	ldr	r2, [r7, #4]
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	781b      	ldrb	r3, [r3, #0]
 8010842:	009b      	lsls	r3, r3, #2
 8010844:	4413      	add	r3, r2
 8010846:	881b      	ldrh	r3, [r3, #0]
 8010848:	b29b      	uxth	r3, r3
 801084a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 801084e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010852:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8010856:	687a      	ldr	r2, [r7, #4]
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	781b      	ldrb	r3, [r3, #0]
 801085c:	009b      	lsls	r3, r3, #2
 801085e:	441a      	add	r2, r3
 8010860:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8010864:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010868:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801086c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010874:	b29b      	uxth	r3, r3
 8010876:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010882:	b29b      	uxth	r3, r3
 8010884:	461a      	mov	r2, r3
 8010886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010888:	4413      	add	r3, r2
 801088a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801088c:	683b      	ldr	r3, [r7, #0]
 801088e:	781b      	ldrb	r3, [r3, #0]
 8010890:	00da      	lsls	r2, r3, #3
 8010892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010894:	4413      	add	r3, r2
 8010896:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801089a:	65bb      	str	r3, [r7, #88]	; 0x58
 801089c:	683b      	ldr	r3, [r7, #0]
 801089e:	891b      	ldrh	r3, [r3, #8]
 80108a0:	085b      	lsrs	r3, r3, #1
 80108a2:	b29b      	uxth	r3, r3
 80108a4:	005b      	lsls	r3, r3, #1
 80108a6:	b29a      	uxth	r2, r3
 80108a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80108aa:	801a      	strh	r2, [r3, #0]
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	657b      	str	r3, [r7, #84]	; 0x54
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80108b6:	b29b      	uxth	r3, r3
 80108b8:	461a      	mov	r2, r3
 80108ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108bc:	4413      	add	r3, r2
 80108be:	657b      	str	r3, [r7, #84]	; 0x54
 80108c0:	683b      	ldr	r3, [r7, #0]
 80108c2:	781b      	ldrb	r3, [r3, #0]
 80108c4:	00da      	lsls	r2, r3, #3
 80108c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108c8:	4413      	add	r3, r2
 80108ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80108ce:	653b      	str	r3, [r7, #80]	; 0x50
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	895b      	ldrh	r3, [r3, #10]
 80108d4:	085b      	lsrs	r3, r3, #1
 80108d6:	b29b      	uxth	r3, r3
 80108d8:	005b      	lsls	r3, r3, #1
 80108da:	b29a      	uxth	r2, r3
 80108dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108de:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80108e0:	683b      	ldr	r3, [r7, #0]
 80108e2:	785b      	ldrb	r3, [r3, #1]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	f040 8093 	bne.w	8010a10 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80108ea:	687a      	ldr	r2, [r7, #4]
 80108ec:	683b      	ldr	r3, [r7, #0]
 80108ee:	781b      	ldrb	r3, [r3, #0]
 80108f0:	009b      	lsls	r3, r3, #2
 80108f2:	4413      	add	r3, r2
 80108f4:	881b      	ldrh	r3, [r3, #0]
 80108f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80108fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80108fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010902:	2b00      	cmp	r3, #0
 8010904:	d01b      	beq.n	801093e <USB_ActivateEndpoint+0x52a>
 8010906:	687a      	ldr	r2, [r7, #4]
 8010908:	683b      	ldr	r3, [r7, #0]
 801090a:	781b      	ldrb	r3, [r3, #0]
 801090c:	009b      	lsls	r3, r3, #2
 801090e:	4413      	add	r3, r2
 8010910:	881b      	ldrh	r3, [r3, #0]
 8010912:	b29b      	uxth	r3, r3
 8010914:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801091c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 801091e:	687a      	ldr	r2, [r7, #4]
 8010920:	683b      	ldr	r3, [r7, #0]
 8010922:	781b      	ldrb	r3, [r3, #0]
 8010924:	009b      	lsls	r3, r3, #2
 8010926:	441a      	add	r2, r3
 8010928:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801092a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801092e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010932:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010936:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801093a:	b29b      	uxth	r3, r3
 801093c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801093e:	687a      	ldr	r2, [r7, #4]
 8010940:	683b      	ldr	r3, [r7, #0]
 8010942:	781b      	ldrb	r3, [r3, #0]
 8010944:	009b      	lsls	r3, r3, #2
 8010946:	4413      	add	r3, r2
 8010948:	881b      	ldrh	r3, [r3, #0]
 801094a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801094c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801094e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010952:	2b00      	cmp	r3, #0
 8010954:	d01b      	beq.n	801098e <USB_ActivateEndpoint+0x57a>
 8010956:	687a      	ldr	r2, [r7, #4]
 8010958:	683b      	ldr	r3, [r7, #0]
 801095a:	781b      	ldrb	r3, [r3, #0]
 801095c:	009b      	lsls	r3, r3, #2
 801095e:	4413      	add	r3, r2
 8010960:	881b      	ldrh	r3, [r3, #0]
 8010962:	b29b      	uxth	r3, r3
 8010964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801096c:	877b      	strh	r3, [r7, #58]	; 0x3a
 801096e:	687a      	ldr	r2, [r7, #4]
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	781b      	ldrb	r3, [r3, #0]
 8010974:	009b      	lsls	r3, r3, #2
 8010976:	441a      	add	r2, r3
 8010978:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801097a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801097e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010982:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010986:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801098a:	b29b      	uxth	r3, r3
 801098c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801098e:	687a      	ldr	r2, [r7, #4]
 8010990:	683b      	ldr	r3, [r7, #0]
 8010992:	781b      	ldrb	r3, [r3, #0]
 8010994:	009b      	lsls	r3, r3, #2
 8010996:	4413      	add	r3, r2
 8010998:	881b      	ldrh	r3, [r3, #0]
 801099a:	b29b      	uxth	r3, r3
 801099c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80109a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80109a4:	873b      	strh	r3, [r7, #56]	; 0x38
 80109a6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80109a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80109ac:	873b      	strh	r3, [r7, #56]	; 0x38
 80109ae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80109b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80109b4:	873b      	strh	r3, [r7, #56]	; 0x38
 80109b6:	687a      	ldr	r2, [r7, #4]
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	781b      	ldrb	r3, [r3, #0]
 80109bc:	009b      	lsls	r3, r3, #2
 80109be:	441a      	add	r2, r3
 80109c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80109c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80109c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80109ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80109ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109d2:	b29b      	uxth	r3, r3
 80109d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80109d6:	687a      	ldr	r2, [r7, #4]
 80109d8:	683b      	ldr	r3, [r7, #0]
 80109da:	781b      	ldrb	r3, [r3, #0]
 80109dc:	009b      	lsls	r3, r3, #2
 80109de:	4413      	add	r3, r2
 80109e0:	881b      	ldrh	r3, [r3, #0]
 80109e2:	b29b      	uxth	r3, r3
 80109e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80109e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80109ec:	86fb      	strh	r3, [r7, #54]	; 0x36
 80109ee:	687a      	ldr	r2, [r7, #4]
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	781b      	ldrb	r3, [r3, #0]
 80109f4:	009b      	lsls	r3, r3, #2
 80109f6:	441a      	add	r2, r3
 80109f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80109fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80109fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a0a:	b29b      	uxth	r3, r3
 8010a0c:	8013      	strh	r3, [r2, #0]
 8010a0e:	e0bc      	b.n	8010b8a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010a10:	687a      	ldr	r2, [r7, #4]
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	781b      	ldrb	r3, [r3, #0]
 8010a16:	009b      	lsls	r3, r3, #2
 8010a18:	4413      	add	r3, r2
 8010a1a:	881b      	ldrh	r3, [r3, #0]
 8010a1c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8010a20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010a24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d01d      	beq.n	8010a68 <USB_ActivateEndpoint+0x654>
 8010a2c:	687a      	ldr	r2, [r7, #4]
 8010a2e:	683b      	ldr	r3, [r7, #0]
 8010a30:	781b      	ldrb	r3, [r3, #0]
 8010a32:	009b      	lsls	r3, r3, #2
 8010a34:	4413      	add	r3, r2
 8010a36:	881b      	ldrh	r3, [r3, #0]
 8010a38:	b29b      	uxth	r3, r3
 8010a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010a42:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8010a46:	687a      	ldr	r2, [r7, #4]
 8010a48:	683b      	ldr	r3, [r7, #0]
 8010a4a:	781b      	ldrb	r3, [r3, #0]
 8010a4c:	009b      	lsls	r3, r3, #2
 8010a4e:	441a      	add	r2, r3
 8010a50:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8010a54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010a58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010a5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a64:	b29b      	uxth	r3, r3
 8010a66:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010a68:	687a      	ldr	r2, [r7, #4]
 8010a6a:	683b      	ldr	r3, [r7, #0]
 8010a6c:	781b      	ldrb	r3, [r3, #0]
 8010a6e:	009b      	lsls	r3, r3, #2
 8010a70:	4413      	add	r3, r2
 8010a72:	881b      	ldrh	r3, [r3, #0]
 8010a74:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8010a78:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8010a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d01d      	beq.n	8010ac0 <USB_ActivateEndpoint+0x6ac>
 8010a84:	687a      	ldr	r2, [r7, #4]
 8010a86:	683b      	ldr	r3, [r7, #0]
 8010a88:	781b      	ldrb	r3, [r3, #0]
 8010a8a:	009b      	lsls	r3, r3, #2
 8010a8c:	4413      	add	r3, r2
 8010a8e:	881b      	ldrh	r3, [r3, #0]
 8010a90:	b29b      	uxth	r3, r3
 8010a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010a9a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8010a9e:	687a      	ldr	r2, [r7, #4]
 8010aa0:	683b      	ldr	r3, [r7, #0]
 8010aa2:	781b      	ldrb	r3, [r3, #0]
 8010aa4:	009b      	lsls	r3, r3, #2
 8010aa6:	441a      	add	r2, r3
 8010aa8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8010aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010ab8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010abc:	b29b      	uxth	r3, r3
 8010abe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	78db      	ldrb	r3, [r3, #3]
 8010ac4:	2b01      	cmp	r3, #1
 8010ac6:	d024      	beq.n	8010b12 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010ac8:	687a      	ldr	r2, [r7, #4]
 8010aca:	683b      	ldr	r3, [r7, #0]
 8010acc:	781b      	ldrb	r3, [r3, #0]
 8010ace:	009b      	lsls	r3, r3, #2
 8010ad0:	4413      	add	r3, r2
 8010ad2:	881b      	ldrh	r3, [r3, #0]
 8010ad4:	b29b      	uxth	r3, r3
 8010ad6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010ade:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010ae2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010ae6:	f083 0320 	eor.w	r3, r3, #32
 8010aea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010aee:	687a      	ldr	r2, [r7, #4]
 8010af0:	683b      	ldr	r3, [r7, #0]
 8010af2:	781b      	ldrb	r3, [r3, #0]
 8010af4:	009b      	lsls	r3, r3, #2
 8010af6:	441a      	add	r2, r3
 8010af8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b0c:	b29b      	uxth	r3, r3
 8010b0e:	8013      	strh	r3, [r2, #0]
 8010b10:	e01d      	b.n	8010b4e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010b12:	687a      	ldr	r2, [r7, #4]
 8010b14:	683b      	ldr	r3, [r7, #0]
 8010b16:	781b      	ldrb	r3, [r3, #0]
 8010b18:	009b      	lsls	r3, r3, #2
 8010b1a:	4413      	add	r3, r2
 8010b1c:	881b      	ldrh	r3, [r3, #0]
 8010b1e:	b29b      	uxth	r3, r3
 8010b20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b28:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8010b2c:	687a      	ldr	r2, [r7, #4]
 8010b2e:	683b      	ldr	r3, [r7, #0]
 8010b30:	781b      	ldrb	r3, [r3, #0]
 8010b32:	009b      	lsls	r3, r3, #2
 8010b34:	441a      	add	r2, r3
 8010b36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b4a:	b29b      	uxth	r3, r3
 8010b4c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010b4e:	687a      	ldr	r2, [r7, #4]
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	781b      	ldrb	r3, [r3, #0]
 8010b54:	009b      	lsls	r3, r3, #2
 8010b56:	4413      	add	r3, r2
 8010b58:	881b      	ldrh	r3, [r3, #0]
 8010b5a:	b29b      	uxth	r3, r3
 8010b5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010b64:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010b68:	687a      	ldr	r2, [r7, #4]
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	781b      	ldrb	r3, [r3, #0]
 8010b6e:	009b      	lsls	r3, r3, #2
 8010b70:	441a      	add	r2, r3
 8010b72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b86:	b29b      	uxth	r3, r3
 8010b88:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8010b8a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8010b8e:	4618      	mov	r0, r3
 8010b90:	3774      	adds	r7, #116	; 0x74
 8010b92:	46bd      	mov	sp, r7
 8010b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b98:	4770      	bx	lr
 8010b9a:	bf00      	nop

08010b9c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010b9c:	b480      	push	{r7}
 8010b9e:	b08d      	sub	sp, #52	; 0x34
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
 8010ba4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8010ba6:	683b      	ldr	r3, [r7, #0]
 8010ba8:	7b1b      	ldrb	r3, [r3, #12]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	f040 808e 	bne.w	8010ccc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	785b      	ldrb	r3, [r3, #1]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d044      	beq.n	8010c42 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010bb8:	687a      	ldr	r2, [r7, #4]
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	781b      	ldrb	r3, [r3, #0]
 8010bbe:	009b      	lsls	r3, r3, #2
 8010bc0:	4413      	add	r3, r2
 8010bc2:	881b      	ldrh	r3, [r3, #0]
 8010bc4:	81bb      	strh	r3, [r7, #12]
 8010bc6:	89bb      	ldrh	r3, [r7, #12]
 8010bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d01b      	beq.n	8010c08 <USB_DeactivateEndpoint+0x6c>
 8010bd0:	687a      	ldr	r2, [r7, #4]
 8010bd2:	683b      	ldr	r3, [r7, #0]
 8010bd4:	781b      	ldrb	r3, [r3, #0]
 8010bd6:	009b      	lsls	r3, r3, #2
 8010bd8:	4413      	add	r3, r2
 8010bda:	881b      	ldrh	r3, [r3, #0]
 8010bdc:	b29b      	uxth	r3, r3
 8010bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010be6:	817b      	strh	r3, [r7, #10]
 8010be8:	687a      	ldr	r2, [r7, #4]
 8010bea:	683b      	ldr	r3, [r7, #0]
 8010bec:	781b      	ldrb	r3, [r3, #0]
 8010bee:	009b      	lsls	r3, r3, #2
 8010bf0:	441a      	add	r2, r3
 8010bf2:	897b      	ldrh	r3, [r7, #10]
 8010bf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010bf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010bfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010c00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010c04:	b29b      	uxth	r3, r3
 8010c06:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010c08:	687a      	ldr	r2, [r7, #4]
 8010c0a:	683b      	ldr	r3, [r7, #0]
 8010c0c:	781b      	ldrb	r3, [r3, #0]
 8010c0e:	009b      	lsls	r3, r3, #2
 8010c10:	4413      	add	r3, r2
 8010c12:	881b      	ldrh	r3, [r3, #0]
 8010c14:	b29b      	uxth	r3, r3
 8010c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010c1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c1e:	813b      	strh	r3, [r7, #8]
 8010c20:	687a      	ldr	r2, [r7, #4]
 8010c22:	683b      	ldr	r3, [r7, #0]
 8010c24:	781b      	ldrb	r3, [r3, #0]
 8010c26:	009b      	lsls	r3, r3, #2
 8010c28:	441a      	add	r2, r3
 8010c2a:	893b      	ldrh	r3, [r7, #8]
 8010c2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010c30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010c34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c3c:	b29b      	uxth	r3, r3
 8010c3e:	8013      	strh	r3, [r2, #0]
 8010c40:	e192      	b.n	8010f68 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010c42:	687a      	ldr	r2, [r7, #4]
 8010c44:	683b      	ldr	r3, [r7, #0]
 8010c46:	781b      	ldrb	r3, [r3, #0]
 8010c48:	009b      	lsls	r3, r3, #2
 8010c4a:	4413      	add	r3, r2
 8010c4c:	881b      	ldrh	r3, [r3, #0]
 8010c4e:	827b      	strh	r3, [r7, #18]
 8010c50:	8a7b      	ldrh	r3, [r7, #18]
 8010c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d01b      	beq.n	8010c92 <USB_DeactivateEndpoint+0xf6>
 8010c5a:	687a      	ldr	r2, [r7, #4]
 8010c5c:	683b      	ldr	r3, [r7, #0]
 8010c5e:	781b      	ldrb	r3, [r3, #0]
 8010c60:	009b      	lsls	r3, r3, #2
 8010c62:	4413      	add	r3, r2
 8010c64:	881b      	ldrh	r3, [r3, #0]
 8010c66:	b29b      	uxth	r3, r3
 8010c68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c70:	823b      	strh	r3, [r7, #16]
 8010c72:	687a      	ldr	r2, [r7, #4]
 8010c74:	683b      	ldr	r3, [r7, #0]
 8010c76:	781b      	ldrb	r3, [r3, #0]
 8010c78:	009b      	lsls	r3, r3, #2
 8010c7a:	441a      	add	r2, r3
 8010c7c:	8a3b      	ldrh	r3, [r7, #16]
 8010c7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010c82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010c86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c8e:	b29b      	uxth	r3, r3
 8010c90:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010c92:	687a      	ldr	r2, [r7, #4]
 8010c94:	683b      	ldr	r3, [r7, #0]
 8010c96:	781b      	ldrb	r3, [r3, #0]
 8010c98:	009b      	lsls	r3, r3, #2
 8010c9a:	4413      	add	r3, r2
 8010c9c:	881b      	ldrh	r3, [r3, #0]
 8010c9e:	b29b      	uxth	r3, r3
 8010ca0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010ca8:	81fb      	strh	r3, [r7, #14]
 8010caa:	687a      	ldr	r2, [r7, #4]
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	781b      	ldrb	r3, [r3, #0]
 8010cb0:	009b      	lsls	r3, r3, #2
 8010cb2:	441a      	add	r2, r3
 8010cb4:	89fb      	ldrh	r3, [r7, #14]
 8010cb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010cba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010cc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cc6:	b29b      	uxth	r3, r3
 8010cc8:	8013      	strh	r3, [r2, #0]
 8010cca:	e14d      	b.n	8010f68 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	785b      	ldrb	r3, [r3, #1]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	f040 80a5 	bne.w	8010e20 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010cd6:	687a      	ldr	r2, [r7, #4]
 8010cd8:	683b      	ldr	r3, [r7, #0]
 8010cda:	781b      	ldrb	r3, [r3, #0]
 8010cdc:	009b      	lsls	r3, r3, #2
 8010cde:	4413      	add	r3, r2
 8010ce0:	881b      	ldrh	r3, [r3, #0]
 8010ce2:	843b      	strh	r3, [r7, #32]
 8010ce4:	8c3b      	ldrh	r3, [r7, #32]
 8010ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d01b      	beq.n	8010d26 <USB_DeactivateEndpoint+0x18a>
 8010cee:	687a      	ldr	r2, [r7, #4]
 8010cf0:	683b      	ldr	r3, [r7, #0]
 8010cf2:	781b      	ldrb	r3, [r3, #0]
 8010cf4:	009b      	lsls	r3, r3, #2
 8010cf6:	4413      	add	r3, r2
 8010cf8:	881b      	ldrh	r3, [r3, #0]
 8010cfa:	b29b      	uxth	r3, r3
 8010cfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d04:	83fb      	strh	r3, [r7, #30]
 8010d06:	687a      	ldr	r2, [r7, #4]
 8010d08:	683b      	ldr	r3, [r7, #0]
 8010d0a:	781b      	ldrb	r3, [r3, #0]
 8010d0c:	009b      	lsls	r3, r3, #2
 8010d0e:	441a      	add	r2, r3
 8010d10:	8bfb      	ldrh	r3, [r7, #30]
 8010d12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010d16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010d1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d22:	b29b      	uxth	r3, r3
 8010d24:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010d26:	687a      	ldr	r2, [r7, #4]
 8010d28:	683b      	ldr	r3, [r7, #0]
 8010d2a:	781b      	ldrb	r3, [r3, #0]
 8010d2c:	009b      	lsls	r3, r3, #2
 8010d2e:	4413      	add	r3, r2
 8010d30:	881b      	ldrh	r3, [r3, #0]
 8010d32:	83bb      	strh	r3, [r7, #28]
 8010d34:	8bbb      	ldrh	r3, [r7, #28]
 8010d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d01b      	beq.n	8010d76 <USB_DeactivateEndpoint+0x1da>
 8010d3e:	687a      	ldr	r2, [r7, #4]
 8010d40:	683b      	ldr	r3, [r7, #0]
 8010d42:	781b      	ldrb	r3, [r3, #0]
 8010d44:	009b      	lsls	r3, r3, #2
 8010d46:	4413      	add	r3, r2
 8010d48:	881b      	ldrh	r3, [r3, #0]
 8010d4a:	b29b      	uxth	r3, r3
 8010d4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d54:	837b      	strh	r3, [r7, #26]
 8010d56:	687a      	ldr	r2, [r7, #4]
 8010d58:	683b      	ldr	r3, [r7, #0]
 8010d5a:	781b      	ldrb	r3, [r3, #0]
 8010d5c:	009b      	lsls	r3, r3, #2
 8010d5e:	441a      	add	r2, r3
 8010d60:	8b7b      	ldrh	r3, [r7, #26]
 8010d62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010d66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010d6e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010d72:	b29b      	uxth	r3, r3
 8010d74:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8010d76:	687a      	ldr	r2, [r7, #4]
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	781b      	ldrb	r3, [r3, #0]
 8010d7c:	009b      	lsls	r3, r3, #2
 8010d7e:	4413      	add	r3, r2
 8010d80:	881b      	ldrh	r3, [r3, #0]
 8010d82:	b29b      	uxth	r3, r3
 8010d84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010d88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d8c:	833b      	strh	r3, [r7, #24]
 8010d8e:	687a      	ldr	r2, [r7, #4]
 8010d90:	683b      	ldr	r3, [r7, #0]
 8010d92:	781b      	ldrb	r3, [r3, #0]
 8010d94:	009b      	lsls	r3, r3, #2
 8010d96:	441a      	add	r2, r3
 8010d98:	8b3b      	ldrh	r3, [r7, #24]
 8010d9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010d9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010da6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010daa:	b29b      	uxth	r3, r3
 8010dac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010dae:	687a      	ldr	r2, [r7, #4]
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	781b      	ldrb	r3, [r3, #0]
 8010db4:	009b      	lsls	r3, r3, #2
 8010db6:	4413      	add	r3, r2
 8010db8:	881b      	ldrh	r3, [r3, #0]
 8010dba:	b29b      	uxth	r3, r3
 8010dbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010dc4:	82fb      	strh	r3, [r7, #22]
 8010dc6:	687a      	ldr	r2, [r7, #4]
 8010dc8:	683b      	ldr	r3, [r7, #0]
 8010dca:	781b      	ldrb	r3, [r3, #0]
 8010dcc:	009b      	lsls	r3, r3, #2
 8010dce:	441a      	add	r2, r3
 8010dd0:	8afb      	ldrh	r3, [r7, #22]
 8010dd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010dd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010de2:	b29b      	uxth	r3, r3
 8010de4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010de6:	687a      	ldr	r2, [r7, #4]
 8010de8:	683b      	ldr	r3, [r7, #0]
 8010dea:	781b      	ldrb	r3, [r3, #0]
 8010dec:	009b      	lsls	r3, r3, #2
 8010dee:	4413      	add	r3, r2
 8010df0:	881b      	ldrh	r3, [r3, #0]
 8010df2:	b29b      	uxth	r3, r3
 8010df4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010df8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010dfc:	82bb      	strh	r3, [r7, #20]
 8010dfe:	687a      	ldr	r2, [r7, #4]
 8010e00:	683b      	ldr	r3, [r7, #0]
 8010e02:	781b      	ldrb	r3, [r3, #0]
 8010e04:	009b      	lsls	r3, r3, #2
 8010e06:	441a      	add	r2, r3
 8010e08:	8abb      	ldrh	r3, [r7, #20]
 8010e0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010e0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e1a:	b29b      	uxth	r3, r3
 8010e1c:	8013      	strh	r3, [r2, #0]
 8010e1e:	e0a3      	b.n	8010f68 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010e20:	687a      	ldr	r2, [r7, #4]
 8010e22:	683b      	ldr	r3, [r7, #0]
 8010e24:	781b      	ldrb	r3, [r3, #0]
 8010e26:	009b      	lsls	r3, r3, #2
 8010e28:	4413      	add	r3, r2
 8010e2a:	881b      	ldrh	r3, [r3, #0]
 8010e2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010e2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010e30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d01b      	beq.n	8010e70 <USB_DeactivateEndpoint+0x2d4>
 8010e38:	687a      	ldr	r2, [r7, #4]
 8010e3a:	683b      	ldr	r3, [r7, #0]
 8010e3c:	781b      	ldrb	r3, [r3, #0]
 8010e3e:	009b      	lsls	r3, r3, #2
 8010e40:	4413      	add	r3, r2
 8010e42:	881b      	ldrh	r3, [r3, #0]
 8010e44:	b29b      	uxth	r3, r3
 8010e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010e4e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010e50:	687a      	ldr	r2, [r7, #4]
 8010e52:	683b      	ldr	r3, [r7, #0]
 8010e54:	781b      	ldrb	r3, [r3, #0]
 8010e56:	009b      	lsls	r3, r3, #2
 8010e58:	441a      	add	r2, r3
 8010e5a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010e5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010e60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010e64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e6c:	b29b      	uxth	r3, r3
 8010e6e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010e70:	687a      	ldr	r2, [r7, #4]
 8010e72:	683b      	ldr	r3, [r7, #0]
 8010e74:	781b      	ldrb	r3, [r3, #0]
 8010e76:	009b      	lsls	r3, r3, #2
 8010e78:	4413      	add	r3, r2
 8010e7a:	881b      	ldrh	r3, [r3, #0]
 8010e7c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8010e7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d01b      	beq.n	8010ec0 <USB_DeactivateEndpoint+0x324>
 8010e88:	687a      	ldr	r2, [r7, #4]
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	781b      	ldrb	r3, [r3, #0]
 8010e8e:	009b      	lsls	r3, r3, #2
 8010e90:	4413      	add	r3, r2
 8010e92:	881b      	ldrh	r3, [r3, #0]
 8010e94:	b29b      	uxth	r3, r3
 8010e96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010e9e:	853b      	strh	r3, [r7, #40]	; 0x28
 8010ea0:	687a      	ldr	r2, [r7, #4]
 8010ea2:	683b      	ldr	r3, [r7, #0]
 8010ea4:	781b      	ldrb	r3, [r3, #0]
 8010ea6:	009b      	lsls	r3, r3, #2
 8010ea8:	441a      	add	r2, r3
 8010eaa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010eac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010eb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010eb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010eb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010ebc:	b29b      	uxth	r3, r3
 8010ebe:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8010ec0:	687a      	ldr	r2, [r7, #4]
 8010ec2:	683b      	ldr	r3, [r7, #0]
 8010ec4:	781b      	ldrb	r3, [r3, #0]
 8010ec6:	009b      	lsls	r3, r3, #2
 8010ec8:	4413      	add	r3, r2
 8010eca:	881b      	ldrh	r3, [r3, #0]
 8010ecc:	b29b      	uxth	r3, r3
 8010ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010ed6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8010ed8:	687a      	ldr	r2, [r7, #4]
 8010eda:	683b      	ldr	r3, [r7, #0]
 8010edc:	781b      	ldrb	r3, [r3, #0]
 8010ede:	009b      	lsls	r3, r3, #2
 8010ee0:	441a      	add	r2, r3
 8010ee2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010ee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010ee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010eec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ef4:	b29b      	uxth	r3, r3
 8010ef6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010ef8:	687a      	ldr	r2, [r7, #4]
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	781b      	ldrb	r3, [r3, #0]
 8010efe:	009b      	lsls	r3, r3, #2
 8010f00:	4413      	add	r3, r2
 8010f02:	881b      	ldrh	r3, [r3, #0]
 8010f04:	b29b      	uxth	r3, r3
 8010f06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010f0e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010f10:	687a      	ldr	r2, [r7, #4]
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	781b      	ldrb	r3, [r3, #0]
 8010f16:	009b      	lsls	r3, r3, #2
 8010f18:	441a      	add	r2, r3
 8010f1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010f1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010f20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f2c:	b29b      	uxth	r3, r3
 8010f2e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010f30:	687a      	ldr	r2, [r7, #4]
 8010f32:	683b      	ldr	r3, [r7, #0]
 8010f34:	781b      	ldrb	r3, [r3, #0]
 8010f36:	009b      	lsls	r3, r3, #2
 8010f38:	4413      	add	r3, r2
 8010f3a:	881b      	ldrh	r3, [r3, #0]
 8010f3c:	b29b      	uxth	r3, r3
 8010f3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010f46:	847b      	strh	r3, [r7, #34]	; 0x22
 8010f48:	687a      	ldr	r2, [r7, #4]
 8010f4a:	683b      	ldr	r3, [r7, #0]
 8010f4c:	781b      	ldrb	r3, [r3, #0]
 8010f4e:	009b      	lsls	r3, r3, #2
 8010f50:	441a      	add	r2, r3
 8010f52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010f54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010f58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010f5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f64:	b29b      	uxth	r3, r3
 8010f66:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8010f68:	2300      	movs	r3, #0
}
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	3734      	adds	r7, #52	; 0x34
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f74:	4770      	bx	lr

08010f76 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010f76:	b580      	push	{r7, lr}
 8010f78:	b0c2      	sub	sp, #264	; 0x108
 8010f7a:	af00      	add	r7, sp, #0
 8010f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010f84:	6018      	str	r0, [r3, #0]
 8010f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f8e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	785b      	ldrb	r3, [r3, #1]
 8010f9c:	2b01      	cmp	r3, #1
 8010f9e:	f040 86b7 	bne.w	8011d10 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8010fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	699a      	ldr	r2, [r3, #24]
 8010fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	691b      	ldr	r3, [r3, #16]
 8010fba:	429a      	cmp	r2, r3
 8010fbc:	d908      	bls.n	8010fd0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8010fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	691b      	ldr	r3, [r3, #16]
 8010fca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8010fce:	e007      	b.n	8010fe0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8010fd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	699b      	ldr	r3, [r3, #24]
 8010fdc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8010fe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	7b1b      	ldrb	r3, [r3, #12]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d13a      	bne.n	8011066 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8010ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	6959      	ldr	r1, [r3, #20]
 8010ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	88da      	ldrh	r2, [r3, #6]
 8011008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801100c:	b29b      	uxth	r3, r3
 801100e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011012:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011016:	6800      	ldr	r0, [r0, #0]
 8011018:	f001 fc98 	bl	801294c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801101c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011020:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	613b      	str	r3, [r7, #16]
 8011028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801102c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011036:	b29b      	uxth	r3, r3
 8011038:	461a      	mov	r2, r3
 801103a:	693b      	ldr	r3, [r7, #16]
 801103c:	4413      	add	r3, r2
 801103e:	613b      	str	r3, [r7, #16]
 8011040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	781b      	ldrb	r3, [r3, #0]
 801104c:	00da      	lsls	r2, r3, #3
 801104e:	693b      	ldr	r3, [r7, #16]
 8011050:	4413      	add	r3, r2
 8011052:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011056:	60fb      	str	r3, [r7, #12]
 8011058:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801105c:	b29a      	uxth	r2, r3
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	801a      	strh	r2, [r3, #0]
 8011062:	f000 be1f 	b.w	8011ca4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8011066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801106a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	78db      	ldrb	r3, [r3, #3]
 8011072:	2b02      	cmp	r3, #2
 8011074:	f040 8462 	bne.w	801193c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8011078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801107c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	6a1a      	ldr	r2, [r3, #32]
 8011084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011088:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	691b      	ldr	r3, [r3, #16]
 8011090:	429a      	cmp	r2, r3
 8011092:	f240 83df 	bls.w	8011854 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801109a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801109e:	681a      	ldr	r2, [r3, #0]
 80110a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	781b      	ldrb	r3, [r3, #0]
 80110ac:	009b      	lsls	r3, r3, #2
 80110ae:	4413      	add	r3, r2
 80110b0:	881b      	ldrh	r3, [r3, #0]
 80110b2:	b29b      	uxth	r3, r3
 80110b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80110b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80110bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80110c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80110c8:	681a      	ldr	r2, [r3, #0]
 80110ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	781b      	ldrb	r3, [r3, #0]
 80110d6:	009b      	lsls	r3, r3, #2
 80110d8:	441a      	add	r2, r3
 80110da:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80110de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80110e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80110e6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80110ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110ee:	b29b      	uxth	r3, r3
 80110f0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80110f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80110f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	6a1a      	ldr	r2, [r3, #32]
 80110fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011102:	1ad2      	subs	r2, r2, r3
 8011104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011114:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011118:	681a      	ldr	r2, [r3, #0]
 801111a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801111e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	781b      	ldrb	r3, [r3, #0]
 8011126:	009b      	lsls	r3, r3, #2
 8011128:	4413      	add	r3, r2
 801112a:	881b      	ldrh	r3, [r3, #0]
 801112c:	b29b      	uxth	r3, r3
 801112e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011132:	2b00      	cmp	r3, #0
 8011134:	f000 81c7 	beq.w	80114c6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011138:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801113c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	633b      	str	r3, [r7, #48]	; 0x30
 8011144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	785b      	ldrb	r3, [r3, #1]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d177      	bne.n	8011244 <USB_EPStartXfer+0x2ce>
 8011154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011158:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011164:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801116e:	b29b      	uxth	r3, r3
 8011170:	461a      	mov	r2, r3
 8011172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011174:	4413      	add	r3, r2
 8011176:	62bb      	str	r3, [r7, #40]	; 0x28
 8011178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801117c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	781b      	ldrb	r3, [r3, #0]
 8011184:	00da      	lsls	r2, r3, #3
 8011186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011188:	4413      	add	r3, r2
 801118a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801118e:	627b      	str	r3, [r7, #36]	; 0x24
 8011190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011192:	881b      	ldrh	r3, [r3, #0]
 8011194:	b29b      	uxth	r3, r3
 8011196:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801119a:	b29a      	uxth	r2, r3
 801119c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801119e:	801a      	strh	r2, [r3, #0]
 80111a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111a4:	2b3e      	cmp	r3, #62	; 0x3e
 80111a6:	d921      	bls.n	80111ec <USB_EPStartXfer+0x276>
 80111a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111ac:	095b      	lsrs	r3, r3, #5
 80111ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80111b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111b6:	f003 031f 	and.w	r3, r3, #31
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d104      	bne.n	80111c8 <USB_EPStartXfer+0x252>
 80111be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80111c2:	3b01      	subs	r3, #1
 80111c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80111c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ca:	881b      	ldrh	r3, [r3, #0]
 80111cc:	b29a      	uxth	r2, r3
 80111ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80111d2:	b29b      	uxth	r3, r3
 80111d4:	029b      	lsls	r3, r3, #10
 80111d6:	b29b      	uxth	r3, r3
 80111d8:	4313      	orrs	r3, r2
 80111da:	b29b      	uxth	r3, r3
 80111dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80111e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80111e4:	b29a      	uxth	r2, r3
 80111e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111e8:	801a      	strh	r2, [r3, #0]
 80111ea:	e050      	b.n	801128e <USB_EPStartXfer+0x318>
 80111ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d10a      	bne.n	801120a <USB_EPStartXfer+0x294>
 80111f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111f6:	881b      	ldrh	r3, [r3, #0]
 80111f8:	b29b      	uxth	r3, r3
 80111fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80111fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011202:	b29a      	uxth	r2, r3
 8011204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011206:	801a      	strh	r2, [r3, #0]
 8011208:	e041      	b.n	801128e <USB_EPStartXfer+0x318>
 801120a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801120e:	085b      	lsrs	r3, r3, #1
 8011210:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8011214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011218:	f003 0301 	and.w	r3, r3, #1
 801121c:	2b00      	cmp	r3, #0
 801121e:	d004      	beq.n	801122a <USB_EPStartXfer+0x2b4>
 8011220:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011224:	3301      	adds	r3, #1
 8011226:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801122c:	881b      	ldrh	r3, [r3, #0]
 801122e:	b29a      	uxth	r2, r3
 8011230:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8011234:	b29b      	uxth	r3, r3
 8011236:	029b      	lsls	r3, r3, #10
 8011238:	b29b      	uxth	r3, r3
 801123a:	4313      	orrs	r3, r2
 801123c:	b29a      	uxth	r2, r3
 801123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011240:	801a      	strh	r2, [r3, #0]
 8011242:	e024      	b.n	801128e <USB_EPStartXfer+0x318>
 8011244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	785b      	ldrb	r3, [r3, #1]
 8011250:	2b01      	cmp	r3, #1
 8011252:	d11c      	bne.n	801128e <USB_EPStartXfer+0x318>
 8011254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011258:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011262:	b29b      	uxth	r3, r3
 8011264:	461a      	mov	r2, r3
 8011266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011268:	4413      	add	r3, r2
 801126a:	633b      	str	r3, [r7, #48]	; 0x30
 801126c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	781b      	ldrb	r3, [r3, #0]
 8011278:	00da      	lsls	r2, r3, #3
 801127a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801127c:	4413      	add	r3, r2
 801127e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011282:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011288:	b29a      	uxth	r2, r3
 801128a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801128c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801128e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	895b      	ldrh	r3, [r3, #10]
 801129a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801129e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	6959      	ldr	r1, [r3, #20]
 80112aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80112ae:	b29b      	uxth	r3, r3
 80112b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80112b4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80112b8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80112bc:	6800      	ldr	r0, [r0, #0]
 80112be:	f001 fb45 	bl	801294c <USB_WritePMA>
            ep->xfer_buff += len;
 80112c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	695a      	ldr	r2, [r3, #20]
 80112ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80112d2:	441a      	add	r2, r3
 80112d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80112e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	6a1a      	ldr	r2, [r3, #32]
 80112ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	691b      	ldr	r3, [r3, #16]
 80112f8:	429a      	cmp	r2, r3
 80112fa:	d90f      	bls.n	801131c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80112fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011300:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	6a1a      	ldr	r2, [r3, #32]
 8011308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801130c:	1ad2      	subs	r2, r2, r3
 801130e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011312:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	621a      	str	r2, [r3, #32]
 801131a:	e00e      	b.n	801133a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 801131c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011320:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	6a1b      	ldr	r3, [r3, #32]
 8011328:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 801132c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011330:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	2200      	movs	r2, #0
 8011338:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801133a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801133e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	785b      	ldrb	r3, [r3, #1]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d177      	bne.n	801143a <USB_EPStartXfer+0x4c4>
 801134a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801134e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	61bb      	str	r3, [r7, #24]
 8011356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801135a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011364:	b29b      	uxth	r3, r3
 8011366:	461a      	mov	r2, r3
 8011368:	69bb      	ldr	r3, [r7, #24]
 801136a:	4413      	add	r3, r2
 801136c:	61bb      	str	r3, [r7, #24]
 801136e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	781b      	ldrb	r3, [r3, #0]
 801137a:	00da      	lsls	r2, r3, #3
 801137c:	69bb      	ldr	r3, [r7, #24]
 801137e:	4413      	add	r3, r2
 8011380:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011384:	617b      	str	r3, [r7, #20]
 8011386:	697b      	ldr	r3, [r7, #20]
 8011388:	881b      	ldrh	r3, [r3, #0]
 801138a:	b29b      	uxth	r3, r3
 801138c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011390:	b29a      	uxth	r2, r3
 8011392:	697b      	ldr	r3, [r7, #20]
 8011394:	801a      	strh	r2, [r3, #0]
 8011396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801139a:	2b3e      	cmp	r3, #62	; 0x3e
 801139c:	d921      	bls.n	80113e2 <USB_EPStartXfer+0x46c>
 801139e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80113a2:	095b      	lsrs	r3, r3, #5
 80113a4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80113a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80113ac:	f003 031f 	and.w	r3, r3, #31
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d104      	bne.n	80113be <USB_EPStartXfer+0x448>
 80113b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80113b8:	3b01      	subs	r3, #1
 80113ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80113be:	697b      	ldr	r3, [r7, #20]
 80113c0:	881b      	ldrh	r3, [r3, #0]
 80113c2:	b29a      	uxth	r2, r3
 80113c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80113c8:	b29b      	uxth	r3, r3
 80113ca:	029b      	lsls	r3, r3, #10
 80113cc:	b29b      	uxth	r3, r3
 80113ce:	4313      	orrs	r3, r2
 80113d0:	b29b      	uxth	r3, r3
 80113d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80113d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80113da:	b29a      	uxth	r2, r3
 80113dc:	697b      	ldr	r3, [r7, #20]
 80113de:	801a      	strh	r2, [r3, #0]
 80113e0:	e056      	b.n	8011490 <USB_EPStartXfer+0x51a>
 80113e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d10a      	bne.n	8011400 <USB_EPStartXfer+0x48a>
 80113ea:	697b      	ldr	r3, [r7, #20]
 80113ec:	881b      	ldrh	r3, [r3, #0]
 80113ee:	b29b      	uxth	r3, r3
 80113f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80113f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80113f8:	b29a      	uxth	r2, r3
 80113fa:	697b      	ldr	r3, [r7, #20]
 80113fc:	801a      	strh	r2, [r3, #0]
 80113fe:	e047      	b.n	8011490 <USB_EPStartXfer+0x51a>
 8011400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011404:	085b      	lsrs	r3, r3, #1
 8011406:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801140a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801140e:	f003 0301 	and.w	r3, r3, #1
 8011412:	2b00      	cmp	r3, #0
 8011414:	d004      	beq.n	8011420 <USB_EPStartXfer+0x4aa>
 8011416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801141a:	3301      	adds	r3, #1
 801141c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011420:	697b      	ldr	r3, [r7, #20]
 8011422:	881b      	ldrh	r3, [r3, #0]
 8011424:	b29a      	uxth	r2, r3
 8011426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801142a:	b29b      	uxth	r3, r3
 801142c:	029b      	lsls	r3, r3, #10
 801142e:	b29b      	uxth	r3, r3
 8011430:	4313      	orrs	r3, r2
 8011432:	b29a      	uxth	r2, r3
 8011434:	697b      	ldr	r3, [r7, #20]
 8011436:	801a      	strh	r2, [r3, #0]
 8011438:	e02a      	b.n	8011490 <USB_EPStartXfer+0x51a>
 801143a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801143e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	785b      	ldrb	r3, [r3, #1]
 8011446:	2b01      	cmp	r3, #1
 8011448:	d122      	bne.n	8011490 <USB_EPStartXfer+0x51a>
 801144a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801144e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	623b      	str	r3, [r7, #32]
 8011456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801145a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011464:	b29b      	uxth	r3, r3
 8011466:	461a      	mov	r2, r3
 8011468:	6a3b      	ldr	r3, [r7, #32]
 801146a:	4413      	add	r3, r2
 801146c:	623b      	str	r3, [r7, #32]
 801146e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	781b      	ldrb	r3, [r3, #0]
 801147a:	00da      	lsls	r2, r3, #3
 801147c:	6a3b      	ldr	r3, [r7, #32]
 801147e:	4413      	add	r3, r2
 8011480:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011484:	61fb      	str	r3, [r7, #28]
 8011486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801148a:	b29a      	uxth	r2, r3
 801148c:	69fb      	ldr	r3, [r7, #28]
 801148e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8011490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	891b      	ldrh	r3, [r3, #8]
 801149c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80114a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	6959      	ldr	r1, [r3, #20]
 80114ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114b0:	b29b      	uxth	r3, r3
 80114b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80114b6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80114ba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80114be:	6800      	ldr	r0, [r0, #0]
 80114c0:	f001 fa44 	bl	801294c <USB_WritePMA>
 80114c4:	e3ee      	b.n	8011ca4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80114c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	785b      	ldrb	r3, [r3, #1]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d177      	bne.n	80115c6 <USB_EPStartXfer+0x650>
 80114d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80114e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80114f0:	b29b      	uxth	r3, r3
 80114f2:	461a      	mov	r2, r3
 80114f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80114f6:	4413      	add	r3, r2
 80114f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80114fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	781b      	ldrb	r3, [r3, #0]
 8011506:	00da      	lsls	r2, r3, #3
 8011508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801150a:	4413      	add	r3, r2
 801150c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011510:	647b      	str	r3, [r7, #68]	; 0x44
 8011512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011514:	881b      	ldrh	r3, [r3, #0]
 8011516:	b29b      	uxth	r3, r3
 8011518:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801151c:	b29a      	uxth	r2, r3
 801151e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011520:	801a      	strh	r2, [r3, #0]
 8011522:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011526:	2b3e      	cmp	r3, #62	; 0x3e
 8011528:	d921      	bls.n	801156e <USB_EPStartXfer+0x5f8>
 801152a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801152e:	095b      	lsrs	r3, r3, #5
 8011530:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011534:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011538:	f003 031f 	and.w	r3, r3, #31
 801153c:	2b00      	cmp	r3, #0
 801153e:	d104      	bne.n	801154a <USB_EPStartXfer+0x5d4>
 8011540:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011544:	3b01      	subs	r3, #1
 8011546:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801154a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801154c:	881b      	ldrh	r3, [r3, #0]
 801154e:	b29a      	uxth	r2, r3
 8011550:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8011554:	b29b      	uxth	r3, r3
 8011556:	029b      	lsls	r3, r3, #10
 8011558:	b29b      	uxth	r3, r3
 801155a:	4313      	orrs	r3, r2
 801155c:	b29b      	uxth	r3, r3
 801155e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011566:	b29a      	uxth	r2, r3
 8011568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801156a:	801a      	strh	r2, [r3, #0]
 801156c:	e056      	b.n	801161c <USB_EPStartXfer+0x6a6>
 801156e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011572:	2b00      	cmp	r3, #0
 8011574:	d10a      	bne.n	801158c <USB_EPStartXfer+0x616>
 8011576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011578:	881b      	ldrh	r3, [r3, #0]
 801157a:	b29b      	uxth	r3, r3
 801157c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011584:	b29a      	uxth	r2, r3
 8011586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011588:	801a      	strh	r2, [r3, #0]
 801158a:	e047      	b.n	801161c <USB_EPStartXfer+0x6a6>
 801158c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011590:	085b      	lsrs	r3, r3, #1
 8011592:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801159a:	f003 0301 	and.w	r3, r3, #1
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d004      	beq.n	80115ac <USB_EPStartXfer+0x636>
 80115a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80115a6:	3301      	adds	r3, #1
 80115a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80115ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115ae:	881b      	ldrh	r3, [r3, #0]
 80115b0:	b29a      	uxth	r2, r3
 80115b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80115b6:	b29b      	uxth	r3, r3
 80115b8:	029b      	lsls	r3, r3, #10
 80115ba:	b29b      	uxth	r3, r3
 80115bc:	4313      	orrs	r3, r2
 80115be:	b29a      	uxth	r2, r3
 80115c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115c2:	801a      	strh	r2, [r3, #0]
 80115c4:	e02a      	b.n	801161c <USB_EPStartXfer+0x6a6>
 80115c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	785b      	ldrb	r3, [r3, #1]
 80115d2:	2b01      	cmp	r3, #1
 80115d4:	d122      	bne.n	801161c <USB_EPStartXfer+0x6a6>
 80115d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	653b      	str	r3, [r7, #80]	; 0x50
 80115e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80115f0:	b29b      	uxth	r3, r3
 80115f2:	461a      	mov	r2, r3
 80115f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115f6:	4413      	add	r3, r2
 80115f8:	653b      	str	r3, [r7, #80]	; 0x50
 80115fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	781b      	ldrb	r3, [r3, #0]
 8011606:	00da      	lsls	r2, r3, #3
 8011608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801160a:	4413      	add	r3, r2
 801160c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011610:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011616:	b29a      	uxth	r2, r3
 8011618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801161a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801161c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	891b      	ldrh	r3, [r3, #8]
 8011628:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801162c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	6959      	ldr	r1, [r3, #20]
 8011638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801163c:	b29b      	uxth	r3, r3
 801163e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011642:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011646:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801164a:	6800      	ldr	r0, [r0, #0]
 801164c:	f001 f97e 	bl	801294c <USB_WritePMA>
            ep->xfer_buff += len;
 8011650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	695a      	ldr	r2, [r3, #20]
 801165c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011660:	441a      	add	r2, r3
 8011662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011666:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801166e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	6a1a      	ldr	r2, [r3, #32]
 801167a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801167e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	691b      	ldr	r3, [r3, #16]
 8011686:	429a      	cmp	r2, r3
 8011688:	d90f      	bls.n	80116aa <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 801168a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801168e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	6a1a      	ldr	r2, [r3, #32]
 8011696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801169a:	1ad2      	subs	r2, r2, r3
 801169c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	621a      	str	r2, [r3, #32]
 80116a8:	e00e      	b.n	80116c8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80116aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	6a1b      	ldr	r3, [r3, #32]
 80116b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80116ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	2200      	movs	r2, #0
 80116c6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80116c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	643b      	str	r3, [r7, #64]	; 0x40
 80116d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	785b      	ldrb	r3, [r3, #1]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d177      	bne.n	80117d4 <USB_EPStartXfer+0x85e>
 80116e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80116f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80116fe:	b29b      	uxth	r3, r3
 8011700:	461a      	mov	r2, r3
 8011702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011704:	4413      	add	r3, r2
 8011706:	63bb      	str	r3, [r7, #56]	; 0x38
 8011708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801170c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	781b      	ldrb	r3, [r3, #0]
 8011714:	00da      	lsls	r2, r3, #3
 8011716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011718:	4413      	add	r3, r2
 801171a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801171e:	637b      	str	r3, [r7, #52]	; 0x34
 8011720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011722:	881b      	ldrh	r3, [r3, #0]
 8011724:	b29b      	uxth	r3, r3
 8011726:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801172a:	b29a      	uxth	r2, r3
 801172c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801172e:	801a      	strh	r2, [r3, #0]
 8011730:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011734:	2b3e      	cmp	r3, #62	; 0x3e
 8011736:	d921      	bls.n	801177c <USB_EPStartXfer+0x806>
 8011738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801173c:	095b      	lsrs	r3, r3, #5
 801173e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011746:	f003 031f 	and.w	r3, r3, #31
 801174a:	2b00      	cmp	r3, #0
 801174c:	d104      	bne.n	8011758 <USB_EPStartXfer+0x7e2>
 801174e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011752:	3b01      	subs	r3, #1
 8011754:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801175a:	881b      	ldrh	r3, [r3, #0]
 801175c:	b29a      	uxth	r2, r3
 801175e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011762:	b29b      	uxth	r3, r3
 8011764:	029b      	lsls	r3, r3, #10
 8011766:	b29b      	uxth	r3, r3
 8011768:	4313      	orrs	r3, r2
 801176a:	b29b      	uxth	r3, r3
 801176c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011774:	b29a      	uxth	r2, r3
 8011776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011778:	801a      	strh	r2, [r3, #0]
 801177a:	e050      	b.n	801181e <USB_EPStartXfer+0x8a8>
 801177c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011780:	2b00      	cmp	r3, #0
 8011782:	d10a      	bne.n	801179a <USB_EPStartXfer+0x824>
 8011784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011786:	881b      	ldrh	r3, [r3, #0]
 8011788:	b29b      	uxth	r3, r3
 801178a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801178e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011792:	b29a      	uxth	r2, r3
 8011794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011796:	801a      	strh	r2, [r3, #0]
 8011798:	e041      	b.n	801181e <USB_EPStartXfer+0x8a8>
 801179a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801179e:	085b      	lsrs	r3, r3, #1
 80117a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80117a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80117a8:	f003 0301 	and.w	r3, r3, #1
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d004      	beq.n	80117ba <USB_EPStartXfer+0x844>
 80117b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80117b4:	3301      	adds	r3, #1
 80117b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80117ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117bc:	881b      	ldrh	r3, [r3, #0]
 80117be:	b29a      	uxth	r2, r3
 80117c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80117c4:	b29b      	uxth	r3, r3
 80117c6:	029b      	lsls	r3, r3, #10
 80117c8:	b29b      	uxth	r3, r3
 80117ca:	4313      	orrs	r3, r2
 80117cc:	b29a      	uxth	r2, r3
 80117ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117d0:	801a      	strh	r2, [r3, #0]
 80117d2:	e024      	b.n	801181e <USB_EPStartXfer+0x8a8>
 80117d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	785b      	ldrb	r3, [r3, #1]
 80117e0:	2b01      	cmp	r3, #1
 80117e2:	d11c      	bne.n	801181e <USB_EPStartXfer+0x8a8>
 80117e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80117f2:	b29b      	uxth	r3, r3
 80117f4:	461a      	mov	r2, r3
 80117f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80117f8:	4413      	add	r3, r2
 80117fa:	643b      	str	r3, [r7, #64]	; 0x40
 80117fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	781b      	ldrb	r3, [r3, #0]
 8011808:	00da      	lsls	r2, r3, #3
 801180a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801180c:	4413      	add	r3, r2
 801180e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011818:	b29a      	uxth	r2, r3
 801181a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801181c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801181e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	895b      	ldrh	r3, [r3, #10]
 801182a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801182e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	6959      	ldr	r1, [r3, #20]
 801183a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801183e:	b29b      	uxth	r3, r3
 8011840:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011844:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011848:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 801184c:	6800      	ldr	r0, [r0, #0]
 801184e:	f001 f87d 	bl	801294c <USB_WritePMA>
 8011852:	e227      	b.n	8011ca4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8011854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	6a1b      	ldr	r3, [r3, #32]
 8011860:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8011864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011868:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801186c:	681a      	ldr	r2, [r3, #0]
 801186e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011872:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	781b      	ldrb	r3, [r3, #0]
 801187a:	009b      	lsls	r3, r3, #2
 801187c:	4413      	add	r3, r2
 801187e:	881b      	ldrh	r3, [r3, #0]
 8011880:	b29b      	uxth	r3, r3
 8011882:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8011886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801188a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 801188e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011892:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011896:	681a      	ldr	r2, [r3, #0]
 8011898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801189c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	781b      	ldrb	r3, [r3, #0]
 80118a4:	009b      	lsls	r3, r3, #2
 80118a6:	441a      	add	r2, r3
 80118a8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80118ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80118b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80118b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80118b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80118bc:	b29b      	uxth	r3, r3
 80118be:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80118c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80118cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80118da:	b29b      	uxth	r3, r3
 80118dc:	461a      	mov	r2, r3
 80118de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80118e0:	4413      	add	r3, r2
 80118e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80118e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	781b      	ldrb	r3, [r3, #0]
 80118f0:	00da      	lsls	r2, r3, #3
 80118f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80118f4:	4413      	add	r3, r2
 80118f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80118fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80118fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011900:	b29a      	uxth	r2, r3
 8011902:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011904:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801190a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	891b      	ldrh	r3, [r3, #8]
 8011912:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801191a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	6959      	ldr	r1, [r3, #20]
 8011922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011926:	b29b      	uxth	r3, r3
 8011928:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801192c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011930:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011934:	6800      	ldr	r0, [r0, #0]
 8011936:	f001 f809 	bl	801294c <USB_WritePMA>
 801193a:	e1b3      	b.n	8011ca4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801193c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	6a1a      	ldr	r2, [r3, #32]
 8011948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801194c:	1ad2      	subs	r2, r2, r3
 801194e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011952:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801195a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801195e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011962:	681a      	ldr	r2, [r3, #0]
 8011964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	781b      	ldrb	r3, [r3, #0]
 8011970:	009b      	lsls	r3, r3, #2
 8011972:	4413      	add	r3, r2
 8011974:	881b      	ldrh	r3, [r3, #0]
 8011976:	b29b      	uxth	r3, r3
 8011978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801197c:	2b00      	cmp	r3, #0
 801197e:	f000 80c6 	beq.w	8011b0e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011986:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	673b      	str	r3, [r7, #112]	; 0x70
 801198e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011992:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	785b      	ldrb	r3, [r3, #1]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d177      	bne.n	8011a8e <USB_EPStartXfer+0xb18>
 801199e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80119aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80119b8:	b29b      	uxth	r3, r3
 80119ba:	461a      	mov	r2, r3
 80119bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80119be:	4413      	add	r3, r2
 80119c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80119c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	781b      	ldrb	r3, [r3, #0]
 80119ce:	00da      	lsls	r2, r3, #3
 80119d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80119d2:	4413      	add	r3, r2
 80119d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80119d8:	667b      	str	r3, [r7, #100]	; 0x64
 80119da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80119dc:	881b      	ldrh	r3, [r3, #0]
 80119de:	b29b      	uxth	r3, r3
 80119e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80119e4:	b29a      	uxth	r2, r3
 80119e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80119e8:	801a      	strh	r2, [r3, #0]
 80119ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80119ee:	2b3e      	cmp	r3, #62	; 0x3e
 80119f0:	d921      	bls.n	8011a36 <USB_EPStartXfer+0xac0>
 80119f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80119f6:	095b      	lsrs	r3, r3, #5
 80119f8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80119fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a00:	f003 031f 	and.w	r3, r3, #31
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d104      	bne.n	8011a12 <USB_EPStartXfer+0xa9c>
 8011a08:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011a0c:	3b01      	subs	r3, #1
 8011a0e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011a12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011a14:	881b      	ldrh	r3, [r3, #0]
 8011a16:	b29a      	uxth	r2, r3
 8011a18:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011a1c:	b29b      	uxth	r3, r3
 8011a1e:	029b      	lsls	r3, r3, #10
 8011a20:	b29b      	uxth	r3, r3
 8011a22:	4313      	orrs	r3, r2
 8011a24:	b29b      	uxth	r3, r3
 8011a26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011a2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011a2e:	b29a      	uxth	r2, r3
 8011a30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011a32:	801a      	strh	r2, [r3, #0]
 8011a34:	e050      	b.n	8011ad8 <USB_EPStartXfer+0xb62>
 8011a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d10a      	bne.n	8011a54 <USB_EPStartXfer+0xade>
 8011a3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011a40:	881b      	ldrh	r3, [r3, #0]
 8011a42:	b29b      	uxth	r3, r3
 8011a44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011a48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011a4c:	b29a      	uxth	r2, r3
 8011a4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011a50:	801a      	strh	r2, [r3, #0]
 8011a52:	e041      	b.n	8011ad8 <USB_EPStartXfer+0xb62>
 8011a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a58:	085b      	lsrs	r3, r3, #1
 8011a5a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a62:	f003 0301 	and.w	r3, r3, #1
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d004      	beq.n	8011a74 <USB_EPStartXfer+0xafe>
 8011a6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011a6e:	3301      	adds	r3, #1
 8011a70:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011a74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011a76:	881b      	ldrh	r3, [r3, #0]
 8011a78:	b29a      	uxth	r2, r3
 8011a7a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8011a7e:	b29b      	uxth	r3, r3
 8011a80:	029b      	lsls	r3, r3, #10
 8011a82:	b29b      	uxth	r3, r3
 8011a84:	4313      	orrs	r3, r2
 8011a86:	b29a      	uxth	r2, r3
 8011a88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011a8a:	801a      	strh	r2, [r3, #0]
 8011a8c:	e024      	b.n	8011ad8 <USB_EPStartXfer+0xb62>
 8011a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	785b      	ldrb	r3, [r3, #1]
 8011a9a:	2b01      	cmp	r3, #1
 8011a9c:	d11c      	bne.n	8011ad8 <USB_EPStartXfer+0xb62>
 8011a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011aa2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011aac:	b29b      	uxth	r3, r3
 8011aae:	461a      	mov	r2, r3
 8011ab0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011ab2:	4413      	add	r3, r2
 8011ab4:	673b      	str	r3, [r7, #112]	; 0x70
 8011ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011aba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	781b      	ldrb	r3, [r3, #0]
 8011ac2:	00da      	lsls	r2, r3, #3
 8011ac4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011ac6:	4413      	add	r3, r2
 8011ac8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011acc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ad2:	b29a      	uxth	r2, r3
 8011ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011ad6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8011ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011adc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ae0:	681b      	ldr	r3, [r3, #0]
 8011ae2:	895b      	ldrh	r3, [r3, #10]
 8011ae4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011aec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	6959      	ldr	r1, [r3, #20]
 8011af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011af8:	b29b      	uxth	r3, r3
 8011afa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011afe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011b02:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011b06:	6800      	ldr	r0, [r0, #0]
 8011b08:	f000 ff20 	bl	801294c <USB_WritePMA>
 8011b0c:	e0ca      	b.n	8011ca4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	785b      	ldrb	r3, [r3, #1]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d177      	bne.n	8011c0e <USB_EPStartXfer+0xc98>
 8011b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011b2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011b38:	b29b      	uxth	r3, r3
 8011b3a:	461a      	mov	r2, r3
 8011b3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011b3e:	4413      	add	r3, r2
 8011b40:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	781b      	ldrb	r3, [r3, #0]
 8011b4e:	00da      	lsls	r2, r3, #3
 8011b50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011b52:	4413      	add	r3, r2
 8011b54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011b58:	67bb      	str	r3, [r7, #120]	; 0x78
 8011b5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011b5c:	881b      	ldrh	r3, [r3, #0]
 8011b5e:	b29b      	uxth	r3, r3
 8011b60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011b64:	b29a      	uxth	r2, r3
 8011b66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011b68:	801a      	strh	r2, [r3, #0]
 8011b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b6e:	2b3e      	cmp	r3, #62	; 0x3e
 8011b70:	d921      	bls.n	8011bb6 <USB_EPStartXfer+0xc40>
 8011b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b76:	095b      	lsrs	r3, r3, #5
 8011b78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b80:	f003 031f 	and.w	r3, r3, #31
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d104      	bne.n	8011b92 <USB_EPStartXfer+0xc1c>
 8011b88:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011b8c:	3b01      	subs	r3, #1
 8011b8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011b92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011b94:	881b      	ldrh	r3, [r3, #0]
 8011b96:	b29a      	uxth	r2, r3
 8011b98:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011b9c:	b29b      	uxth	r3, r3
 8011b9e:	029b      	lsls	r3, r3, #10
 8011ba0:	b29b      	uxth	r3, r3
 8011ba2:	4313      	orrs	r3, r2
 8011ba4:	b29b      	uxth	r3, r3
 8011ba6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011baa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011bae:	b29a      	uxth	r2, r3
 8011bb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011bb2:	801a      	strh	r2, [r3, #0]
 8011bb4:	e05c      	b.n	8011c70 <USB_EPStartXfer+0xcfa>
 8011bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d10a      	bne.n	8011bd4 <USB_EPStartXfer+0xc5e>
 8011bbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011bc0:	881b      	ldrh	r3, [r3, #0]
 8011bc2:	b29b      	uxth	r3, r3
 8011bc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011bc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011bcc:	b29a      	uxth	r2, r3
 8011bce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011bd0:	801a      	strh	r2, [r3, #0]
 8011bd2:	e04d      	b.n	8011c70 <USB_EPStartXfer+0xcfa>
 8011bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011bd8:	085b      	lsrs	r3, r3, #1
 8011bda:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011be2:	f003 0301 	and.w	r3, r3, #1
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d004      	beq.n	8011bf4 <USB_EPStartXfer+0xc7e>
 8011bea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011bee:	3301      	adds	r3, #1
 8011bf0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011bf4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011bf6:	881b      	ldrh	r3, [r3, #0]
 8011bf8:	b29a      	uxth	r2, r3
 8011bfa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8011bfe:	b29b      	uxth	r3, r3
 8011c00:	029b      	lsls	r3, r3, #10
 8011c02:	b29b      	uxth	r3, r3
 8011c04:	4313      	orrs	r3, r2
 8011c06:	b29a      	uxth	r2, r3
 8011c08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011c0a:	801a      	strh	r2, [r3, #0]
 8011c0c:	e030      	b.n	8011c70 <USB_EPStartXfer+0xcfa>
 8011c0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	785b      	ldrb	r3, [r3, #1]
 8011c1a:	2b01      	cmp	r3, #1
 8011c1c:	d128      	bne.n	8011c70 <USB_EPStartXfer+0xcfa>
 8011c1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011c3a:	b29b      	uxth	r3, r3
 8011c3c:	461a      	mov	r2, r3
 8011c3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011c42:	4413      	add	r3, r2
 8011c44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011c48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	781b      	ldrb	r3, [r3, #0]
 8011c54:	00da      	lsls	r2, r3, #3
 8011c56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011c5a:	4413      	add	r3, r2
 8011c5c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011c60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c68:	b29a      	uxth	r2, r3
 8011c6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011c6e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	891b      	ldrh	r3, [r3, #8]
 8011c7c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011c80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011c84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	6959      	ldr	r1, [r3, #20]
 8011c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c90:	b29b      	uxth	r3, r3
 8011c92:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8011c96:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011c9a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011c9e:	6800      	ldr	r0, [r0, #0]
 8011ca0:	f000 fe54 	bl	801294c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8011ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ca8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011cac:	681a      	ldr	r2, [r3, #0]
 8011cae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	781b      	ldrb	r3, [r3, #0]
 8011cba:	009b      	lsls	r3, r3, #2
 8011cbc:	4413      	add	r3, r2
 8011cbe:	881b      	ldrh	r3, [r3, #0]
 8011cc0:	b29b      	uxth	r3, r3
 8011cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011cc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011cca:	817b      	strh	r3, [r7, #10]
 8011ccc:	897b      	ldrh	r3, [r7, #10]
 8011cce:	f083 0310 	eor.w	r3, r3, #16
 8011cd2:	817b      	strh	r3, [r7, #10]
 8011cd4:	897b      	ldrh	r3, [r7, #10]
 8011cd6:	f083 0320 	eor.w	r3, r3, #32
 8011cda:	817b      	strh	r3, [r7, #10]
 8011cdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ce0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ce4:	681a      	ldr	r2, [r3, #0]
 8011ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011cea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	781b      	ldrb	r3, [r3, #0]
 8011cf2:	009b      	lsls	r3, r3, #2
 8011cf4:	441a      	add	r2, r3
 8011cf6:	897b      	ldrh	r3, [r7, #10]
 8011cf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011cfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011d00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d08:	b29b      	uxth	r3, r3
 8011d0a:	8013      	strh	r3, [r2, #0]
 8011d0c:	f000 bcde 	b.w	80126cc <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8011d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	7b1b      	ldrb	r3, [r3, #12]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	f040 80bb 	bne.w	8011e98 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8011d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	699a      	ldr	r2, [r3, #24]
 8011d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	691b      	ldr	r3, [r3, #16]
 8011d3a:	429a      	cmp	r2, r3
 8011d3c:	d917      	bls.n	8011d6e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8011d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	691b      	ldr	r3, [r3, #16]
 8011d4a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8011d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	699a      	ldr	r2, [r3, #24]
 8011d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d5e:	1ad2      	subs	r2, r2, r3
 8011d60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	619a      	str	r2, [r3, #24]
 8011d6c:	e00e      	b.n	8011d8c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8011d6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	699b      	ldr	r3, [r3, #24]
 8011d7a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8011d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	2200      	movs	r2, #0
 8011d8a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8011d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011d9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011da8:	b29b      	uxth	r3, r3
 8011daa:	461a      	mov	r2, r3
 8011dac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011db0:	4413      	add	r3, r2
 8011db2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011db6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011dba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	781b      	ldrb	r3, [r3, #0]
 8011dc2:	00da      	lsls	r2, r3, #3
 8011dc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011dc8:	4413      	add	r3, r2
 8011dca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011dce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011dd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011dd6:	881b      	ldrh	r3, [r3, #0]
 8011dd8:	b29b      	uxth	r3, r3
 8011dda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011dde:	b29a      	uxth	r2, r3
 8011de0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011de4:	801a      	strh	r2, [r3, #0]
 8011de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011dea:	2b3e      	cmp	r3, #62	; 0x3e
 8011dec:	d924      	bls.n	8011e38 <USB_EPStartXfer+0xec2>
 8011dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011df2:	095b      	lsrs	r3, r3, #5
 8011df4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011df8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011dfc:	f003 031f 	and.w	r3, r3, #31
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d104      	bne.n	8011e0e <USB_EPStartXfer+0xe98>
 8011e04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011e08:	3b01      	subs	r3, #1
 8011e0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011e12:	881b      	ldrh	r3, [r3, #0]
 8011e14:	b29a      	uxth	r2, r3
 8011e16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011e1a:	b29b      	uxth	r3, r3
 8011e1c:	029b      	lsls	r3, r3, #10
 8011e1e:	b29b      	uxth	r3, r3
 8011e20:	4313      	orrs	r3, r2
 8011e22:	b29b      	uxth	r3, r3
 8011e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011e2c:	b29a      	uxth	r2, r3
 8011e2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011e32:	801a      	strh	r2, [r3, #0]
 8011e34:	f000 bc10 	b.w	8012658 <USB_EPStartXfer+0x16e2>
 8011e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d10c      	bne.n	8011e5a <USB_EPStartXfer+0xee4>
 8011e40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011e44:	881b      	ldrh	r3, [r3, #0]
 8011e46:	b29b      	uxth	r3, r3
 8011e48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011e4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011e50:	b29a      	uxth	r2, r3
 8011e52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011e56:	801a      	strh	r2, [r3, #0]
 8011e58:	e3fe      	b.n	8012658 <USB_EPStartXfer+0x16e2>
 8011e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e5e:	085b      	lsrs	r3, r3, #1
 8011e60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e68:	f003 0301 	and.w	r3, r3, #1
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d004      	beq.n	8011e7a <USB_EPStartXfer+0xf04>
 8011e70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011e74:	3301      	adds	r3, #1
 8011e76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011e7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011e7e:	881b      	ldrh	r3, [r3, #0]
 8011e80:	b29a      	uxth	r2, r3
 8011e82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011e86:	b29b      	uxth	r3, r3
 8011e88:	029b      	lsls	r3, r3, #10
 8011e8a:	b29b      	uxth	r3, r3
 8011e8c:	4313      	orrs	r3, r2
 8011e8e:	b29a      	uxth	r2, r3
 8011e90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011e94:	801a      	strh	r2, [r3, #0]
 8011e96:	e3df      	b.n	8012658 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8011e98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011e9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	78db      	ldrb	r3, [r3, #3]
 8011ea4:	2b02      	cmp	r3, #2
 8011ea6:	f040 8218 	bne.w	80122da <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8011eaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011eae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	785b      	ldrb	r3, [r3, #1]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	f040 809d 	bne.w	8011ff6 <USB_EPStartXfer+0x1080>
 8011ebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ec0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ece:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011ed8:	b29b      	uxth	r3, r3
 8011eda:	461a      	mov	r2, r3
 8011edc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011ee0:	4413      	add	r3, r2
 8011ee2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011eea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	781b      	ldrb	r3, [r3, #0]
 8011ef2:	00da      	lsls	r2, r3, #3
 8011ef4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011ef8:	4413      	add	r3, r2
 8011efa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011efe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8011f02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011f06:	881b      	ldrh	r3, [r3, #0]
 8011f08:	b29b      	uxth	r3, r3
 8011f0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011f0e:	b29a      	uxth	r2, r3
 8011f10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011f14:	801a      	strh	r2, [r3, #0]
 8011f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	691b      	ldr	r3, [r3, #16]
 8011f22:	2b3e      	cmp	r3, #62	; 0x3e
 8011f24:	d92b      	bls.n	8011f7e <USB_EPStartXfer+0x1008>
 8011f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	691b      	ldr	r3, [r3, #16]
 8011f32:	095b      	lsrs	r3, r3, #5
 8011f34:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	691b      	ldr	r3, [r3, #16]
 8011f44:	f003 031f 	and.w	r3, r3, #31
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d104      	bne.n	8011f56 <USB_EPStartXfer+0xfe0>
 8011f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011f50:	3b01      	subs	r3, #1
 8011f52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011f56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011f5a:	881b      	ldrh	r3, [r3, #0]
 8011f5c:	b29a      	uxth	r2, r3
 8011f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011f62:	b29b      	uxth	r3, r3
 8011f64:	029b      	lsls	r3, r3, #10
 8011f66:	b29b      	uxth	r3, r3
 8011f68:	4313      	orrs	r3, r2
 8011f6a:	b29b      	uxth	r3, r3
 8011f6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011f70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011f74:	b29a      	uxth	r2, r3
 8011f76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011f7a:	801a      	strh	r2, [r3, #0]
 8011f7c:	e070      	b.n	8012060 <USB_EPStartXfer+0x10ea>
 8011f7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011f82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	691b      	ldr	r3, [r3, #16]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d10c      	bne.n	8011fa8 <USB_EPStartXfer+0x1032>
 8011f8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011f92:	881b      	ldrh	r3, [r3, #0]
 8011f94:	b29b      	uxth	r3, r3
 8011f96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011f9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011f9e:	b29a      	uxth	r2, r3
 8011fa0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011fa4:	801a      	strh	r2, [r3, #0]
 8011fa6:	e05b      	b.n	8012060 <USB_EPStartXfer+0x10ea>
 8011fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	691b      	ldr	r3, [r3, #16]
 8011fb4:	085b      	lsrs	r3, r3, #1
 8011fb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011fbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	691b      	ldr	r3, [r3, #16]
 8011fc6:	f003 0301 	and.w	r3, r3, #1
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d004      	beq.n	8011fd8 <USB_EPStartXfer+0x1062>
 8011fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011fd2:	3301      	adds	r3, #1
 8011fd4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011fd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011fdc:	881b      	ldrh	r3, [r3, #0]
 8011fde:	b29a      	uxth	r2, r3
 8011fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011fe4:	b29b      	uxth	r3, r3
 8011fe6:	029b      	lsls	r3, r3, #10
 8011fe8:	b29b      	uxth	r3, r3
 8011fea:	4313      	orrs	r3, r2
 8011fec:	b29a      	uxth	r2, r3
 8011fee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011ff2:	801a      	strh	r2, [r3, #0]
 8011ff4:	e034      	b.n	8012060 <USB_EPStartXfer+0x10ea>
 8011ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011ffa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	785b      	ldrb	r3, [r3, #1]
 8012002:	2b01      	cmp	r3, #1
 8012004:	d12c      	bne.n	8012060 <USB_EPStartXfer+0x10ea>
 8012006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801200a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012018:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012022:	b29b      	uxth	r3, r3
 8012024:	461a      	mov	r2, r3
 8012026:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801202a:	4413      	add	r3, r2
 801202c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	781b      	ldrb	r3, [r3, #0]
 801203c:	00da      	lsls	r2, r3, #3
 801203e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012042:	4413      	add	r3, r2
 8012044:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012048:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801204c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012050:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	691b      	ldr	r3, [r3, #16]
 8012058:	b29a      	uxth	r2, r3
 801205a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801205e:	801a      	strh	r2, [r3, #0]
 8012060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012064:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801206e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	785b      	ldrb	r3, [r3, #1]
 801207a:	2b00      	cmp	r3, #0
 801207c:	f040 809d 	bne.w	80121ba <USB_EPStartXfer+0x1244>
 8012080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012084:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801208e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012092:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801209c:	b29b      	uxth	r3, r3
 801209e:	461a      	mov	r2, r3
 80120a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80120a4:	4413      	add	r3, r2
 80120a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80120aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	781b      	ldrb	r3, [r3, #0]
 80120b6:	00da      	lsls	r2, r3, #3
 80120b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80120bc:	4413      	add	r3, r2
 80120be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80120c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80120c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80120ca:	881b      	ldrh	r3, [r3, #0]
 80120cc:	b29b      	uxth	r3, r3
 80120ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80120d2:	b29a      	uxth	r2, r3
 80120d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80120d8:	801a      	strh	r2, [r3, #0]
 80120da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	691b      	ldr	r3, [r3, #16]
 80120e6:	2b3e      	cmp	r3, #62	; 0x3e
 80120e8:	d92b      	bls.n	8012142 <USB_EPStartXfer+0x11cc>
 80120ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80120ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	691b      	ldr	r3, [r3, #16]
 80120f6:	095b      	lsrs	r3, r3, #5
 80120f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80120fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012100:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	691b      	ldr	r3, [r3, #16]
 8012108:	f003 031f 	and.w	r3, r3, #31
 801210c:	2b00      	cmp	r3, #0
 801210e:	d104      	bne.n	801211a <USB_EPStartXfer+0x11a4>
 8012110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012114:	3b01      	subs	r3, #1
 8012116:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801211a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801211e:	881b      	ldrh	r3, [r3, #0]
 8012120:	b29a      	uxth	r2, r3
 8012122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012126:	b29b      	uxth	r3, r3
 8012128:	029b      	lsls	r3, r3, #10
 801212a:	b29b      	uxth	r3, r3
 801212c:	4313      	orrs	r3, r2
 801212e:	b29b      	uxth	r3, r3
 8012130:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012134:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012138:	b29a      	uxth	r2, r3
 801213a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801213e:	801a      	strh	r2, [r3, #0]
 8012140:	e069      	b.n	8012216 <USB_EPStartXfer+0x12a0>
 8012142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012146:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	691b      	ldr	r3, [r3, #16]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d10c      	bne.n	801216c <USB_EPStartXfer+0x11f6>
 8012152:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012156:	881b      	ldrh	r3, [r3, #0]
 8012158:	b29b      	uxth	r3, r3
 801215a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801215e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012162:	b29a      	uxth	r2, r3
 8012164:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012168:	801a      	strh	r2, [r3, #0]
 801216a:	e054      	b.n	8012216 <USB_EPStartXfer+0x12a0>
 801216c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	691b      	ldr	r3, [r3, #16]
 8012178:	085b      	lsrs	r3, r3, #1
 801217a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801217e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	691b      	ldr	r3, [r3, #16]
 801218a:	f003 0301 	and.w	r3, r3, #1
 801218e:	2b00      	cmp	r3, #0
 8012190:	d004      	beq.n	801219c <USB_EPStartXfer+0x1226>
 8012192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012196:	3301      	adds	r3, #1
 8012198:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801219c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80121a0:	881b      	ldrh	r3, [r3, #0]
 80121a2:	b29a      	uxth	r2, r3
 80121a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80121a8:	b29b      	uxth	r3, r3
 80121aa:	029b      	lsls	r3, r3, #10
 80121ac:	b29b      	uxth	r3, r3
 80121ae:	4313      	orrs	r3, r2
 80121b0:	b29a      	uxth	r2, r3
 80121b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80121b6:	801a      	strh	r2, [r3, #0]
 80121b8:	e02d      	b.n	8012216 <USB_EPStartXfer+0x12a0>
 80121ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	785b      	ldrb	r3, [r3, #1]
 80121c6:	2b01      	cmp	r3, #1
 80121c8:	d125      	bne.n	8012216 <USB_EPStartXfer+0x12a0>
 80121ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80121d8:	b29b      	uxth	r3, r3
 80121da:	461a      	mov	r2, r3
 80121dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80121e0:	4413      	add	r3, r2
 80121e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80121e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80121ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	781b      	ldrb	r3, [r3, #0]
 80121f2:	00da      	lsls	r2, r3, #3
 80121f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80121f8:	4413      	add	r3, r2
 80121fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80121fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8012202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012206:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	691b      	ldr	r3, [r3, #16]
 801220e:	b29a      	uxth	r2, r3
 8012210:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012214:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8012216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801221a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	69db      	ldr	r3, [r3, #28]
 8012222:	2b00      	cmp	r3, #0
 8012224:	f000 8218 	beq.w	8012658 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8012228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801222c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012230:	681a      	ldr	r2, [r3, #0]
 8012232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	781b      	ldrb	r3, [r3, #0]
 801223e:	009b      	lsls	r3, r3, #2
 8012240:	4413      	add	r3, r2
 8012242:	881b      	ldrh	r3, [r3, #0]
 8012244:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012248:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801224c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012250:	2b00      	cmp	r3, #0
 8012252:	d005      	beq.n	8012260 <USB_EPStartXfer+0x12ea>
 8012254:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8012258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801225c:	2b00      	cmp	r3, #0
 801225e:	d10d      	bne.n	801227c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012260:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8012264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012268:	2b00      	cmp	r3, #0
 801226a:	f040 81f5 	bne.w	8012658 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801226e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8012272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012276:	2b00      	cmp	r3, #0
 8012278:	f040 81ee 	bne.w	8012658 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801227c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012280:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012284:	681a      	ldr	r2, [r3, #0]
 8012286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801228a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	781b      	ldrb	r3, [r3, #0]
 8012292:	009b      	lsls	r3, r3, #2
 8012294:	4413      	add	r3, r2
 8012296:	881b      	ldrh	r3, [r3, #0]
 8012298:	b29b      	uxth	r3, r3
 801229a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801229e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80122a2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80122a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80122ae:	681a      	ldr	r2, [r3, #0]
 80122b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	781b      	ldrb	r3, [r3, #0]
 80122bc:	009b      	lsls	r3, r3, #2
 80122be:	441a      	add	r2, r3
 80122c0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80122c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80122c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80122cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80122d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80122d4:	b29b      	uxth	r3, r3
 80122d6:	8013      	strh	r3, [r2, #0]
 80122d8:	e1be      	b.n	8012658 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80122da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	78db      	ldrb	r3, [r3, #3]
 80122e6:	2b01      	cmp	r3, #1
 80122e8:	f040 81b4 	bne.w	8012654 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80122ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	699a      	ldr	r2, [r3, #24]
 80122f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80122fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	691b      	ldr	r3, [r3, #16]
 8012304:	429a      	cmp	r2, r3
 8012306:	d917      	bls.n	8012338 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8012308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801230c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	691b      	ldr	r3, [r3, #16]
 8012314:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8012318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801231c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	699a      	ldr	r2, [r3, #24]
 8012324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012328:	1ad2      	subs	r2, r2, r3
 801232a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801232e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	619a      	str	r2, [r3, #24]
 8012336:	e00e      	b.n	8012356 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8012338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801233c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	699b      	ldr	r3, [r3, #24]
 8012344:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8012348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801234c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	2200      	movs	r2, #0
 8012354:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8012356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801235a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	785b      	ldrb	r3, [r3, #1]
 8012362:	2b00      	cmp	r3, #0
 8012364:	f040 8085 	bne.w	8012472 <USB_EPStartXfer+0x14fc>
 8012368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801236c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8012376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801237a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012384:	b29b      	uxth	r3, r3
 8012386:	461a      	mov	r2, r3
 8012388:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801238c:	4413      	add	r3, r2
 801238e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8012392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	781b      	ldrb	r3, [r3, #0]
 801239e:	00da      	lsls	r2, r3, #3
 80123a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80123a4:	4413      	add	r3, r2
 80123a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80123aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80123ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80123b2:	881b      	ldrh	r3, [r3, #0]
 80123b4:	b29b      	uxth	r3, r3
 80123b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80123ba:	b29a      	uxth	r2, r3
 80123bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80123c0:	801a      	strh	r2, [r3, #0]
 80123c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80123c6:	2b3e      	cmp	r3, #62	; 0x3e
 80123c8:	d923      	bls.n	8012412 <USB_EPStartXfer+0x149c>
 80123ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80123ce:	095b      	lsrs	r3, r3, #5
 80123d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80123d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80123d8:	f003 031f 	and.w	r3, r3, #31
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d104      	bne.n	80123ea <USB_EPStartXfer+0x1474>
 80123e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80123e4:	3b01      	subs	r3, #1
 80123e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80123ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80123ee:	881b      	ldrh	r3, [r3, #0]
 80123f0:	b29a      	uxth	r2, r3
 80123f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80123f6:	b29b      	uxth	r3, r3
 80123f8:	029b      	lsls	r3, r3, #10
 80123fa:	b29b      	uxth	r3, r3
 80123fc:	4313      	orrs	r3, r2
 80123fe:	b29b      	uxth	r3, r3
 8012400:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012404:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012408:	b29a      	uxth	r2, r3
 801240a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801240e:	801a      	strh	r2, [r3, #0]
 8012410:	e060      	b.n	80124d4 <USB_EPStartXfer+0x155e>
 8012412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012416:	2b00      	cmp	r3, #0
 8012418:	d10c      	bne.n	8012434 <USB_EPStartXfer+0x14be>
 801241a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801241e:	881b      	ldrh	r3, [r3, #0]
 8012420:	b29b      	uxth	r3, r3
 8012422:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012426:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801242a:	b29a      	uxth	r2, r3
 801242c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012430:	801a      	strh	r2, [r3, #0]
 8012432:	e04f      	b.n	80124d4 <USB_EPStartXfer+0x155e>
 8012434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012438:	085b      	lsrs	r3, r3, #1
 801243a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801243e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012442:	f003 0301 	and.w	r3, r3, #1
 8012446:	2b00      	cmp	r3, #0
 8012448:	d004      	beq.n	8012454 <USB_EPStartXfer+0x14de>
 801244a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801244e:	3301      	adds	r3, #1
 8012450:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012454:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012458:	881b      	ldrh	r3, [r3, #0]
 801245a:	b29a      	uxth	r2, r3
 801245c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012460:	b29b      	uxth	r3, r3
 8012462:	029b      	lsls	r3, r3, #10
 8012464:	b29b      	uxth	r3, r3
 8012466:	4313      	orrs	r3, r2
 8012468:	b29a      	uxth	r2, r3
 801246a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801246e:	801a      	strh	r2, [r3, #0]
 8012470:	e030      	b.n	80124d4 <USB_EPStartXfer+0x155e>
 8012472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	785b      	ldrb	r3, [r3, #1]
 801247e:	2b01      	cmp	r3, #1
 8012480:	d128      	bne.n	80124d4 <USB_EPStartXfer+0x155e>
 8012482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012486:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8012490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012494:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801249e:	b29b      	uxth	r3, r3
 80124a0:	461a      	mov	r2, r3
 80124a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80124a6:	4413      	add	r3, r2
 80124a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80124ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	781b      	ldrb	r3, [r3, #0]
 80124b8:	00da      	lsls	r2, r3, #3
 80124ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80124be:	4413      	add	r3, r2
 80124c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80124c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80124c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80124cc:	b29a      	uxth	r2, r3
 80124ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80124d2:	801a      	strh	r2, [r3, #0]
 80124d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80124e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	785b      	ldrb	r3, [r3, #1]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	f040 8085 	bne.w	80125fe <USB_EPStartXfer+0x1688>
 80124f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80124f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8012502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012506:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012510:	b29b      	uxth	r3, r3
 8012512:	461a      	mov	r2, r3
 8012514:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8012518:	4413      	add	r3, r2
 801251a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801251e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012522:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	781b      	ldrb	r3, [r3, #0]
 801252a:	00da      	lsls	r2, r3, #3
 801252c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8012530:	4413      	add	r3, r2
 8012532:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012536:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801253a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801253e:	881b      	ldrh	r3, [r3, #0]
 8012540:	b29b      	uxth	r3, r3
 8012542:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012546:	b29a      	uxth	r2, r3
 8012548:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801254c:	801a      	strh	r2, [r3, #0]
 801254e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012552:	2b3e      	cmp	r3, #62	; 0x3e
 8012554:	d923      	bls.n	801259e <USB_EPStartXfer+0x1628>
 8012556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801255a:	095b      	lsrs	r3, r3, #5
 801255c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012560:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012564:	f003 031f 	and.w	r3, r3, #31
 8012568:	2b00      	cmp	r3, #0
 801256a:	d104      	bne.n	8012576 <USB_EPStartXfer+0x1600>
 801256c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012570:	3b01      	subs	r3, #1
 8012572:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012576:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801257a:	881b      	ldrh	r3, [r3, #0]
 801257c:	b29a      	uxth	r2, r3
 801257e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012582:	b29b      	uxth	r3, r3
 8012584:	029b      	lsls	r3, r3, #10
 8012586:	b29b      	uxth	r3, r3
 8012588:	4313      	orrs	r3, r2
 801258a:	b29b      	uxth	r3, r3
 801258c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012594:	b29a      	uxth	r2, r3
 8012596:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801259a:	801a      	strh	r2, [r3, #0]
 801259c:	e05c      	b.n	8012658 <USB_EPStartXfer+0x16e2>
 801259e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d10c      	bne.n	80125c0 <USB_EPStartXfer+0x164a>
 80125a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80125aa:	881b      	ldrh	r3, [r3, #0]
 80125ac:	b29b      	uxth	r3, r3
 80125ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80125b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80125b6:	b29a      	uxth	r2, r3
 80125b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80125bc:	801a      	strh	r2, [r3, #0]
 80125be:	e04b      	b.n	8012658 <USB_EPStartXfer+0x16e2>
 80125c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80125c4:	085b      	lsrs	r3, r3, #1
 80125c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80125ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80125ce:	f003 0301 	and.w	r3, r3, #1
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d004      	beq.n	80125e0 <USB_EPStartXfer+0x166a>
 80125d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80125da:	3301      	adds	r3, #1
 80125dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80125e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80125e4:	881b      	ldrh	r3, [r3, #0]
 80125e6:	b29a      	uxth	r2, r3
 80125e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80125ec:	b29b      	uxth	r3, r3
 80125ee:	029b      	lsls	r3, r3, #10
 80125f0:	b29b      	uxth	r3, r3
 80125f2:	4313      	orrs	r3, r2
 80125f4:	b29a      	uxth	r2, r3
 80125f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80125fa:	801a      	strh	r2, [r3, #0]
 80125fc:	e02c      	b.n	8012658 <USB_EPStartXfer+0x16e2>
 80125fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012602:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	785b      	ldrb	r3, [r3, #1]
 801260a:	2b01      	cmp	r3, #1
 801260c:	d124      	bne.n	8012658 <USB_EPStartXfer+0x16e2>
 801260e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012612:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801261c:	b29b      	uxth	r3, r3
 801261e:	461a      	mov	r2, r3
 8012620:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8012624:	4413      	add	r3, r2
 8012626:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801262a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801262e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	781b      	ldrb	r3, [r3, #0]
 8012636:	00da      	lsls	r2, r3, #3
 8012638:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801263c:	4413      	add	r3, r2
 801263e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012642:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801264a:	b29a      	uxth	r2, r3
 801264c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012650:	801a      	strh	r2, [r3, #0]
 8012652:	e001      	b.n	8012658 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8012654:	2301      	movs	r3, #1
 8012656:	e03a      	b.n	80126ce <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801265c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8012660:	681a      	ldr	r2, [r3, #0]
 8012662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8012666:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	781b      	ldrb	r3, [r3, #0]
 801266e:	009b      	lsls	r3, r3, #2
 8012670:	4413      	add	r3, r2
 8012672:	881b      	ldrh	r3, [r3, #0]
 8012674:	b29b      	uxth	r3, r3
 8012676:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801267a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801267e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8012682:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012686:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801268a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 801268e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012692:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8012696:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 801269a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801269e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80126a2:	681a      	ldr	r2, [r3, #0]
 80126a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80126a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	781b      	ldrb	r3, [r3, #0]
 80126b0:	009b      	lsls	r3, r3, #2
 80126b2:	441a      	add	r2, r3
 80126b4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80126b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80126bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80126c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80126c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80126c8:	b29b      	uxth	r3, r3
 80126ca:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80126cc:	2300      	movs	r3, #0
}
 80126ce:	4618      	mov	r0, r3
 80126d0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80126d4:	46bd      	mov	sp, r7
 80126d6:	bd80      	pop	{r7, pc}

080126d8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80126d8:	b480      	push	{r7}
 80126da:	b085      	sub	sp, #20
 80126dc:	af00      	add	r7, sp, #0
 80126de:	6078      	str	r0, [r7, #4]
 80126e0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80126e2:	683b      	ldr	r3, [r7, #0]
 80126e4:	785b      	ldrb	r3, [r3, #1]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d020      	beq.n	801272c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80126ea:	687a      	ldr	r2, [r7, #4]
 80126ec:	683b      	ldr	r3, [r7, #0]
 80126ee:	781b      	ldrb	r3, [r3, #0]
 80126f0:	009b      	lsls	r3, r3, #2
 80126f2:	4413      	add	r3, r2
 80126f4:	881b      	ldrh	r3, [r3, #0]
 80126f6:	b29b      	uxth	r3, r3
 80126f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80126fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012700:	81bb      	strh	r3, [r7, #12]
 8012702:	89bb      	ldrh	r3, [r7, #12]
 8012704:	f083 0310 	eor.w	r3, r3, #16
 8012708:	81bb      	strh	r3, [r7, #12]
 801270a:	687a      	ldr	r2, [r7, #4]
 801270c:	683b      	ldr	r3, [r7, #0]
 801270e:	781b      	ldrb	r3, [r3, #0]
 8012710:	009b      	lsls	r3, r3, #2
 8012712:	441a      	add	r2, r3
 8012714:	89bb      	ldrh	r3, [r7, #12]
 8012716:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801271a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801271e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012726:	b29b      	uxth	r3, r3
 8012728:	8013      	strh	r3, [r2, #0]
 801272a:	e01f      	b.n	801276c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 801272c:	687a      	ldr	r2, [r7, #4]
 801272e:	683b      	ldr	r3, [r7, #0]
 8012730:	781b      	ldrb	r3, [r3, #0]
 8012732:	009b      	lsls	r3, r3, #2
 8012734:	4413      	add	r3, r2
 8012736:	881b      	ldrh	r3, [r3, #0]
 8012738:	b29b      	uxth	r3, r3
 801273a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801273e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012742:	81fb      	strh	r3, [r7, #14]
 8012744:	89fb      	ldrh	r3, [r7, #14]
 8012746:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801274a:	81fb      	strh	r3, [r7, #14]
 801274c:	687a      	ldr	r2, [r7, #4]
 801274e:	683b      	ldr	r3, [r7, #0]
 8012750:	781b      	ldrb	r3, [r3, #0]
 8012752:	009b      	lsls	r3, r3, #2
 8012754:	441a      	add	r2, r3
 8012756:	89fb      	ldrh	r3, [r7, #14]
 8012758:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801275c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012760:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012768:	b29b      	uxth	r3, r3
 801276a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 801276c:	2300      	movs	r3, #0
}
 801276e:	4618      	mov	r0, r3
 8012770:	3714      	adds	r7, #20
 8012772:	46bd      	mov	sp, r7
 8012774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012778:	4770      	bx	lr

0801277a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801277a:	b480      	push	{r7}
 801277c:	b087      	sub	sp, #28
 801277e:	af00      	add	r7, sp, #0
 8012780:	6078      	str	r0, [r7, #4]
 8012782:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8012784:	683b      	ldr	r3, [r7, #0]
 8012786:	7b1b      	ldrb	r3, [r3, #12]
 8012788:	2b00      	cmp	r3, #0
 801278a:	f040 809d 	bne.w	80128c8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 801278e:	683b      	ldr	r3, [r7, #0]
 8012790:	785b      	ldrb	r3, [r3, #1]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d04c      	beq.n	8012830 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012796:	687a      	ldr	r2, [r7, #4]
 8012798:	683b      	ldr	r3, [r7, #0]
 801279a:	781b      	ldrb	r3, [r3, #0]
 801279c:	009b      	lsls	r3, r3, #2
 801279e:	4413      	add	r3, r2
 80127a0:	881b      	ldrh	r3, [r3, #0]
 80127a2:	823b      	strh	r3, [r7, #16]
 80127a4:	8a3b      	ldrh	r3, [r7, #16]
 80127a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d01b      	beq.n	80127e6 <USB_EPClearStall+0x6c>
 80127ae:	687a      	ldr	r2, [r7, #4]
 80127b0:	683b      	ldr	r3, [r7, #0]
 80127b2:	781b      	ldrb	r3, [r3, #0]
 80127b4:	009b      	lsls	r3, r3, #2
 80127b6:	4413      	add	r3, r2
 80127b8:	881b      	ldrh	r3, [r3, #0]
 80127ba:	b29b      	uxth	r3, r3
 80127bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80127c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80127c4:	81fb      	strh	r3, [r7, #14]
 80127c6:	687a      	ldr	r2, [r7, #4]
 80127c8:	683b      	ldr	r3, [r7, #0]
 80127ca:	781b      	ldrb	r3, [r3, #0]
 80127cc:	009b      	lsls	r3, r3, #2
 80127ce:	441a      	add	r2, r3
 80127d0:	89fb      	ldrh	r3, [r7, #14]
 80127d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80127d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80127da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80127de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80127e2:	b29b      	uxth	r3, r3
 80127e4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80127e6:	683b      	ldr	r3, [r7, #0]
 80127e8:	78db      	ldrb	r3, [r3, #3]
 80127ea:	2b01      	cmp	r3, #1
 80127ec:	d06c      	beq.n	80128c8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80127ee:	687a      	ldr	r2, [r7, #4]
 80127f0:	683b      	ldr	r3, [r7, #0]
 80127f2:	781b      	ldrb	r3, [r3, #0]
 80127f4:	009b      	lsls	r3, r3, #2
 80127f6:	4413      	add	r3, r2
 80127f8:	881b      	ldrh	r3, [r3, #0]
 80127fa:	b29b      	uxth	r3, r3
 80127fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012804:	81bb      	strh	r3, [r7, #12]
 8012806:	89bb      	ldrh	r3, [r7, #12]
 8012808:	f083 0320 	eor.w	r3, r3, #32
 801280c:	81bb      	strh	r3, [r7, #12]
 801280e:	687a      	ldr	r2, [r7, #4]
 8012810:	683b      	ldr	r3, [r7, #0]
 8012812:	781b      	ldrb	r3, [r3, #0]
 8012814:	009b      	lsls	r3, r3, #2
 8012816:	441a      	add	r2, r3
 8012818:	89bb      	ldrh	r3, [r7, #12]
 801281a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801281e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012822:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012826:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801282a:	b29b      	uxth	r3, r3
 801282c:	8013      	strh	r3, [r2, #0]
 801282e:	e04b      	b.n	80128c8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012830:	687a      	ldr	r2, [r7, #4]
 8012832:	683b      	ldr	r3, [r7, #0]
 8012834:	781b      	ldrb	r3, [r3, #0]
 8012836:	009b      	lsls	r3, r3, #2
 8012838:	4413      	add	r3, r2
 801283a:	881b      	ldrh	r3, [r3, #0]
 801283c:	82fb      	strh	r3, [r7, #22]
 801283e:	8afb      	ldrh	r3, [r7, #22]
 8012840:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012844:	2b00      	cmp	r3, #0
 8012846:	d01b      	beq.n	8012880 <USB_EPClearStall+0x106>
 8012848:	687a      	ldr	r2, [r7, #4]
 801284a:	683b      	ldr	r3, [r7, #0]
 801284c:	781b      	ldrb	r3, [r3, #0]
 801284e:	009b      	lsls	r3, r3, #2
 8012850:	4413      	add	r3, r2
 8012852:	881b      	ldrh	r3, [r3, #0]
 8012854:	b29b      	uxth	r3, r3
 8012856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801285a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801285e:	82bb      	strh	r3, [r7, #20]
 8012860:	687a      	ldr	r2, [r7, #4]
 8012862:	683b      	ldr	r3, [r7, #0]
 8012864:	781b      	ldrb	r3, [r3, #0]
 8012866:	009b      	lsls	r3, r3, #2
 8012868:	441a      	add	r2, r3
 801286a:	8abb      	ldrh	r3, [r7, #20]
 801286c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012870:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012874:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801287c:	b29b      	uxth	r3, r3
 801287e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012880:	687a      	ldr	r2, [r7, #4]
 8012882:	683b      	ldr	r3, [r7, #0]
 8012884:	781b      	ldrb	r3, [r3, #0]
 8012886:	009b      	lsls	r3, r3, #2
 8012888:	4413      	add	r3, r2
 801288a:	881b      	ldrh	r3, [r3, #0]
 801288c:	b29b      	uxth	r3, r3
 801288e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012896:	827b      	strh	r3, [r7, #18]
 8012898:	8a7b      	ldrh	r3, [r7, #18]
 801289a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801289e:	827b      	strh	r3, [r7, #18]
 80128a0:	8a7b      	ldrh	r3, [r7, #18]
 80128a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80128a6:	827b      	strh	r3, [r7, #18]
 80128a8:	687a      	ldr	r2, [r7, #4]
 80128aa:	683b      	ldr	r3, [r7, #0]
 80128ac:	781b      	ldrb	r3, [r3, #0]
 80128ae:	009b      	lsls	r3, r3, #2
 80128b0:	441a      	add	r2, r3
 80128b2:	8a7b      	ldrh	r3, [r7, #18]
 80128b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80128b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80128bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80128c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128c4:	b29b      	uxth	r3, r3
 80128c6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80128c8:	2300      	movs	r3, #0
}
 80128ca:	4618      	mov	r0, r3
 80128cc:	371c      	adds	r7, #28
 80128ce:	46bd      	mov	sp, r7
 80128d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d4:	4770      	bx	lr

080128d6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80128d6:	b480      	push	{r7}
 80128d8:	b083      	sub	sp, #12
 80128da:	af00      	add	r7, sp, #0
 80128dc:	6078      	str	r0, [r7, #4]
 80128de:	460b      	mov	r3, r1
 80128e0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80128e2:	78fb      	ldrb	r3, [r7, #3]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d103      	bne.n	80128f0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	2280      	movs	r2, #128	; 0x80
 80128ec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80128f0:	2300      	movs	r3, #0
}
 80128f2:	4618      	mov	r0, r3
 80128f4:	370c      	adds	r7, #12
 80128f6:	46bd      	mov	sp, r7
 80128f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128fc:	4770      	bx	lr

080128fe <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80128fe:	b480      	push	{r7}
 8012900:	b083      	sub	sp, #12
 8012902:	af00      	add	r7, sp, #0
 8012904:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801290c:	b29b      	uxth	r3, r3
 801290e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012912:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012916:	b29a      	uxth	r2, r3
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 801291e:	2300      	movs	r3, #0
}
 8012920:	4618      	mov	r0, r3
 8012922:	370c      	adds	r7, #12
 8012924:	46bd      	mov	sp, r7
 8012926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292a:	4770      	bx	lr

0801292c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 801292c:	b480      	push	{r7}
 801292e:	b085      	sub	sp, #20
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801293a:	b29b      	uxth	r3, r3
 801293c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 801293e:	68fb      	ldr	r3, [r7, #12]
}
 8012940:	4618      	mov	r0, r3
 8012942:	3714      	adds	r7, #20
 8012944:	46bd      	mov	sp, r7
 8012946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294a:	4770      	bx	lr

0801294c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801294c:	b480      	push	{r7}
 801294e:	b08b      	sub	sp, #44	; 0x2c
 8012950:	af00      	add	r7, sp, #0
 8012952:	60f8      	str	r0, [r7, #12]
 8012954:	60b9      	str	r1, [r7, #8]
 8012956:	4611      	mov	r1, r2
 8012958:	461a      	mov	r2, r3
 801295a:	460b      	mov	r3, r1
 801295c:	80fb      	strh	r3, [r7, #6]
 801295e:	4613      	mov	r3, r2
 8012960:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8012962:	88bb      	ldrh	r3, [r7, #4]
 8012964:	3301      	adds	r3, #1
 8012966:	085b      	lsrs	r3, r3, #1
 8012968:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 801296e:	68bb      	ldr	r3, [r7, #8]
 8012970:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012972:	88fa      	ldrh	r2, [r7, #6]
 8012974:	697b      	ldr	r3, [r7, #20]
 8012976:	4413      	add	r3, r2
 8012978:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801297c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 801297e:	69bb      	ldr	r3, [r7, #24]
 8012980:	627b      	str	r3, [r7, #36]	; 0x24
 8012982:	e01b      	b.n	80129bc <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8012984:	69fb      	ldr	r3, [r7, #28]
 8012986:	781b      	ldrb	r3, [r3, #0]
 8012988:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 801298a:	69fb      	ldr	r3, [r7, #28]
 801298c:	3301      	adds	r3, #1
 801298e:	781b      	ldrb	r3, [r3, #0]
 8012990:	021b      	lsls	r3, r3, #8
 8012992:	b21a      	sxth	r2, r3
 8012994:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012998:	4313      	orrs	r3, r2
 801299a:	b21b      	sxth	r3, r3
 801299c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 801299e:	6a3b      	ldr	r3, [r7, #32]
 80129a0:	8a7a      	ldrh	r2, [r7, #18]
 80129a2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80129a4:	6a3b      	ldr	r3, [r7, #32]
 80129a6:	3302      	adds	r3, #2
 80129a8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80129aa:	69fb      	ldr	r3, [r7, #28]
 80129ac:	3301      	adds	r3, #1
 80129ae:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80129b0:	69fb      	ldr	r3, [r7, #28]
 80129b2:	3301      	adds	r3, #1
 80129b4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80129b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129b8:	3b01      	subs	r3, #1
 80129ba:	627b      	str	r3, [r7, #36]	; 0x24
 80129bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d1e0      	bne.n	8012984 <USB_WritePMA+0x38>
  }
}
 80129c2:	bf00      	nop
 80129c4:	bf00      	nop
 80129c6:	372c      	adds	r7, #44	; 0x2c
 80129c8:	46bd      	mov	sp, r7
 80129ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ce:	4770      	bx	lr

080129d0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80129d0:	b480      	push	{r7}
 80129d2:	b08b      	sub	sp, #44	; 0x2c
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	60f8      	str	r0, [r7, #12]
 80129d8:	60b9      	str	r1, [r7, #8]
 80129da:	4611      	mov	r1, r2
 80129dc:	461a      	mov	r2, r3
 80129de:	460b      	mov	r3, r1
 80129e0:	80fb      	strh	r3, [r7, #6]
 80129e2:	4613      	mov	r3, r2
 80129e4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80129e6:	88bb      	ldrh	r3, [r7, #4]
 80129e8:	085b      	lsrs	r3, r3, #1
 80129ea:	b29b      	uxth	r3, r3
 80129ec:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80129f2:	68bb      	ldr	r3, [r7, #8]
 80129f4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80129f6:	88fa      	ldrh	r2, [r7, #6]
 80129f8:	697b      	ldr	r3, [r7, #20]
 80129fa:	4413      	add	r3, r2
 80129fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012a00:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8012a02:	69bb      	ldr	r3, [r7, #24]
 8012a04:	627b      	str	r3, [r7, #36]	; 0x24
 8012a06:	e018      	b.n	8012a3a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8012a08:	6a3b      	ldr	r3, [r7, #32]
 8012a0a:	881b      	ldrh	r3, [r3, #0]
 8012a0c:	b29b      	uxth	r3, r3
 8012a0e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8012a10:	6a3b      	ldr	r3, [r7, #32]
 8012a12:	3302      	adds	r3, #2
 8012a14:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012a16:	693b      	ldr	r3, [r7, #16]
 8012a18:	b2da      	uxtb	r2, r3
 8012a1a:	69fb      	ldr	r3, [r7, #28]
 8012a1c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012a1e:	69fb      	ldr	r3, [r7, #28]
 8012a20:	3301      	adds	r3, #1
 8012a22:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8012a24:	693b      	ldr	r3, [r7, #16]
 8012a26:	0a1b      	lsrs	r3, r3, #8
 8012a28:	b2da      	uxtb	r2, r3
 8012a2a:	69fb      	ldr	r3, [r7, #28]
 8012a2c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012a2e:	69fb      	ldr	r3, [r7, #28]
 8012a30:	3301      	adds	r3, #1
 8012a32:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8012a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a36:	3b01      	subs	r3, #1
 8012a38:	627b      	str	r3, [r7, #36]	; 0x24
 8012a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d1e3      	bne.n	8012a08 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8012a40:	88bb      	ldrh	r3, [r7, #4]
 8012a42:	f003 0301 	and.w	r3, r3, #1
 8012a46:	b29b      	uxth	r3, r3
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d007      	beq.n	8012a5c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8012a4c:	6a3b      	ldr	r3, [r7, #32]
 8012a4e:	881b      	ldrh	r3, [r3, #0]
 8012a50:	b29b      	uxth	r3, r3
 8012a52:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012a54:	693b      	ldr	r3, [r7, #16]
 8012a56:	b2da      	uxtb	r2, r3
 8012a58:	69fb      	ldr	r3, [r7, #28]
 8012a5a:	701a      	strb	r2, [r3, #0]
  }
}
 8012a5c:	bf00      	nop
 8012a5e:	372c      	adds	r7, #44	; 0x2c
 8012a60:	46bd      	mov	sp, r7
 8012a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a66:	4770      	bx	lr

08012a68 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b084      	sub	sp, #16
 8012a6c:	af00      	add	r7, sp, #0
 8012a6e:	6078      	str	r0, [r7, #4]
 8012a70:	460b      	mov	r3, r1
 8012a72:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012a74:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8012a78:	f002 f9e6 	bl	8014e48 <USBD_static_malloc>
 8012a7c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d105      	bne.n	8012a90 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	2200      	movs	r2, #0
 8012a88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8012a8c:	2302      	movs	r3, #2
 8012a8e:	e066      	b.n	8012b5e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	68fa      	ldr	r2, [r7, #12]
 8012a94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	7c1b      	ldrb	r3, [r3, #16]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d119      	bne.n	8012ad4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8012aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012aa4:	2202      	movs	r2, #2
 8012aa6:	2181      	movs	r1, #129	; 0x81
 8012aa8:	6878      	ldr	r0, [r7, #4]
 8012aaa:	f002 f874 	bl	8014b96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	2201      	movs	r2, #1
 8012ab2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8012ab4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012ab8:	2202      	movs	r2, #2
 8012aba:	2101      	movs	r1, #1
 8012abc:	6878      	ldr	r0, [r7, #4]
 8012abe:	f002 f86a 	bl	8014b96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	2201      	movs	r2, #1
 8012ac6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	2210      	movs	r2, #16
 8012ace:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8012ad2:	e016      	b.n	8012b02 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8012ad4:	2340      	movs	r3, #64	; 0x40
 8012ad6:	2202      	movs	r2, #2
 8012ad8:	2181      	movs	r1, #129	; 0x81
 8012ada:	6878      	ldr	r0, [r7, #4]
 8012adc:	f002 f85b 	bl	8014b96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	2201      	movs	r2, #1
 8012ae4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8012ae6:	2340      	movs	r3, #64	; 0x40
 8012ae8:	2202      	movs	r2, #2
 8012aea:	2101      	movs	r1, #1
 8012aec:	6878      	ldr	r0, [r7, #4]
 8012aee:	f002 f852 	bl	8014b96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	2201      	movs	r2, #1
 8012af6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	2210      	movs	r2, #16
 8012afe:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012b02:	2308      	movs	r3, #8
 8012b04:	2203      	movs	r2, #3
 8012b06:	2182      	movs	r1, #130	; 0x82
 8012b08:	6878      	ldr	r0, [r7, #4]
 8012b0a:	f002 f844 	bl	8014b96 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	2201      	movs	r2, #1
 8012b12:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	2200      	movs	r2, #0
 8012b24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	7c1b      	ldrb	r3, [r3, #16]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d109      	bne.n	8012b4c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012b3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012b42:	2101      	movs	r1, #1
 8012b44:	6878      	ldr	r0, [r7, #4]
 8012b46:	f002 f915 	bl	8014d74 <USBD_LL_PrepareReceive>
 8012b4a:	e007      	b.n	8012b5c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8012b52:	2340      	movs	r3, #64	; 0x40
 8012b54:	2101      	movs	r1, #1
 8012b56:	6878      	ldr	r0, [r7, #4]
 8012b58:	f002 f90c 	bl	8014d74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012b5c:	2300      	movs	r3, #0
}
 8012b5e:	4618      	mov	r0, r3
 8012b60:	3710      	adds	r7, #16
 8012b62:	46bd      	mov	sp, r7
 8012b64:	bd80      	pop	{r7, pc}

08012b66 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012b66:	b580      	push	{r7, lr}
 8012b68:	b082      	sub	sp, #8
 8012b6a:	af00      	add	r7, sp, #0
 8012b6c:	6078      	str	r0, [r7, #4]
 8012b6e:	460b      	mov	r3, r1
 8012b70:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8012b72:	2181      	movs	r1, #129	; 0x81
 8012b74:	6878      	ldr	r0, [r7, #4]
 8012b76:	f002 f834 	bl	8014be2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8012b80:	2101      	movs	r1, #1
 8012b82:	6878      	ldr	r0, [r7, #4]
 8012b84:	f002 f82d 	bl	8014be2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8012b90:	2182      	movs	r1, #130	; 0x82
 8012b92:	6878      	ldr	r0, [r7, #4]
 8012b94:	f002 f825 	bl	8014be2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d00e      	beq.n	8012bd0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012bb8:	685b      	ldr	r3, [r3, #4]
 8012bba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f002 f94e 	bl	8014e64 <USBD_static_free>
    pdev->pClassData = NULL;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	2200      	movs	r2, #0
 8012bcc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012bd0:	2300      	movs	r3, #0
}
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	3708      	adds	r7, #8
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	bd80      	pop	{r7, pc}
	...

08012bdc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8012bdc:	b580      	push	{r7, lr}
 8012bde:	b086      	sub	sp, #24
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	6078      	str	r0, [r7, #4]
 8012be4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012bec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8012bee:	2300      	movs	r3, #0
 8012bf0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8012bfa:	693b      	ldr	r3, [r7, #16]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d101      	bne.n	8012c04 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8012c00:	2303      	movs	r3, #3
 8012c02:	e0af      	b.n	8012d64 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012c04:	683b      	ldr	r3, [r7, #0]
 8012c06:	781b      	ldrb	r3, [r3, #0]
 8012c08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d03f      	beq.n	8012c90 <USBD_CDC_Setup+0xb4>
 8012c10:	2b20      	cmp	r3, #32
 8012c12:	f040 809f 	bne.w	8012d54 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8012c16:	683b      	ldr	r3, [r7, #0]
 8012c18:	88db      	ldrh	r3, [r3, #6]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d02e      	beq.n	8012c7c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012c1e:	683b      	ldr	r3, [r7, #0]
 8012c20:	781b      	ldrb	r3, [r3, #0]
 8012c22:	b25b      	sxtb	r3, r3
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	da16      	bge.n	8012c56 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012c2e:	689b      	ldr	r3, [r3, #8]
 8012c30:	683a      	ldr	r2, [r7, #0]
 8012c32:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8012c34:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012c36:	683a      	ldr	r2, [r7, #0]
 8012c38:	88d2      	ldrh	r2, [r2, #6]
 8012c3a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8012c3c:	683b      	ldr	r3, [r7, #0]
 8012c3e:	88db      	ldrh	r3, [r3, #6]
 8012c40:	2b07      	cmp	r3, #7
 8012c42:	bf28      	it	cs
 8012c44:	2307      	movcs	r3, #7
 8012c46:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8012c48:	693b      	ldr	r3, [r7, #16]
 8012c4a:	89fa      	ldrh	r2, [r7, #14]
 8012c4c:	4619      	mov	r1, r3
 8012c4e:	6878      	ldr	r0, [r7, #4]
 8012c50:	f001 fa9f 	bl	8014192 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8012c54:	e085      	b.n	8012d62 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8012c56:	683b      	ldr	r3, [r7, #0]
 8012c58:	785a      	ldrb	r2, [r3, #1]
 8012c5a:	693b      	ldr	r3, [r7, #16]
 8012c5c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8012c60:	683b      	ldr	r3, [r7, #0]
 8012c62:	88db      	ldrh	r3, [r3, #6]
 8012c64:	b2da      	uxtb	r2, r3
 8012c66:	693b      	ldr	r3, [r7, #16]
 8012c68:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8012c6c:	6939      	ldr	r1, [r7, #16]
 8012c6e:	683b      	ldr	r3, [r7, #0]
 8012c70:	88db      	ldrh	r3, [r3, #6]
 8012c72:	461a      	mov	r2, r3
 8012c74:	6878      	ldr	r0, [r7, #4]
 8012c76:	f001 fab8 	bl	80141ea <USBD_CtlPrepareRx>
      break;
 8012c7a:	e072      	b.n	8012d62 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012c82:	689b      	ldr	r3, [r3, #8]
 8012c84:	683a      	ldr	r2, [r7, #0]
 8012c86:	7850      	ldrb	r0, [r2, #1]
 8012c88:	2200      	movs	r2, #0
 8012c8a:	6839      	ldr	r1, [r7, #0]
 8012c8c:	4798      	blx	r3
      break;
 8012c8e:	e068      	b.n	8012d62 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012c90:	683b      	ldr	r3, [r7, #0]
 8012c92:	785b      	ldrb	r3, [r3, #1]
 8012c94:	2b0b      	cmp	r3, #11
 8012c96:	d852      	bhi.n	8012d3e <USBD_CDC_Setup+0x162>
 8012c98:	a201      	add	r2, pc, #4	; (adr r2, 8012ca0 <USBD_CDC_Setup+0xc4>)
 8012c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c9e:	bf00      	nop
 8012ca0:	08012cd1 	.word	0x08012cd1
 8012ca4:	08012d4d 	.word	0x08012d4d
 8012ca8:	08012d3f 	.word	0x08012d3f
 8012cac:	08012d3f 	.word	0x08012d3f
 8012cb0:	08012d3f 	.word	0x08012d3f
 8012cb4:	08012d3f 	.word	0x08012d3f
 8012cb8:	08012d3f 	.word	0x08012d3f
 8012cbc:	08012d3f 	.word	0x08012d3f
 8012cc0:	08012d3f 	.word	0x08012d3f
 8012cc4:	08012d3f 	.word	0x08012d3f
 8012cc8:	08012cfb 	.word	0x08012cfb
 8012ccc:	08012d25 	.word	0x08012d25
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012cd6:	b2db      	uxtb	r3, r3
 8012cd8:	2b03      	cmp	r3, #3
 8012cda:	d107      	bne.n	8012cec <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012cdc:	f107 030a 	add.w	r3, r7, #10
 8012ce0:	2202      	movs	r2, #2
 8012ce2:	4619      	mov	r1, r3
 8012ce4:	6878      	ldr	r0, [r7, #4]
 8012ce6:	f001 fa54 	bl	8014192 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012cea:	e032      	b.n	8012d52 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8012cec:	6839      	ldr	r1, [r7, #0]
 8012cee:	6878      	ldr	r0, [r7, #4]
 8012cf0:	f001 f9de 	bl	80140b0 <USBD_CtlError>
            ret = USBD_FAIL;
 8012cf4:	2303      	movs	r3, #3
 8012cf6:	75fb      	strb	r3, [r7, #23]
          break;
 8012cf8:	e02b      	b.n	8012d52 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012d00:	b2db      	uxtb	r3, r3
 8012d02:	2b03      	cmp	r3, #3
 8012d04:	d107      	bne.n	8012d16 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8012d06:	f107 030d 	add.w	r3, r7, #13
 8012d0a:	2201      	movs	r2, #1
 8012d0c:	4619      	mov	r1, r3
 8012d0e:	6878      	ldr	r0, [r7, #4]
 8012d10:	f001 fa3f 	bl	8014192 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012d14:	e01d      	b.n	8012d52 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8012d16:	6839      	ldr	r1, [r7, #0]
 8012d18:	6878      	ldr	r0, [r7, #4]
 8012d1a:	f001 f9c9 	bl	80140b0 <USBD_CtlError>
            ret = USBD_FAIL;
 8012d1e:	2303      	movs	r3, #3
 8012d20:	75fb      	strb	r3, [r7, #23]
          break;
 8012d22:	e016      	b.n	8012d52 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012d2a:	b2db      	uxtb	r3, r3
 8012d2c:	2b03      	cmp	r3, #3
 8012d2e:	d00f      	beq.n	8012d50 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8012d30:	6839      	ldr	r1, [r7, #0]
 8012d32:	6878      	ldr	r0, [r7, #4]
 8012d34:	f001 f9bc 	bl	80140b0 <USBD_CtlError>
            ret = USBD_FAIL;
 8012d38:	2303      	movs	r3, #3
 8012d3a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8012d3c:	e008      	b.n	8012d50 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8012d3e:	6839      	ldr	r1, [r7, #0]
 8012d40:	6878      	ldr	r0, [r7, #4]
 8012d42:	f001 f9b5 	bl	80140b0 <USBD_CtlError>
          ret = USBD_FAIL;
 8012d46:	2303      	movs	r3, #3
 8012d48:	75fb      	strb	r3, [r7, #23]
          break;
 8012d4a:	e002      	b.n	8012d52 <USBD_CDC_Setup+0x176>
          break;
 8012d4c:	bf00      	nop
 8012d4e:	e008      	b.n	8012d62 <USBD_CDC_Setup+0x186>
          break;
 8012d50:	bf00      	nop
      }
      break;
 8012d52:	e006      	b.n	8012d62 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8012d54:	6839      	ldr	r1, [r7, #0]
 8012d56:	6878      	ldr	r0, [r7, #4]
 8012d58:	f001 f9aa 	bl	80140b0 <USBD_CtlError>
      ret = USBD_FAIL;
 8012d5c:	2303      	movs	r3, #3
 8012d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8012d60:	bf00      	nop
  }

  return (uint8_t)ret;
 8012d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d64:	4618      	mov	r0, r3
 8012d66:	3718      	adds	r7, #24
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	bd80      	pop	{r7, pc}

08012d6c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b084      	sub	sp, #16
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
 8012d74:	460b      	mov	r3, r1
 8012d76:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012d7e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d101      	bne.n	8012d8e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012d8a:	2303      	movs	r3, #3
 8012d8c:	e04f      	b.n	8012e2e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012d94:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8012d96:	78fa      	ldrb	r2, [r7, #3]
 8012d98:	6879      	ldr	r1, [r7, #4]
 8012d9a:	4613      	mov	r3, r2
 8012d9c:	009b      	lsls	r3, r3, #2
 8012d9e:	4413      	add	r3, r2
 8012da0:	009b      	lsls	r3, r3, #2
 8012da2:	440b      	add	r3, r1
 8012da4:	3318      	adds	r3, #24
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d029      	beq.n	8012e00 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8012dac:	78fa      	ldrb	r2, [r7, #3]
 8012dae:	6879      	ldr	r1, [r7, #4]
 8012db0:	4613      	mov	r3, r2
 8012db2:	009b      	lsls	r3, r3, #2
 8012db4:	4413      	add	r3, r2
 8012db6:	009b      	lsls	r3, r3, #2
 8012db8:	440b      	add	r3, r1
 8012dba:	3318      	adds	r3, #24
 8012dbc:	681a      	ldr	r2, [r3, #0]
 8012dbe:	78f9      	ldrb	r1, [r7, #3]
 8012dc0:	68f8      	ldr	r0, [r7, #12]
 8012dc2:	460b      	mov	r3, r1
 8012dc4:	009b      	lsls	r3, r3, #2
 8012dc6:	440b      	add	r3, r1
 8012dc8:	00db      	lsls	r3, r3, #3
 8012dca:	4403      	add	r3, r0
 8012dcc:	3320      	adds	r3, #32
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	fbb2 f1f3 	udiv	r1, r2, r3
 8012dd4:	fb01 f303 	mul.w	r3, r1, r3
 8012dd8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d110      	bne.n	8012e00 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8012dde:	78fa      	ldrb	r2, [r7, #3]
 8012de0:	6879      	ldr	r1, [r7, #4]
 8012de2:	4613      	mov	r3, r2
 8012de4:	009b      	lsls	r3, r3, #2
 8012de6:	4413      	add	r3, r2
 8012de8:	009b      	lsls	r3, r3, #2
 8012dea:	440b      	add	r3, r1
 8012dec:	3318      	adds	r3, #24
 8012dee:	2200      	movs	r2, #0
 8012df0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8012df2:	78f9      	ldrb	r1, [r7, #3]
 8012df4:	2300      	movs	r3, #0
 8012df6:	2200      	movs	r2, #0
 8012df8:	6878      	ldr	r0, [r7, #4]
 8012dfa:	f001 ff9a 	bl	8014d32 <USBD_LL_Transmit>
 8012dfe:	e015      	b.n	8012e2c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8012e00:	68bb      	ldr	r3, [r7, #8]
 8012e02:	2200      	movs	r2, #0
 8012e04:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012e0e:	691b      	ldr	r3, [r3, #16]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d00b      	beq.n	8012e2c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012e1a:	691b      	ldr	r3, [r3, #16]
 8012e1c:	68ba      	ldr	r2, [r7, #8]
 8012e1e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8012e22:	68ba      	ldr	r2, [r7, #8]
 8012e24:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8012e28:	78fa      	ldrb	r2, [r7, #3]
 8012e2a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8012e2c:	2300      	movs	r3, #0
}
 8012e2e:	4618      	mov	r0, r3
 8012e30:	3710      	adds	r7, #16
 8012e32:	46bd      	mov	sp, r7
 8012e34:	bd80      	pop	{r7, pc}

08012e36 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012e36:	b580      	push	{r7, lr}
 8012e38:	b084      	sub	sp, #16
 8012e3a:	af00      	add	r7, sp, #0
 8012e3c:	6078      	str	r0, [r7, #4]
 8012e3e:	460b      	mov	r3, r1
 8012e40:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e48:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d101      	bne.n	8012e58 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012e54:	2303      	movs	r3, #3
 8012e56:	e015      	b.n	8012e84 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8012e58:	78fb      	ldrb	r3, [r7, #3]
 8012e5a:	4619      	mov	r1, r3
 8012e5c:	6878      	ldr	r0, [r7, #4]
 8012e5e:	f001 ffaa 	bl	8014db6 <USBD_LL_GetRxDataSize>
 8012e62:	4602      	mov	r2, r0
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012e70:	68db      	ldr	r3, [r3, #12]
 8012e72:	68fa      	ldr	r2, [r7, #12]
 8012e74:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8012e78:	68fa      	ldr	r2, [r7, #12]
 8012e7a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8012e7e:	4611      	mov	r1, r2
 8012e80:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8012e82:	2300      	movs	r3, #0
}
 8012e84:	4618      	mov	r0, r3
 8012e86:	3710      	adds	r7, #16
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	bd80      	pop	{r7, pc}

08012e8c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b084      	sub	sp, #16
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012e9a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d101      	bne.n	8012ea6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8012ea2:	2303      	movs	r3, #3
 8012ea4:	e01b      	b.n	8012ede <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d015      	beq.n	8012edc <USBD_CDC_EP0_RxReady+0x50>
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8012eb6:	2bff      	cmp	r3, #255	; 0xff
 8012eb8:	d010      	beq.n	8012edc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012ec0:	689b      	ldr	r3, [r3, #8]
 8012ec2:	68fa      	ldr	r2, [r7, #12]
 8012ec4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8012ec8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8012eca:	68fa      	ldr	r2, [r7, #12]
 8012ecc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8012ed0:	b292      	uxth	r2, r2
 8012ed2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	22ff      	movs	r2, #255	; 0xff
 8012ed8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8012edc:	2300      	movs	r3, #0
}
 8012ede:	4618      	mov	r0, r3
 8012ee0:	3710      	adds	r7, #16
 8012ee2:	46bd      	mov	sp, r7
 8012ee4:	bd80      	pop	{r7, pc}
	...

08012ee8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8012ee8:	b480      	push	{r7}
 8012eea:	b083      	sub	sp, #12
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	2243      	movs	r2, #67	; 0x43
 8012ef4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8012ef6:	4b03      	ldr	r3, [pc, #12]	; (8012f04 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8012ef8:	4618      	mov	r0, r3
 8012efa:	370c      	adds	r7, #12
 8012efc:	46bd      	mov	sp, r7
 8012efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f02:	4770      	bx	lr
 8012f04:	200000a0 	.word	0x200000a0

08012f08 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8012f08:	b480      	push	{r7}
 8012f0a:	b083      	sub	sp, #12
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	2243      	movs	r2, #67	; 0x43
 8012f14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8012f16:	4b03      	ldr	r3, [pc, #12]	; (8012f24 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8012f18:	4618      	mov	r0, r3
 8012f1a:	370c      	adds	r7, #12
 8012f1c:	46bd      	mov	sp, r7
 8012f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f22:	4770      	bx	lr
 8012f24:	2000005c 	.word	0x2000005c

08012f28 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012f28:	b480      	push	{r7}
 8012f2a:	b083      	sub	sp, #12
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	2243      	movs	r2, #67	; 0x43
 8012f34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8012f36:	4b03      	ldr	r3, [pc, #12]	; (8012f44 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8012f38:	4618      	mov	r0, r3
 8012f3a:	370c      	adds	r7, #12
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f42:	4770      	bx	lr
 8012f44:	200000e4 	.word	0x200000e4

08012f48 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8012f48:	b480      	push	{r7}
 8012f4a:	b083      	sub	sp, #12
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	220a      	movs	r2, #10
 8012f54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8012f56:	4b03      	ldr	r3, [pc, #12]	; (8012f64 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8012f58:	4618      	mov	r0, r3
 8012f5a:	370c      	adds	r7, #12
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f62:	4770      	bx	lr
 8012f64:	20000018 	.word	0x20000018

08012f68 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8012f68:	b480      	push	{r7}
 8012f6a:	b083      	sub	sp, #12
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	6078      	str	r0, [r7, #4]
 8012f70:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8012f72:	683b      	ldr	r3, [r7, #0]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d101      	bne.n	8012f7c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8012f78:	2303      	movs	r3, #3
 8012f7a:	e004      	b.n	8012f86 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	683a      	ldr	r2, [r7, #0]
 8012f80:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8012f84:	2300      	movs	r3, #0
}
 8012f86:	4618      	mov	r0, r3
 8012f88:	370c      	adds	r7, #12
 8012f8a:	46bd      	mov	sp, r7
 8012f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f90:	4770      	bx	lr

08012f92 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8012f92:	b480      	push	{r7}
 8012f94:	b087      	sub	sp, #28
 8012f96:	af00      	add	r7, sp, #0
 8012f98:	60f8      	str	r0, [r7, #12]
 8012f9a:	60b9      	str	r1, [r7, #8]
 8012f9c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012fa4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8012fa6:	697b      	ldr	r3, [r7, #20]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d101      	bne.n	8012fb0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8012fac:	2303      	movs	r3, #3
 8012fae:	e008      	b.n	8012fc2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8012fb0:	697b      	ldr	r3, [r7, #20]
 8012fb2:	68ba      	ldr	r2, [r7, #8]
 8012fb4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8012fb8:	697b      	ldr	r3, [r7, #20]
 8012fba:	687a      	ldr	r2, [r7, #4]
 8012fbc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8012fc0:	2300      	movs	r3, #0
}
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	371c      	adds	r7, #28
 8012fc6:	46bd      	mov	sp, r7
 8012fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fcc:	4770      	bx	lr

08012fce <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8012fce:	b480      	push	{r7}
 8012fd0:	b085      	sub	sp, #20
 8012fd2:	af00      	add	r7, sp, #0
 8012fd4:	6078      	str	r0, [r7, #4]
 8012fd6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012fde:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d101      	bne.n	8012fea <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8012fe6:	2303      	movs	r3, #3
 8012fe8:	e004      	b.n	8012ff4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	683a      	ldr	r2, [r7, #0]
 8012fee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8012ff2:	2300      	movs	r3, #0
}
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	3714      	adds	r7, #20
 8012ff8:	46bd      	mov	sp, r7
 8012ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ffe:	4770      	bx	lr

08013000 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b084      	sub	sp, #16
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801300e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013016:	2b00      	cmp	r3, #0
 8013018:	d101      	bne.n	801301e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801301a:	2303      	movs	r3, #3
 801301c:	e016      	b.n	801304c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	7c1b      	ldrb	r3, [r3, #16]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d109      	bne.n	801303a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801302c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013030:	2101      	movs	r1, #1
 8013032:	6878      	ldr	r0, [r7, #4]
 8013034:	f001 fe9e 	bl	8014d74 <USBD_LL_PrepareReceive>
 8013038:	e007      	b.n	801304a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013040:	2340      	movs	r3, #64	; 0x40
 8013042:	2101      	movs	r1, #1
 8013044:	6878      	ldr	r0, [r7, #4]
 8013046:	f001 fe95 	bl	8014d74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801304a:	2300      	movs	r3, #0
}
 801304c:	4618      	mov	r0, r3
 801304e:	3710      	adds	r7, #16
 8013050:	46bd      	mov	sp, r7
 8013052:	bd80      	pop	{r7, pc}

08013054 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013054:	b580      	push	{r7, lr}
 8013056:	b086      	sub	sp, #24
 8013058:	af00      	add	r7, sp, #0
 801305a:	60f8      	str	r0, [r7, #12]
 801305c:	60b9      	str	r1, [r7, #8]
 801305e:	4613      	mov	r3, r2
 8013060:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d101      	bne.n	801306c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8013068:	2303      	movs	r3, #3
 801306a:	e01f      	b.n	80130ac <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	2200      	movs	r2, #0
 8013070:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	2200      	movs	r2, #0
 8013078:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	2200      	movs	r2, #0
 8013080:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013084:	68bb      	ldr	r3, [r7, #8]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d003      	beq.n	8013092 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	68ba      	ldr	r2, [r7, #8]
 801308e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	2201      	movs	r2, #1
 8013096:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	79fa      	ldrb	r2, [r7, #7]
 801309e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80130a0:	68f8      	ldr	r0, [r7, #12]
 80130a2:	f001 fcfd 	bl	8014aa0 <USBD_LL_Init>
 80130a6:	4603      	mov	r3, r0
 80130a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80130aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80130ac:	4618      	mov	r0, r3
 80130ae:	3718      	adds	r7, #24
 80130b0:	46bd      	mov	sp, r7
 80130b2:	bd80      	pop	{r7, pc}

080130b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b084      	sub	sp, #16
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
 80130bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80130be:	2300      	movs	r3, #0
 80130c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80130c2:	683b      	ldr	r3, [r7, #0]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d101      	bne.n	80130cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80130c8:	2303      	movs	r3, #3
 80130ca:	e016      	b.n	80130fa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	683a      	ldr	r2, [r7, #0]
 80130d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80130da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d00b      	beq.n	80130f8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80130e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130e8:	f107 020e 	add.w	r2, r7, #14
 80130ec:	4610      	mov	r0, r2
 80130ee:	4798      	blx	r3
 80130f0:	4602      	mov	r2, r0
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80130f8:	2300      	movs	r3, #0
}
 80130fa:	4618      	mov	r0, r3
 80130fc:	3710      	adds	r7, #16
 80130fe:	46bd      	mov	sp, r7
 8013100:	bd80      	pop	{r7, pc}

08013102 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013102:	b580      	push	{r7, lr}
 8013104:	b082      	sub	sp, #8
 8013106:	af00      	add	r7, sp, #0
 8013108:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801310a:	6878      	ldr	r0, [r7, #4]
 801310c:	f001 fd28 	bl	8014b60 <USBD_LL_Start>
 8013110:	4603      	mov	r3, r0
}
 8013112:	4618      	mov	r0, r3
 8013114:	3708      	adds	r7, #8
 8013116:	46bd      	mov	sp, r7
 8013118:	bd80      	pop	{r7, pc}

0801311a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801311a:	b480      	push	{r7}
 801311c:	b083      	sub	sp, #12
 801311e:	af00      	add	r7, sp, #0
 8013120:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013122:	2300      	movs	r3, #0
}
 8013124:	4618      	mov	r0, r3
 8013126:	370c      	adds	r7, #12
 8013128:	46bd      	mov	sp, r7
 801312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801312e:	4770      	bx	lr

08013130 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013130:	b580      	push	{r7, lr}
 8013132:	b084      	sub	sp, #16
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
 8013138:	460b      	mov	r3, r1
 801313a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801313c:	2303      	movs	r3, #3
 801313e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013146:	2b00      	cmp	r3, #0
 8013148:	d009      	beq.n	801315e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	78fa      	ldrb	r2, [r7, #3]
 8013154:	4611      	mov	r1, r2
 8013156:	6878      	ldr	r0, [r7, #4]
 8013158:	4798      	blx	r3
 801315a:	4603      	mov	r3, r0
 801315c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801315e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013160:	4618      	mov	r0, r3
 8013162:	3710      	adds	r7, #16
 8013164:	46bd      	mov	sp, r7
 8013166:	bd80      	pop	{r7, pc}

08013168 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013168:	b580      	push	{r7, lr}
 801316a:	b082      	sub	sp, #8
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
 8013170:	460b      	mov	r3, r1
 8013172:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801317a:	2b00      	cmp	r3, #0
 801317c:	d007      	beq.n	801318e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013184:	685b      	ldr	r3, [r3, #4]
 8013186:	78fa      	ldrb	r2, [r7, #3]
 8013188:	4611      	mov	r1, r2
 801318a:	6878      	ldr	r0, [r7, #4]
 801318c:	4798      	blx	r3
  }

  return USBD_OK;
 801318e:	2300      	movs	r3, #0
}
 8013190:	4618      	mov	r0, r3
 8013192:	3708      	adds	r7, #8
 8013194:	46bd      	mov	sp, r7
 8013196:	bd80      	pop	{r7, pc}

08013198 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013198:	b580      	push	{r7, lr}
 801319a:	b084      	sub	sp, #16
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
 80131a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80131a8:	6839      	ldr	r1, [r7, #0]
 80131aa:	4618      	mov	r0, r3
 80131ac:	f000 ff46 	bl	801403c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	2201      	movs	r2, #1
 80131b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80131be:	461a      	mov	r2, r3
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80131cc:	f003 031f 	and.w	r3, r3, #31
 80131d0:	2b02      	cmp	r3, #2
 80131d2:	d01a      	beq.n	801320a <USBD_LL_SetupStage+0x72>
 80131d4:	2b02      	cmp	r3, #2
 80131d6:	d822      	bhi.n	801321e <USBD_LL_SetupStage+0x86>
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d002      	beq.n	80131e2 <USBD_LL_SetupStage+0x4a>
 80131dc:	2b01      	cmp	r3, #1
 80131de:	d00a      	beq.n	80131f6 <USBD_LL_SetupStage+0x5e>
 80131e0:	e01d      	b.n	801321e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80131e8:	4619      	mov	r1, r3
 80131ea:	6878      	ldr	r0, [r7, #4]
 80131ec:	f000 f9ee 	bl	80135cc <USBD_StdDevReq>
 80131f0:	4603      	mov	r3, r0
 80131f2:	73fb      	strb	r3, [r7, #15]
      break;
 80131f4:	e020      	b.n	8013238 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80131fc:	4619      	mov	r1, r3
 80131fe:	6878      	ldr	r0, [r7, #4]
 8013200:	f000 fa52 	bl	80136a8 <USBD_StdItfReq>
 8013204:	4603      	mov	r3, r0
 8013206:	73fb      	strb	r3, [r7, #15]
      break;
 8013208:	e016      	b.n	8013238 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013210:	4619      	mov	r1, r3
 8013212:	6878      	ldr	r0, [r7, #4]
 8013214:	f000 fa91 	bl	801373a <USBD_StdEPReq>
 8013218:	4603      	mov	r3, r0
 801321a:	73fb      	strb	r3, [r7, #15]
      break;
 801321c:	e00c      	b.n	8013238 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013224:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013228:	b2db      	uxtb	r3, r3
 801322a:	4619      	mov	r1, r3
 801322c:	6878      	ldr	r0, [r7, #4]
 801322e:	f001 fcf7 	bl	8014c20 <USBD_LL_StallEP>
 8013232:	4603      	mov	r3, r0
 8013234:	73fb      	strb	r3, [r7, #15]
      break;
 8013236:	bf00      	nop
  }

  return ret;
 8013238:	7bfb      	ldrb	r3, [r7, #15]
}
 801323a:	4618      	mov	r0, r3
 801323c:	3710      	adds	r7, #16
 801323e:	46bd      	mov	sp, r7
 8013240:	bd80      	pop	{r7, pc}

08013242 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013242:	b580      	push	{r7, lr}
 8013244:	b086      	sub	sp, #24
 8013246:	af00      	add	r7, sp, #0
 8013248:	60f8      	str	r0, [r7, #12]
 801324a:	460b      	mov	r3, r1
 801324c:	607a      	str	r2, [r7, #4]
 801324e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013250:	7afb      	ldrb	r3, [r7, #11]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d138      	bne.n	80132c8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801325c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013264:	2b03      	cmp	r3, #3
 8013266:	d14a      	bne.n	80132fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8013268:	693b      	ldr	r3, [r7, #16]
 801326a:	689a      	ldr	r2, [r3, #8]
 801326c:	693b      	ldr	r3, [r7, #16]
 801326e:	68db      	ldr	r3, [r3, #12]
 8013270:	429a      	cmp	r2, r3
 8013272:	d913      	bls.n	801329c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013274:	693b      	ldr	r3, [r7, #16]
 8013276:	689a      	ldr	r2, [r3, #8]
 8013278:	693b      	ldr	r3, [r7, #16]
 801327a:	68db      	ldr	r3, [r3, #12]
 801327c:	1ad2      	subs	r2, r2, r3
 801327e:	693b      	ldr	r3, [r7, #16]
 8013280:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013282:	693b      	ldr	r3, [r7, #16]
 8013284:	68da      	ldr	r2, [r3, #12]
 8013286:	693b      	ldr	r3, [r7, #16]
 8013288:	689b      	ldr	r3, [r3, #8]
 801328a:	4293      	cmp	r3, r2
 801328c:	bf28      	it	cs
 801328e:	4613      	movcs	r3, r2
 8013290:	461a      	mov	r2, r3
 8013292:	6879      	ldr	r1, [r7, #4]
 8013294:	68f8      	ldr	r0, [r7, #12]
 8013296:	f000 ffc5 	bl	8014224 <USBD_CtlContinueRx>
 801329a:	e030      	b.n	80132fe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80132a2:	b2db      	uxtb	r3, r3
 80132a4:	2b03      	cmp	r3, #3
 80132a6:	d10b      	bne.n	80132c0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80132ae:	691b      	ldr	r3, [r3, #16]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d005      	beq.n	80132c0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80132ba:	691b      	ldr	r3, [r3, #16]
 80132bc:	68f8      	ldr	r0, [r7, #12]
 80132be:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80132c0:	68f8      	ldr	r0, [r7, #12]
 80132c2:	f000 ffc0 	bl	8014246 <USBD_CtlSendStatus>
 80132c6:	e01a      	b.n	80132fe <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80132ce:	b2db      	uxtb	r3, r3
 80132d0:	2b03      	cmp	r3, #3
 80132d2:	d114      	bne.n	80132fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80132da:	699b      	ldr	r3, [r3, #24]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d00e      	beq.n	80132fe <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80132e6:	699b      	ldr	r3, [r3, #24]
 80132e8:	7afa      	ldrb	r2, [r7, #11]
 80132ea:	4611      	mov	r1, r2
 80132ec:	68f8      	ldr	r0, [r7, #12]
 80132ee:	4798      	blx	r3
 80132f0:	4603      	mov	r3, r0
 80132f2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80132f4:	7dfb      	ldrb	r3, [r7, #23]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d001      	beq.n	80132fe <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80132fa:	7dfb      	ldrb	r3, [r7, #23]
 80132fc:	e000      	b.n	8013300 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80132fe:	2300      	movs	r3, #0
}
 8013300:	4618      	mov	r0, r3
 8013302:	3718      	adds	r7, #24
 8013304:	46bd      	mov	sp, r7
 8013306:	bd80      	pop	{r7, pc}

08013308 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013308:	b580      	push	{r7, lr}
 801330a:	b086      	sub	sp, #24
 801330c:	af00      	add	r7, sp, #0
 801330e:	60f8      	str	r0, [r7, #12]
 8013310:	460b      	mov	r3, r1
 8013312:	607a      	str	r2, [r7, #4]
 8013314:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8013316:	7afb      	ldrb	r3, [r7, #11]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d16b      	bne.n	80133f4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	3314      	adds	r3, #20
 8013320:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013328:	2b02      	cmp	r3, #2
 801332a:	d156      	bne.n	80133da <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801332c:	693b      	ldr	r3, [r7, #16]
 801332e:	689a      	ldr	r2, [r3, #8]
 8013330:	693b      	ldr	r3, [r7, #16]
 8013332:	68db      	ldr	r3, [r3, #12]
 8013334:	429a      	cmp	r2, r3
 8013336:	d914      	bls.n	8013362 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013338:	693b      	ldr	r3, [r7, #16]
 801333a:	689a      	ldr	r2, [r3, #8]
 801333c:	693b      	ldr	r3, [r7, #16]
 801333e:	68db      	ldr	r3, [r3, #12]
 8013340:	1ad2      	subs	r2, r2, r3
 8013342:	693b      	ldr	r3, [r7, #16]
 8013344:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013346:	693b      	ldr	r3, [r7, #16]
 8013348:	689b      	ldr	r3, [r3, #8]
 801334a:	461a      	mov	r2, r3
 801334c:	6879      	ldr	r1, [r7, #4]
 801334e:	68f8      	ldr	r0, [r7, #12]
 8013350:	f000 ff3a 	bl	80141c8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013354:	2300      	movs	r3, #0
 8013356:	2200      	movs	r2, #0
 8013358:	2100      	movs	r1, #0
 801335a:	68f8      	ldr	r0, [r7, #12]
 801335c:	f001 fd0a 	bl	8014d74 <USBD_LL_PrepareReceive>
 8013360:	e03b      	b.n	80133da <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013362:	693b      	ldr	r3, [r7, #16]
 8013364:	68da      	ldr	r2, [r3, #12]
 8013366:	693b      	ldr	r3, [r7, #16]
 8013368:	689b      	ldr	r3, [r3, #8]
 801336a:	429a      	cmp	r2, r3
 801336c:	d11c      	bne.n	80133a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801336e:	693b      	ldr	r3, [r7, #16]
 8013370:	685a      	ldr	r2, [r3, #4]
 8013372:	693b      	ldr	r3, [r7, #16]
 8013374:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013376:	429a      	cmp	r2, r3
 8013378:	d316      	bcc.n	80133a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801337a:	693b      	ldr	r3, [r7, #16]
 801337c:	685a      	ldr	r2, [r3, #4]
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013384:	429a      	cmp	r2, r3
 8013386:	d20f      	bcs.n	80133a8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013388:	2200      	movs	r2, #0
 801338a:	2100      	movs	r1, #0
 801338c:	68f8      	ldr	r0, [r7, #12]
 801338e:	f000 ff1b 	bl	80141c8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	2200      	movs	r2, #0
 8013396:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801339a:	2300      	movs	r3, #0
 801339c:	2200      	movs	r2, #0
 801339e:	2100      	movs	r1, #0
 80133a0:	68f8      	ldr	r0, [r7, #12]
 80133a2:	f001 fce7 	bl	8014d74 <USBD_LL_PrepareReceive>
 80133a6:	e018      	b.n	80133da <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80133ae:	b2db      	uxtb	r3, r3
 80133b0:	2b03      	cmp	r3, #3
 80133b2:	d10b      	bne.n	80133cc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133ba:	68db      	ldr	r3, [r3, #12]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d005      	beq.n	80133cc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133c6:	68db      	ldr	r3, [r3, #12]
 80133c8:	68f8      	ldr	r0, [r7, #12]
 80133ca:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80133cc:	2180      	movs	r1, #128	; 0x80
 80133ce:	68f8      	ldr	r0, [r7, #12]
 80133d0:	f001 fc26 	bl	8014c20 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80133d4:	68f8      	ldr	r0, [r7, #12]
 80133d6:	f000 ff49 	bl	801426c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80133e0:	2b01      	cmp	r3, #1
 80133e2:	d122      	bne.n	801342a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80133e4:	68f8      	ldr	r0, [r7, #12]
 80133e6:	f7ff fe98 	bl	801311a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	2200      	movs	r2, #0
 80133ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80133f2:	e01a      	b.n	801342a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80133fa:	b2db      	uxtb	r3, r3
 80133fc:	2b03      	cmp	r3, #3
 80133fe:	d114      	bne.n	801342a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013406:	695b      	ldr	r3, [r3, #20]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d00e      	beq.n	801342a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801340c:	68fb      	ldr	r3, [r7, #12]
 801340e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013412:	695b      	ldr	r3, [r3, #20]
 8013414:	7afa      	ldrb	r2, [r7, #11]
 8013416:	4611      	mov	r1, r2
 8013418:	68f8      	ldr	r0, [r7, #12]
 801341a:	4798      	blx	r3
 801341c:	4603      	mov	r3, r0
 801341e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8013420:	7dfb      	ldrb	r3, [r7, #23]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d001      	beq.n	801342a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8013426:	7dfb      	ldrb	r3, [r7, #23]
 8013428:	e000      	b.n	801342c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801342a:	2300      	movs	r3, #0
}
 801342c:	4618      	mov	r0, r3
 801342e:	3718      	adds	r7, #24
 8013430:	46bd      	mov	sp, r7
 8013432:	bd80      	pop	{r7, pc}

08013434 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013434:	b580      	push	{r7, lr}
 8013436:	b082      	sub	sp, #8
 8013438:	af00      	add	r7, sp, #0
 801343a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	2201      	movs	r2, #1
 8013440:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	2200      	movs	r2, #0
 8013448:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	2200      	movs	r2, #0
 8013450:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	2200      	movs	r2, #0
 8013456:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013460:	2b00      	cmp	r3, #0
 8013462:	d101      	bne.n	8013468 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8013464:	2303      	movs	r3, #3
 8013466:	e02f      	b.n	80134c8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801346e:	2b00      	cmp	r3, #0
 8013470:	d00f      	beq.n	8013492 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013478:	685b      	ldr	r3, [r3, #4]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d009      	beq.n	8013492 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013484:	685b      	ldr	r3, [r3, #4]
 8013486:	687a      	ldr	r2, [r7, #4]
 8013488:	6852      	ldr	r2, [r2, #4]
 801348a:	b2d2      	uxtb	r2, r2
 801348c:	4611      	mov	r1, r2
 801348e:	6878      	ldr	r0, [r7, #4]
 8013490:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013492:	2340      	movs	r3, #64	; 0x40
 8013494:	2200      	movs	r2, #0
 8013496:	2100      	movs	r1, #0
 8013498:	6878      	ldr	r0, [r7, #4]
 801349a:	f001 fb7c 	bl	8014b96 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	2201      	movs	r2, #1
 80134a2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	2240      	movs	r2, #64	; 0x40
 80134aa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80134ae:	2340      	movs	r3, #64	; 0x40
 80134b0:	2200      	movs	r2, #0
 80134b2:	2180      	movs	r1, #128	; 0x80
 80134b4:	6878      	ldr	r0, [r7, #4]
 80134b6:	f001 fb6e 	bl	8014b96 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	2201      	movs	r2, #1
 80134be:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	2240      	movs	r2, #64	; 0x40
 80134c4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80134c6:	2300      	movs	r3, #0
}
 80134c8:	4618      	mov	r0, r3
 80134ca:	3708      	adds	r7, #8
 80134cc:	46bd      	mov	sp, r7
 80134ce:	bd80      	pop	{r7, pc}

080134d0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80134d0:	b480      	push	{r7}
 80134d2:	b083      	sub	sp, #12
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
 80134d8:	460b      	mov	r3, r1
 80134da:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	78fa      	ldrb	r2, [r7, #3]
 80134e0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80134e2:	2300      	movs	r3, #0
}
 80134e4:	4618      	mov	r0, r3
 80134e6:	370c      	adds	r7, #12
 80134e8:	46bd      	mov	sp, r7
 80134ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ee:	4770      	bx	lr

080134f0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80134f0:	b480      	push	{r7}
 80134f2:	b083      	sub	sp, #12
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80134fe:	b2da      	uxtb	r2, r3
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	2204      	movs	r2, #4
 801350a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801350e:	2300      	movs	r3, #0
}
 8013510:	4618      	mov	r0, r3
 8013512:	370c      	adds	r7, #12
 8013514:	46bd      	mov	sp, r7
 8013516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801351a:	4770      	bx	lr

0801351c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801351c:	b480      	push	{r7}
 801351e:	b083      	sub	sp, #12
 8013520:	af00      	add	r7, sp, #0
 8013522:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801352a:	b2db      	uxtb	r3, r3
 801352c:	2b04      	cmp	r3, #4
 801352e:	d106      	bne.n	801353e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8013536:	b2da      	uxtb	r2, r3
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801353e:	2300      	movs	r3, #0
}
 8013540:	4618      	mov	r0, r3
 8013542:	370c      	adds	r7, #12
 8013544:	46bd      	mov	sp, r7
 8013546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801354a:	4770      	bx	lr

0801354c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801354c:	b580      	push	{r7, lr}
 801354e:	b082      	sub	sp, #8
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801355a:	2b00      	cmp	r3, #0
 801355c:	d101      	bne.n	8013562 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801355e:	2303      	movs	r3, #3
 8013560:	e012      	b.n	8013588 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013568:	b2db      	uxtb	r3, r3
 801356a:	2b03      	cmp	r3, #3
 801356c:	d10b      	bne.n	8013586 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013574:	69db      	ldr	r3, [r3, #28]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d005      	beq.n	8013586 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013580:	69db      	ldr	r3, [r3, #28]
 8013582:	6878      	ldr	r0, [r7, #4]
 8013584:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013586:	2300      	movs	r3, #0
}
 8013588:	4618      	mov	r0, r3
 801358a:	3708      	adds	r7, #8
 801358c:	46bd      	mov	sp, r7
 801358e:	bd80      	pop	{r7, pc}

08013590 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013590:	b480      	push	{r7}
 8013592:	b087      	sub	sp, #28
 8013594:	af00      	add	r7, sp, #0
 8013596:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801359c:	697b      	ldr	r3, [r7, #20]
 801359e:	781b      	ldrb	r3, [r3, #0]
 80135a0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80135a2:	697b      	ldr	r3, [r7, #20]
 80135a4:	3301      	adds	r3, #1
 80135a6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80135a8:	697b      	ldr	r3, [r7, #20]
 80135aa:	781b      	ldrb	r3, [r3, #0]
 80135ac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80135ae:	8a3b      	ldrh	r3, [r7, #16]
 80135b0:	021b      	lsls	r3, r3, #8
 80135b2:	b21a      	sxth	r2, r3
 80135b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80135b8:	4313      	orrs	r3, r2
 80135ba:	b21b      	sxth	r3, r3
 80135bc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80135be:	89fb      	ldrh	r3, [r7, #14]
}
 80135c0:	4618      	mov	r0, r3
 80135c2:	371c      	adds	r7, #28
 80135c4:	46bd      	mov	sp, r7
 80135c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ca:	4770      	bx	lr

080135cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80135cc:	b580      	push	{r7, lr}
 80135ce:	b084      	sub	sp, #16
 80135d0:	af00      	add	r7, sp, #0
 80135d2:	6078      	str	r0, [r7, #4]
 80135d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80135d6:	2300      	movs	r3, #0
 80135d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80135da:	683b      	ldr	r3, [r7, #0]
 80135dc:	781b      	ldrb	r3, [r3, #0]
 80135de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80135e2:	2b40      	cmp	r3, #64	; 0x40
 80135e4:	d005      	beq.n	80135f2 <USBD_StdDevReq+0x26>
 80135e6:	2b40      	cmp	r3, #64	; 0x40
 80135e8:	d853      	bhi.n	8013692 <USBD_StdDevReq+0xc6>
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d00b      	beq.n	8013606 <USBD_StdDevReq+0x3a>
 80135ee:	2b20      	cmp	r3, #32
 80135f0:	d14f      	bne.n	8013692 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135f8:	689b      	ldr	r3, [r3, #8]
 80135fa:	6839      	ldr	r1, [r7, #0]
 80135fc:	6878      	ldr	r0, [r7, #4]
 80135fe:	4798      	blx	r3
 8013600:	4603      	mov	r3, r0
 8013602:	73fb      	strb	r3, [r7, #15]
      break;
 8013604:	e04a      	b.n	801369c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013606:	683b      	ldr	r3, [r7, #0]
 8013608:	785b      	ldrb	r3, [r3, #1]
 801360a:	2b09      	cmp	r3, #9
 801360c:	d83b      	bhi.n	8013686 <USBD_StdDevReq+0xba>
 801360e:	a201      	add	r2, pc, #4	; (adr r2, 8013614 <USBD_StdDevReq+0x48>)
 8013610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013614:	08013669 	.word	0x08013669
 8013618:	0801367d 	.word	0x0801367d
 801361c:	08013687 	.word	0x08013687
 8013620:	08013673 	.word	0x08013673
 8013624:	08013687 	.word	0x08013687
 8013628:	08013647 	.word	0x08013647
 801362c:	0801363d 	.word	0x0801363d
 8013630:	08013687 	.word	0x08013687
 8013634:	0801365f 	.word	0x0801365f
 8013638:	08013651 	.word	0x08013651
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801363c:	6839      	ldr	r1, [r7, #0]
 801363e:	6878      	ldr	r0, [r7, #4]
 8013640:	f000 f9de 	bl	8013a00 <USBD_GetDescriptor>
          break;
 8013644:	e024      	b.n	8013690 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013646:	6839      	ldr	r1, [r7, #0]
 8013648:	6878      	ldr	r0, [r7, #4]
 801364a:	f000 fb6d 	bl	8013d28 <USBD_SetAddress>
          break;
 801364e:	e01f      	b.n	8013690 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013650:	6839      	ldr	r1, [r7, #0]
 8013652:	6878      	ldr	r0, [r7, #4]
 8013654:	f000 fbac 	bl	8013db0 <USBD_SetConfig>
 8013658:	4603      	mov	r3, r0
 801365a:	73fb      	strb	r3, [r7, #15]
          break;
 801365c:	e018      	b.n	8013690 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801365e:	6839      	ldr	r1, [r7, #0]
 8013660:	6878      	ldr	r0, [r7, #4]
 8013662:	f000 fc4b 	bl	8013efc <USBD_GetConfig>
          break;
 8013666:	e013      	b.n	8013690 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013668:	6839      	ldr	r1, [r7, #0]
 801366a:	6878      	ldr	r0, [r7, #4]
 801366c:	f000 fc7c 	bl	8013f68 <USBD_GetStatus>
          break;
 8013670:	e00e      	b.n	8013690 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013672:	6839      	ldr	r1, [r7, #0]
 8013674:	6878      	ldr	r0, [r7, #4]
 8013676:	f000 fcab 	bl	8013fd0 <USBD_SetFeature>
          break;
 801367a:	e009      	b.n	8013690 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801367c:	6839      	ldr	r1, [r7, #0]
 801367e:	6878      	ldr	r0, [r7, #4]
 8013680:	f000 fcba 	bl	8013ff8 <USBD_ClrFeature>
          break;
 8013684:	e004      	b.n	8013690 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8013686:	6839      	ldr	r1, [r7, #0]
 8013688:	6878      	ldr	r0, [r7, #4]
 801368a:	f000 fd11 	bl	80140b0 <USBD_CtlError>
          break;
 801368e:	bf00      	nop
      }
      break;
 8013690:	e004      	b.n	801369c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8013692:	6839      	ldr	r1, [r7, #0]
 8013694:	6878      	ldr	r0, [r7, #4]
 8013696:	f000 fd0b 	bl	80140b0 <USBD_CtlError>
      break;
 801369a:	bf00      	nop
  }

  return ret;
 801369c:	7bfb      	ldrb	r3, [r7, #15]
}
 801369e:	4618      	mov	r0, r3
 80136a0:	3710      	adds	r7, #16
 80136a2:	46bd      	mov	sp, r7
 80136a4:	bd80      	pop	{r7, pc}
 80136a6:	bf00      	nop

080136a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b084      	sub	sp, #16
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
 80136b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80136b2:	2300      	movs	r3, #0
 80136b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80136b6:	683b      	ldr	r3, [r7, #0]
 80136b8:	781b      	ldrb	r3, [r3, #0]
 80136ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80136be:	2b40      	cmp	r3, #64	; 0x40
 80136c0:	d005      	beq.n	80136ce <USBD_StdItfReq+0x26>
 80136c2:	2b40      	cmp	r3, #64	; 0x40
 80136c4:	d82f      	bhi.n	8013726 <USBD_StdItfReq+0x7e>
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d001      	beq.n	80136ce <USBD_StdItfReq+0x26>
 80136ca:	2b20      	cmp	r3, #32
 80136cc:	d12b      	bne.n	8013726 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80136d4:	b2db      	uxtb	r3, r3
 80136d6:	3b01      	subs	r3, #1
 80136d8:	2b02      	cmp	r3, #2
 80136da:	d81d      	bhi.n	8013718 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80136dc:	683b      	ldr	r3, [r7, #0]
 80136de:	889b      	ldrh	r3, [r3, #4]
 80136e0:	b2db      	uxtb	r3, r3
 80136e2:	2b01      	cmp	r3, #1
 80136e4:	d813      	bhi.n	801370e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136ec:	689b      	ldr	r3, [r3, #8]
 80136ee:	6839      	ldr	r1, [r7, #0]
 80136f0:	6878      	ldr	r0, [r7, #4]
 80136f2:	4798      	blx	r3
 80136f4:	4603      	mov	r3, r0
 80136f6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80136f8:	683b      	ldr	r3, [r7, #0]
 80136fa:	88db      	ldrh	r3, [r3, #6]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d110      	bne.n	8013722 <USBD_StdItfReq+0x7a>
 8013700:	7bfb      	ldrb	r3, [r7, #15]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d10d      	bne.n	8013722 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013706:	6878      	ldr	r0, [r7, #4]
 8013708:	f000 fd9d 	bl	8014246 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801370c:	e009      	b.n	8013722 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801370e:	6839      	ldr	r1, [r7, #0]
 8013710:	6878      	ldr	r0, [r7, #4]
 8013712:	f000 fccd 	bl	80140b0 <USBD_CtlError>
          break;
 8013716:	e004      	b.n	8013722 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8013718:	6839      	ldr	r1, [r7, #0]
 801371a:	6878      	ldr	r0, [r7, #4]
 801371c:	f000 fcc8 	bl	80140b0 <USBD_CtlError>
          break;
 8013720:	e000      	b.n	8013724 <USBD_StdItfReq+0x7c>
          break;
 8013722:	bf00      	nop
      }
      break;
 8013724:	e004      	b.n	8013730 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8013726:	6839      	ldr	r1, [r7, #0]
 8013728:	6878      	ldr	r0, [r7, #4]
 801372a:	f000 fcc1 	bl	80140b0 <USBD_CtlError>
      break;
 801372e:	bf00      	nop
  }

  return ret;
 8013730:	7bfb      	ldrb	r3, [r7, #15]
}
 8013732:	4618      	mov	r0, r3
 8013734:	3710      	adds	r7, #16
 8013736:	46bd      	mov	sp, r7
 8013738:	bd80      	pop	{r7, pc}

0801373a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801373a:	b580      	push	{r7, lr}
 801373c:	b084      	sub	sp, #16
 801373e:	af00      	add	r7, sp, #0
 8013740:	6078      	str	r0, [r7, #4]
 8013742:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8013744:	2300      	movs	r3, #0
 8013746:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8013748:	683b      	ldr	r3, [r7, #0]
 801374a:	889b      	ldrh	r3, [r3, #4]
 801374c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801374e:	683b      	ldr	r3, [r7, #0]
 8013750:	781b      	ldrb	r3, [r3, #0]
 8013752:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013756:	2b40      	cmp	r3, #64	; 0x40
 8013758:	d007      	beq.n	801376a <USBD_StdEPReq+0x30>
 801375a:	2b40      	cmp	r3, #64	; 0x40
 801375c:	f200 8145 	bhi.w	80139ea <USBD_StdEPReq+0x2b0>
 8013760:	2b00      	cmp	r3, #0
 8013762:	d00c      	beq.n	801377e <USBD_StdEPReq+0x44>
 8013764:	2b20      	cmp	r3, #32
 8013766:	f040 8140 	bne.w	80139ea <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013770:	689b      	ldr	r3, [r3, #8]
 8013772:	6839      	ldr	r1, [r7, #0]
 8013774:	6878      	ldr	r0, [r7, #4]
 8013776:	4798      	blx	r3
 8013778:	4603      	mov	r3, r0
 801377a:	73fb      	strb	r3, [r7, #15]
      break;
 801377c:	e13a      	b.n	80139f4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801377e:	683b      	ldr	r3, [r7, #0]
 8013780:	785b      	ldrb	r3, [r3, #1]
 8013782:	2b03      	cmp	r3, #3
 8013784:	d007      	beq.n	8013796 <USBD_StdEPReq+0x5c>
 8013786:	2b03      	cmp	r3, #3
 8013788:	f300 8129 	bgt.w	80139de <USBD_StdEPReq+0x2a4>
 801378c:	2b00      	cmp	r3, #0
 801378e:	d07f      	beq.n	8013890 <USBD_StdEPReq+0x156>
 8013790:	2b01      	cmp	r3, #1
 8013792:	d03c      	beq.n	801380e <USBD_StdEPReq+0xd4>
 8013794:	e123      	b.n	80139de <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801379c:	b2db      	uxtb	r3, r3
 801379e:	2b02      	cmp	r3, #2
 80137a0:	d002      	beq.n	80137a8 <USBD_StdEPReq+0x6e>
 80137a2:	2b03      	cmp	r3, #3
 80137a4:	d016      	beq.n	80137d4 <USBD_StdEPReq+0x9a>
 80137a6:	e02c      	b.n	8013802 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80137a8:	7bbb      	ldrb	r3, [r7, #14]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d00d      	beq.n	80137ca <USBD_StdEPReq+0x90>
 80137ae:	7bbb      	ldrb	r3, [r7, #14]
 80137b0:	2b80      	cmp	r3, #128	; 0x80
 80137b2:	d00a      	beq.n	80137ca <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80137b4:	7bbb      	ldrb	r3, [r7, #14]
 80137b6:	4619      	mov	r1, r3
 80137b8:	6878      	ldr	r0, [r7, #4]
 80137ba:	f001 fa31 	bl	8014c20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80137be:	2180      	movs	r1, #128	; 0x80
 80137c0:	6878      	ldr	r0, [r7, #4]
 80137c2:	f001 fa2d 	bl	8014c20 <USBD_LL_StallEP>
 80137c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80137c8:	e020      	b.n	801380c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80137ca:	6839      	ldr	r1, [r7, #0]
 80137cc:	6878      	ldr	r0, [r7, #4]
 80137ce:	f000 fc6f 	bl	80140b0 <USBD_CtlError>
              break;
 80137d2:	e01b      	b.n	801380c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80137d4:	683b      	ldr	r3, [r7, #0]
 80137d6:	885b      	ldrh	r3, [r3, #2]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d10e      	bne.n	80137fa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80137dc:	7bbb      	ldrb	r3, [r7, #14]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d00b      	beq.n	80137fa <USBD_StdEPReq+0xc0>
 80137e2:	7bbb      	ldrb	r3, [r7, #14]
 80137e4:	2b80      	cmp	r3, #128	; 0x80
 80137e6:	d008      	beq.n	80137fa <USBD_StdEPReq+0xc0>
 80137e8:	683b      	ldr	r3, [r7, #0]
 80137ea:	88db      	ldrh	r3, [r3, #6]
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d104      	bne.n	80137fa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80137f0:	7bbb      	ldrb	r3, [r7, #14]
 80137f2:	4619      	mov	r1, r3
 80137f4:	6878      	ldr	r0, [r7, #4]
 80137f6:	f001 fa13 	bl	8014c20 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80137fa:	6878      	ldr	r0, [r7, #4]
 80137fc:	f000 fd23 	bl	8014246 <USBD_CtlSendStatus>

              break;
 8013800:	e004      	b.n	801380c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8013802:	6839      	ldr	r1, [r7, #0]
 8013804:	6878      	ldr	r0, [r7, #4]
 8013806:	f000 fc53 	bl	80140b0 <USBD_CtlError>
              break;
 801380a:	bf00      	nop
          }
          break;
 801380c:	e0ec      	b.n	80139e8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013814:	b2db      	uxtb	r3, r3
 8013816:	2b02      	cmp	r3, #2
 8013818:	d002      	beq.n	8013820 <USBD_StdEPReq+0xe6>
 801381a:	2b03      	cmp	r3, #3
 801381c:	d016      	beq.n	801384c <USBD_StdEPReq+0x112>
 801381e:	e030      	b.n	8013882 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013820:	7bbb      	ldrb	r3, [r7, #14]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d00d      	beq.n	8013842 <USBD_StdEPReq+0x108>
 8013826:	7bbb      	ldrb	r3, [r7, #14]
 8013828:	2b80      	cmp	r3, #128	; 0x80
 801382a:	d00a      	beq.n	8013842 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801382c:	7bbb      	ldrb	r3, [r7, #14]
 801382e:	4619      	mov	r1, r3
 8013830:	6878      	ldr	r0, [r7, #4]
 8013832:	f001 f9f5 	bl	8014c20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013836:	2180      	movs	r1, #128	; 0x80
 8013838:	6878      	ldr	r0, [r7, #4]
 801383a:	f001 f9f1 	bl	8014c20 <USBD_LL_StallEP>
 801383e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013840:	e025      	b.n	801388e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8013842:	6839      	ldr	r1, [r7, #0]
 8013844:	6878      	ldr	r0, [r7, #4]
 8013846:	f000 fc33 	bl	80140b0 <USBD_CtlError>
              break;
 801384a:	e020      	b.n	801388e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801384c:	683b      	ldr	r3, [r7, #0]
 801384e:	885b      	ldrh	r3, [r3, #2]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d11b      	bne.n	801388c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013854:	7bbb      	ldrb	r3, [r7, #14]
 8013856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801385a:	2b00      	cmp	r3, #0
 801385c:	d004      	beq.n	8013868 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801385e:	7bbb      	ldrb	r3, [r7, #14]
 8013860:	4619      	mov	r1, r3
 8013862:	6878      	ldr	r0, [r7, #4]
 8013864:	f001 f9fb 	bl	8014c5e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013868:	6878      	ldr	r0, [r7, #4]
 801386a:	f000 fcec 	bl	8014246 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013874:	689b      	ldr	r3, [r3, #8]
 8013876:	6839      	ldr	r1, [r7, #0]
 8013878:	6878      	ldr	r0, [r7, #4]
 801387a:	4798      	blx	r3
 801387c:	4603      	mov	r3, r0
 801387e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8013880:	e004      	b.n	801388c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8013882:	6839      	ldr	r1, [r7, #0]
 8013884:	6878      	ldr	r0, [r7, #4]
 8013886:	f000 fc13 	bl	80140b0 <USBD_CtlError>
              break;
 801388a:	e000      	b.n	801388e <USBD_StdEPReq+0x154>
              break;
 801388c:	bf00      	nop
          }
          break;
 801388e:	e0ab      	b.n	80139e8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013896:	b2db      	uxtb	r3, r3
 8013898:	2b02      	cmp	r3, #2
 801389a:	d002      	beq.n	80138a2 <USBD_StdEPReq+0x168>
 801389c:	2b03      	cmp	r3, #3
 801389e:	d032      	beq.n	8013906 <USBD_StdEPReq+0x1cc>
 80138a0:	e097      	b.n	80139d2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80138a2:	7bbb      	ldrb	r3, [r7, #14]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d007      	beq.n	80138b8 <USBD_StdEPReq+0x17e>
 80138a8:	7bbb      	ldrb	r3, [r7, #14]
 80138aa:	2b80      	cmp	r3, #128	; 0x80
 80138ac:	d004      	beq.n	80138b8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80138ae:	6839      	ldr	r1, [r7, #0]
 80138b0:	6878      	ldr	r0, [r7, #4]
 80138b2:	f000 fbfd 	bl	80140b0 <USBD_CtlError>
                break;
 80138b6:	e091      	b.n	80139dc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80138b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	da0b      	bge.n	80138d8 <USBD_StdEPReq+0x19e>
 80138c0:	7bbb      	ldrb	r3, [r7, #14]
 80138c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80138c6:	4613      	mov	r3, r2
 80138c8:	009b      	lsls	r3, r3, #2
 80138ca:	4413      	add	r3, r2
 80138cc:	009b      	lsls	r3, r3, #2
 80138ce:	3310      	adds	r3, #16
 80138d0:	687a      	ldr	r2, [r7, #4]
 80138d2:	4413      	add	r3, r2
 80138d4:	3304      	adds	r3, #4
 80138d6:	e00b      	b.n	80138f0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80138d8:	7bbb      	ldrb	r3, [r7, #14]
 80138da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80138de:	4613      	mov	r3, r2
 80138e0:	009b      	lsls	r3, r3, #2
 80138e2:	4413      	add	r3, r2
 80138e4:	009b      	lsls	r3, r3, #2
 80138e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80138ea:	687a      	ldr	r2, [r7, #4]
 80138ec:	4413      	add	r3, r2
 80138ee:	3304      	adds	r3, #4
 80138f0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80138f2:	68bb      	ldr	r3, [r7, #8]
 80138f4:	2200      	movs	r2, #0
 80138f6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80138f8:	68bb      	ldr	r3, [r7, #8]
 80138fa:	2202      	movs	r2, #2
 80138fc:	4619      	mov	r1, r3
 80138fe:	6878      	ldr	r0, [r7, #4]
 8013900:	f000 fc47 	bl	8014192 <USBD_CtlSendData>
              break;
 8013904:	e06a      	b.n	80139dc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013906:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801390a:	2b00      	cmp	r3, #0
 801390c:	da11      	bge.n	8013932 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801390e:	7bbb      	ldrb	r3, [r7, #14]
 8013910:	f003 020f 	and.w	r2, r3, #15
 8013914:	6879      	ldr	r1, [r7, #4]
 8013916:	4613      	mov	r3, r2
 8013918:	009b      	lsls	r3, r3, #2
 801391a:	4413      	add	r3, r2
 801391c:	009b      	lsls	r3, r3, #2
 801391e:	440b      	add	r3, r1
 8013920:	3324      	adds	r3, #36	; 0x24
 8013922:	881b      	ldrh	r3, [r3, #0]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d117      	bne.n	8013958 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8013928:	6839      	ldr	r1, [r7, #0]
 801392a:	6878      	ldr	r0, [r7, #4]
 801392c:	f000 fbc0 	bl	80140b0 <USBD_CtlError>
                  break;
 8013930:	e054      	b.n	80139dc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013932:	7bbb      	ldrb	r3, [r7, #14]
 8013934:	f003 020f 	and.w	r2, r3, #15
 8013938:	6879      	ldr	r1, [r7, #4]
 801393a:	4613      	mov	r3, r2
 801393c:	009b      	lsls	r3, r3, #2
 801393e:	4413      	add	r3, r2
 8013940:	009b      	lsls	r3, r3, #2
 8013942:	440b      	add	r3, r1
 8013944:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013948:	881b      	ldrh	r3, [r3, #0]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d104      	bne.n	8013958 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801394e:	6839      	ldr	r1, [r7, #0]
 8013950:	6878      	ldr	r0, [r7, #4]
 8013952:	f000 fbad 	bl	80140b0 <USBD_CtlError>
                  break;
 8013956:	e041      	b.n	80139dc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013958:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801395c:	2b00      	cmp	r3, #0
 801395e:	da0b      	bge.n	8013978 <USBD_StdEPReq+0x23e>
 8013960:	7bbb      	ldrb	r3, [r7, #14]
 8013962:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013966:	4613      	mov	r3, r2
 8013968:	009b      	lsls	r3, r3, #2
 801396a:	4413      	add	r3, r2
 801396c:	009b      	lsls	r3, r3, #2
 801396e:	3310      	adds	r3, #16
 8013970:	687a      	ldr	r2, [r7, #4]
 8013972:	4413      	add	r3, r2
 8013974:	3304      	adds	r3, #4
 8013976:	e00b      	b.n	8013990 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013978:	7bbb      	ldrb	r3, [r7, #14]
 801397a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801397e:	4613      	mov	r3, r2
 8013980:	009b      	lsls	r3, r3, #2
 8013982:	4413      	add	r3, r2
 8013984:	009b      	lsls	r3, r3, #2
 8013986:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801398a:	687a      	ldr	r2, [r7, #4]
 801398c:	4413      	add	r3, r2
 801398e:	3304      	adds	r3, #4
 8013990:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013992:	7bbb      	ldrb	r3, [r7, #14]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d002      	beq.n	801399e <USBD_StdEPReq+0x264>
 8013998:	7bbb      	ldrb	r3, [r7, #14]
 801399a:	2b80      	cmp	r3, #128	; 0x80
 801399c:	d103      	bne.n	80139a6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801399e:	68bb      	ldr	r3, [r7, #8]
 80139a0:	2200      	movs	r2, #0
 80139a2:	601a      	str	r2, [r3, #0]
 80139a4:	e00e      	b.n	80139c4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80139a6:	7bbb      	ldrb	r3, [r7, #14]
 80139a8:	4619      	mov	r1, r3
 80139aa:	6878      	ldr	r0, [r7, #4]
 80139ac:	f001 f976 	bl	8014c9c <USBD_LL_IsStallEP>
 80139b0:	4603      	mov	r3, r0
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d003      	beq.n	80139be <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80139b6:	68bb      	ldr	r3, [r7, #8]
 80139b8:	2201      	movs	r2, #1
 80139ba:	601a      	str	r2, [r3, #0]
 80139bc:	e002      	b.n	80139c4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80139be:	68bb      	ldr	r3, [r7, #8]
 80139c0:	2200      	movs	r2, #0
 80139c2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80139c4:	68bb      	ldr	r3, [r7, #8]
 80139c6:	2202      	movs	r2, #2
 80139c8:	4619      	mov	r1, r3
 80139ca:	6878      	ldr	r0, [r7, #4]
 80139cc:	f000 fbe1 	bl	8014192 <USBD_CtlSendData>
              break;
 80139d0:	e004      	b.n	80139dc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80139d2:	6839      	ldr	r1, [r7, #0]
 80139d4:	6878      	ldr	r0, [r7, #4]
 80139d6:	f000 fb6b 	bl	80140b0 <USBD_CtlError>
              break;
 80139da:	bf00      	nop
          }
          break;
 80139dc:	e004      	b.n	80139e8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80139de:	6839      	ldr	r1, [r7, #0]
 80139e0:	6878      	ldr	r0, [r7, #4]
 80139e2:	f000 fb65 	bl	80140b0 <USBD_CtlError>
          break;
 80139e6:	bf00      	nop
      }
      break;
 80139e8:	e004      	b.n	80139f4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80139ea:	6839      	ldr	r1, [r7, #0]
 80139ec:	6878      	ldr	r0, [r7, #4]
 80139ee:	f000 fb5f 	bl	80140b0 <USBD_CtlError>
      break;
 80139f2:	bf00      	nop
  }

  return ret;
 80139f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80139f6:	4618      	mov	r0, r3
 80139f8:	3710      	adds	r7, #16
 80139fa:	46bd      	mov	sp, r7
 80139fc:	bd80      	pop	{r7, pc}
	...

08013a00 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013a00:	b580      	push	{r7, lr}
 8013a02:	b084      	sub	sp, #16
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	6078      	str	r0, [r7, #4]
 8013a08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013a0e:	2300      	movs	r3, #0
 8013a10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013a12:	2300      	movs	r3, #0
 8013a14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013a16:	683b      	ldr	r3, [r7, #0]
 8013a18:	885b      	ldrh	r3, [r3, #2]
 8013a1a:	0a1b      	lsrs	r3, r3, #8
 8013a1c:	b29b      	uxth	r3, r3
 8013a1e:	3b01      	subs	r3, #1
 8013a20:	2b0e      	cmp	r3, #14
 8013a22:	f200 8152 	bhi.w	8013cca <USBD_GetDescriptor+0x2ca>
 8013a26:	a201      	add	r2, pc, #4	; (adr r2, 8013a2c <USBD_GetDescriptor+0x2c>)
 8013a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a2c:	08013a9d 	.word	0x08013a9d
 8013a30:	08013ab5 	.word	0x08013ab5
 8013a34:	08013af5 	.word	0x08013af5
 8013a38:	08013ccb 	.word	0x08013ccb
 8013a3c:	08013ccb 	.word	0x08013ccb
 8013a40:	08013c6b 	.word	0x08013c6b
 8013a44:	08013c97 	.word	0x08013c97
 8013a48:	08013ccb 	.word	0x08013ccb
 8013a4c:	08013ccb 	.word	0x08013ccb
 8013a50:	08013ccb 	.word	0x08013ccb
 8013a54:	08013ccb 	.word	0x08013ccb
 8013a58:	08013ccb 	.word	0x08013ccb
 8013a5c:	08013ccb 	.word	0x08013ccb
 8013a60:	08013ccb 	.word	0x08013ccb
 8013a64:	08013a69 	.word	0x08013a69
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013a6e:	69db      	ldr	r3, [r3, #28]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d00b      	beq.n	8013a8c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013a7a:	69db      	ldr	r3, [r3, #28]
 8013a7c:	687a      	ldr	r2, [r7, #4]
 8013a7e:	7c12      	ldrb	r2, [r2, #16]
 8013a80:	f107 0108 	add.w	r1, r7, #8
 8013a84:	4610      	mov	r0, r2
 8013a86:	4798      	blx	r3
 8013a88:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013a8a:	e126      	b.n	8013cda <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013a8c:	6839      	ldr	r1, [r7, #0]
 8013a8e:	6878      	ldr	r0, [r7, #4]
 8013a90:	f000 fb0e 	bl	80140b0 <USBD_CtlError>
        err++;
 8013a94:	7afb      	ldrb	r3, [r7, #11]
 8013a96:	3301      	adds	r3, #1
 8013a98:	72fb      	strb	r3, [r7, #11]
      break;
 8013a9a:	e11e      	b.n	8013cda <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	687a      	ldr	r2, [r7, #4]
 8013aa6:	7c12      	ldrb	r2, [r2, #16]
 8013aa8:	f107 0108 	add.w	r1, r7, #8
 8013aac:	4610      	mov	r0, r2
 8013aae:	4798      	blx	r3
 8013ab0:	60f8      	str	r0, [r7, #12]
      break;
 8013ab2:	e112      	b.n	8013cda <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	7c1b      	ldrb	r3, [r3, #16]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d10d      	bne.n	8013ad8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ac4:	f107 0208 	add.w	r2, r7, #8
 8013ac8:	4610      	mov	r0, r2
 8013aca:	4798      	blx	r3
 8013acc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	3301      	adds	r3, #1
 8013ad2:	2202      	movs	r2, #2
 8013ad4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013ad6:	e100      	b.n	8013cda <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ae0:	f107 0208 	add.w	r2, r7, #8
 8013ae4:	4610      	mov	r0, r2
 8013ae6:	4798      	blx	r3
 8013ae8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	3301      	adds	r3, #1
 8013aee:	2202      	movs	r2, #2
 8013af0:	701a      	strb	r2, [r3, #0]
      break;
 8013af2:	e0f2      	b.n	8013cda <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013af4:	683b      	ldr	r3, [r7, #0]
 8013af6:	885b      	ldrh	r3, [r3, #2]
 8013af8:	b2db      	uxtb	r3, r3
 8013afa:	2b05      	cmp	r3, #5
 8013afc:	f200 80ac 	bhi.w	8013c58 <USBD_GetDescriptor+0x258>
 8013b00:	a201      	add	r2, pc, #4	; (adr r2, 8013b08 <USBD_GetDescriptor+0x108>)
 8013b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b06:	bf00      	nop
 8013b08:	08013b21 	.word	0x08013b21
 8013b0c:	08013b55 	.word	0x08013b55
 8013b10:	08013b89 	.word	0x08013b89
 8013b14:	08013bbd 	.word	0x08013bbd
 8013b18:	08013bf1 	.word	0x08013bf1
 8013b1c:	08013c25 	.word	0x08013c25
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b26:	685b      	ldr	r3, [r3, #4]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d00b      	beq.n	8013b44 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b32:	685b      	ldr	r3, [r3, #4]
 8013b34:	687a      	ldr	r2, [r7, #4]
 8013b36:	7c12      	ldrb	r2, [r2, #16]
 8013b38:	f107 0108 	add.w	r1, r7, #8
 8013b3c:	4610      	mov	r0, r2
 8013b3e:	4798      	blx	r3
 8013b40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013b42:	e091      	b.n	8013c68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013b44:	6839      	ldr	r1, [r7, #0]
 8013b46:	6878      	ldr	r0, [r7, #4]
 8013b48:	f000 fab2 	bl	80140b0 <USBD_CtlError>
            err++;
 8013b4c:	7afb      	ldrb	r3, [r7, #11]
 8013b4e:	3301      	adds	r3, #1
 8013b50:	72fb      	strb	r3, [r7, #11]
          break;
 8013b52:	e089      	b.n	8013c68 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b5a:	689b      	ldr	r3, [r3, #8]
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d00b      	beq.n	8013b78 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b66:	689b      	ldr	r3, [r3, #8]
 8013b68:	687a      	ldr	r2, [r7, #4]
 8013b6a:	7c12      	ldrb	r2, [r2, #16]
 8013b6c:	f107 0108 	add.w	r1, r7, #8
 8013b70:	4610      	mov	r0, r2
 8013b72:	4798      	blx	r3
 8013b74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013b76:	e077      	b.n	8013c68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013b78:	6839      	ldr	r1, [r7, #0]
 8013b7a:	6878      	ldr	r0, [r7, #4]
 8013b7c:	f000 fa98 	bl	80140b0 <USBD_CtlError>
            err++;
 8013b80:	7afb      	ldrb	r3, [r7, #11]
 8013b82:	3301      	adds	r3, #1
 8013b84:	72fb      	strb	r3, [r7, #11]
          break;
 8013b86:	e06f      	b.n	8013c68 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b8e:	68db      	ldr	r3, [r3, #12]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d00b      	beq.n	8013bac <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013b9a:	68db      	ldr	r3, [r3, #12]
 8013b9c:	687a      	ldr	r2, [r7, #4]
 8013b9e:	7c12      	ldrb	r2, [r2, #16]
 8013ba0:	f107 0108 	add.w	r1, r7, #8
 8013ba4:	4610      	mov	r0, r2
 8013ba6:	4798      	blx	r3
 8013ba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013baa:	e05d      	b.n	8013c68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013bac:	6839      	ldr	r1, [r7, #0]
 8013bae:	6878      	ldr	r0, [r7, #4]
 8013bb0:	f000 fa7e 	bl	80140b0 <USBD_CtlError>
            err++;
 8013bb4:	7afb      	ldrb	r3, [r7, #11]
 8013bb6:	3301      	adds	r3, #1
 8013bb8:	72fb      	strb	r3, [r7, #11]
          break;
 8013bba:	e055      	b.n	8013c68 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013bc2:	691b      	ldr	r3, [r3, #16]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d00b      	beq.n	8013be0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013bce:	691b      	ldr	r3, [r3, #16]
 8013bd0:	687a      	ldr	r2, [r7, #4]
 8013bd2:	7c12      	ldrb	r2, [r2, #16]
 8013bd4:	f107 0108 	add.w	r1, r7, #8
 8013bd8:	4610      	mov	r0, r2
 8013bda:	4798      	blx	r3
 8013bdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013bde:	e043      	b.n	8013c68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013be0:	6839      	ldr	r1, [r7, #0]
 8013be2:	6878      	ldr	r0, [r7, #4]
 8013be4:	f000 fa64 	bl	80140b0 <USBD_CtlError>
            err++;
 8013be8:	7afb      	ldrb	r3, [r7, #11]
 8013bea:	3301      	adds	r3, #1
 8013bec:	72fb      	strb	r3, [r7, #11]
          break;
 8013bee:	e03b      	b.n	8013c68 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013bf6:	695b      	ldr	r3, [r3, #20]
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d00b      	beq.n	8013c14 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c02:	695b      	ldr	r3, [r3, #20]
 8013c04:	687a      	ldr	r2, [r7, #4]
 8013c06:	7c12      	ldrb	r2, [r2, #16]
 8013c08:	f107 0108 	add.w	r1, r7, #8
 8013c0c:	4610      	mov	r0, r2
 8013c0e:	4798      	blx	r3
 8013c10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013c12:	e029      	b.n	8013c68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013c14:	6839      	ldr	r1, [r7, #0]
 8013c16:	6878      	ldr	r0, [r7, #4]
 8013c18:	f000 fa4a 	bl	80140b0 <USBD_CtlError>
            err++;
 8013c1c:	7afb      	ldrb	r3, [r7, #11]
 8013c1e:	3301      	adds	r3, #1
 8013c20:	72fb      	strb	r3, [r7, #11]
          break;
 8013c22:	e021      	b.n	8013c68 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c2a:	699b      	ldr	r3, [r3, #24]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d00b      	beq.n	8013c48 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013c36:	699b      	ldr	r3, [r3, #24]
 8013c38:	687a      	ldr	r2, [r7, #4]
 8013c3a:	7c12      	ldrb	r2, [r2, #16]
 8013c3c:	f107 0108 	add.w	r1, r7, #8
 8013c40:	4610      	mov	r0, r2
 8013c42:	4798      	blx	r3
 8013c44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013c46:	e00f      	b.n	8013c68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013c48:	6839      	ldr	r1, [r7, #0]
 8013c4a:	6878      	ldr	r0, [r7, #4]
 8013c4c:	f000 fa30 	bl	80140b0 <USBD_CtlError>
            err++;
 8013c50:	7afb      	ldrb	r3, [r7, #11]
 8013c52:	3301      	adds	r3, #1
 8013c54:	72fb      	strb	r3, [r7, #11]
          break;
 8013c56:	e007      	b.n	8013c68 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8013c58:	6839      	ldr	r1, [r7, #0]
 8013c5a:	6878      	ldr	r0, [r7, #4]
 8013c5c:	f000 fa28 	bl	80140b0 <USBD_CtlError>
          err++;
 8013c60:	7afb      	ldrb	r3, [r7, #11]
 8013c62:	3301      	adds	r3, #1
 8013c64:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8013c66:	bf00      	nop
      }
      break;
 8013c68:	e037      	b.n	8013cda <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	7c1b      	ldrb	r3, [r3, #16]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d109      	bne.n	8013c86 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c7a:	f107 0208 	add.w	r2, r7, #8
 8013c7e:	4610      	mov	r0, r2
 8013c80:	4798      	blx	r3
 8013c82:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013c84:	e029      	b.n	8013cda <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013c86:	6839      	ldr	r1, [r7, #0]
 8013c88:	6878      	ldr	r0, [r7, #4]
 8013c8a:	f000 fa11 	bl	80140b0 <USBD_CtlError>
        err++;
 8013c8e:	7afb      	ldrb	r3, [r7, #11]
 8013c90:	3301      	adds	r3, #1
 8013c92:	72fb      	strb	r3, [r7, #11]
      break;
 8013c94:	e021      	b.n	8013cda <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	7c1b      	ldrb	r3, [r3, #16]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d10d      	bne.n	8013cba <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ca6:	f107 0208 	add.w	r2, r7, #8
 8013caa:	4610      	mov	r0, r2
 8013cac:	4798      	blx	r3
 8013cae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	3301      	adds	r3, #1
 8013cb4:	2207      	movs	r2, #7
 8013cb6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013cb8:	e00f      	b.n	8013cda <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013cba:	6839      	ldr	r1, [r7, #0]
 8013cbc:	6878      	ldr	r0, [r7, #4]
 8013cbe:	f000 f9f7 	bl	80140b0 <USBD_CtlError>
        err++;
 8013cc2:	7afb      	ldrb	r3, [r7, #11]
 8013cc4:	3301      	adds	r3, #1
 8013cc6:	72fb      	strb	r3, [r7, #11]
      break;
 8013cc8:	e007      	b.n	8013cda <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8013cca:	6839      	ldr	r1, [r7, #0]
 8013ccc:	6878      	ldr	r0, [r7, #4]
 8013cce:	f000 f9ef 	bl	80140b0 <USBD_CtlError>
      err++;
 8013cd2:	7afb      	ldrb	r3, [r7, #11]
 8013cd4:	3301      	adds	r3, #1
 8013cd6:	72fb      	strb	r3, [r7, #11]
      break;
 8013cd8:	bf00      	nop
  }

  if (err != 0U)
 8013cda:	7afb      	ldrb	r3, [r7, #11]
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d11e      	bne.n	8013d1e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8013ce0:	683b      	ldr	r3, [r7, #0]
 8013ce2:	88db      	ldrh	r3, [r3, #6]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d016      	beq.n	8013d16 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8013ce8:	893b      	ldrh	r3, [r7, #8]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d00e      	beq.n	8013d0c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8013cee:	683b      	ldr	r3, [r7, #0]
 8013cf0:	88da      	ldrh	r2, [r3, #6]
 8013cf2:	893b      	ldrh	r3, [r7, #8]
 8013cf4:	4293      	cmp	r3, r2
 8013cf6:	bf28      	it	cs
 8013cf8:	4613      	movcs	r3, r2
 8013cfa:	b29b      	uxth	r3, r3
 8013cfc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8013cfe:	893b      	ldrh	r3, [r7, #8]
 8013d00:	461a      	mov	r2, r3
 8013d02:	68f9      	ldr	r1, [r7, #12]
 8013d04:	6878      	ldr	r0, [r7, #4]
 8013d06:	f000 fa44 	bl	8014192 <USBD_CtlSendData>
 8013d0a:	e009      	b.n	8013d20 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8013d0c:	6839      	ldr	r1, [r7, #0]
 8013d0e:	6878      	ldr	r0, [r7, #4]
 8013d10:	f000 f9ce 	bl	80140b0 <USBD_CtlError>
 8013d14:	e004      	b.n	8013d20 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8013d16:	6878      	ldr	r0, [r7, #4]
 8013d18:	f000 fa95 	bl	8014246 <USBD_CtlSendStatus>
 8013d1c:	e000      	b.n	8013d20 <USBD_GetDescriptor+0x320>
    return;
 8013d1e:	bf00      	nop
  }
}
 8013d20:	3710      	adds	r7, #16
 8013d22:	46bd      	mov	sp, r7
 8013d24:	bd80      	pop	{r7, pc}
 8013d26:	bf00      	nop

08013d28 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b084      	sub	sp, #16
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
 8013d30:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013d32:	683b      	ldr	r3, [r7, #0]
 8013d34:	889b      	ldrh	r3, [r3, #4]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d131      	bne.n	8013d9e <USBD_SetAddress+0x76>
 8013d3a:	683b      	ldr	r3, [r7, #0]
 8013d3c:	88db      	ldrh	r3, [r3, #6]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d12d      	bne.n	8013d9e <USBD_SetAddress+0x76>
 8013d42:	683b      	ldr	r3, [r7, #0]
 8013d44:	885b      	ldrh	r3, [r3, #2]
 8013d46:	2b7f      	cmp	r3, #127	; 0x7f
 8013d48:	d829      	bhi.n	8013d9e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013d4a:	683b      	ldr	r3, [r7, #0]
 8013d4c:	885b      	ldrh	r3, [r3, #2]
 8013d4e:	b2db      	uxtb	r3, r3
 8013d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013d54:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d5c:	b2db      	uxtb	r3, r3
 8013d5e:	2b03      	cmp	r3, #3
 8013d60:	d104      	bne.n	8013d6c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8013d62:	6839      	ldr	r1, [r7, #0]
 8013d64:	6878      	ldr	r0, [r7, #4]
 8013d66:	f000 f9a3 	bl	80140b0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d6a:	e01d      	b.n	8013da8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	7bfa      	ldrb	r2, [r7, #15]
 8013d70:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013d74:	7bfb      	ldrb	r3, [r7, #15]
 8013d76:	4619      	mov	r1, r3
 8013d78:	6878      	ldr	r0, [r7, #4]
 8013d7a:	f000 ffbb 	bl	8014cf4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8013d7e:	6878      	ldr	r0, [r7, #4]
 8013d80:	f000 fa61 	bl	8014246 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013d84:	7bfb      	ldrb	r3, [r7, #15]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d004      	beq.n	8013d94 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	2202      	movs	r2, #2
 8013d8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d92:	e009      	b.n	8013da8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	2201      	movs	r2, #1
 8013d98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d9c:	e004      	b.n	8013da8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8013d9e:	6839      	ldr	r1, [r7, #0]
 8013da0:	6878      	ldr	r0, [r7, #4]
 8013da2:	f000 f985 	bl	80140b0 <USBD_CtlError>
  }
}
 8013da6:	bf00      	nop
 8013da8:	bf00      	nop
 8013daa:	3710      	adds	r7, #16
 8013dac:	46bd      	mov	sp, r7
 8013dae:	bd80      	pop	{r7, pc}

08013db0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b084      	sub	sp, #16
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]
 8013db8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013dba:	2300      	movs	r3, #0
 8013dbc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8013dbe:	683b      	ldr	r3, [r7, #0]
 8013dc0:	885b      	ldrh	r3, [r3, #2]
 8013dc2:	b2da      	uxtb	r2, r3
 8013dc4:	4b4c      	ldr	r3, [pc, #304]	; (8013ef8 <USBD_SetConfig+0x148>)
 8013dc6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8013dc8:	4b4b      	ldr	r3, [pc, #300]	; (8013ef8 <USBD_SetConfig+0x148>)
 8013dca:	781b      	ldrb	r3, [r3, #0]
 8013dcc:	2b01      	cmp	r3, #1
 8013dce:	d905      	bls.n	8013ddc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8013dd0:	6839      	ldr	r1, [r7, #0]
 8013dd2:	6878      	ldr	r0, [r7, #4]
 8013dd4:	f000 f96c 	bl	80140b0 <USBD_CtlError>
    return USBD_FAIL;
 8013dd8:	2303      	movs	r3, #3
 8013dda:	e088      	b.n	8013eee <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013de2:	b2db      	uxtb	r3, r3
 8013de4:	2b02      	cmp	r3, #2
 8013de6:	d002      	beq.n	8013dee <USBD_SetConfig+0x3e>
 8013de8:	2b03      	cmp	r3, #3
 8013dea:	d025      	beq.n	8013e38 <USBD_SetConfig+0x88>
 8013dec:	e071      	b.n	8013ed2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8013dee:	4b42      	ldr	r3, [pc, #264]	; (8013ef8 <USBD_SetConfig+0x148>)
 8013df0:	781b      	ldrb	r3, [r3, #0]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d01c      	beq.n	8013e30 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8013df6:	4b40      	ldr	r3, [pc, #256]	; (8013ef8 <USBD_SetConfig+0x148>)
 8013df8:	781b      	ldrb	r3, [r3, #0]
 8013dfa:	461a      	mov	r2, r3
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013e00:	4b3d      	ldr	r3, [pc, #244]	; (8013ef8 <USBD_SetConfig+0x148>)
 8013e02:	781b      	ldrb	r3, [r3, #0]
 8013e04:	4619      	mov	r1, r3
 8013e06:	6878      	ldr	r0, [r7, #4]
 8013e08:	f7ff f992 	bl	8013130 <USBD_SetClassConfig>
 8013e0c:	4603      	mov	r3, r0
 8013e0e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8013e10:	7bfb      	ldrb	r3, [r7, #15]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d004      	beq.n	8013e20 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8013e16:	6839      	ldr	r1, [r7, #0]
 8013e18:	6878      	ldr	r0, [r7, #4]
 8013e1a:	f000 f949 	bl	80140b0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013e1e:	e065      	b.n	8013eec <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8013e20:	6878      	ldr	r0, [r7, #4]
 8013e22:	f000 fa10 	bl	8014246 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	2203      	movs	r2, #3
 8013e2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8013e2e:	e05d      	b.n	8013eec <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8013e30:	6878      	ldr	r0, [r7, #4]
 8013e32:	f000 fa08 	bl	8014246 <USBD_CtlSendStatus>
      break;
 8013e36:	e059      	b.n	8013eec <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8013e38:	4b2f      	ldr	r3, [pc, #188]	; (8013ef8 <USBD_SetConfig+0x148>)
 8013e3a:	781b      	ldrb	r3, [r3, #0]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d112      	bne.n	8013e66 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	2202      	movs	r2, #2
 8013e44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8013e48:	4b2b      	ldr	r3, [pc, #172]	; (8013ef8 <USBD_SetConfig+0x148>)
 8013e4a:	781b      	ldrb	r3, [r3, #0]
 8013e4c:	461a      	mov	r2, r3
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013e52:	4b29      	ldr	r3, [pc, #164]	; (8013ef8 <USBD_SetConfig+0x148>)
 8013e54:	781b      	ldrb	r3, [r3, #0]
 8013e56:	4619      	mov	r1, r3
 8013e58:	6878      	ldr	r0, [r7, #4]
 8013e5a:	f7ff f985 	bl	8013168 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8013e5e:	6878      	ldr	r0, [r7, #4]
 8013e60:	f000 f9f1 	bl	8014246 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013e64:	e042      	b.n	8013eec <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8013e66:	4b24      	ldr	r3, [pc, #144]	; (8013ef8 <USBD_SetConfig+0x148>)
 8013e68:	781b      	ldrb	r3, [r3, #0]
 8013e6a:	461a      	mov	r2, r3
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	685b      	ldr	r3, [r3, #4]
 8013e70:	429a      	cmp	r2, r3
 8013e72:	d02a      	beq.n	8013eca <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	685b      	ldr	r3, [r3, #4]
 8013e78:	b2db      	uxtb	r3, r3
 8013e7a:	4619      	mov	r1, r3
 8013e7c:	6878      	ldr	r0, [r7, #4]
 8013e7e:	f7ff f973 	bl	8013168 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8013e82:	4b1d      	ldr	r3, [pc, #116]	; (8013ef8 <USBD_SetConfig+0x148>)
 8013e84:	781b      	ldrb	r3, [r3, #0]
 8013e86:	461a      	mov	r2, r3
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013e8c:	4b1a      	ldr	r3, [pc, #104]	; (8013ef8 <USBD_SetConfig+0x148>)
 8013e8e:	781b      	ldrb	r3, [r3, #0]
 8013e90:	4619      	mov	r1, r3
 8013e92:	6878      	ldr	r0, [r7, #4]
 8013e94:	f7ff f94c 	bl	8013130 <USBD_SetClassConfig>
 8013e98:	4603      	mov	r3, r0
 8013e9a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8013e9c:	7bfb      	ldrb	r3, [r7, #15]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d00f      	beq.n	8013ec2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8013ea2:	6839      	ldr	r1, [r7, #0]
 8013ea4:	6878      	ldr	r0, [r7, #4]
 8013ea6:	f000 f903 	bl	80140b0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	685b      	ldr	r3, [r3, #4]
 8013eae:	b2db      	uxtb	r3, r3
 8013eb0:	4619      	mov	r1, r3
 8013eb2:	6878      	ldr	r0, [r7, #4]
 8013eb4:	f7ff f958 	bl	8013168 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	2202      	movs	r2, #2
 8013ebc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8013ec0:	e014      	b.n	8013eec <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8013ec2:	6878      	ldr	r0, [r7, #4]
 8013ec4:	f000 f9bf 	bl	8014246 <USBD_CtlSendStatus>
      break;
 8013ec8:	e010      	b.n	8013eec <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8013eca:	6878      	ldr	r0, [r7, #4]
 8013ecc:	f000 f9bb 	bl	8014246 <USBD_CtlSendStatus>
      break;
 8013ed0:	e00c      	b.n	8013eec <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8013ed2:	6839      	ldr	r1, [r7, #0]
 8013ed4:	6878      	ldr	r0, [r7, #4]
 8013ed6:	f000 f8eb 	bl	80140b0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013eda:	4b07      	ldr	r3, [pc, #28]	; (8013ef8 <USBD_SetConfig+0x148>)
 8013edc:	781b      	ldrb	r3, [r3, #0]
 8013ede:	4619      	mov	r1, r3
 8013ee0:	6878      	ldr	r0, [r7, #4]
 8013ee2:	f7ff f941 	bl	8013168 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8013ee6:	2303      	movs	r3, #3
 8013ee8:	73fb      	strb	r3, [r7, #15]
      break;
 8013eea:	bf00      	nop
  }

  return ret;
 8013eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8013eee:	4618      	mov	r0, r3
 8013ef0:	3710      	adds	r7, #16
 8013ef2:	46bd      	mov	sp, r7
 8013ef4:	bd80      	pop	{r7, pc}
 8013ef6:	bf00      	nop
 8013ef8:	20000b58 	.word	0x20000b58

08013efc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b082      	sub	sp, #8
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	6078      	str	r0, [r7, #4]
 8013f04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8013f06:	683b      	ldr	r3, [r7, #0]
 8013f08:	88db      	ldrh	r3, [r3, #6]
 8013f0a:	2b01      	cmp	r3, #1
 8013f0c:	d004      	beq.n	8013f18 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8013f0e:	6839      	ldr	r1, [r7, #0]
 8013f10:	6878      	ldr	r0, [r7, #4]
 8013f12:	f000 f8cd 	bl	80140b0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8013f16:	e023      	b.n	8013f60 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f1e:	b2db      	uxtb	r3, r3
 8013f20:	2b02      	cmp	r3, #2
 8013f22:	dc02      	bgt.n	8013f2a <USBD_GetConfig+0x2e>
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	dc03      	bgt.n	8013f30 <USBD_GetConfig+0x34>
 8013f28:	e015      	b.n	8013f56 <USBD_GetConfig+0x5a>
 8013f2a:	2b03      	cmp	r3, #3
 8013f2c:	d00b      	beq.n	8013f46 <USBD_GetConfig+0x4a>
 8013f2e:	e012      	b.n	8013f56 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	2200      	movs	r2, #0
 8013f34:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	3308      	adds	r3, #8
 8013f3a:	2201      	movs	r2, #1
 8013f3c:	4619      	mov	r1, r3
 8013f3e:	6878      	ldr	r0, [r7, #4]
 8013f40:	f000 f927 	bl	8014192 <USBD_CtlSendData>
        break;
 8013f44:	e00c      	b.n	8013f60 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	3304      	adds	r3, #4
 8013f4a:	2201      	movs	r2, #1
 8013f4c:	4619      	mov	r1, r3
 8013f4e:	6878      	ldr	r0, [r7, #4]
 8013f50:	f000 f91f 	bl	8014192 <USBD_CtlSendData>
        break;
 8013f54:	e004      	b.n	8013f60 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8013f56:	6839      	ldr	r1, [r7, #0]
 8013f58:	6878      	ldr	r0, [r7, #4]
 8013f5a:	f000 f8a9 	bl	80140b0 <USBD_CtlError>
        break;
 8013f5e:	bf00      	nop
}
 8013f60:	bf00      	nop
 8013f62:	3708      	adds	r7, #8
 8013f64:	46bd      	mov	sp, r7
 8013f66:	bd80      	pop	{r7, pc}

08013f68 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b082      	sub	sp, #8
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	6078      	str	r0, [r7, #4]
 8013f70:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f78:	b2db      	uxtb	r3, r3
 8013f7a:	3b01      	subs	r3, #1
 8013f7c:	2b02      	cmp	r3, #2
 8013f7e:	d81e      	bhi.n	8013fbe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013f80:	683b      	ldr	r3, [r7, #0]
 8013f82:	88db      	ldrh	r3, [r3, #6]
 8013f84:	2b02      	cmp	r3, #2
 8013f86:	d004      	beq.n	8013f92 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8013f88:	6839      	ldr	r1, [r7, #0]
 8013f8a:	6878      	ldr	r0, [r7, #4]
 8013f8c:	f000 f890 	bl	80140b0 <USBD_CtlError>
        break;
 8013f90:	e01a      	b.n	8013fc8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	2201      	movs	r2, #1
 8013f96:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d005      	beq.n	8013fae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	68db      	ldr	r3, [r3, #12]
 8013fa6:	f043 0202 	orr.w	r2, r3, #2
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	330c      	adds	r3, #12
 8013fb2:	2202      	movs	r2, #2
 8013fb4:	4619      	mov	r1, r3
 8013fb6:	6878      	ldr	r0, [r7, #4]
 8013fb8:	f000 f8eb 	bl	8014192 <USBD_CtlSendData>
      break;
 8013fbc:	e004      	b.n	8013fc8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8013fbe:	6839      	ldr	r1, [r7, #0]
 8013fc0:	6878      	ldr	r0, [r7, #4]
 8013fc2:	f000 f875 	bl	80140b0 <USBD_CtlError>
      break;
 8013fc6:	bf00      	nop
  }
}
 8013fc8:	bf00      	nop
 8013fca:	3708      	adds	r7, #8
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	bd80      	pop	{r7, pc}

08013fd0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013fd0:	b580      	push	{r7, lr}
 8013fd2:	b082      	sub	sp, #8
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
 8013fd8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013fda:	683b      	ldr	r3, [r7, #0]
 8013fdc:	885b      	ldrh	r3, [r3, #2]
 8013fde:	2b01      	cmp	r3, #1
 8013fe0:	d106      	bne.n	8013ff0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	2201      	movs	r2, #1
 8013fe6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8013fea:	6878      	ldr	r0, [r7, #4]
 8013fec:	f000 f92b 	bl	8014246 <USBD_CtlSendStatus>
  }
}
 8013ff0:	bf00      	nop
 8013ff2:	3708      	adds	r7, #8
 8013ff4:	46bd      	mov	sp, r7
 8013ff6:	bd80      	pop	{r7, pc}

08013ff8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b082      	sub	sp, #8
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	6078      	str	r0, [r7, #4]
 8014000:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014008:	b2db      	uxtb	r3, r3
 801400a:	3b01      	subs	r3, #1
 801400c:	2b02      	cmp	r3, #2
 801400e:	d80b      	bhi.n	8014028 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014010:	683b      	ldr	r3, [r7, #0]
 8014012:	885b      	ldrh	r3, [r3, #2]
 8014014:	2b01      	cmp	r3, #1
 8014016:	d10c      	bne.n	8014032 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	2200      	movs	r2, #0
 801401c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014020:	6878      	ldr	r0, [r7, #4]
 8014022:	f000 f910 	bl	8014246 <USBD_CtlSendStatus>
      }
      break;
 8014026:	e004      	b.n	8014032 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014028:	6839      	ldr	r1, [r7, #0]
 801402a:	6878      	ldr	r0, [r7, #4]
 801402c:	f000 f840 	bl	80140b0 <USBD_CtlError>
      break;
 8014030:	e000      	b.n	8014034 <USBD_ClrFeature+0x3c>
      break;
 8014032:	bf00      	nop
  }
}
 8014034:	bf00      	nop
 8014036:	3708      	adds	r7, #8
 8014038:	46bd      	mov	sp, r7
 801403a:	bd80      	pop	{r7, pc}

0801403c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801403c:	b580      	push	{r7, lr}
 801403e:	b084      	sub	sp, #16
 8014040:	af00      	add	r7, sp, #0
 8014042:	6078      	str	r0, [r7, #4]
 8014044:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014046:	683b      	ldr	r3, [r7, #0]
 8014048:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	781a      	ldrb	r2, [r3, #0]
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	3301      	adds	r3, #1
 8014056:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	781a      	ldrb	r2, [r3, #0]
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	3301      	adds	r3, #1
 8014064:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014066:	68f8      	ldr	r0, [r7, #12]
 8014068:	f7ff fa92 	bl	8013590 <SWAPBYTE>
 801406c:	4603      	mov	r3, r0
 801406e:	461a      	mov	r2, r3
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	3301      	adds	r3, #1
 8014078:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	3301      	adds	r3, #1
 801407e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014080:	68f8      	ldr	r0, [r7, #12]
 8014082:	f7ff fa85 	bl	8013590 <SWAPBYTE>
 8014086:	4603      	mov	r3, r0
 8014088:	461a      	mov	r2, r3
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	3301      	adds	r3, #1
 8014092:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	3301      	adds	r3, #1
 8014098:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801409a:	68f8      	ldr	r0, [r7, #12]
 801409c:	f7ff fa78 	bl	8013590 <SWAPBYTE>
 80140a0:	4603      	mov	r3, r0
 80140a2:	461a      	mov	r2, r3
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	80da      	strh	r2, [r3, #6]
}
 80140a8:	bf00      	nop
 80140aa:	3710      	adds	r7, #16
 80140ac:	46bd      	mov	sp, r7
 80140ae:	bd80      	pop	{r7, pc}

080140b0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b082      	sub	sp, #8
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
 80140b8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80140ba:	2180      	movs	r1, #128	; 0x80
 80140bc:	6878      	ldr	r0, [r7, #4]
 80140be:	f000 fdaf 	bl	8014c20 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80140c2:	2100      	movs	r1, #0
 80140c4:	6878      	ldr	r0, [r7, #4]
 80140c6:	f000 fdab 	bl	8014c20 <USBD_LL_StallEP>
}
 80140ca:	bf00      	nop
 80140cc:	3708      	adds	r7, #8
 80140ce:	46bd      	mov	sp, r7
 80140d0:	bd80      	pop	{r7, pc}

080140d2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80140d2:	b580      	push	{r7, lr}
 80140d4:	b086      	sub	sp, #24
 80140d6:	af00      	add	r7, sp, #0
 80140d8:	60f8      	str	r0, [r7, #12]
 80140da:	60b9      	str	r1, [r7, #8]
 80140dc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80140de:	2300      	movs	r3, #0
 80140e0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d036      	beq.n	8014156 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80140ec:	6938      	ldr	r0, [r7, #16]
 80140ee:	f000 f836 	bl	801415e <USBD_GetLen>
 80140f2:	4603      	mov	r3, r0
 80140f4:	3301      	adds	r3, #1
 80140f6:	b29b      	uxth	r3, r3
 80140f8:	005b      	lsls	r3, r3, #1
 80140fa:	b29a      	uxth	r2, r3
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014100:	7dfb      	ldrb	r3, [r7, #23]
 8014102:	68ba      	ldr	r2, [r7, #8]
 8014104:	4413      	add	r3, r2
 8014106:	687a      	ldr	r2, [r7, #4]
 8014108:	7812      	ldrb	r2, [r2, #0]
 801410a:	701a      	strb	r2, [r3, #0]
  idx++;
 801410c:	7dfb      	ldrb	r3, [r7, #23]
 801410e:	3301      	adds	r3, #1
 8014110:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014112:	7dfb      	ldrb	r3, [r7, #23]
 8014114:	68ba      	ldr	r2, [r7, #8]
 8014116:	4413      	add	r3, r2
 8014118:	2203      	movs	r2, #3
 801411a:	701a      	strb	r2, [r3, #0]
  idx++;
 801411c:	7dfb      	ldrb	r3, [r7, #23]
 801411e:	3301      	adds	r3, #1
 8014120:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014122:	e013      	b.n	801414c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8014124:	7dfb      	ldrb	r3, [r7, #23]
 8014126:	68ba      	ldr	r2, [r7, #8]
 8014128:	4413      	add	r3, r2
 801412a:	693a      	ldr	r2, [r7, #16]
 801412c:	7812      	ldrb	r2, [r2, #0]
 801412e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014130:	693b      	ldr	r3, [r7, #16]
 8014132:	3301      	adds	r3, #1
 8014134:	613b      	str	r3, [r7, #16]
    idx++;
 8014136:	7dfb      	ldrb	r3, [r7, #23]
 8014138:	3301      	adds	r3, #1
 801413a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801413c:	7dfb      	ldrb	r3, [r7, #23]
 801413e:	68ba      	ldr	r2, [r7, #8]
 8014140:	4413      	add	r3, r2
 8014142:	2200      	movs	r2, #0
 8014144:	701a      	strb	r2, [r3, #0]
    idx++;
 8014146:	7dfb      	ldrb	r3, [r7, #23]
 8014148:	3301      	adds	r3, #1
 801414a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801414c:	693b      	ldr	r3, [r7, #16]
 801414e:	781b      	ldrb	r3, [r3, #0]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d1e7      	bne.n	8014124 <USBD_GetString+0x52>
 8014154:	e000      	b.n	8014158 <USBD_GetString+0x86>
    return;
 8014156:	bf00      	nop
  }
}
 8014158:	3718      	adds	r7, #24
 801415a:	46bd      	mov	sp, r7
 801415c:	bd80      	pop	{r7, pc}

0801415e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801415e:	b480      	push	{r7}
 8014160:	b085      	sub	sp, #20
 8014162:	af00      	add	r7, sp, #0
 8014164:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014166:	2300      	movs	r3, #0
 8014168:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801416e:	e005      	b.n	801417c <USBD_GetLen+0x1e>
  {
    len++;
 8014170:	7bfb      	ldrb	r3, [r7, #15]
 8014172:	3301      	adds	r3, #1
 8014174:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014176:	68bb      	ldr	r3, [r7, #8]
 8014178:	3301      	adds	r3, #1
 801417a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801417c:	68bb      	ldr	r3, [r7, #8]
 801417e:	781b      	ldrb	r3, [r3, #0]
 8014180:	2b00      	cmp	r3, #0
 8014182:	d1f5      	bne.n	8014170 <USBD_GetLen+0x12>
  }

  return len;
 8014184:	7bfb      	ldrb	r3, [r7, #15]
}
 8014186:	4618      	mov	r0, r3
 8014188:	3714      	adds	r7, #20
 801418a:	46bd      	mov	sp, r7
 801418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014190:	4770      	bx	lr

08014192 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014192:	b580      	push	{r7, lr}
 8014194:	b084      	sub	sp, #16
 8014196:	af00      	add	r7, sp, #0
 8014198:	60f8      	str	r0, [r7, #12]
 801419a:	60b9      	str	r1, [r7, #8]
 801419c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	2202      	movs	r2, #2
 80141a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	687a      	ldr	r2, [r7, #4]
 80141aa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	687a      	ldr	r2, [r7, #4]
 80141b0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	68ba      	ldr	r2, [r7, #8]
 80141b6:	2100      	movs	r1, #0
 80141b8:	68f8      	ldr	r0, [r7, #12]
 80141ba:	f000 fdba 	bl	8014d32 <USBD_LL_Transmit>

  return USBD_OK;
 80141be:	2300      	movs	r3, #0
}
 80141c0:	4618      	mov	r0, r3
 80141c2:	3710      	adds	r7, #16
 80141c4:	46bd      	mov	sp, r7
 80141c6:	bd80      	pop	{r7, pc}

080141c8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80141c8:	b580      	push	{r7, lr}
 80141ca:	b084      	sub	sp, #16
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	60f8      	str	r0, [r7, #12]
 80141d0:	60b9      	str	r1, [r7, #8]
 80141d2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	68ba      	ldr	r2, [r7, #8]
 80141d8:	2100      	movs	r1, #0
 80141da:	68f8      	ldr	r0, [r7, #12]
 80141dc:	f000 fda9 	bl	8014d32 <USBD_LL_Transmit>

  return USBD_OK;
 80141e0:	2300      	movs	r3, #0
}
 80141e2:	4618      	mov	r0, r3
 80141e4:	3710      	adds	r7, #16
 80141e6:	46bd      	mov	sp, r7
 80141e8:	bd80      	pop	{r7, pc}

080141ea <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80141ea:	b580      	push	{r7, lr}
 80141ec:	b084      	sub	sp, #16
 80141ee:	af00      	add	r7, sp, #0
 80141f0:	60f8      	str	r0, [r7, #12]
 80141f2:	60b9      	str	r1, [r7, #8]
 80141f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	2203      	movs	r2, #3
 80141fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	687a      	ldr	r2, [r7, #4]
 8014202:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	687a      	ldr	r2, [r7, #4]
 801420a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	68ba      	ldr	r2, [r7, #8]
 8014212:	2100      	movs	r1, #0
 8014214:	68f8      	ldr	r0, [r7, #12]
 8014216:	f000 fdad 	bl	8014d74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801421a:	2300      	movs	r3, #0
}
 801421c:	4618      	mov	r0, r3
 801421e:	3710      	adds	r7, #16
 8014220:	46bd      	mov	sp, r7
 8014222:	bd80      	pop	{r7, pc}

08014224 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b084      	sub	sp, #16
 8014228:	af00      	add	r7, sp, #0
 801422a:	60f8      	str	r0, [r7, #12]
 801422c:	60b9      	str	r1, [r7, #8]
 801422e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	68ba      	ldr	r2, [r7, #8]
 8014234:	2100      	movs	r1, #0
 8014236:	68f8      	ldr	r0, [r7, #12]
 8014238:	f000 fd9c 	bl	8014d74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801423c:	2300      	movs	r3, #0
}
 801423e:	4618      	mov	r0, r3
 8014240:	3710      	adds	r7, #16
 8014242:	46bd      	mov	sp, r7
 8014244:	bd80      	pop	{r7, pc}

08014246 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014246:	b580      	push	{r7, lr}
 8014248:	b082      	sub	sp, #8
 801424a:	af00      	add	r7, sp, #0
 801424c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	2204      	movs	r2, #4
 8014252:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014256:	2300      	movs	r3, #0
 8014258:	2200      	movs	r2, #0
 801425a:	2100      	movs	r1, #0
 801425c:	6878      	ldr	r0, [r7, #4]
 801425e:	f000 fd68 	bl	8014d32 <USBD_LL_Transmit>

  return USBD_OK;
 8014262:	2300      	movs	r3, #0
}
 8014264:	4618      	mov	r0, r3
 8014266:	3708      	adds	r7, #8
 8014268:	46bd      	mov	sp, r7
 801426a:	bd80      	pop	{r7, pc}

0801426c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801426c:	b580      	push	{r7, lr}
 801426e:	b082      	sub	sp, #8
 8014270:	af00      	add	r7, sp, #0
 8014272:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	2205      	movs	r2, #5
 8014278:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801427c:	2300      	movs	r3, #0
 801427e:	2200      	movs	r2, #0
 8014280:	2100      	movs	r1, #0
 8014282:	6878      	ldr	r0, [r7, #4]
 8014284:	f000 fd76 	bl	8014d74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014288:	2300      	movs	r3, #0
}
 801428a:	4618      	mov	r0, r3
 801428c:	3708      	adds	r7, #8
 801428e:	46bd      	mov	sp, r7
 8014290:	bd80      	pop	{r7, pc}
	...

08014294 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8014294:	b580      	push	{r7, lr}
 8014296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8014298:	2200      	movs	r2, #0
 801429a:	4912      	ldr	r1, [pc, #72]	; (80142e4 <MX_USB_Device_Init+0x50>)
 801429c:	4812      	ldr	r0, [pc, #72]	; (80142e8 <MX_USB_Device_Init+0x54>)
 801429e:	f7fe fed9 	bl	8013054 <USBD_Init>
 80142a2:	4603      	mov	r3, r0
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d001      	beq.n	80142ac <MX_USB_Device_Init+0x18>
    Error_Handler();
 80142a8:	f7f4 fb8c 	bl	80089c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80142ac:	490f      	ldr	r1, [pc, #60]	; (80142ec <MX_USB_Device_Init+0x58>)
 80142ae:	480e      	ldr	r0, [pc, #56]	; (80142e8 <MX_USB_Device_Init+0x54>)
 80142b0:	f7fe ff00 	bl	80130b4 <USBD_RegisterClass>
 80142b4:	4603      	mov	r3, r0
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d001      	beq.n	80142be <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80142ba:	f7f4 fb83 	bl	80089c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80142be:	490c      	ldr	r1, [pc, #48]	; (80142f0 <MX_USB_Device_Init+0x5c>)
 80142c0:	4809      	ldr	r0, [pc, #36]	; (80142e8 <MX_USB_Device_Init+0x54>)
 80142c2:	f7fe fe51 	bl	8012f68 <USBD_CDC_RegisterInterface>
 80142c6:	4603      	mov	r3, r0
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d001      	beq.n	80142d0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80142cc:	f7f4 fb7a 	bl	80089c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80142d0:	4805      	ldr	r0, [pc, #20]	; (80142e8 <MX_USB_Device_Init+0x54>)
 80142d2:	f7fe ff16 	bl	8013102 <USBD_Start>
 80142d6:	4603      	mov	r3, r0
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d001      	beq.n	80142e0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80142dc:	f7f4 fb72 	bl	80089c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80142e0:	bf00      	nop
 80142e2:	bd80      	pop	{r7, pc}
 80142e4:	20000144 	.word	0x20000144
 80142e8:	20000b5c 	.word	0x20000b5c
 80142ec:	20000024 	.word	0x20000024
 80142f0:	20000130 	.word	0x20000130

080142f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80142f8:	2200      	movs	r2, #0
 80142fa:	4905      	ldr	r1, [pc, #20]	; (8014310 <CDC_Init_FS+0x1c>)
 80142fc:	4805      	ldr	r0, [pc, #20]	; (8014314 <CDC_Init_FS+0x20>)
 80142fe:	f7fe fe48 	bl	8012f92 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014302:	4905      	ldr	r1, [pc, #20]	; (8014318 <CDC_Init_FS+0x24>)
 8014304:	4803      	ldr	r0, [pc, #12]	; (8014314 <CDC_Init_FS+0x20>)
 8014306:	f7fe fe62 	bl	8012fce <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801430a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801430c:	4618      	mov	r0, r3
 801430e:	bd80      	pop	{r7, pc}
 8014310:	20002658 	.word	0x20002658
 8014314:	20000b5c 	.word	0x20000b5c
 8014318:	20001e58 	.word	0x20001e58

0801431c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801431c:	b480      	push	{r7}
 801431e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014320:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014322:	4618      	mov	r0, r3
 8014324:	46bd      	mov	sp, r7
 8014326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801432a:	4770      	bx	lr

0801432c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801432c:	b480      	push	{r7}
 801432e:	b085      	sub	sp, #20
 8014330:	af00      	add	r7, sp, #0
 8014332:	4603      	mov	r3, r0
 8014334:	6039      	str	r1, [r7, #0]
 8014336:	71fb      	strb	r3, [r7, #7]
 8014338:	4613      	mov	r3, r2
 801433a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef *)pbuf;
 801433c:	683b      	ldr	r3, [r7, #0]
 801433e:	60fb      	str	r3, [r7, #12]

  switch(cmd)
 8014340:	79fb      	ldrb	r3, [r7, #7]
 8014342:	2b23      	cmp	r3, #35	; 0x23
 8014344:	f200 80af 	bhi.w	80144a6 <CDC_Control_FS+0x17a>
 8014348:	a201      	add	r2, pc, #4	; (adr r2, 8014350 <CDC_Control_FS+0x24>)
 801434a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801434e:	bf00      	nop
 8014350:	080144a7 	.word	0x080144a7
 8014354:	080144a7 	.word	0x080144a7
 8014358:	080144a7 	.word	0x080144a7
 801435c:	080144a7 	.word	0x080144a7
 8014360:	080144a7 	.word	0x080144a7
 8014364:	080144a7 	.word	0x080144a7
 8014368:	080144a7 	.word	0x080144a7
 801436c:	080144a7 	.word	0x080144a7
 8014370:	080144a7 	.word	0x080144a7
 8014374:	080144a7 	.word	0x080144a7
 8014378:	080144a7 	.word	0x080144a7
 801437c:	080144a7 	.word	0x080144a7
 8014380:	080144a7 	.word	0x080144a7
 8014384:	080144a7 	.word	0x080144a7
 8014388:	080144a7 	.word	0x080144a7
 801438c:	080144a7 	.word	0x080144a7
 8014390:	080144a7 	.word	0x080144a7
 8014394:	080144a7 	.word	0x080144a7
 8014398:	080144a7 	.word	0x080144a7
 801439c:	080144a7 	.word	0x080144a7
 80143a0:	080144a7 	.word	0x080144a7
 80143a4:	080144a7 	.word	0x080144a7
 80143a8:	080144a7 	.word	0x080144a7
 80143ac:	080144a7 	.word	0x080144a7
 80143b0:	080144a7 	.word	0x080144a7
 80143b4:	080144a7 	.word	0x080144a7
 80143b8:	080144a7 	.word	0x080144a7
 80143bc:	080144a7 	.word	0x080144a7
 80143c0:	080144a7 	.word	0x080144a7
 80143c4:	080144a7 	.word	0x080144a7
 80143c8:	080144a7 	.word	0x080144a7
 80143cc:	080144a7 	.word	0x080144a7
 80143d0:	080143e1 	.word	0x080143e1
 80143d4:	0801443b 	.word	0x0801443b
 80143d8:	0801448f 	.word	0x0801448f
 80143dc:	080144a7 	.word	0x080144a7
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate   = (uint32_t)(pbuf[0]);
 80143e0:	683b      	ldr	r3, [r7, #0]
 80143e2:	781b      	ldrb	r3, [r3, #0]
 80143e4:	461a      	mov	r2, r3
 80143e6:	4b34      	ldr	r3, [pc, #208]	; (80144b8 <CDC_Control_FS+0x18c>)
 80143e8:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[1]<<8);
 80143ea:	4b33      	ldr	r3, [pc, #204]	; (80144b8 <CDC_Control_FS+0x18c>)
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	683a      	ldr	r2, [r7, #0]
 80143f0:	3201      	adds	r2, #1
 80143f2:	7812      	ldrb	r2, [r2, #0]
 80143f4:	0212      	lsls	r2, r2, #8
 80143f6:	4313      	orrs	r3, r2
 80143f8:	4a2f      	ldr	r2, [pc, #188]	; (80144b8 <CDC_Control_FS+0x18c>)
 80143fa:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[2]<<16);
 80143fc:	4b2e      	ldr	r3, [pc, #184]	; (80144b8 <CDC_Control_FS+0x18c>)
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	683a      	ldr	r2, [r7, #0]
 8014402:	3202      	adds	r2, #2
 8014404:	7812      	ldrb	r2, [r2, #0]
 8014406:	0412      	lsls	r2, r2, #16
 8014408:	4313      	orrs	r3, r2
 801440a:	4a2b      	ldr	r2, [pc, #172]	; (80144b8 <CDC_Control_FS+0x18c>)
 801440c:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[3]<<24);
 801440e:	4b2a      	ldr	r3, [pc, #168]	; (80144b8 <CDC_Control_FS+0x18c>)
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	683a      	ldr	r2, [r7, #0]
 8014414:	3203      	adds	r2, #3
 8014416:	7812      	ldrb	r2, [r2, #0]
 8014418:	0612      	lsls	r2, r2, #24
 801441a:	4313      	orrs	r3, r2
 801441c:	4a26      	ldr	r2, [pc, #152]	; (80144b8 <CDC_Control_FS+0x18c>)
 801441e:	6013      	str	r3, [r2, #0]
      LineCoding.format    = pbuf[4];
 8014420:	683b      	ldr	r3, [r7, #0]
 8014422:	791a      	ldrb	r2, [r3, #4]
 8014424:	4b24      	ldr	r3, [pc, #144]	; (80144b8 <CDC_Control_FS+0x18c>)
 8014426:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype= pbuf[5];
 8014428:	683b      	ldr	r3, [r7, #0]
 801442a:	795a      	ldrb	r2, [r3, #5]
 801442c:	4b22      	ldr	r3, [pc, #136]	; (80144b8 <CDC_Control_FS+0x18c>)
 801442e:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype  = pbuf[6];
 8014430:	683b      	ldr	r3, [r7, #0]
 8014432:	799a      	ldrb	r2, [r3, #6]
 8014434:	4b20      	ldr	r3, [pc, #128]	; (80144b8 <CDC_Control_FS+0x18c>)
 8014436:	719a      	strb	r2, [r3, #6]

    break;
 8014438:	e036      	b.n	80144a8 <CDC_Control_FS+0x17c>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 801443a:	4b1f      	ldr	r3, [pc, #124]	; (80144b8 <CDC_Control_FS+0x18c>)
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	b2da      	uxtb	r2, r3
 8014440:	683b      	ldr	r3, [r7, #0]
 8014442:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 8014444:	4b1c      	ldr	r3, [pc, #112]	; (80144b8 <CDC_Control_FS+0x18c>)
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	0a1a      	lsrs	r2, r3, #8
 801444a:	683b      	ldr	r3, [r7, #0]
 801444c:	3301      	adds	r3, #1
 801444e:	b2d2      	uxtb	r2, r2
 8014450:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 8014452:	4b19      	ldr	r3, [pc, #100]	; (80144b8 <CDC_Control_FS+0x18c>)
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	0c1a      	lsrs	r2, r3, #16
 8014458:	683b      	ldr	r3, [r7, #0]
 801445a:	3302      	adds	r3, #2
 801445c:	b2d2      	uxtb	r2, r2
 801445e:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 8014460:	4b15      	ldr	r3, [pc, #84]	; (80144b8 <CDC_Control_FS+0x18c>)
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	0e1a      	lsrs	r2, r3, #24
 8014466:	683b      	ldr	r3, [r7, #0]
 8014468:	3303      	adds	r3, #3
 801446a:	b2d2      	uxtb	r2, r2
 801446c:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 801446e:	683b      	ldr	r3, [r7, #0]
 8014470:	3304      	adds	r3, #4
 8014472:	4a11      	ldr	r2, [pc, #68]	; (80144b8 <CDC_Control_FS+0x18c>)
 8014474:	7912      	ldrb	r2, [r2, #4]
 8014476:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 8014478:	683b      	ldr	r3, [r7, #0]
 801447a:	3305      	adds	r3, #5
 801447c:	4a0e      	ldr	r2, [pc, #56]	; (80144b8 <CDC_Control_FS+0x18c>)
 801447e:	7952      	ldrb	r2, [r2, #5]
 8014480:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 8014482:	683b      	ldr	r3, [r7, #0]
 8014484:	3306      	adds	r3, #6
 8014486:	4a0c      	ldr	r2, [pc, #48]	; (80144b8 <CDC_Control_FS+0x18c>)
 8014488:	7992      	ldrb	r2, [r2, #6]
 801448a:	701a      	strb	r2, [r3, #0]

    break;
 801448c:	e00c      	b.n	80144a8 <CDC_Control_FS+0x17c>

    case CDC_SET_CONTROL_LINE_STATE:
      is_opened = req->wValue & 0x01;   // 0 bit: DTR, 1 bit: RTS
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	885b      	ldrh	r3, [r3, #2]
 8014492:	f003 0301 	and.w	r3, r3, #1
 8014496:	2b00      	cmp	r3, #0
 8014498:	bf14      	ite	ne
 801449a:	2301      	movne	r3, #1
 801449c:	2300      	moveq	r3, #0
 801449e:	b2da      	uxtb	r2, r3
 80144a0:	4b06      	ldr	r3, [pc, #24]	; (80144bc <CDC_Control_FS+0x190>)
 80144a2:	701a      	strb	r2, [r3, #0]

    break;
 80144a4:	e000      	b.n	80144a8 <CDC_Control_FS+0x17c>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80144a6:	bf00      	nop
  }

  return (USBD_OK);
 80144a8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80144aa:	4618      	mov	r0, r3
 80144ac:	3714      	adds	r7, #20
 80144ae:	46bd      	mov	sp, r7
 80144b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b4:	4770      	bx	lr
 80144b6:	bf00      	nop
 80144b8:	20000128 	.word	0x20000128
 80144bc:	20001e54 	.word	0x20001e54

080144c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80144c0:	b590      	push	{r4, r7, lr}
 80144c2:	b085      	sub	sp, #20
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	6078      	str	r0, [r7, #4]
 80144c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  qbufferWrite(&q_rx, Buf, *Len);
 80144ca:	683b      	ldr	r3, [r7, #0]
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	461a      	mov	r2, r3
 80144d0:	6879      	ldr	r1, [r7, #4]
 80144d2:	480f      	ldr	r0, [pc, #60]	; (8014510 <CDC_Receive_FS+0x50>)
 80144d4:	f7f4 fc03 	bl	8008cde <qbufferWrite>


  uint32_t buf_len;

  buf_len = (q_rx.len - qbufferAvailable(&q_rx)) - 1;
 80144d8:	4b0d      	ldr	r3, [pc, #52]	; (8014510 <CDC_Receive_FS+0x50>)
 80144da:	689c      	ldr	r4, [r3, #8]
 80144dc:	480c      	ldr	r0, [pc, #48]	; (8014510 <CDC_Receive_FS+0x50>)
 80144de:	f7f4 fcb2 	bl	8008e46 <qbufferAvailable>
 80144e2:	4603      	mov	r3, r0
 80144e4:	1ae3      	subs	r3, r4, r3
 80144e6:	3b01      	subs	r3, #1
 80144e8:	60fb      	str	r3, [r7, #12]

  if (buf_len >= CDC_DATA_FS_MAX_PACKET_SIZE)
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	2b3f      	cmp	r3, #63	; 0x3f
 80144ee:	d907      	bls.n	8014500 <CDC_Receive_FS+0x40>
  {
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80144f0:	6879      	ldr	r1, [r7, #4]
 80144f2:	4808      	ldr	r0, [pc, #32]	; (8014514 <CDC_Receive_FS+0x54>)
 80144f4:	f7fe fd6b 	bl	8012fce <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80144f8:	4806      	ldr	r0, [pc, #24]	; (8014514 <CDC_Receive_FS+0x54>)
 80144fa:	f7fe fd81 	bl	8013000 <USBD_CDC_ReceivePacket>
 80144fe:	e002      	b.n	8014506 <CDC_Receive_FS+0x46>
  }
  else
  {
    is_rx_full = true;
 8014500:	4b05      	ldr	r3, [pc, #20]	; (8014518 <CDC_Receive_FS+0x58>)
 8014502:	2201      	movs	r2, #1
 8014504:	701a      	strb	r2, [r3, #0]
  }

    return (USBD_OK);
 8014506:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014508:	4618      	mov	r0, r3
 801450a:	3714      	adds	r7, #20
 801450c:	46bd      	mov	sp, r7
 801450e:	bd90      	pop	{r4, r7, pc}
 8014510:	20000e2c 	.word	0x20000e2c
 8014514:	20000b5c 	.word	0x20000b5c
 8014518:	20001e55 	.word	0x20001e55

0801451c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801451c:	b480      	push	{r7}
 801451e:	b087      	sub	sp, #28
 8014520:	af00      	add	r7, sp, #0
 8014522:	60f8      	str	r0, [r7, #12]
 8014524:	60b9      	str	r1, [r7, #8]
 8014526:	4613      	mov	r3, r2
 8014528:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801452a:	2300      	movs	r3, #0
 801452c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801452e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014532:	4618      	mov	r0, r3
 8014534:	371c      	adds	r7, #28
 8014536:	46bd      	mov	sp, r7
 8014538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801453c:	4770      	bx	lr
	...

08014540 <cdcIfInit>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
bool cdcIfInit(void)
{
 8014540:	b580      	push	{r7, lr}
 8014542:	af00      	add	r7, sp, #0
  is_opened = false;
 8014544:	4b08      	ldr	r3, [pc, #32]	; (8014568 <cdcIfInit+0x28>)
 8014546:	2200      	movs	r2, #0
 8014548:	701a      	strb	r2, [r3, #0]
  qbufferCreate(&q_rx, q_rx_buf, 2048);
 801454a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801454e:	4907      	ldr	r1, [pc, #28]	; (801456c <cdcIfInit+0x2c>)
 8014550:	4807      	ldr	r0, [pc, #28]	; (8014570 <cdcIfInit+0x30>)
 8014552:	f7f4 fba6 	bl	8008ca2 <qbufferCreate>
  qbufferCreate(&q_tx, q_tx_buf, 2048);
 8014556:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801455a:	4906      	ldr	r1, [pc, #24]	; (8014574 <cdcIfInit+0x34>)
 801455c:	4806      	ldr	r0, [pc, #24]	; (8014578 <cdcIfInit+0x38>)
 801455e:	f7f4 fba0 	bl	8008ca2 <qbufferCreate>

  return true;
 8014562:	2301      	movs	r3, #1
}
 8014564:	4618      	mov	r0, r3
 8014566:	bd80      	pop	{r7, pc}
 8014568:	20001e54 	.word	0x20001e54
 801456c:	20000e54 	.word	0x20000e54
 8014570:	20000e2c 	.word	0x20000e2c
 8014574:	20001654 	.word	0x20001654
 8014578:	20000e40 	.word	0x20000e40

0801457c <cdcIfAvailable>:

uint32_t cdcIfAvailable(void)
{
 801457c:	b580      	push	{r7, lr}
 801457e:	af00      	add	r7, sp, #0
  return qbufferAvailable(&q_rx);
 8014580:	4802      	ldr	r0, [pc, #8]	; (801458c <cdcIfAvailable+0x10>)
 8014582:	f7f4 fc60 	bl	8008e46 <qbufferAvailable>
 8014586:	4603      	mov	r3, r0
}
 8014588:	4618      	mov	r0, r3
 801458a:	bd80      	pop	{r7, pc}
 801458c:	20000e2c 	.word	0x20000e2c

08014590 <cdcIfRead>:

uint8_t cdcIfRead(void)
{
 8014590:	b580      	push	{r7, lr}
 8014592:	b082      	sub	sp, #8
 8014594:	af00      	add	r7, sp, #0
  uint8_t ret = 0;
 8014596:	2300      	movs	r3, #0
 8014598:	71fb      	strb	r3, [r7, #7]

  qbufferRead(&q_rx, &ret, 1);
 801459a:	1dfb      	adds	r3, r7, #7
 801459c:	2201      	movs	r2, #1
 801459e:	4619      	mov	r1, r3
 80145a0:	4803      	ldr	r0, [pc, #12]	; (80145b0 <cdcIfRead+0x20>)
 80145a2:	f7f4 fbf8 	bl	8008d96 <qbufferRead>

  return ret;
 80145a6:	79fb      	ldrb	r3, [r7, #7]
}
 80145a8:	4618      	mov	r0, r3
 80145aa:	3708      	adds	r7, #8
 80145ac:	46bd      	mov	sp, r7
 80145ae:	bd80      	pop	{r7, pc}
 80145b0:	20000e2c 	.word	0x20000e2c

080145b4 <cdcIfWrite>:

uint32_t cdcIfWrite(uint8_t *p_data, uint32_t length)
{
 80145b4:	b590      	push	{r4, r7, lr}
 80145b6:	b087      	sub	sp, #28
 80145b8:	af00      	add	r7, sp, #0
 80145ba:	6078      	str	r0, [r7, #4]
 80145bc:	6039      	str	r1, [r7, #0]
  uint32_t tx_len;
  uint32_t buf_len;
  uint32_t sent_len;


  if (cdcIfIsConnected() != true) return 0;
 80145be:	f000 f84f 	bl	8014660 <cdcIfIsConnected>
 80145c2:	4603      	mov	r3, r0
 80145c4:	f083 0301 	eor.w	r3, r3, #1
 80145c8:	b2db      	uxtb	r3, r3
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d001      	beq.n	80145d2 <cdcIfWrite+0x1e>
 80145ce:	2300      	movs	r3, #0
 80145d0:	e03f      	b.n	8014652 <cdcIfWrite+0x9e>


  sent_len = 0;
 80145d2:	2300      	movs	r3, #0
 80145d4:	613b      	str	r3, [r7, #16]

  pre_time = HAL_GetTick();
 80145d6:	f7f6 faaf 	bl	800ab38 <HAL_GetTick>
 80145da:	60f8      	str	r0, [r7, #12]
  while(sent_len < length)
 80145dc:	e030      	b.n	8014640 <cdcIfWrite+0x8c>
  {
    buf_len = (q_tx.len - qbufferAvailable(&q_tx)) - 1;
 80145de:	4b1f      	ldr	r3, [pc, #124]	; (801465c <cdcIfWrite+0xa8>)
 80145e0:	689c      	ldr	r4, [r3, #8]
 80145e2:	481e      	ldr	r0, [pc, #120]	; (801465c <cdcIfWrite+0xa8>)
 80145e4:	f7f4 fc2f 	bl	8008e46 <qbufferAvailable>
 80145e8:	4603      	mov	r3, r0
 80145ea:	1ae3      	subs	r3, r4, r3
 80145ec:	3b01      	subs	r3, #1
 80145ee:	60bb      	str	r3, [r7, #8]
    tx_len = length;
 80145f0:	683b      	ldr	r3, [r7, #0]
 80145f2:	617b      	str	r3, [r7, #20]

    if (tx_len > buf_len)
 80145f4:	697a      	ldr	r2, [r7, #20]
 80145f6:	68bb      	ldr	r3, [r7, #8]
 80145f8:	429a      	cmp	r2, r3
 80145fa:	d901      	bls.n	8014600 <cdcIfWrite+0x4c>
    {
      tx_len = buf_len;
 80145fc:	68bb      	ldr	r3, [r7, #8]
 80145fe:	617b      	str	r3, [r7, #20]
    }

    if (tx_len > 0)
 8014600:	697b      	ldr	r3, [r7, #20]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d00c      	beq.n	8014620 <cdcIfWrite+0x6c>
    {
      qbufferWrite(&q_tx, p_data, tx_len);
 8014606:	697a      	ldr	r2, [r7, #20]
 8014608:	6879      	ldr	r1, [r7, #4]
 801460a:	4814      	ldr	r0, [pc, #80]	; (801465c <cdcIfWrite+0xa8>)
 801460c:	f7f4 fb67 	bl	8008cde <qbufferWrite>
      p_data += tx_len;
 8014610:	687a      	ldr	r2, [r7, #4]
 8014612:	697b      	ldr	r3, [r7, #20]
 8014614:	4413      	add	r3, r2
 8014616:	607b      	str	r3, [r7, #4]
      sent_len += tx_len;
 8014618:	693a      	ldr	r2, [r7, #16]
 801461a:	697b      	ldr	r3, [r7, #20]
 801461c:	4413      	add	r3, r2
 801461e:	613b      	str	r3, [r7, #16]
    }

    if (cdcIfIsConnected() != true)
 8014620:	f000 f81e 	bl	8014660 <cdcIfIsConnected>
 8014624:	4603      	mov	r3, r0
 8014626:	f083 0301 	eor.w	r3, r3, #1
 801462a:	b2db      	uxtb	r3, r3
 801462c:	2b00      	cmp	r3, #0
 801462e:	d10c      	bne.n	801464a <cdcIfWrite+0x96>
    {
      break;
    }

    if (millis()-pre_time >= 100)
 8014630:	f7f4 f967 	bl	8008902 <millis>
 8014634:	4603      	mov	r3, r0
 8014636:	461a      	mov	r2, r3
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	1ad3      	subs	r3, r2, r3
 801463c:	2b63      	cmp	r3, #99	; 0x63
 801463e:	d806      	bhi.n	801464e <cdcIfWrite+0x9a>
  while(sent_len < length)
 8014640:	693a      	ldr	r2, [r7, #16]
 8014642:	683b      	ldr	r3, [r7, #0]
 8014644:	429a      	cmp	r2, r3
 8014646:	d3ca      	bcc.n	80145de <cdcIfWrite+0x2a>
 8014648:	e002      	b.n	8014650 <cdcIfWrite+0x9c>
      break;
 801464a:	bf00      	nop
 801464c:	e000      	b.n	8014650 <cdcIfWrite+0x9c>
    {
      break;
 801464e:	bf00      	nop
    }
  }

  return sent_len;
 8014650:	693b      	ldr	r3, [r7, #16]
}
 8014652:	4618      	mov	r0, r3
 8014654:	371c      	adds	r7, #28
 8014656:	46bd      	mov	sp, r7
 8014658:	bd90      	pop	{r4, r7, pc}
 801465a:	bf00      	nop
 801465c:	20000e40 	.word	0x20000e40

08014660 <cdcIfIsConnected>:
{
  return LineCoding.bitrate;
}

bool cdcIfIsConnected(void)
{
 8014660:	b480      	push	{r7}
 8014662:	af00      	add	r7, sp, #0
  if (hUsbDeviceFS.pClassData == NULL)
 8014664:	4b11      	ldr	r3, [pc, #68]	; (80146ac <cdcIfIsConnected+0x4c>)
 8014666:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801466a:	2b00      	cmp	r3, #0
 801466c:	d101      	bne.n	8014672 <cdcIfIsConnected+0x12>
  {
    return false;
 801466e:	2300      	movs	r3, #0
 8014670:	e017      	b.n	80146a2 <cdcIfIsConnected+0x42>
  }
  if (is_opened == false)
 8014672:	4b0f      	ldr	r3, [pc, #60]	; (80146b0 <cdcIfIsConnected+0x50>)
 8014674:	781b      	ldrb	r3, [r3, #0]
 8014676:	f083 0301 	eor.w	r3, r3, #1
 801467a:	b2db      	uxtb	r3, r3
 801467c:	2b00      	cmp	r3, #0
 801467e:	d001      	beq.n	8014684 <cdcIfIsConnected+0x24>
  {
    return false;
 8014680:	2300      	movs	r3, #0
 8014682:	e00e      	b.n	80146a2 <cdcIfIsConnected+0x42>
  }
  if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 8014684:	4b09      	ldr	r3, [pc, #36]	; (80146ac <cdcIfIsConnected+0x4c>)
 8014686:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801468a:	b2db      	uxtb	r3, r3
 801468c:	2b03      	cmp	r3, #3
 801468e:	d001      	beq.n	8014694 <cdcIfIsConnected+0x34>
  {
    return false;
 8014690:	2300      	movs	r3, #0
 8014692:	e006      	b.n	80146a2 <cdcIfIsConnected+0x42>
  }
  if (hUsbDeviceFS.dev_config == 0)
 8014694:	4b05      	ldr	r3, [pc, #20]	; (80146ac <cdcIfIsConnected+0x4c>)
 8014696:	685b      	ldr	r3, [r3, #4]
 8014698:	2b00      	cmp	r3, #0
 801469a:	d101      	bne.n	80146a0 <cdcIfIsConnected+0x40>
  {
    return false;
 801469c:	2300      	movs	r3, #0
 801469e:	e000      	b.n	80146a2 <cdcIfIsConnected+0x42>
  }

  return true;
 80146a0:	2301      	movs	r3, #1
}
 80146a2:	4618      	mov	r0, r3
 80146a4:	46bd      	mov	sp, r7
 80146a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146aa:	4770      	bx	lr
 80146ac:	20000b5c 	.word	0x20000b5c
 80146b0:	20001e54 	.word	0x20001e54

080146b4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80146b4:	b480      	push	{r7}
 80146b6:	b083      	sub	sp, #12
 80146b8:	af00      	add	r7, sp, #0
 80146ba:	4603      	mov	r3, r0
 80146bc:	6039      	str	r1, [r7, #0]
 80146be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80146c0:	683b      	ldr	r3, [r7, #0]
 80146c2:	2212      	movs	r2, #18
 80146c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80146c6:	4b03      	ldr	r3, [pc, #12]	; (80146d4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80146c8:	4618      	mov	r0, r3
 80146ca:	370c      	adds	r7, #12
 80146cc:	46bd      	mov	sp, r7
 80146ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d2:	4770      	bx	lr
 80146d4:	20000164 	.word	0x20000164

080146d8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80146d8:	b480      	push	{r7}
 80146da:	b083      	sub	sp, #12
 80146dc:	af00      	add	r7, sp, #0
 80146de:	4603      	mov	r3, r0
 80146e0:	6039      	str	r1, [r7, #0]
 80146e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80146e4:	683b      	ldr	r3, [r7, #0]
 80146e6:	2204      	movs	r2, #4
 80146e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80146ea:	4b03      	ldr	r3, [pc, #12]	; (80146f8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80146ec:	4618      	mov	r0, r3
 80146ee:	370c      	adds	r7, #12
 80146f0:	46bd      	mov	sp, r7
 80146f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f6:	4770      	bx	lr
 80146f8:	20000178 	.word	0x20000178

080146fc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b082      	sub	sp, #8
 8014700:	af00      	add	r7, sp, #0
 8014702:	4603      	mov	r3, r0
 8014704:	6039      	str	r1, [r7, #0]
 8014706:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014708:	79fb      	ldrb	r3, [r7, #7]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d105      	bne.n	801471a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801470e:	683a      	ldr	r2, [r7, #0]
 8014710:	4907      	ldr	r1, [pc, #28]	; (8014730 <USBD_CDC_ProductStrDescriptor+0x34>)
 8014712:	4808      	ldr	r0, [pc, #32]	; (8014734 <USBD_CDC_ProductStrDescriptor+0x38>)
 8014714:	f7ff fcdd 	bl	80140d2 <USBD_GetString>
 8014718:	e004      	b.n	8014724 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801471a:	683a      	ldr	r2, [r7, #0]
 801471c:	4904      	ldr	r1, [pc, #16]	; (8014730 <USBD_CDC_ProductStrDescriptor+0x34>)
 801471e:	4805      	ldr	r0, [pc, #20]	; (8014734 <USBD_CDC_ProductStrDescriptor+0x38>)
 8014720:	f7ff fcd7 	bl	80140d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014724:	4b02      	ldr	r3, [pc, #8]	; (8014730 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8014726:	4618      	mov	r0, r3
 8014728:	3708      	adds	r7, #8
 801472a:	46bd      	mov	sp, r7
 801472c:	bd80      	pop	{r7, pc}
 801472e:	bf00      	nop
 8014730:	20002e58 	.word	0x20002e58
 8014734:	08018448 	.word	0x08018448

08014738 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014738:	b580      	push	{r7, lr}
 801473a:	b082      	sub	sp, #8
 801473c:	af00      	add	r7, sp, #0
 801473e:	4603      	mov	r3, r0
 8014740:	6039      	str	r1, [r7, #0]
 8014742:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014744:	683a      	ldr	r2, [r7, #0]
 8014746:	4904      	ldr	r1, [pc, #16]	; (8014758 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8014748:	4804      	ldr	r0, [pc, #16]	; (801475c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801474a:	f7ff fcc2 	bl	80140d2 <USBD_GetString>
  return USBD_StrDesc;
 801474e:	4b02      	ldr	r3, [pc, #8]	; (8014758 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8014750:	4618      	mov	r0, r3
 8014752:	3708      	adds	r7, #8
 8014754:	46bd      	mov	sp, r7
 8014756:	bd80      	pop	{r7, pc}
 8014758:	20002e58 	.word	0x20002e58
 801475c:	08018460 	.word	0x08018460

08014760 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014760:	b580      	push	{r7, lr}
 8014762:	b082      	sub	sp, #8
 8014764:	af00      	add	r7, sp, #0
 8014766:	4603      	mov	r3, r0
 8014768:	6039      	str	r1, [r7, #0]
 801476a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801476c:	683b      	ldr	r3, [r7, #0]
 801476e:	221a      	movs	r2, #26
 8014770:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014772:	f000 f843 	bl	80147fc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8014776:	4b02      	ldr	r3, [pc, #8]	; (8014780 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8014778:	4618      	mov	r0, r3
 801477a:	3708      	adds	r7, #8
 801477c:	46bd      	mov	sp, r7
 801477e:	bd80      	pop	{r7, pc}
 8014780:	2000017c 	.word	0x2000017c

08014784 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014784:	b580      	push	{r7, lr}
 8014786:	b082      	sub	sp, #8
 8014788:	af00      	add	r7, sp, #0
 801478a:	4603      	mov	r3, r0
 801478c:	6039      	str	r1, [r7, #0]
 801478e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014790:	79fb      	ldrb	r3, [r7, #7]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d105      	bne.n	80147a2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8014796:	683a      	ldr	r2, [r7, #0]
 8014798:	4907      	ldr	r1, [pc, #28]	; (80147b8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801479a:	4808      	ldr	r0, [pc, #32]	; (80147bc <USBD_CDC_ConfigStrDescriptor+0x38>)
 801479c:	f7ff fc99 	bl	80140d2 <USBD_GetString>
 80147a0:	e004      	b.n	80147ac <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80147a2:	683a      	ldr	r2, [r7, #0]
 80147a4:	4904      	ldr	r1, [pc, #16]	; (80147b8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80147a6:	4805      	ldr	r0, [pc, #20]	; (80147bc <USBD_CDC_ConfigStrDescriptor+0x38>)
 80147a8:	f7ff fc93 	bl	80140d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80147ac:	4b02      	ldr	r3, [pc, #8]	; (80147b8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80147ae:	4618      	mov	r0, r3
 80147b0:	3708      	adds	r7, #8
 80147b2:	46bd      	mov	sp, r7
 80147b4:	bd80      	pop	{r7, pc}
 80147b6:	bf00      	nop
 80147b8:	20002e58 	.word	0x20002e58
 80147bc:	08018474 	.word	0x08018474

080147c0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80147c0:	b580      	push	{r7, lr}
 80147c2:	b082      	sub	sp, #8
 80147c4:	af00      	add	r7, sp, #0
 80147c6:	4603      	mov	r3, r0
 80147c8:	6039      	str	r1, [r7, #0]
 80147ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80147cc:	79fb      	ldrb	r3, [r7, #7]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d105      	bne.n	80147de <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80147d2:	683a      	ldr	r2, [r7, #0]
 80147d4:	4907      	ldr	r1, [pc, #28]	; (80147f4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80147d6:	4808      	ldr	r0, [pc, #32]	; (80147f8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80147d8:	f7ff fc7b 	bl	80140d2 <USBD_GetString>
 80147dc:	e004      	b.n	80147e8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80147de:	683a      	ldr	r2, [r7, #0]
 80147e0:	4904      	ldr	r1, [pc, #16]	; (80147f4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80147e2:	4805      	ldr	r0, [pc, #20]	; (80147f8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80147e4:	f7ff fc75 	bl	80140d2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80147e8:	4b02      	ldr	r3, [pc, #8]	; (80147f4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80147ea:	4618      	mov	r0, r3
 80147ec:	3708      	adds	r7, #8
 80147ee:	46bd      	mov	sp, r7
 80147f0:	bd80      	pop	{r7, pc}
 80147f2:	bf00      	nop
 80147f4:	20002e58 	.word	0x20002e58
 80147f8:	08018480 	.word	0x08018480

080147fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80147fc:	b580      	push	{r7, lr}
 80147fe:	b084      	sub	sp, #16
 8014800:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014802:	4b0f      	ldr	r3, [pc, #60]	; (8014840 <Get_SerialNum+0x44>)
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014808:	4b0e      	ldr	r3, [pc, #56]	; (8014844 <Get_SerialNum+0x48>)
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801480e:	4b0e      	ldr	r3, [pc, #56]	; (8014848 <Get_SerialNum+0x4c>)
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014814:	68fa      	ldr	r2, [r7, #12]
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	4413      	add	r3, r2
 801481a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d009      	beq.n	8014836 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014822:	2208      	movs	r2, #8
 8014824:	4909      	ldr	r1, [pc, #36]	; (801484c <Get_SerialNum+0x50>)
 8014826:	68f8      	ldr	r0, [r7, #12]
 8014828:	f000 f814 	bl	8014854 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801482c:	2204      	movs	r2, #4
 801482e:	4908      	ldr	r1, [pc, #32]	; (8014850 <Get_SerialNum+0x54>)
 8014830:	68b8      	ldr	r0, [r7, #8]
 8014832:	f000 f80f 	bl	8014854 <IntToUnicode>
  }
}
 8014836:	bf00      	nop
 8014838:	3710      	adds	r7, #16
 801483a:	46bd      	mov	sp, r7
 801483c:	bd80      	pop	{r7, pc}
 801483e:	bf00      	nop
 8014840:	1fff7590 	.word	0x1fff7590
 8014844:	1fff7594 	.word	0x1fff7594
 8014848:	1fff7598 	.word	0x1fff7598
 801484c:	2000017e 	.word	0x2000017e
 8014850:	2000018e 	.word	0x2000018e

08014854 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014854:	b480      	push	{r7}
 8014856:	b087      	sub	sp, #28
 8014858:	af00      	add	r7, sp, #0
 801485a:	60f8      	str	r0, [r7, #12]
 801485c:	60b9      	str	r1, [r7, #8]
 801485e:	4613      	mov	r3, r2
 8014860:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014862:	2300      	movs	r3, #0
 8014864:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014866:	2300      	movs	r3, #0
 8014868:	75fb      	strb	r3, [r7, #23]
 801486a:	e027      	b.n	80148bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	0f1b      	lsrs	r3, r3, #28
 8014870:	2b09      	cmp	r3, #9
 8014872:	d80b      	bhi.n	801488c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	0f1b      	lsrs	r3, r3, #28
 8014878:	b2da      	uxtb	r2, r3
 801487a:	7dfb      	ldrb	r3, [r7, #23]
 801487c:	005b      	lsls	r3, r3, #1
 801487e:	4619      	mov	r1, r3
 8014880:	68bb      	ldr	r3, [r7, #8]
 8014882:	440b      	add	r3, r1
 8014884:	3230      	adds	r2, #48	; 0x30
 8014886:	b2d2      	uxtb	r2, r2
 8014888:	701a      	strb	r2, [r3, #0]
 801488a:	e00a      	b.n	80148a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	0f1b      	lsrs	r3, r3, #28
 8014890:	b2da      	uxtb	r2, r3
 8014892:	7dfb      	ldrb	r3, [r7, #23]
 8014894:	005b      	lsls	r3, r3, #1
 8014896:	4619      	mov	r1, r3
 8014898:	68bb      	ldr	r3, [r7, #8]
 801489a:	440b      	add	r3, r1
 801489c:	3237      	adds	r2, #55	; 0x37
 801489e:	b2d2      	uxtb	r2, r2
 80148a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	011b      	lsls	r3, r3, #4
 80148a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80148a8:	7dfb      	ldrb	r3, [r7, #23]
 80148aa:	005b      	lsls	r3, r3, #1
 80148ac:	3301      	adds	r3, #1
 80148ae:	68ba      	ldr	r2, [r7, #8]
 80148b0:	4413      	add	r3, r2
 80148b2:	2200      	movs	r2, #0
 80148b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80148b6:	7dfb      	ldrb	r3, [r7, #23]
 80148b8:	3301      	adds	r3, #1
 80148ba:	75fb      	strb	r3, [r7, #23]
 80148bc:	7dfa      	ldrb	r2, [r7, #23]
 80148be:	79fb      	ldrb	r3, [r7, #7]
 80148c0:	429a      	cmp	r2, r3
 80148c2:	d3d3      	bcc.n	801486c <IntToUnicode+0x18>
  }
}
 80148c4:	bf00      	nop
 80148c6:	bf00      	nop
 80148c8:	371c      	adds	r7, #28
 80148ca:	46bd      	mov	sp, r7
 80148cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d0:	4770      	bx	lr
	...

080148d4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b098      	sub	sp, #96	; 0x60
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80148dc:	f107 030c 	add.w	r3, r7, #12
 80148e0:	2254      	movs	r2, #84	; 0x54
 80148e2:	2100      	movs	r1, #0
 80148e4:	4618      	mov	r0, r3
 80148e6:	f001 fb33 	bl	8015f50 <memset>
  if(pcdHandle->Instance==USB)
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	4a15      	ldr	r2, [pc, #84]	; (8014944 <HAL_PCD_MspInit+0x70>)
 80148f0:	4293      	cmp	r3, r2
 80148f2:	d123      	bne.n	801493c <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80148f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80148f8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80148fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80148fe:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8014900:	f107 030c 	add.w	r3, r7, #12
 8014904:	4618      	mov	r0, r3
 8014906:	f7f9 f879 	bl	800d9fc <HAL_RCCEx_PeriphCLKConfig>
 801490a:	4603      	mov	r3, r0
 801490c:	2b00      	cmp	r3, #0
 801490e:	d001      	beq.n	8014914 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8014910:	f7f4 f858 	bl	80089c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8014914:	4b0c      	ldr	r3, [pc, #48]	; (8014948 <HAL_PCD_MspInit+0x74>)
 8014916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014918:	4a0b      	ldr	r2, [pc, #44]	; (8014948 <HAL_PCD_MspInit+0x74>)
 801491a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801491e:	6593      	str	r3, [r2, #88]	; 0x58
 8014920:	4b09      	ldr	r3, [pc, #36]	; (8014948 <HAL_PCD_MspInit+0x74>)
 8014922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014924:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014928:	60bb      	str	r3, [r7, #8]
 801492a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 801492c:	2200      	movs	r2, #0
 801492e:	2100      	movs	r1, #0
 8014930:	2014      	movs	r0, #20
 8014932:	f7f6 fa0a 	bl	800ad4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8014936:	2014      	movs	r0, #20
 8014938:	f7f6 fa21 	bl	800ad7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801493c:	bf00      	nop
 801493e:	3760      	adds	r7, #96	; 0x60
 8014940:	46bd      	mov	sp, r7
 8014942:	bd80      	pop	{r7, pc}
 8014944:	40005c00 	.word	0x40005c00
 8014948:	40021000 	.word	0x40021000

0801494c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801494c:	b580      	push	{r7, lr}
 801494e:	b082      	sub	sp, #8
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8014960:	4619      	mov	r1, r3
 8014962:	4610      	mov	r0, r2
 8014964:	f7fe fc18 	bl	8013198 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8014968:	bf00      	nop
 801496a:	3708      	adds	r7, #8
 801496c:	46bd      	mov	sp, r7
 801496e:	bd80      	pop	{r7, pc}

08014970 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014970:	b580      	push	{r7, lr}
 8014972:	b082      	sub	sp, #8
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
 8014978:	460b      	mov	r3, r1
 801497a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8014982:	78fa      	ldrb	r2, [r7, #3]
 8014984:	6879      	ldr	r1, [r7, #4]
 8014986:	4613      	mov	r3, r2
 8014988:	009b      	lsls	r3, r3, #2
 801498a:	4413      	add	r3, r2
 801498c:	00db      	lsls	r3, r3, #3
 801498e:	440b      	add	r3, r1
 8014990:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014994:	681a      	ldr	r2, [r3, #0]
 8014996:	78fb      	ldrb	r3, [r7, #3]
 8014998:	4619      	mov	r1, r3
 801499a:	f7fe fc52 	bl	8013242 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801499e:	bf00      	nop
 80149a0:	3708      	adds	r7, #8
 80149a2:	46bd      	mov	sp, r7
 80149a4:	bd80      	pop	{r7, pc}

080149a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80149a6:	b580      	push	{r7, lr}
 80149a8:	b082      	sub	sp, #8
 80149aa:	af00      	add	r7, sp, #0
 80149ac:	6078      	str	r0, [r7, #4]
 80149ae:	460b      	mov	r3, r1
 80149b0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 80149b8:	78fa      	ldrb	r2, [r7, #3]
 80149ba:	6879      	ldr	r1, [r7, #4]
 80149bc:	4613      	mov	r3, r2
 80149be:	009b      	lsls	r3, r3, #2
 80149c0:	4413      	add	r3, r2
 80149c2:	00db      	lsls	r3, r3, #3
 80149c4:	440b      	add	r3, r1
 80149c6:	3324      	adds	r3, #36	; 0x24
 80149c8:	681a      	ldr	r2, [r3, #0]
 80149ca:	78fb      	ldrb	r3, [r7, #3]
 80149cc:	4619      	mov	r1, r3
 80149ce:	f7fe fc9b 	bl	8013308 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80149d2:	bf00      	nop
 80149d4:	3708      	adds	r7, #8
 80149d6:	46bd      	mov	sp, r7
 80149d8:	bd80      	pop	{r7, pc}

080149da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80149da:	b580      	push	{r7, lr}
 80149dc:	b082      	sub	sp, #8
 80149de:	af00      	add	r7, sp, #0
 80149e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80149e8:	4618      	mov	r0, r3
 80149ea:	f7fe fdaf 	bl	801354c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80149ee:	bf00      	nop
 80149f0:	3708      	adds	r7, #8
 80149f2:	46bd      	mov	sp, r7
 80149f4:	bd80      	pop	{r7, pc}

080149f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80149f6:	b580      	push	{r7, lr}
 80149f8:	b084      	sub	sp, #16
 80149fa:	af00      	add	r7, sp, #0
 80149fc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80149fe:	2301      	movs	r3, #1
 8014a00:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	795b      	ldrb	r3, [r3, #5]
 8014a06:	2b02      	cmp	r3, #2
 8014a08:	d001      	beq.n	8014a0e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8014a0a:	f7f3 ffdb 	bl	80089c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014a14:	7bfa      	ldrb	r2, [r7, #15]
 8014a16:	4611      	mov	r1, r2
 8014a18:	4618      	mov	r0, r3
 8014a1a:	f7fe fd59 	bl	80134d0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014a24:	4618      	mov	r0, r3
 8014a26:	f7fe fd05 	bl	8013434 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8014a2a:	bf00      	nop
 8014a2c:	3710      	adds	r7, #16
 8014a2e:	46bd      	mov	sp, r7
 8014a30:	bd80      	pop	{r7, pc}
	...

08014a34 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b082      	sub	sp, #8
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014a42:	4618      	mov	r0, r3
 8014a44:	f7fe fd54 	bl	80134f0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	7a5b      	ldrb	r3, [r3, #9]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d005      	beq.n	8014a5c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014a50:	4b04      	ldr	r3, [pc, #16]	; (8014a64 <HAL_PCD_SuspendCallback+0x30>)
 8014a52:	691b      	ldr	r3, [r3, #16]
 8014a54:	4a03      	ldr	r2, [pc, #12]	; (8014a64 <HAL_PCD_SuspendCallback+0x30>)
 8014a56:	f043 0306 	orr.w	r3, r3, #6
 8014a5a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8014a5c:	bf00      	nop
 8014a5e:	3708      	adds	r7, #8
 8014a60:	46bd      	mov	sp, r7
 8014a62:	bd80      	pop	{r7, pc}
 8014a64:	e000ed00 	.word	0xe000ed00

08014a68 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014a68:	b580      	push	{r7, lr}
 8014a6a:	b082      	sub	sp, #8
 8014a6c:	af00      	add	r7, sp, #0
 8014a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	7a5b      	ldrb	r3, [r3, #9]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d007      	beq.n	8014a88 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014a78:	4b08      	ldr	r3, [pc, #32]	; (8014a9c <HAL_PCD_ResumeCallback+0x34>)
 8014a7a:	691b      	ldr	r3, [r3, #16]
 8014a7c:	4a07      	ldr	r2, [pc, #28]	; (8014a9c <HAL_PCD_ResumeCallback+0x34>)
 8014a7e:	f023 0306 	bic.w	r3, r3, #6
 8014a82:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8014a84:	f000 f9f8 	bl	8014e78 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014a8e:	4618      	mov	r0, r3
 8014a90:	f7fe fd44 	bl	801351c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8014a94:	bf00      	nop
 8014a96:	3708      	adds	r7, #8
 8014a98:	46bd      	mov	sp, r7
 8014a9a:	bd80      	pop	{r7, pc}
 8014a9c:	e000ed00 	.word	0xe000ed00

08014aa0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	b082      	sub	sp, #8
 8014aa4:	af00      	add	r7, sp, #0
 8014aa6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8014aa8:	4a2b      	ldr	r2, [pc, #172]	; (8014b58 <USBD_LL_Init+0xb8>)
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	4a29      	ldr	r2, [pc, #164]	; (8014b58 <USBD_LL_Init+0xb8>)
 8014ab4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8014ab8:	4b27      	ldr	r3, [pc, #156]	; (8014b58 <USBD_LL_Init+0xb8>)
 8014aba:	4a28      	ldr	r2, [pc, #160]	; (8014b5c <USBD_LL_Init+0xbc>)
 8014abc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8014abe:	4b26      	ldr	r3, [pc, #152]	; (8014b58 <USBD_LL_Init+0xb8>)
 8014ac0:	2208      	movs	r2, #8
 8014ac2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8014ac4:	4b24      	ldr	r3, [pc, #144]	; (8014b58 <USBD_LL_Init+0xb8>)
 8014ac6:	2202      	movs	r2, #2
 8014ac8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014aca:	4b23      	ldr	r3, [pc, #140]	; (8014b58 <USBD_LL_Init+0xb8>)
 8014acc:	2202      	movs	r2, #2
 8014ace:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8014ad0:	4b21      	ldr	r3, [pc, #132]	; (8014b58 <USBD_LL_Init+0xb8>)
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8014ad6:	4b20      	ldr	r3, [pc, #128]	; (8014b58 <USBD_LL_Init+0xb8>)
 8014ad8:	2200      	movs	r2, #0
 8014ada:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8014adc:	4b1e      	ldr	r3, [pc, #120]	; (8014b58 <USBD_LL_Init+0xb8>)
 8014ade:	2200      	movs	r2, #0
 8014ae0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8014ae2:	4b1d      	ldr	r3, [pc, #116]	; (8014b58 <USBD_LL_Init+0xb8>)
 8014ae4:	2200      	movs	r2, #0
 8014ae6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8014ae8:	481b      	ldr	r0, [pc, #108]	; (8014b58 <USBD_LL_Init+0xb8>)
 8014aea:	f7f6 fbef 	bl	800b2cc <HAL_PCD_Init>
 8014aee:	4603      	mov	r3, r0
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d001      	beq.n	8014af8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8014af4:	f7f3 ff66 	bl	80089c4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014afe:	2318      	movs	r3, #24
 8014b00:	2200      	movs	r2, #0
 8014b02:	2100      	movs	r1, #0
 8014b04:	f7f8 f8a9 	bl	800cc5a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014b0e:	2358      	movs	r3, #88	; 0x58
 8014b10:	2200      	movs	r2, #0
 8014b12:	2180      	movs	r1, #128	; 0x80
 8014b14:	f7f8 f8a1 	bl	800cc5a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014b1e:	23c0      	movs	r3, #192	; 0xc0
 8014b20:	2200      	movs	r2, #0
 8014b22:	2181      	movs	r1, #129	; 0x81
 8014b24:	f7f8 f899 	bl	800cc5a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014b2e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8014b32:	2200      	movs	r2, #0
 8014b34:	2101      	movs	r1, #1
 8014b36:	f7f8 f890 	bl	800cc5a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014b40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014b44:	2200      	movs	r2, #0
 8014b46:	2182      	movs	r1, #130	; 0x82
 8014b48:	f7f8 f887 	bl	800cc5a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8014b4c:	2300      	movs	r3, #0
}
 8014b4e:	4618      	mov	r0, r3
 8014b50:	3708      	adds	r7, #8
 8014b52:	46bd      	mov	sp, r7
 8014b54:	bd80      	pop	{r7, pc}
 8014b56:	bf00      	nop
 8014b58:	20003058 	.word	0x20003058
 8014b5c:	40005c00 	.word	0x40005c00

08014b60 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014b60:	b580      	push	{r7, lr}
 8014b62:	b084      	sub	sp, #16
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014b68:	2300      	movs	r3, #0
 8014b6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014b76:	4618      	mov	r0, r3
 8014b78:	f7f6 fc76 	bl	800b468 <HAL_PCD_Start>
 8014b7c:	4603      	mov	r3, r0
 8014b7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014b80:	7bfb      	ldrb	r3, [r7, #15]
 8014b82:	4618      	mov	r0, r3
 8014b84:	f000 f97e 	bl	8014e84 <USBD_Get_USB_Status>
 8014b88:	4603      	mov	r3, r0
 8014b8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014b8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8014b8e:	4618      	mov	r0, r3
 8014b90:	3710      	adds	r7, #16
 8014b92:	46bd      	mov	sp, r7
 8014b94:	bd80      	pop	{r7, pc}

08014b96 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8014b96:	b580      	push	{r7, lr}
 8014b98:	b084      	sub	sp, #16
 8014b9a:	af00      	add	r7, sp, #0
 8014b9c:	6078      	str	r0, [r7, #4]
 8014b9e:	4608      	mov	r0, r1
 8014ba0:	4611      	mov	r1, r2
 8014ba2:	461a      	mov	r2, r3
 8014ba4:	4603      	mov	r3, r0
 8014ba6:	70fb      	strb	r3, [r7, #3]
 8014ba8:	460b      	mov	r3, r1
 8014baa:	70bb      	strb	r3, [r7, #2]
 8014bac:	4613      	mov	r3, r2
 8014bae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014bb4:	2300      	movs	r3, #0
 8014bb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014bbe:	78bb      	ldrb	r3, [r7, #2]
 8014bc0:	883a      	ldrh	r2, [r7, #0]
 8014bc2:	78f9      	ldrb	r1, [r7, #3]
 8014bc4:	f7f6 fdbd 	bl	800b742 <HAL_PCD_EP_Open>
 8014bc8:	4603      	mov	r3, r0
 8014bca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014bcc:	7bfb      	ldrb	r3, [r7, #15]
 8014bce:	4618      	mov	r0, r3
 8014bd0:	f000 f958 	bl	8014e84 <USBD_Get_USB_Status>
 8014bd4:	4603      	mov	r3, r0
 8014bd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014bd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8014bda:	4618      	mov	r0, r3
 8014bdc:	3710      	adds	r7, #16
 8014bde:	46bd      	mov	sp, r7
 8014be0:	bd80      	pop	{r7, pc}

08014be2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014be2:	b580      	push	{r7, lr}
 8014be4:	b084      	sub	sp, #16
 8014be6:	af00      	add	r7, sp, #0
 8014be8:	6078      	str	r0, [r7, #4]
 8014bea:	460b      	mov	r3, r1
 8014bec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014bee:	2300      	movs	r3, #0
 8014bf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014bfc:	78fa      	ldrb	r2, [r7, #3]
 8014bfe:	4611      	mov	r1, r2
 8014c00:	4618      	mov	r0, r3
 8014c02:	f7f6 fdfb 	bl	800b7fc <HAL_PCD_EP_Close>
 8014c06:	4603      	mov	r3, r0
 8014c08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014c0a:	7bfb      	ldrb	r3, [r7, #15]
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	f000 f939 	bl	8014e84 <USBD_Get_USB_Status>
 8014c12:	4603      	mov	r3, r0
 8014c14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014c16:	7bbb      	ldrb	r3, [r7, #14]
}
 8014c18:	4618      	mov	r0, r3
 8014c1a:	3710      	adds	r7, #16
 8014c1c:	46bd      	mov	sp, r7
 8014c1e:	bd80      	pop	{r7, pc}

08014c20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014c20:	b580      	push	{r7, lr}
 8014c22:	b084      	sub	sp, #16
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	6078      	str	r0, [r7, #4]
 8014c28:	460b      	mov	r3, r1
 8014c2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014c2c:	2300      	movs	r3, #0
 8014c2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014c30:	2300      	movs	r3, #0
 8014c32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014c3a:	78fa      	ldrb	r2, [r7, #3]
 8014c3c:	4611      	mov	r1, r2
 8014c3e:	4618      	mov	r0, r3
 8014c40:	f7f6 fea4 	bl	800b98c <HAL_PCD_EP_SetStall>
 8014c44:	4603      	mov	r3, r0
 8014c46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014c48:	7bfb      	ldrb	r3, [r7, #15]
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	f000 f91a 	bl	8014e84 <USBD_Get_USB_Status>
 8014c50:	4603      	mov	r3, r0
 8014c52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014c54:	7bbb      	ldrb	r3, [r7, #14]
}
 8014c56:	4618      	mov	r0, r3
 8014c58:	3710      	adds	r7, #16
 8014c5a:	46bd      	mov	sp, r7
 8014c5c:	bd80      	pop	{r7, pc}

08014c5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014c5e:	b580      	push	{r7, lr}
 8014c60:	b084      	sub	sp, #16
 8014c62:	af00      	add	r7, sp, #0
 8014c64:	6078      	str	r0, [r7, #4]
 8014c66:	460b      	mov	r3, r1
 8014c68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014c6a:	2300      	movs	r3, #0
 8014c6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014c6e:	2300      	movs	r3, #0
 8014c70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014c78:	78fa      	ldrb	r2, [r7, #3]
 8014c7a:	4611      	mov	r1, r2
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	f7f6 fed7 	bl	800ba30 <HAL_PCD_EP_ClrStall>
 8014c82:	4603      	mov	r3, r0
 8014c84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014c86:	7bfb      	ldrb	r3, [r7, #15]
 8014c88:	4618      	mov	r0, r3
 8014c8a:	f000 f8fb 	bl	8014e84 <USBD_Get_USB_Status>
 8014c8e:	4603      	mov	r3, r0
 8014c90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014c92:	7bbb      	ldrb	r3, [r7, #14]
}
 8014c94:	4618      	mov	r0, r3
 8014c96:	3710      	adds	r7, #16
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	bd80      	pop	{r7, pc}

08014c9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014c9c:	b480      	push	{r7}
 8014c9e:	b085      	sub	sp, #20
 8014ca0:	af00      	add	r7, sp, #0
 8014ca2:	6078      	str	r0, [r7, #4]
 8014ca4:	460b      	mov	r3, r1
 8014ca6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014cae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8014cb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	da0b      	bge.n	8014cd0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8014cb8:	78fb      	ldrb	r3, [r7, #3]
 8014cba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014cbe:	68f9      	ldr	r1, [r7, #12]
 8014cc0:	4613      	mov	r3, r2
 8014cc2:	009b      	lsls	r3, r3, #2
 8014cc4:	4413      	add	r3, r2
 8014cc6:	00db      	lsls	r3, r3, #3
 8014cc8:	440b      	add	r3, r1
 8014cca:	3312      	adds	r3, #18
 8014ccc:	781b      	ldrb	r3, [r3, #0]
 8014cce:	e00b      	b.n	8014ce8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014cd0:	78fb      	ldrb	r3, [r7, #3]
 8014cd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014cd6:	68f9      	ldr	r1, [r7, #12]
 8014cd8:	4613      	mov	r3, r2
 8014cda:	009b      	lsls	r3, r3, #2
 8014cdc:	4413      	add	r3, r2
 8014cde:	00db      	lsls	r3, r3, #3
 8014ce0:	440b      	add	r3, r1
 8014ce2:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 8014ce6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014ce8:	4618      	mov	r0, r3
 8014cea:	3714      	adds	r7, #20
 8014cec:	46bd      	mov	sp, r7
 8014cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf2:	4770      	bx	lr

08014cf4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	b084      	sub	sp, #16
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	6078      	str	r0, [r7, #4]
 8014cfc:	460b      	mov	r3, r1
 8014cfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014d00:	2300      	movs	r3, #0
 8014d02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014d04:	2300      	movs	r3, #0
 8014d06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014d0e:	78fa      	ldrb	r2, [r7, #3]
 8014d10:	4611      	mov	r1, r2
 8014d12:	4618      	mov	r0, r3
 8014d14:	f7f6 fcf1 	bl	800b6fa <HAL_PCD_SetAddress>
 8014d18:	4603      	mov	r3, r0
 8014d1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014d1c:	7bfb      	ldrb	r3, [r7, #15]
 8014d1e:	4618      	mov	r0, r3
 8014d20:	f000 f8b0 	bl	8014e84 <USBD_Get_USB_Status>
 8014d24:	4603      	mov	r3, r0
 8014d26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014d28:	7bbb      	ldrb	r3, [r7, #14]
}
 8014d2a:	4618      	mov	r0, r3
 8014d2c:	3710      	adds	r7, #16
 8014d2e:	46bd      	mov	sp, r7
 8014d30:	bd80      	pop	{r7, pc}

08014d32 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014d32:	b580      	push	{r7, lr}
 8014d34:	b086      	sub	sp, #24
 8014d36:	af00      	add	r7, sp, #0
 8014d38:	60f8      	str	r0, [r7, #12]
 8014d3a:	607a      	str	r2, [r7, #4]
 8014d3c:	603b      	str	r3, [r7, #0]
 8014d3e:	460b      	mov	r3, r1
 8014d40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014d42:	2300      	movs	r3, #0
 8014d44:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014d46:	2300      	movs	r3, #0
 8014d48:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014d50:	7af9      	ldrb	r1, [r7, #11]
 8014d52:	683b      	ldr	r3, [r7, #0]
 8014d54:	687a      	ldr	r2, [r7, #4]
 8014d56:	f7f6 fde2 	bl	800b91e <HAL_PCD_EP_Transmit>
 8014d5a:	4603      	mov	r3, r0
 8014d5c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014d5e:	7dfb      	ldrb	r3, [r7, #23]
 8014d60:	4618      	mov	r0, r3
 8014d62:	f000 f88f 	bl	8014e84 <USBD_Get_USB_Status>
 8014d66:	4603      	mov	r3, r0
 8014d68:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014d6a:	7dbb      	ldrb	r3, [r7, #22]
}
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	3718      	adds	r7, #24
 8014d70:	46bd      	mov	sp, r7
 8014d72:	bd80      	pop	{r7, pc}

08014d74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b086      	sub	sp, #24
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	60f8      	str	r0, [r7, #12]
 8014d7c:	607a      	str	r2, [r7, #4]
 8014d7e:	603b      	str	r3, [r7, #0]
 8014d80:	460b      	mov	r3, r1
 8014d82:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014d84:	2300      	movs	r3, #0
 8014d86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014d88:	2300      	movs	r3, #0
 8014d8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014d92:	7af9      	ldrb	r1, [r7, #11]
 8014d94:	683b      	ldr	r3, [r7, #0]
 8014d96:	687a      	ldr	r2, [r7, #4]
 8014d98:	f7f6 fd78 	bl	800b88c <HAL_PCD_EP_Receive>
 8014d9c:	4603      	mov	r3, r0
 8014d9e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014da0:	7dfb      	ldrb	r3, [r7, #23]
 8014da2:	4618      	mov	r0, r3
 8014da4:	f000 f86e 	bl	8014e84 <USBD_Get_USB_Status>
 8014da8:	4603      	mov	r3, r0
 8014daa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014dac:	7dbb      	ldrb	r3, [r7, #22]
}
 8014dae:	4618      	mov	r0, r3
 8014db0:	3718      	adds	r7, #24
 8014db2:	46bd      	mov	sp, r7
 8014db4:	bd80      	pop	{r7, pc}

08014db6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014db6:	b580      	push	{r7, lr}
 8014db8:	b082      	sub	sp, #8
 8014dba:	af00      	add	r7, sp, #0
 8014dbc:	6078      	str	r0, [r7, #4]
 8014dbe:	460b      	mov	r3, r1
 8014dc0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014dc8:	78fa      	ldrb	r2, [r7, #3]
 8014dca:	4611      	mov	r1, r2
 8014dcc:	4618      	mov	r0, r3
 8014dce:	f7f6 fd8e 	bl	800b8ee <HAL_PCD_EP_GetRxCount>
 8014dd2:	4603      	mov	r3, r0
}
 8014dd4:	4618      	mov	r0, r3
 8014dd6:	3708      	adds	r7, #8
 8014dd8:	46bd      	mov	sp, r7
 8014dda:	bd80      	pop	{r7, pc}

08014ddc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b082      	sub	sp, #8
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	6078      	str	r0, [r7, #4]
 8014de4:	460b      	mov	r3, r1
 8014de6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8014de8:	78fb      	ldrb	r3, [r7, #3]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d002      	beq.n	8014df4 <HAL_PCDEx_LPM_Callback+0x18>
 8014dee:	2b01      	cmp	r3, #1
 8014df0:	d013      	beq.n	8014e1a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8014df2:	e023      	b.n	8014e3c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	7a5b      	ldrb	r3, [r3, #9]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d007      	beq.n	8014e0c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8014dfc:	f000 f83c 	bl	8014e78 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014e00:	4b10      	ldr	r3, [pc, #64]	; (8014e44 <HAL_PCDEx_LPM_Callback+0x68>)
 8014e02:	691b      	ldr	r3, [r3, #16]
 8014e04:	4a0f      	ldr	r2, [pc, #60]	; (8014e44 <HAL_PCDEx_LPM_Callback+0x68>)
 8014e06:	f023 0306 	bic.w	r3, r3, #6
 8014e0a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014e12:	4618      	mov	r0, r3
 8014e14:	f7fe fb82 	bl	801351c <USBD_LL_Resume>
    break;
 8014e18:	e010      	b.n	8014e3c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014e20:	4618      	mov	r0, r3
 8014e22:	f7fe fb65 	bl	80134f0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	7a5b      	ldrb	r3, [r3, #9]
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d005      	beq.n	8014e3a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014e2e:	4b05      	ldr	r3, [pc, #20]	; (8014e44 <HAL_PCDEx_LPM_Callback+0x68>)
 8014e30:	691b      	ldr	r3, [r3, #16]
 8014e32:	4a04      	ldr	r2, [pc, #16]	; (8014e44 <HAL_PCDEx_LPM_Callback+0x68>)
 8014e34:	f043 0306 	orr.w	r3, r3, #6
 8014e38:	6113      	str	r3, [r2, #16]
    break;
 8014e3a:	bf00      	nop
}
 8014e3c:	bf00      	nop
 8014e3e:	3708      	adds	r7, #8
 8014e40:	46bd      	mov	sp, r7
 8014e42:	bd80      	pop	{r7, pc}
 8014e44:	e000ed00 	.word	0xe000ed00

08014e48 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8014e48:	b480      	push	{r7}
 8014e4a:	b083      	sub	sp, #12
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8014e50:	4b03      	ldr	r3, [pc, #12]	; (8014e60 <USBD_static_malloc+0x18>)
}
 8014e52:	4618      	mov	r0, r3
 8014e54:	370c      	adds	r7, #12
 8014e56:	46bd      	mov	sp, r7
 8014e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e5c:	4770      	bx	lr
 8014e5e:	bf00      	nop
 8014e60:	20003334 	.word	0x20003334

08014e64 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014e64:	b480      	push	{r7}
 8014e66:	b083      	sub	sp, #12
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	6078      	str	r0, [r7, #4]

}
 8014e6c:	bf00      	nop
 8014e6e:	370c      	adds	r7, #12
 8014e70:	46bd      	mov	sp, r7
 8014e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e76:	4770      	bx	lr

08014e78 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8014e78:	b580      	push	{r7, lr}
 8014e7a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8014e7c:	f7f3 fd48 	bl	8008910 <SystemClock_Config>
}
 8014e80:	bf00      	nop
 8014e82:	bd80      	pop	{r7, pc}

08014e84 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014e84:	b480      	push	{r7}
 8014e86:	b085      	sub	sp, #20
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	4603      	mov	r3, r0
 8014e8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014e8e:	2300      	movs	r3, #0
 8014e90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014e92:	79fb      	ldrb	r3, [r7, #7]
 8014e94:	2b03      	cmp	r3, #3
 8014e96:	d817      	bhi.n	8014ec8 <USBD_Get_USB_Status+0x44>
 8014e98:	a201      	add	r2, pc, #4	; (adr r2, 8014ea0 <USBD_Get_USB_Status+0x1c>)
 8014e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e9e:	bf00      	nop
 8014ea0:	08014eb1 	.word	0x08014eb1
 8014ea4:	08014eb7 	.word	0x08014eb7
 8014ea8:	08014ebd 	.word	0x08014ebd
 8014eac:	08014ec3 	.word	0x08014ec3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	73fb      	strb	r3, [r7, #15]
    break;
 8014eb4:	e00b      	b.n	8014ece <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014eb6:	2303      	movs	r3, #3
 8014eb8:	73fb      	strb	r3, [r7, #15]
    break;
 8014eba:	e008      	b.n	8014ece <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8014ebc:	2301      	movs	r3, #1
 8014ebe:	73fb      	strb	r3, [r7, #15]
    break;
 8014ec0:	e005      	b.n	8014ece <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014ec2:	2303      	movs	r3, #3
 8014ec4:	73fb      	strb	r3, [r7, #15]
    break;
 8014ec6:	e002      	b.n	8014ece <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8014ec8:	2303      	movs	r3, #3
 8014eca:	73fb      	strb	r3, [r7, #15]
    break;
 8014ecc:	bf00      	nop
  }
  return usb_status;
 8014ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ed0:	4618      	mov	r0, r3
 8014ed2:	3714      	adds	r7, #20
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eda:	4770      	bx	lr

08014edc <main>:


#include "main.h"

int main(void)
{
 8014edc:	b580      	push	{r7, lr}
 8014ede:	af00      	add	r7, sp, #0
  hwInit();
 8014ee0:	f7f5 fd30 	bl	800a944 <hwInit>
  apInit();
 8014ee4:	f7f3 fc8c 	bl	8008800 <apInit>

  apMain();
 8014ee8:	f7f3 fc94 	bl	8008814 <apMain>
 8014eec:	2300      	movs	r3, #0
}
 8014eee:	4618      	mov	r0, r3
 8014ef0:	bd80      	pop	{r7, pc}

08014ef2 <sulp>:
 8014ef2:	b570      	push	{r4, r5, r6, lr}
 8014ef4:	4604      	mov	r4, r0
 8014ef6:	460d      	mov	r5, r1
 8014ef8:	ec45 4b10 	vmov	d0, r4, r5
 8014efc:	4616      	mov	r6, r2
 8014efe:	f002 f8a7 	bl	8017050 <__ulp>
 8014f02:	ec51 0b10 	vmov	r0, r1, d0
 8014f06:	b17e      	cbz	r6, 8014f28 <sulp+0x36>
 8014f08:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014f0c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	dd09      	ble.n	8014f28 <sulp+0x36>
 8014f14:	051b      	lsls	r3, r3, #20
 8014f16:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014f1a:	2400      	movs	r4, #0
 8014f1c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014f20:	4622      	mov	r2, r4
 8014f22:	462b      	mov	r3, r5
 8014f24:	f7f2 ff98 	bl	8007e58 <__aeabi_dmul>
 8014f28:	bd70      	pop	{r4, r5, r6, pc}
 8014f2a:	0000      	movs	r0, r0
 8014f2c:	0000      	movs	r0, r0
	...

08014f30 <_strtod_l>:
 8014f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f34:	ed2d 8b02 	vpush	{d8}
 8014f38:	b09b      	sub	sp, #108	; 0x6c
 8014f3a:	4604      	mov	r4, r0
 8014f3c:	9213      	str	r2, [sp, #76]	; 0x4c
 8014f3e:	2200      	movs	r2, #0
 8014f40:	9216      	str	r2, [sp, #88]	; 0x58
 8014f42:	460d      	mov	r5, r1
 8014f44:	f04f 0800 	mov.w	r8, #0
 8014f48:	f04f 0900 	mov.w	r9, #0
 8014f4c:	460a      	mov	r2, r1
 8014f4e:	9215      	str	r2, [sp, #84]	; 0x54
 8014f50:	7811      	ldrb	r1, [r2, #0]
 8014f52:	292b      	cmp	r1, #43	; 0x2b
 8014f54:	d04c      	beq.n	8014ff0 <_strtod_l+0xc0>
 8014f56:	d83a      	bhi.n	8014fce <_strtod_l+0x9e>
 8014f58:	290d      	cmp	r1, #13
 8014f5a:	d834      	bhi.n	8014fc6 <_strtod_l+0x96>
 8014f5c:	2908      	cmp	r1, #8
 8014f5e:	d834      	bhi.n	8014fca <_strtod_l+0x9a>
 8014f60:	2900      	cmp	r1, #0
 8014f62:	d03d      	beq.n	8014fe0 <_strtod_l+0xb0>
 8014f64:	2200      	movs	r2, #0
 8014f66:	920a      	str	r2, [sp, #40]	; 0x28
 8014f68:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8014f6a:	7832      	ldrb	r2, [r6, #0]
 8014f6c:	2a30      	cmp	r2, #48	; 0x30
 8014f6e:	f040 80b4 	bne.w	80150da <_strtod_l+0x1aa>
 8014f72:	7872      	ldrb	r2, [r6, #1]
 8014f74:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8014f78:	2a58      	cmp	r2, #88	; 0x58
 8014f7a:	d170      	bne.n	801505e <_strtod_l+0x12e>
 8014f7c:	9302      	str	r3, [sp, #8]
 8014f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f80:	9301      	str	r3, [sp, #4]
 8014f82:	ab16      	add	r3, sp, #88	; 0x58
 8014f84:	9300      	str	r3, [sp, #0]
 8014f86:	4a8e      	ldr	r2, [pc, #568]	; (80151c0 <_strtod_l+0x290>)
 8014f88:	ab17      	add	r3, sp, #92	; 0x5c
 8014f8a:	a915      	add	r1, sp, #84	; 0x54
 8014f8c:	4620      	mov	r0, r4
 8014f8e:	f001 f945 	bl	801621c <__gethex>
 8014f92:	f010 070f 	ands.w	r7, r0, #15
 8014f96:	4605      	mov	r5, r0
 8014f98:	d005      	beq.n	8014fa6 <_strtod_l+0x76>
 8014f9a:	2f06      	cmp	r7, #6
 8014f9c:	d12a      	bne.n	8014ff4 <_strtod_l+0xc4>
 8014f9e:	3601      	adds	r6, #1
 8014fa0:	2300      	movs	r3, #0
 8014fa2:	9615      	str	r6, [sp, #84]	; 0x54
 8014fa4:	930a      	str	r3, [sp, #40]	; 0x28
 8014fa6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	f040 857f 	bne.w	8015aac <_strtod_l+0xb7c>
 8014fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014fb0:	b1db      	cbz	r3, 8014fea <_strtod_l+0xba>
 8014fb2:	4642      	mov	r2, r8
 8014fb4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014fb8:	ec43 2b10 	vmov	d0, r2, r3
 8014fbc:	b01b      	add	sp, #108	; 0x6c
 8014fbe:	ecbd 8b02 	vpop	{d8}
 8014fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014fc6:	2920      	cmp	r1, #32
 8014fc8:	d1cc      	bne.n	8014f64 <_strtod_l+0x34>
 8014fca:	3201      	adds	r2, #1
 8014fcc:	e7bf      	b.n	8014f4e <_strtod_l+0x1e>
 8014fce:	292d      	cmp	r1, #45	; 0x2d
 8014fd0:	d1c8      	bne.n	8014f64 <_strtod_l+0x34>
 8014fd2:	2101      	movs	r1, #1
 8014fd4:	910a      	str	r1, [sp, #40]	; 0x28
 8014fd6:	1c51      	adds	r1, r2, #1
 8014fd8:	9115      	str	r1, [sp, #84]	; 0x54
 8014fda:	7852      	ldrb	r2, [r2, #1]
 8014fdc:	2a00      	cmp	r2, #0
 8014fde:	d1c3      	bne.n	8014f68 <_strtod_l+0x38>
 8014fe0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014fe2:	9515      	str	r5, [sp, #84]	; 0x54
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	f040 855f 	bne.w	8015aa8 <_strtod_l+0xb78>
 8014fea:	4642      	mov	r2, r8
 8014fec:	464b      	mov	r3, r9
 8014fee:	e7e3      	b.n	8014fb8 <_strtod_l+0x88>
 8014ff0:	2100      	movs	r1, #0
 8014ff2:	e7ef      	b.n	8014fd4 <_strtod_l+0xa4>
 8014ff4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014ff6:	b13a      	cbz	r2, 8015008 <_strtod_l+0xd8>
 8014ff8:	2135      	movs	r1, #53	; 0x35
 8014ffa:	a818      	add	r0, sp, #96	; 0x60
 8014ffc:	f002 f925 	bl	801724a <__copybits>
 8015000:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015002:	4620      	mov	r0, r4
 8015004:	f001 fcf8 	bl	80169f8 <_Bfree>
 8015008:	3f01      	subs	r7, #1
 801500a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801500c:	2f04      	cmp	r7, #4
 801500e:	d806      	bhi.n	801501e <_strtod_l+0xee>
 8015010:	e8df f007 	tbb	[pc, r7]
 8015014:	201d0314 	.word	0x201d0314
 8015018:	14          	.byte	0x14
 8015019:	00          	.byte	0x00
 801501a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 801501e:	05e9      	lsls	r1, r5, #23
 8015020:	bf48      	it	mi
 8015022:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8015026:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801502a:	0d1b      	lsrs	r3, r3, #20
 801502c:	051b      	lsls	r3, r3, #20
 801502e:	2b00      	cmp	r3, #0
 8015030:	d1b9      	bne.n	8014fa6 <_strtod_l+0x76>
 8015032:	f000 ffed 	bl	8016010 <__errno>
 8015036:	2322      	movs	r3, #34	; 0x22
 8015038:	6003      	str	r3, [r0, #0]
 801503a:	e7b4      	b.n	8014fa6 <_strtod_l+0x76>
 801503c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8015040:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015044:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015048:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801504c:	e7e7      	b.n	801501e <_strtod_l+0xee>
 801504e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80151c8 <_strtod_l+0x298>
 8015052:	e7e4      	b.n	801501e <_strtod_l+0xee>
 8015054:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8015058:	f04f 38ff 	mov.w	r8, #4294967295
 801505c:	e7df      	b.n	801501e <_strtod_l+0xee>
 801505e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015060:	1c5a      	adds	r2, r3, #1
 8015062:	9215      	str	r2, [sp, #84]	; 0x54
 8015064:	785b      	ldrb	r3, [r3, #1]
 8015066:	2b30      	cmp	r3, #48	; 0x30
 8015068:	d0f9      	beq.n	801505e <_strtod_l+0x12e>
 801506a:	2b00      	cmp	r3, #0
 801506c:	d09b      	beq.n	8014fa6 <_strtod_l+0x76>
 801506e:	2301      	movs	r3, #1
 8015070:	f04f 0a00 	mov.w	sl, #0
 8015074:	9304      	str	r3, [sp, #16]
 8015076:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015078:	930b      	str	r3, [sp, #44]	; 0x2c
 801507a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801507e:	46d3      	mov	fp, sl
 8015080:	220a      	movs	r2, #10
 8015082:	9815      	ldr	r0, [sp, #84]	; 0x54
 8015084:	7806      	ldrb	r6, [r0, #0]
 8015086:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801508a:	b2d9      	uxtb	r1, r3
 801508c:	2909      	cmp	r1, #9
 801508e:	d926      	bls.n	80150de <_strtod_l+0x1ae>
 8015090:	494c      	ldr	r1, [pc, #304]	; (80151c4 <_strtod_l+0x294>)
 8015092:	2201      	movs	r2, #1
 8015094:	f000 ff64 	bl	8015f60 <strncmp>
 8015098:	2800      	cmp	r0, #0
 801509a:	d030      	beq.n	80150fe <_strtod_l+0x1ce>
 801509c:	2000      	movs	r0, #0
 801509e:	4632      	mov	r2, r6
 80150a0:	9005      	str	r0, [sp, #20]
 80150a2:	465e      	mov	r6, fp
 80150a4:	4603      	mov	r3, r0
 80150a6:	2a65      	cmp	r2, #101	; 0x65
 80150a8:	d001      	beq.n	80150ae <_strtod_l+0x17e>
 80150aa:	2a45      	cmp	r2, #69	; 0x45
 80150ac:	d113      	bne.n	80150d6 <_strtod_l+0x1a6>
 80150ae:	b91e      	cbnz	r6, 80150b8 <_strtod_l+0x188>
 80150b0:	9a04      	ldr	r2, [sp, #16]
 80150b2:	4302      	orrs	r2, r0
 80150b4:	d094      	beq.n	8014fe0 <_strtod_l+0xb0>
 80150b6:	2600      	movs	r6, #0
 80150b8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80150ba:	1c6a      	adds	r2, r5, #1
 80150bc:	9215      	str	r2, [sp, #84]	; 0x54
 80150be:	786a      	ldrb	r2, [r5, #1]
 80150c0:	2a2b      	cmp	r2, #43	; 0x2b
 80150c2:	d074      	beq.n	80151ae <_strtod_l+0x27e>
 80150c4:	2a2d      	cmp	r2, #45	; 0x2d
 80150c6:	d078      	beq.n	80151ba <_strtod_l+0x28a>
 80150c8:	f04f 0c00 	mov.w	ip, #0
 80150cc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80150d0:	2909      	cmp	r1, #9
 80150d2:	d97f      	bls.n	80151d4 <_strtod_l+0x2a4>
 80150d4:	9515      	str	r5, [sp, #84]	; 0x54
 80150d6:	2700      	movs	r7, #0
 80150d8:	e09e      	b.n	8015218 <_strtod_l+0x2e8>
 80150da:	2300      	movs	r3, #0
 80150dc:	e7c8      	b.n	8015070 <_strtod_l+0x140>
 80150de:	f1bb 0f08 	cmp.w	fp, #8
 80150e2:	bfd8      	it	le
 80150e4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80150e6:	f100 0001 	add.w	r0, r0, #1
 80150ea:	bfda      	itte	le
 80150ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80150f0:	9309      	strle	r3, [sp, #36]	; 0x24
 80150f2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80150f6:	f10b 0b01 	add.w	fp, fp, #1
 80150fa:	9015      	str	r0, [sp, #84]	; 0x54
 80150fc:	e7c1      	b.n	8015082 <_strtod_l+0x152>
 80150fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015100:	1c5a      	adds	r2, r3, #1
 8015102:	9215      	str	r2, [sp, #84]	; 0x54
 8015104:	785a      	ldrb	r2, [r3, #1]
 8015106:	f1bb 0f00 	cmp.w	fp, #0
 801510a:	d037      	beq.n	801517c <_strtod_l+0x24c>
 801510c:	9005      	str	r0, [sp, #20]
 801510e:	465e      	mov	r6, fp
 8015110:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8015114:	2b09      	cmp	r3, #9
 8015116:	d912      	bls.n	801513e <_strtod_l+0x20e>
 8015118:	2301      	movs	r3, #1
 801511a:	e7c4      	b.n	80150a6 <_strtod_l+0x176>
 801511c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801511e:	1c5a      	adds	r2, r3, #1
 8015120:	9215      	str	r2, [sp, #84]	; 0x54
 8015122:	785a      	ldrb	r2, [r3, #1]
 8015124:	3001      	adds	r0, #1
 8015126:	2a30      	cmp	r2, #48	; 0x30
 8015128:	d0f8      	beq.n	801511c <_strtod_l+0x1ec>
 801512a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801512e:	2b08      	cmp	r3, #8
 8015130:	f200 84c1 	bhi.w	8015ab6 <_strtod_l+0xb86>
 8015134:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015136:	9005      	str	r0, [sp, #20]
 8015138:	2000      	movs	r0, #0
 801513a:	930b      	str	r3, [sp, #44]	; 0x2c
 801513c:	4606      	mov	r6, r0
 801513e:	3a30      	subs	r2, #48	; 0x30
 8015140:	f100 0301 	add.w	r3, r0, #1
 8015144:	d014      	beq.n	8015170 <_strtod_l+0x240>
 8015146:	9905      	ldr	r1, [sp, #20]
 8015148:	4419      	add	r1, r3
 801514a:	9105      	str	r1, [sp, #20]
 801514c:	4633      	mov	r3, r6
 801514e:	eb00 0c06 	add.w	ip, r0, r6
 8015152:	210a      	movs	r1, #10
 8015154:	4563      	cmp	r3, ip
 8015156:	d113      	bne.n	8015180 <_strtod_l+0x250>
 8015158:	1833      	adds	r3, r6, r0
 801515a:	2b08      	cmp	r3, #8
 801515c:	f106 0601 	add.w	r6, r6, #1
 8015160:	4406      	add	r6, r0
 8015162:	dc1a      	bgt.n	801519a <_strtod_l+0x26a>
 8015164:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015166:	230a      	movs	r3, #10
 8015168:	fb03 2301 	mla	r3, r3, r1, r2
 801516c:	9309      	str	r3, [sp, #36]	; 0x24
 801516e:	2300      	movs	r3, #0
 8015170:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015172:	1c51      	adds	r1, r2, #1
 8015174:	9115      	str	r1, [sp, #84]	; 0x54
 8015176:	7852      	ldrb	r2, [r2, #1]
 8015178:	4618      	mov	r0, r3
 801517a:	e7c9      	b.n	8015110 <_strtod_l+0x1e0>
 801517c:	4658      	mov	r0, fp
 801517e:	e7d2      	b.n	8015126 <_strtod_l+0x1f6>
 8015180:	2b08      	cmp	r3, #8
 8015182:	f103 0301 	add.w	r3, r3, #1
 8015186:	dc03      	bgt.n	8015190 <_strtod_l+0x260>
 8015188:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801518a:	434f      	muls	r7, r1
 801518c:	9709      	str	r7, [sp, #36]	; 0x24
 801518e:	e7e1      	b.n	8015154 <_strtod_l+0x224>
 8015190:	2b10      	cmp	r3, #16
 8015192:	bfd8      	it	le
 8015194:	fb01 fa0a 	mulle.w	sl, r1, sl
 8015198:	e7dc      	b.n	8015154 <_strtod_l+0x224>
 801519a:	2e10      	cmp	r6, #16
 801519c:	bfdc      	itt	le
 801519e:	230a      	movle	r3, #10
 80151a0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80151a4:	e7e3      	b.n	801516e <_strtod_l+0x23e>
 80151a6:	2300      	movs	r3, #0
 80151a8:	9305      	str	r3, [sp, #20]
 80151aa:	2301      	movs	r3, #1
 80151ac:	e780      	b.n	80150b0 <_strtod_l+0x180>
 80151ae:	f04f 0c00 	mov.w	ip, #0
 80151b2:	1caa      	adds	r2, r5, #2
 80151b4:	9215      	str	r2, [sp, #84]	; 0x54
 80151b6:	78aa      	ldrb	r2, [r5, #2]
 80151b8:	e788      	b.n	80150cc <_strtod_l+0x19c>
 80151ba:	f04f 0c01 	mov.w	ip, #1
 80151be:	e7f8      	b.n	80151b2 <_strtod_l+0x282>
 80151c0:	080184f4 	.word	0x080184f4
 80151c4:	080184e4 	.word	0x080184e4
 80151c8:	7ff00000 	.word	0x7ff00000
 80151cc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80151ce:	1c51      	adds	r1, r2, #1
 80151d0:	9115      	str	r1, [sp, #84]	; 0x54
 80151d2:	7852      	ldrb	r2, [r2, #1]
 80151d4:	2a30      	cmp	r2, #48	; 0x30
 80151d6:	d0f9      	beq.n	80151cc <_strtod_l+0x29c>
 80151d8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80151dc:	2908      	cmp	r1, #8
 80151de:	f63f af7a 	bhi.w	80150d6 <_strtod_l+0x1a6>
 80151e2:	3a30      	subs	r2, #48	; 0x30
 80151e4:	9208      	str	r2, [sp, #32]
 80151e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80151e8:	920c      	str	r2, [sp, #48]	; 0x30
 80151ea:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80151ec:	1c57      	adds	r7, r2, #1
 80151ee:	9715      	str	r7, [sp, #84]	; 0x54
 80151f0:	7852      	ldrb	r2, [r2, #1]
 80151f2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80151f6:	f1be 0f09 	cmp.w	lr, #9
 80151fa:	d938      	bls.n	801526e <_strtod_l+0x33e>
 80151fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80151fe:	1a7f      	subs	r7, r7, r1
 8015200:	2f08      	cmp	r7, #8
 8015202:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8015206:	dc03      	bgt.n	8015210 <_strtod_l+0x2e0>
 8015208:	9908      	ldr	r1, [sp, #32]
 801520a:	428f      	cmp	r7, r1
 801520c:	bfa8      	it	ge
 801520e:	460f      	movge	r7, r1
 8015210:	f1bc 0f00 	cmp.w	ip, #0
 8015214:	d000      	beq.n	8015218 <_strtod_l+0x2e8>
 8015216:	427f      	negs	r7, r7
 8015218:	2e00      	cmp	r6, #0
 801521a:	d14f      	bne.n	80152bc <_strtod_l+0x38c>
 801521c:	9904      	ldr	r1, [sp, #16]
 801521e:	4301      	orrs	r1, r0
 8015220:	f47f aec1 	bne.w	8014fa6 <_strtod_l+0x76>
 8015224:	2b00      	cmp	r3, #0
 8015226:	f47f aedb 	bne.w	8014fe0 <_strtod_l+0xb0>
 801522a:	2a69      	cmp	r2, #105	; 0x69
 801522c:	d029      	beq.n	8015282 <_strtod_l+0x352>
 801522e:	dc26      	bgt.n	801527e <_strtod_l+0x34e>
 8015230:	2a49      	cmp	r2, #73	; 0x49
 8015232:	d026      	beq.n	8015282 <_strtod_l+0x352>
 8015234:	2a4e      	cmp	r2, #78	; 0x4e
 8015236:	f47f aed3 	bne.w	8014fe0 <_strtod_l+0xb0>
 801523a:	499b      	ldr	r1, [pc, #620]	; (80154a8 <_strtod_l+0x578>)
 801523c:	a815      	add	r0, sp, #84	; 0x54
 801523e:	f001 fa2d 	bl	801669c <__match>
 8015242:	2800      	cmp	r0, #0
 8015244:	f43f aecc 	beq.w	8014fe0 <_strtod_l+0xb0>
 8015248:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801524a:	781b      	ldrb	r3, [r3, #0]
 801524c:	2b28      	cmp	r3, #40	; 0x28
 801524e:	d12f      	bne.n	80152b0 <_strtod_l+0x380>
 8015250:	4996      	ldr	r1, [pc, #600]	; (80154ac <_strtod_l+0x57c>)
 8015252:	aa18      	add	r2, sp, #96	; 0x60
 8015254:	a815      	add	r0, sp, #84	; 0x54
 8015256:	f001 fa35 	bl	80166c4 <__hexnan>
 801525a:	2805      	cmp	r0, #5
 801525c:	d128      	bne.n	80152b0 <_strtod_l+0x380>
 801525e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015260:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8015264:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8015268:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801526c:	e69b      	b.n	8014fa6 <_strtod_l+0x76>
 801526e:	9f08      	ldr	r7, [sp, #32]
 8015270:	210a      	movs	r1, #10
 8015272:	fb01 2107 	mla	r1, r1, r7, r2
 8015276:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801527a:	9208      	str	r2, [sp, #32]
 801527c:	e7b5      	b.n	80151ea <_strtod_l+0x2ba>
 801527e:	2a6e      	cmp	r2, #110	; 0x6e
 8015280:	e7d9      	b.n	8015236 <_strtod_l+0x306>
 8015282:	498b      	ldr	r1, [pc, #556]	; (80154b0 <_strtod_l+0x580>)
 8015284:	a815      	add	r0, sp, #84	; 0x54
 8015286:	f001 fa09 	bl	801669c <__match>
 801528a:	2800      	cmp	r0, #0
 801528c:	f43f aea8 	beq.w	8014fe0 <_strtod_l+0xb0>
 8015290:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015292:	4988      	ldr	r1, [pc, #544]	; (80154b4 <_strtod_l+0x584>)
 8015294:	3b01      	subs	r3, #1
 8015296:	a815      	add	r0, sp, #84	; 0x54
 8015298:	9315      	str	r3, [sp, #84]	; 0x54
 801529a:	f001 f9ff 	bl	801669c <__match>
 801529e:	b910      	cbnz	r0, 80152a6 <_strtod_l+0x376>
 80152a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80152a2:	3301      	adds	r3, #1
 80152a4:	9315      	str	r3, [sp, #84]	; 0x54
 80152a6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80154c4 <_strtod_l+0x594>
 80152aa:	f04f 0800 	mov.w	r8, #0
 80152ae:	e67a      	b.n	8014fa6 <_strtod_l+0x76>
 80152b0:	4881      	ldr	r0, [pc, #516]	; (80154b8 <_strtod_l+0x588>)
 80152b2:	f000 fef1 	bl	8016098 <nan>
 80152b6:	ec59 8b10 	vmov	r8, r9, d0
 80152ba:	e674      	b.n	8014fa6 <_strtod_l+0x76>
 80152bc:	9b05      	ldr	r3, [sp, #20]
 80152be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80152c0:	1afb      	subs	r3, r7, r3
 80152c2:	f1bb 0f00 	cmp.w	fp, #0
 80152c6:	bf08      	it	eq
 80152c8:	46b3      	moveq	fp, r6
 80152ca:	2e10      	cmp	r6, #16
 80152cc:	9308      	str	r3, [sp, #32]
 80152ce:	4635      	mov	r5, r6
 80152d0:	bfa8      	it	ge
 80152d2:	2510      	movge	r5, #16
 80152d4:	f7f2 fd46 	bl	8007d64 <__aeabi_ui2d>
 80152d8:	2e09      	cmp	r6, #9
 80152da:	4680      	mov	r8, r0
 80152dc:	4689      	mov	r9, r1
 80152de:	dd13      	ble.n	8015308 <_strtod_l+0x3d8>
 80152e0:	4b76      	ldr	r3, [pc, #472]	; (80154bc <_strtod_l+0x58c>)
 80152e2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80152e6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80152ea:	f7f2 fdb5 	bl	8007e58 <__aeabi_dmul>
 80152ee:	4680      	mov	r8, r0
 80152f0:	4650      	mov	r0, sl
 80152f2:	4689      	mov	r9, r1
 80152f4:	f7f2 fd36 	bl	8007d64 <__aeabi_ui2d>
 80152f8:	4602      	mov	r2, r0
 80152fa:	460b      	mov	r3, r1
 80152fc:	4640      	mov	r0, r8
 80152fe:	4649      	mov	r1, r9
 8015300:	f7f2 fbf4 	bl	8007aec <__adddf3>
 8015304:	4680      	mov	r8, r0
 8015306:	4689      	mov	r9, r1
 8015308:	2e0f      	cmp	r6, #15
 801530a:	dc38      	bgt.n	801537e <_strtod_l+0x44e>
 801530c:	9b08      	ldr	r3, [sp, #32]
 801530e:	2b00      	cmp	r3, #0
 8015310:	f43f ae49 	beq.w	8014fa6 <_strtod_l+0x76>
 8015314:	dd24      	ble.n	8015360 <_strtod_l+0x430>
 8015316:	2b16      	cmp	r3, #22
 8015318:	dc0b      	bgt.n	8015332 <_strtod_l+0x402>
 801531a:	4968      	ldr	r1, [pc, #416]	; (80154bc <_strtod_l+0x58c>)
 801531c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015320:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015324:	4642      	mov	r2, r8
 8015326:	464b      	mov	r3, r9
 8015328:	f7f2 fd96 	bl	8007e58 <__aeabi_dmul>
 801532c:	4680      	mov	r8, r0
 801532e:	4689      	mov	r9, r1
 8015330:	e639      	b.n	8014fa6 <_strtod_l+0x76>
 8015332:	9a08      	ldr	r2, [sp, #32]
 8015334:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8015338:	4293      	cmp	r3, r2
 801533a:	db20      	blt.n	801537e <_strtod_l+0x44e>
 801533c:	4c5f      	ldr	r4, [pc, #380]	; (80154bc <_strtod_l+0x58c>)
 801533e:	f1c6 060f 	rsb	r6, r6, #15
 8015342:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8015346:	4642      	mov	r2, r8
 8015348:	464b      	mov	r3, r9
 801534a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801534e:	f7f2 fd83 	bl	8007e58 <__aeabi_dmul>
 8015352:	9b08      	ldr	r3, [sp, #32]
 8015354:	1b9e      	subs	r6, r3, r6
 8015356:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801535a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801535e:	e7e3      	b.n	8015328 <_strtod_l+0x3f8>
 8015360:	9b08      	ldr	r3, [sp, #32]
 8015362:	3316      	adds	r3, #22
 8015364:	db0b      	blt.n	801537e <_strtod_l+0x44e>
 8015366:	9b05      	ldr	r3, [sp, #20]
 8015368:	1bdf      	subs	r7, r3, r7
 801536a:	4b54      	ldr	r3, [pc, #336]	; (80154bc <_strtod_l+0x58c>)
 801536c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8015370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015374:	4640      	mov	r0, r8
 8015376:	4649      	mov	r1, r9
 8015378:	f7f2 fe98 	bl	80080ac <__aeabi_ddiv>
 801537c:	e7d6      	b.n	801532c <_strtod_l+0x3fc>
 801537e:	9b08      	ldr	r3, [sp, #32]
 8015380:	1b75      	subs	r5, r6, r5
 8015382:	441d      	add	r5, r3
 8015384:	2d00      	cmp	r5, #0
 8015386:	dd70      	ble.n	801546a <_strtod_l+0x53a>
 8015388:	f015 030f 	ands.w	r3, r5, #15
 801538c:	d00a      	beq.n	80153a4 <_strtod_l+0x474>
 801538e:	494b      	ldr	r1, [pc, #300]	; (80154bc <_strtod_l+0x58c>)
 8015390:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015394:	4642      	mov	r2, r8
 8015396:	464b      	mov	r3, r9
 8015398:	e9d1 0100 	ldrd	r0, r1, [r1]
 801539c:	f7f2 fd5c 	bl	8007e58 <__aeabi_dmul>
 80153a0:	4680      	mov	r8, r0
 80153a2:	4689      	mov	r9, r1
 80153a4:	f035 050f 	bics.w	r5, r5, #15
 80153a8:	d04d      	beq.n	8015446 <_strtod_l+0x516>
 80153aa:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80153ae:	dd22      	ble.n	80153f6 <_strtod_l+0x4c6>
 80153b0:	2500      	movs	r5, #0
 80153b2:	46ab      	mov	fp, r5
 80153b4:	9509      	str	r5, [sp, #36]	; 0x24
 80153b6:	9505      	str	r5, [sp, #20]
 80153b8:	2322      	movs	r3, #34	; 0x22
 80153ba:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80154c4 <_strtod_l+0x594>
 80153be:	6023      	str	r3, [r4, #0]
 80153c0:	f04f 0800 	mov.w	r8, #0
 80153c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	f43f aded 	beq.w	8014fa6 <_strtod_l+0x76>
 80153cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80153ce:	4620      	mov	r0, r4
 80153d0:	f001 fb12 	bl	80169f8 <_Bfree>
 80153d4:	9905      	ldr	r1, [sp, #20]
 80153d6:	4620      	mov	r0, r4
 80153d8:	f001 fb0e 	bl	80169f8 <_Bfree>
 80153dc:	4659      	mov	r1, fp
 80153de:	4620      	mov	r0, r4
 80153e0:	f001 fb0a 	bl	80169f8 <_Bfree>
 80153e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80153e6:	4620      	mov	r0, r4
 80153e8:	f001 fb06 	bl	80169f8 <_Bfree>
 80153ec:	4629      	mov	r1, r5
 80153ee:	4620      	mov	r0, r4
 80153f0:	f001 fb02 	bl	80169f8 <_Bfree>
 80153f4:	e5d7      	b.n	8014fa6 <_strtod_l+0x76>
 80153f6:	4b32      	ldr	r3, [pc, #200]	; (80154c0 <_strtod_l+0x590>)
 80153f8:	9304      	str	r3, [sp, #16]
 80153fa:	2300      	movs	r3, #0
 80153fc:	112d      	asrs	r5, r5, #4
 80153fe:	4640      	mov	r0, r8
 8015400:	4649      	mov	r1, r9
 8015402:	469a      	mov	sl, r3
 8015404:	2d01      	cmp	r5, #1
 8015406:	dc21      	bgt.n	801544c <_strtod_l+0x51c>
 8015408:	b10b      	cbz	r3, 801540e <_strtod_l+0x4de>
 801540a:	4680      	mov	r8, r0
 801540c:	4689      	mov	r9, r1
 801540e:	492c      	ldr	r1, [pc, #176]	; (80154c0 <_strtod_l+0x590>)
 8015410:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8015414:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8015418:	4642      	mov	r2, r8
 801541a:	464b      	mov	r3, r9
 801541c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015420:	f7f2 fd1a 	bl	8007e58 <__aeabi_dmul>
 8015424:	4b27      	ldr	r3, [pc, #156]	; (80154c4 <_strtod_l+0x594>)
 8015426:	460a      	mov	r2, r1
 8015428:	400b      	ands	r3, r1
 801542a:	4927      	ldr	r1, [pc, #156]	; (80154c8 <_strtod_l+0x598>)
 801542c:	428b      	cmp	r3, r1
 801542e:	4680      	mov	r8, r0
 8015430:	d8be      	bhi.n	80153b0 <_strtod_l+0x480>
 8015432:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8015436:	428b      	cmp	r3, r1
 8015438:	bf86      	itte	hi
 801543a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80154cc <_strtod_l+0x59c>
 801543e:	f04f 38ff 	movhi.w	r8, #4294967295
 8015442:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8015446:	2300      	movs	r3, #0
 8015448:	9304      	str	r3, [sp, #16]
 801544a:	e07b      	b.n	8015544 <_strtod_l+0x614>
 801544c:	07ea      	lsls	r2, r5, #31
 801544e:	d505      	bpl.n	801545c <_strtod_l+0x52c>
 8015450:	9b04      	ldr	r3, [sp, #16]
 8015452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015456:	f7f2 fcff 	bl	8007e58 <__aeabi_dmul>
 801545a:	2301      	movs	r3, #1
 801545c:	9a04      	ldr	r2, [sp, #16]
 801545e:	3208      	adds	r2, #8
 8015460:	f10a 0a01 	add.w	sl, sl, #1
 8015464:	106d      	asrs	r5, r5, #1
 8015466:	9204      	str	r2, [sp, #16]
 8015468:	e7cc      	b.n	8015404 <_strtod_l+0x4d4>
 801546a:	d0ec      	beq.n	8015446 <_strtod_l+0x516>
 801546c:	426d      	negs	r5, r5
 801546e:	f015 020f 	ands.w	r2, r5, #15
 8015472:	d00a      	beq.n	801548a <_strtod_l+0x55a>
 8015474:	4b11      	ldr	r3, [pc, #68]	; (80154bc <_strtod_l+0x58c>)
 8015476:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801547a:	4640      	mov	r0, r8
 801547c:	4649      	mov	r1, r9
 801547e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015482:	f7f2 fe13 	bl	80080ac <__aeabi_ddiv>
 8015486:	4680      	mov	r8, r0
 8015488:	4689      	mov	r9, r1
 801548a:	112d      	asrs	r5, r5, #4
 801548c:	d0db      	beq.n	8015446 <_strtod_l+0x516>
 801548e:	2d1f      	cmp	r5, #31
 8015490:	dd1e      	ble.n	80154d0 <_strtod_l+0x5a0>
 8015492:	2500      	movs	r5, #0
 8015494:	46ab      	mov	fp, r5
 8015496:	9509      	str	r5, [sp, #36]	; 0x24
 8015498:	9505      	str	r5, [sp, #20]
 801549a:	2322      	movs	r3, #34	; 0x22
 801549c:	f04f 0800 	mov.w	r8, #0
 80154a0:	f04f 0900 	mov.w	r9, #0
 80154a4:	6023      	str	r3, [r4, #0]
 80154a6:	e78d      	b.n	80153c4 <_strtod_l+0x494>
 80154a8:	080184ef 	.word	0x080184ef
 80154ac:	08018508 	.word	0x08018508
 80154b0:	080184e6 	.word	0x080184e6
 80154b4:	080184e9 	.word	0x080184e9
 80154b8:	080188a2 	.word	0x080188a2
 80154bc:	08018760 	.word	0x08018760
 80154c0:	08018738 	.word	0x08018738
 80154c4:	7ff00000 	.word	0x7ff00000
 80154c8:	7ca00000 	.word	0x7ca00000
 80154cc:	7fefffff 	.word	0x7fefffff
 80154d0:	f015 0310 	ands.w	r3, r5, #16
 80154d4:	bf18      	it	ne
 80154d6:	236a      	movne	r3, #106	; 0x6a
 80154d8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801587c <_strtod_l+0x94c>
 80154dc:	9304      	str	r3, [sp, #16]
 80154de:	4640      	mov	r0, r8
 80154e0:	4649      	mov	r1, r9
 80154e2:	2300      	movs	r3, #0
 80154e4:	07ea      	lsls	r2, r5, #31
 80154e6:	d504      	bpl.n	80154f2 <_strtod_l+0x5c2>
 80154e8:	e9da 2300 	ldrd	r2, r3, [sl]
 80154ec:	f7f2 fcb4 	bl	8007e58 <__aeabi_dmul>
 80154f0:	2301      	movs	r3, #1
 80154f2:	106d      	asrs	r5, r5, #1
 80154f4:	f10a 0a08 	add.w	sl, sl, #8
 80154f8:	d1f4      	bne.n	80154e4 <_strtod_l+0x5b4>
 80154fa:	b10b      	cbz	r3, 8015500 <_strtod_l+0x5d0>
 80154fc:	4680      	mov	r8, r0
 80154fe:	4689      	mov	r9, r1
 8015500:	9b04      	ldr	r3, [sp, #16]
 8015502:	b1bb      	cbz	r3, 8015534 <_strtod_l+0x604>
 8015504:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8015508:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801550c:	2b00      	cmp	r3, #0
 801550e:	4649      	mov	r1, r9
 8015510:	dd10      	ble.n	8015534 <_strtod_l+0x604>
 8015512:	2b1f      	cmp	r3, #31
 8015514:	f340 811e 	ble.w	8015754 <_strtod_l+0x824>
 8015518:	2b34      	cmp	r3, #52	; 0x34
 801551a:	bfde      	ittt	le
 801551c:	f04f 33ff 	movle.w	r3, #4294967295
 8015520:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8015524:	4093      	lslle	r3, r2
 8015526:	f04f 0800 	mov.w	r8, #0
 801552a:	bfcc      	ite	gt
 801552c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8015530:	ea03 0901 	andle.w	r9, r3, r1
 8015534:	2200      	movs	r2, #0
 8015536:	2300      	movs	r3, #0
 8015538:	4640      	mov	r0, r8
 801553a:	4649      	mov	r1, r9
 801553c:	f7f2 fef4 	bl	8008328 <__aeabi_dcmpeq>
 8015540:	2800      	cmp	r0, #0
 8015542:	d1a6      	bne.n	8015492 <_strtod_l+0x562>
 8015544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015546:	9300      	str	r3, [sp, #0]
 8015548:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801554a:	4633      	mov	r3, r6
 801554c:	465a      	mov	r2, fp
 801554e:	4620      	mov	r0, r4
 8015550:	f001 faba 	bl	8016ac8 <__s2b>
 8015554:	9009      	str	r0, [sp, #36]	; 0x24
 8015556:	2800      	cmp	r0, #0
 8015558:	f43f af2a 	beq.w	80153b0 <_strtod_l+0x480>
 801555c:	9a08      	ldr	r2, [sp, #32]
 801555e:	9b05      	ldr	r3, [sp, #20]
 8015560:	2a00      	cmp	r2, #0
 8015562:	eba3 0307 	sub.w	r3, r3, r7
 8015566:	bfa8      	it	ge
 8015568:	2300      	movge	r3, #0
 801556a:	930c      	str	r3, [sp, #48]	; 0x30
 801556c:	2500      	movs	r5, #0
 801556e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015572:	9312      	str	r3, [sp, #72]	; 0x48
 8015574:	46ab      	mov	fp, r5
 8015576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015578:	4620      	mov	r0, r4
 801557a:	6859      	ldr	r1, [r3, #4]
 801557c:	f001 f9fc 	bl	8016978 <_Balloc>
 8015580:	9005      	str	r0, [sp, #20]
 8015582:	2800      	cmp	r0, #0
 8015584:	f43f af18 	beq.w	80153b8 <_strtod_l+0x488>
 8015588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801558a:	691a      	ldr	r2, [r3, #16]
 801558c:	3202      	adds	r2, #2
 801558e:	f103 010c 	add.w	r1, r3, #12
 8015592:	0092      	lsls	r2, r2, #2
 8015594:	300c      	adds	r0, #12
 8015596:	f000 fd70 	bl	801607a <memcpy>
 801559a:	ec49 8b10 	vmov	d0, r8, r9
 801559e:	aa18      	add	r2, sp, #96	; 0x60
 80155a0:	a917      	add	r1, sp, #92	; 0x5c
 80155a2:	4620      	mov	r0, r4
 80155a4:	f001 fdc4 	bl	8017130 <__d2b>
 80155a8:	ec49 8b18 	vmov	d8, r8, r9
 80155ac:	9016      	str	r0, [sp, #88]	; 0x58
 80155ae:	2800      	cmp	r0, #0
 80155b0:	f43f af02 	beq.w	80153b8 <_strtod_l+0x488>
 80155b4:	2101      	movs	r1, #1
 80155b6:	4620      	mov	r0, r4
 80155b8:	f001 fb1e 	bl	8016bf8 <__i2b>
 80155bc:	4683      	mov	fp, r0
 80155be:	2800      	cmp	r0, #0
 80155c0:	f43f aefa 	beq.w	80153b8 <_strtod_l+0x488>
 80155c4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80155c6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80155c8:	2e00      	cmp	r6, #0
 80155ca:	bfab      	itete	ge
 80155cc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80155ce:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80155d0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80155d2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80155d6:	bfac      	ite	ge
 80155d8:	eb06 0a03 	addge.w	sl, r6, r3
 80155dc:	1b9f      	sublt	r7, r3, r6
 80155de:	9b04      	ldr	r3, [sp, #16]
 80155e0:	1af6      	subs	r6, r6, r3
 80155e2:	4416      	add	r6, r2
 80155e4:	4ba0      	ldr	r3, [pc, #640]	; (8015868 <_strtod_l+0x938>)
 80155e6:	3e01      	subs	r6, #1
 80155e8:	429e      	cmp	r6, r3
 80155ea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80155ee:	f280 80c4 	bge.w	801577a <_strtod_l+0x84a>
 80155f2:	1b9b      	subs	r3, r3, r6
 80155f4:	2b1f      	cmp	r3, #31
 80155f6:	eba2 0203 	sub.w	r2, r2, r3
 80155fa:	f04f 0101 	mov.w	r1, #1
 80155fe:	f300 80b0 	bgt.w	8015762 <_strtod_l+0x832>
 8015602:	fa01 f303 	lsl.w	r3, r1, r3
 8015606:	930e      	str	r3, [sp, #56]	; 0x38
 8015608:	2300      	movs	r3, #0
 801560a:	930d      	str	r3, [sp, #52]	; 0x34
 801560c:	eb0a 0602 	add.w	r6, sl, r2
 8015610:	9b04      	ldr	r3, [sp, #16]
 8015612:	45b2      	cmp	sl, r6
 8015614:	4417      	add	r7, r2
 8015616:	441f      	add	r7, r3
 8015618:	4653      	mov	r3, sl
 801561a:	bfa8      	it	ge
 801561c:	4633      	movge	r3, r6
 801561e:	42bb      	cmp	r3, r7
 8015620:	bfa8      	it	ge
 8015622:	463b      	movge	r3, r7
 8015624:	2b00      	cmp	r3, #0
 8015626:	bfc2      	ittt	gt
 8015628:	1af6      	subgt	r6, r6, r3
 801562a:	1aff      	subgt	r7, r7, r3
 801562c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8015630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015632:	2b00      	cmp	r3, #0
 8015634:	dd17      	ble.n	8015666 <_strtod_l+0x736>
 8015636:	4659      	mov	r1, fp
 8015638:	461a      	mov	r2, r3
 801563a:	4620      	mov	r0, r4
 801563c:	f001 fb9c 	bl	8016d78 <__pow5mult>
 8015640:	4683      	mov	fp, r0
 8015642:	2800      	cmp	r0, #0
 8015644:	f43f aeb8 	beq.w	80153b8 <_strtod_l+0x488>
 8015648:	4601      	mov	r1, r0
 801564a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801564c:	4620      	mov	r0, r4
 801564e:	f001 fae9 	bl	8016c24 <__multiply>
 8015652:	900b      	str	r0, [sp, #44]	; 0x2c
 8015654:	2800      	cmp	r0, #0
 8015656:	f43f aeaf 	beq.w	80153b8 <_strtod_l+0x488>
 801565a:	9916      	ldr	r1, [sp, #88]	; 0x58
 801565c:	4620      	mov	r0, r4
 801565e:	f001 f9cb 	bl	80169f8 <_Bfree>
 8015662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015664:	9316      	str	r3, [sp, #88]	; 0x58
 8015666:	2e00      	cmp	r6, #0
 8015668:	f300 808c 	bgt.w	8015784 <_strtod_l+0x854>
 801566c:	9b08      	ldr	r3, [sp, #32]
 801566e:	2b00      	cmp	r3, #0
 8015670:	dd08      	ble.n	8015684 <_strtod_l+0x754>
 8015672:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015674:	9905      	ldr	r1, [sp, #20]
 8015676:	4620      	mov	r0, r4
 8015678:	f001 fb7e 	bl	8016d78 <__pow5mult>
 801567c:	9005      	str	r0, [sp, #20]
 801567e:	2800      	cmp	r0, #0
 8015680:	f43f ae9a 	beq.w	80153b8 <_strtod_l+0x488>
 8015684:	2f00      	cmp	r7, #0
 8015686:	dd08      	ble.n	801569a <_strtod_l+0x76a>
 8015688:	9905      	ldr	r1, [sp, #20]
 801568a:	463a      	mov	r2, r7
 801568c:	4620      	mov	r0, r4
 801568e:	f001 fbcd 	bl	8016e2c <__lshift>
 8015692:	9005      	str	r0, [sp, #20]
 8015694:	2800      	cmp	r0, #0
 8015696:	f43f ae8f 	beq.w	80153b8 <_strtod_l+0x488>
 801569a:	f1ba 0f00 	cmp.w	sl, #0
 801569e:	dd08      	ble.n	80156b2 <_strtod_l+0x782>
 80156a0:	4659      	mov	r1, fp
 80156a2:	4652      	mov	r2, sl
 80156a4:	4620      	mov	r0, r4
 80156a6:	f001 fbc1 	bl	8016e2c <__lshift>
 80156aa:	4683      	mov	fp, r0
 80156ac:	2800      	cmp	r0, #0
 80156ae:	f43f ae83 	beq.w	80153b8 <_strtod_l+0x488>
 80156b2:	9a05      	ldr	r2, [sp, #20]
 80156b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80156b6:	4620      	mov	r0, r4
 80156b8:	f001 fc40 	bl	8016f3c <__mdiff>
 80156bc:	4605      	mov	r5, r0
 80156be:	2800      	cmp	r0, #0
 80156c0:	f43f ae7a 	beq.w	80153b8 <_strtod_l+0x488>
 80156c4:	68c3      	ldr	r3, [r0, #12]
 80156c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80156c8:	2300      	movs	r3, #0
 80156ca:	60c3      	str	r3, [r0, #12]
 80156cc:	4659      	mov	r1, fp
 80156ce:	f001 fc19 	bl	8016f04 <__mcmp>
 80156d2:	2800      	cmp	r0, #0
 80156d4:	da60      	bge.n	8015798 <_strtod_l+0x868>
 80156d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80156d8:	ea53 0308 	orrs.w	r3, r3, r8
 80156dc:	f040 8084 	bne.w	80157e8 <_strtod_l+0x8b8>
 80156e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d17f      	bne.n	80157e8 <_strtod_l+0x8b8>
 80156e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80156ec:	0d1b      	lsrs	r3, r3, #20
 80156ee:	051b      	lsls	r3, r3, #20
 80156f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80156f4:	d978      	bls.n	80157e8 <_strtod_l+0x8b8>
 80156f6:	696b      	ldr	r3, [r5, #20]
 80156f8:	b913      	cbnz	r3, 8015700 <_strtod_l+0x7d0>
 80156fa:	692b      	ldr	r3, [r5, #16]
 80156fc:	2b01      	cmp	r3, #1
 80156fe:	dd73      	ble.n	80157e8 <_strtod_l+0x8b8>
 8015700:	4629      	mov	r1, r5
 8015702:	2201      	movs	r2, #1
 8015704:	4620      	mov	r0, r4
 8015706:	f001 fb91 	bl	8016e2c <__lshift>
 801570a:	4659      	mov	r1, fp
 801570c:	4605      	mov	r5, r0
 801570e:	f001 fbf9 	bl	8016f04 <__mcmp>
 8015712:	2800      	cmp	r0, #0
 8015714:	dd68      	ble.n	80157e8 <_strtod_l+0x8b8>
 8015716:	9904      	ldr	r1, [sp, #16]
 8015718:	4a54      	ldr	r2, [pc, #336]	; (801586c <_strtod_l+0x93c>)
 801571a:	464b      	mov	r3, r9
 801571c:	2900      	cmp	r1, #0
 801571e:	f000 8084 	beq.w	801582a <_strtod_l+0x8fa>
 8015722:	ea02 0109 	and.w	r1, r2, r9
 8015726:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801572a:	dc7e      	bgt.n	801582a <_strtod_l+0x8fa>
 801572c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015730:	f77f aeb3 	ble.w	801549a <_strtod_l+0x56a>
 8015734:	4b4e      	ldr	r3, [pc, #312]	; (8015870 <_strtod_l+0x940>)
 8015736:	4640      	mov	r0, r8
 8015738:	4649      	mov	r1, r9
 801573a:	2200      	movs	r2, #0
 801573c:	f7f2 fb8c 	bl	8007e58 <__aeabi_dmul>
 8015740:	4b4a      	ldr	r3, [pc, #296]	; (801586c <_strtod_l+0x93c>)
 8015742:	400b      	ands	r3, r1
 8015744:	4680      	mov	r8, r0
 8015746:	4689      	mov	r9, r1
 8015748:	2b00      	cmp	r3, #0
 801574a:	f47f ae3f 	bne.w	80153cc <_strtod_l+0x49c>
 801574e:	2322      	movs	r3, #34	; 0x22
 8015750:	6023      	str	r3, [r4, #0]
 8015752:	e63b      	b.n	80153cc <_strtod_l+0x49c>
 8015754:	f04f 32ff 	mov.w	r2, #4294967295
 8015758:	fa02 f303 	lsl.w	r3, r2, r3
 801575c:	ea03 0808 	and.w	r8, r3, r8
 8015760:	e6e8      	b.n	8015534 <_strtod_l+0x604>
 8015762:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8015766:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801576a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801576e:	36e2      	adds	r6, #226	; 0xe2
 8015770:	fa01 f306 	lsl.w	r3, r1, r6
 8015774:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8015778:	e748      	b.n	801560c <_strtod_l+0x6dc>
 801577a:	2100      	movs	r1, #0
 801577c:	2301      	movs	r3, #1
 801577e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8015782:	e743      	b.n	801560c <_strtod_l+0x6dc>
 8015784:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015786:	4632      	mov	r2, r6
 8015788:	4620      	mov	r0, r4
 801578a:	f001 fb4f 	bl	8016e2c <__lshift>
 801578e:	9016      	str	r0, [sp, #88]	; 0x58
 8015790:	2800      	cmp	r0, #0
 8015792:	f47f af6b 	bne.w	801566c <_strtod_l+0x73c>
 8015796:	e60f      	b.n	80153b8 <_strtod_l+0x488>
 8015798:	46ca      	mov	sl, r9
 801579a:	d171      	bne.n	8015880 <_strtod_l+0x950>
 801579c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801579e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80157a2:	b352      	cbz	r2, 80157fa <_strtod_l+0x8ca>
 80157a4:	4a33      	ldr	r2, [pc, #204]	; (8015874 <_strtod_l+0x944>)
 80157a6:	4293      	cmp	r3, r2
 80157a8:	d12a      	bne.n	8015800 <_strtod_l+0x8d0>
 80157aa:	9b04      	ldr	r3, [sp, #16]
 80157ac:	4641      	mov	r1, r8
 80157ae:	b1fb      	cbz	r3, 80157f0 <_strtod_l+0x8c0>
 80157b0:	4b2e      	ldr	r3, [pc, #184]	; (801586c <_strtod_l+0x93c>)
 80157b2:	ea09 0303 	and.w	r3, r9, r3
 80157b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80157ba:	f04f 32ff 	mov.w	r2, #4294967295
 80157be:	d81a      	bhi.n	80157f6 <_strtod_l+0x8c6>
 80157c0:	0d1b      	lsrs	r3, r3, #20
 80157c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80157c6:	fa02 f303 	lsl.w	r3, r2, r3
 80157ca:	4299      	cmp	r1, r3
 80157cc:	d118      	bne.n	8015800 <_strtod_l+0x8d0>
 80157ce:	4b2a      	ldr	r3, [pc, #168]	; (8015878 <_strtod_l+0x948>)
 80157d0:	459a      	cmp	sl, r3
 80157d2:	d102      	bne.n	80157da <_strtod_l+0x8aa>
 80157d4:	3101      	adds	r1, #1
 80157d6:	f43f adef 	beq.w	80153b8 <_strtod_l+0x488>
 80157da:	4b24      	ldr	r3, [pc, #144]	; (801586c <_strtod_l+0x93c>)
 80157dc:	ea0a 0303 	and.w	r3, sl, r3
 80157e0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80157e4:	f04f 0800 	mov.w	r8, #0
 80157e8:	9b04      	ldr	r3, [sp, #16]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d1a2      	bne.n	8015734 <_strtod_l+0x804>
 80157ee:	e5ed      	b.n	80153cc <_strtod_l+0x49c>
 80157f0:	f04f 33ff 	mov.w	r3, #4294967295
 80157f4:	e7e9      	b.n	80157ca <_strtod_l+0x89a>
 80157f6:	4613      	mov	r3, r2
 80157f8:	e7e7      	b.n	80157ca <_strtod_l+0x89a>
 80157fa:	ea53 0308 	orrs.w	r3, r3, r8
 80157fe:	d08a      	beq.n	8015716 <_strtod_l+0x7e6>
 8015800:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015802:	b1e3      	cbz	r3, 801583e <_strtod_l+0x90e>
 8015804:	ea13 0f0a 	tst.w	r3, sl
 8015808:	d0ee      	beq.n	80157e8 <_strtod_l+0x8b8>
 801580a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801580c:	9a04      	ldr	r2, [sp, #16]
 801580e:	4640      	mov	r0, r8
 8015810:	4649      	mov	r1, r9
 8015812:	b1c3      	cbz	r3, 8015846 <_strtod_l+0x916>
 8015814:	f7ff fb6d 	bl	8014ef2 <sulp>
 8015818:	4602      	mov	r2, r0
 801581a:	460b      	mov	r3, r1
 801581c:	ec51 0b18 	vmov	r0, r1, d8
 8015820:	f7f2 f964 	bl	8007aec <__adddf3>
 8015824:	4680      	mov	r8, r0
 8015826:	4689      	mov	r9, r1
 8015828:	e7de      	b.n	80157e8 <_strtod_l+0x8b8>
 801582a:	4013      	ands	r3, r2
 801582c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015830:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8015834:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8015838:	f04f 38ff 	mov.w	r8, #4294967295
 801583c:	e7d4      	b.n	80157e8 <_strtod_l+0x8b8>
 801583e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015840:	ea13 0f08 	tst.w	r3, r8
 8015844:	e7e0      	b.n	8015808 <_strtod_l+0x8d8>
 8015846:	f7ff fb54 	bl	8014ef2 <sulp>
 801584a:	4602      	mov	r2, r0
 801584c:	460b      	mov	r3, r1
 801584e:	ec51 0b18 	vmov	r0, r1, d8
 8015852:	f7f2 f949 	bl	8007ae8 <__aeabi_dsub>
 8015856:	2200      	movs	r2, #0
 8015858:	2300      	movs	r3, #0
 801585a:	4680      	mov	r8, r0
 801585c:	4689      	mov	r9, r1
 801585e:	f7f2 fd63 	bl	8008328 <__aeabi_dcmpeq>
 8015862:	2800      	cmp	r0, #0
 8015864:	d0c0      	beq.n	80157e8 <_strtod_l+0x8b8>
 8015866:	e618      	b.n	801549a <_strtod_l+0x56a>
 8015868:	fffffc02 	.word	0xfffffc02
 801586c:	7ff00000 	.word	0x7ff00000
 8015870:	39500000 	.word	0x39500000
 8015874:	000fffff 	.word	0x000fffff
 8015878:	7fefffff 	.word	0x7fefffff
 801587c:	08018520 	.word	0x08018520
 8015880:	4659      	mov	r1, fp
 8015882:	4628      	mov	r0, r5
 8015884:	f001 fcae 	bl	80171e4 <__ratio>
 8015888:	ec57 6b10 	vmov	r6, r7, d0
 801588c:	ee10 0a10 	vmov	r0, s0
 8015890:	2200      	movs	r2, #0
 8015892:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015896:	4639      	mov	r1, r7
 8015898:	f7f2 fd5a 	bl	8008350 <__aeabi_dcmple>
 801589c:	2800      	cmp	r0, #0
 801589e:	d071      	beq.n	8015984 <_strtod_l+0xa54>
 80158a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d17c      	bne.n	80159a0 <_strtod_l+0xa70>
 80158a6:	f1b8 0f00 	cmp.w	r8, #0
 80158aa:	d15a      	bne.n	8015962 <_strtod_l+0xa32>
 80158ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d15d      	bne.n	8015970 <_strtod_l+0xa40>
 80158b4:	4b90      	ldr	r3, [pc, #576]	; (8015af8 <_strtod_l+0xbc8>)
 80158b6:	2200      	movs	r2, #0
 80158b8:	4630      	mov	r0, r6
 80158ba:	4639      	mov	r1, r7
 80158bc:	f7f2 fd3e 	bl	800833c <__aeabi_dcmplt>
 80158c0:	2800      	cmp	r0, #0
 80158c2:	d15c      	bne.n	801597e <_strtod_l+0xa4e>
 80158c4:	4630      	mov	r0, r6
 80158c6:	4639      	mov	r1, r7
 80158c8:	4b8c      	ldr	r3, [pc, #560]	; (8015afc <_strtod_l+0xbcc>)
 80158ca:	2200      	movs	r2, #0
 80158cc:	f7f2 fac4 	bl	8007e58 <__aeabi_dmul>
 80158d0:	4606      	mov	r6, r0
 80158d2:	460f      	mov	r7, r1
 80158d4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80158d8:	9606      	str	r6, [sp, #24]
 80158da:	9307      	str	r3, [sp, #28]
 80158dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80158e0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80158e4:	4b86      	ldr	r3, [pc, #536]	; (8015b00 <_strtod_l+0xbd0>)
 80158e6:	ea0a 0303 	and.w	r3, sl, r3
 80158ea:	930d      	str	r3, [sp, #52]	; 0x34
 80158ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80158ee:	4b85      	ldr	r3, [pc, #532]	; (8015b04 <_strtod_l+0xbd4>)
 80158f0:	429a      	cmp	r2, r3
 80158f2:	f040 8090 	bne.w	8015a16 <_strtod_l+0xae6>
 80158f6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80158fa:	ec49 8b10 	vmov	d0, r8, r9
 80158fe:	f001 fba7 	bl	8017050 <__ulp>
 8015902:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015906:	ec51 0b10 	vmov	r0, r1, d0
 801590a:	f7f2 faa5 	bl	8007e58 <__aeabi_dmul>
 801590e:	4642      	mov	r2, r8
 8015910:	464b      	mov	r3, r9
 8015912:	f7f2 f8eb 	bl	8007aec <__adddf3>
 8015916:	460b      	mov	r3, r1
 8015918:	4979      	ldr	r1, [pc, #484]	; (8015b00 <_strtod_l+0xbd0>)
 801591a:	4a7b      	ldr	r2, [pc, #492]	; (8015b08 <_strtod_l+0xbd8>)
 801591c:	4019      	ands	r1, r3
 801591e:	4291      	cmp	r1, r2
 8015920:	4680      	mov	r8, r0
 8015922:	d944      	bls.n	80159ae <_strtod_l+0xa7e>
 8015924:	ee18 2a90 	vmov	r2, s17
 8015928:	4b78      	ldr	r3, [pc, #480]	; (8015b0c <_strtod_l+0xbdc>)
 801592a:	429a      	cmp	r2, r3
 801592c:	d104      	bne.n	8015938 <_strtod_l+0xa08>
 801592e:	ee18 3a10 	vmov	r3, s16
 8015932:	3301      	adds	r3, #1
 8015934:	f43f ad40 	beq.w	80153b8 <_strtod_l+0x488>
 8015938:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8015b0c <_strtod_l+0xbdc>
 801593c:	f04f 38ff 	mov.w	r8, #4294967295
 8015940:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015942:	4620      	mov	r0, r4
 8015944:	f001 f858 	bl	80169f8 <_Bfree>
 8015948:	9905      	ldr	r1, [sp, #20]
 801594a:	4620      	mov	r0, r4
 801594c:	f001 f854 	bl	80169f8 <_Bfree>
 8015950:	4659      	mov	r1, fp
 8015952:	4620      	mov	r0, r4
 8015954:	f001 f850 	bl	80169f8 <_Bfree>
 8015958:	4629      	mov	r1, r5
 801595a:	4620      	mov	r0, r4
 801595c:	f001 f84c 	bl	80169f8 <_Bfree>
 8015960:	e609      	b.n	8015576 <_strtod_l+0x646>
 8015962:	f1b8 0f01 	cmp.w	r8, #1
 8015966:	d103      	bne.n	8015970 <_strtod_l+0xa40>
 8015968:	f1b9 0f00 	cmp.w	r9, #0
 801596c:	f43f ad95 	beq.w	801549a <_strtod_l+0x56a>
 8015970:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8015ac8 <_strtod_l+0xb98>
 8015974:	4f60      	ldr	r7, [pc, #384]	; (8015af8 <_strtod_l+0xbc8>)
 8015976:	ed8d 7b06 	vstr	d7, [sp, #24]
 801597a:	2600      	movs	r6, #0
 801597c:	e7ae      	b.n	80158dc <_strtod_l+0x9ac>
 801597e:	4f5f      	ldr	r7, [pc, #380]	; (8015afc <_strtod_l+0xbcc>)
 8015980:	2600      	movs	r6, #0
 8015982:	e7a7      	b.n	80158d4 <_strtod_l+0x9a4>
 8015984:	4b5d      	ldr	r3, [pc, #372]	; (8015afc <_strtod_l+0xbcc>)
 8015986:	4630      	mov	r0, r6
 8015988:	4639      	mov	r1, r7
 801598a:	2200      	movs	r2, #0
 801598c:	f7f2 fa64 	bl	8007e58 <__aeabi_dmul>
 8015990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015992:	4606      	mov	r6, r0
 8015994:	460f      	mov	r7, r1
 8015996:	2b00      	cmp	r3, #0
 8015998:	d09c      	beq.n	80158d4 <_strtod_l+0x9a4>
 801599a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801599e:	e79d      	b.n	80158dc <_strtod_l+0x9ac>
 80159a0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8015ad0 <_strtod_l+0xba0>
 80159a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80159a8:	ec57 6b17 	vmov	r6, r7, d7
 80159ac:	e796      	b.n	80158dc <_strtod_l+0x9ac>
 80159ae:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80159b2:	9b04      	ldr	r3, [sp, #16]
 80159b4:	46ca      	mov	sl, r9
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d1c2      	bne.n	8015940 <_strtod_l+0xa10>
 80159ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80159be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80159c0:	0d1b      	lsrs	r3, r3, #20
 80159c2:	051b      	lsls	r3, r3, #20
 80159c4:	429a      	cmp	r2, r3
 80159c6:	d1bb      	bne.n	8015940 <_strtod_l+0xa10>
 80159c8:	4630      	mov	r0, r6
 80159ca:	4639      	mov	r1, r7
 80159cc:	f7f2 fd7c 	bl	80084c8 <__aeabi_d2lz>
 80159d0:	f7f2 fa14 	bl	8007dfc <__aeabi_l2d>
 80159d4:	4602      	mov	r2, r0
 80159d6:	460b      	mov	r3, r1
 80159d8:	4630      	mov	r0, r6
 80159da:	4639      	mov	r1, r7
 80159dc:	f7f2 f884 	bl	8007ae8 <__aeabi_dsub>
 80159e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80159e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80159e6:	ea43 0308 	orr.w	r3, r3, r8
 80159ea:	4313      	orrs	r3, r2
 80159ec:	4606      	mov	r6, r0
 80159ee:	460f      	mov	r7, r1
 80159f0:	d054      	beq.n	8015a9c <_strtod_l+0xb6c>
 80159f2:	a339      	add	r3, pc, #228	; (adr r3, 8015ad8 <_strtod_l+0xba8>)
 80159f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159f8:	f7f2 fca0 	bl	800833c <__aeabi_dcmplt>
 80159fc:	2800      	cmp	r0, #0
 80159fe:	f47f ace5 	bne.w	80153cc <_strtod_l+0x49c>
 8015a02:	a337      	add	r3, pc, #220	; (adr r3, 8015ae0 <_strtod_l+0xbb0>)
 8015a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a08:	4630      	mov	r0, r6
 8015a0a:	4639      	mov	r1, r7
 8015a0c:	f7f2 fcb4 	bl	8008378 <__aeabi_dcmpgt>
 8015a10:	2800      	cmp	r0, #0
 8015a12:	d095      	beq.n	8015940 <_strtod_l+0xa10>
 8015a14:	e4da      	b.n	80153cc <_strtod_l+0x49c>
 8015a16:	9b04      	ldr	r3, [sp, #16]
 8015a18:	b333      	cbz	r3, 8015a68 <_strtod_l+0xb38>
 8015a1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015a1c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015a20:	d822      	bhi.n	8015a68 <_strtod_l+0xb38>
 8015a22:	a331      	add	r3, pc, #196	; (adr r3, 8015ae8 <_strtod_l+0xbb8>)
 8015a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a28:	4630      	mov	r0, r6
 8015a2a:	4639      	mov	r1, r7
 8015a2c:	f7f2 fc90 	bl	8008350 <__aeabi_dcmple>
 8015a30:	b1a0      	cbz	r0, 8015a5c <_strtod_l+0xb2c>
 8015a32:	4639      	mov	r1, r7
 8015a34:	4630      	mov	r0, r6
 8015a36:	f7f2 fcbf 	bl	80083b8 <__aeabi_d2uiz>
 8015a3a:	2801      	cmp	r0, #1
 8015a3c:	bf38      	it	cc
 8015a3e:	2001      	movcc	r0, #1
 8015a40:	f7f2 f990 	bl	8007d64 <__aeabi_ui2d>
 8015a44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a46:	4606      	mov	r6, r0
 8015a48:	460f      	mov	r7, r1
 8015a4a:	bb23      	cbnz	r3, 8015a96 <_strtod_l+0xb66>
 8015a4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015a50:	9010      	str	r0, [sp, #64]	; 0x40
 8015a52:	9311      	str	r3, [sp, #68]	; 0x44
 8015a54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015a58:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8015a5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015a60:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8015a64:	1a9b      	subs	r3, r3, r2
 8015a66:	930f      	str	r3, [sp, #60]	; 0x3c
 8015a68:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8015a6c:	eeb0 0a48 	vmov.f32	s0, s16
 8015a70:	eef0 0a68 	vmov.f32	s1, s17
 8015a74:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8015a78:	f001 faea 	bl	8017050 <__ulp>
 8015a7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8015a80:	ec53 2b10 	vmov	r2, r3, d0
 8015a84:	f7f2 f9e8 	bl	8007e58 <__aeabi_dmul>
 8015a88:	ec53 2b18 	vmov	r2, r3, d8
 8015a8c:	f7f2 f82e 	bl	8007aec <__adddf3>
 8015a90:	4680      	mov	r8, r0
 8015a92:	4689      	mov	r9, r1
 8015a94:	e78d      	b.n	80159b2 <_strtod_l+0xa82>
 8015a96:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8015a9a:	e7db      	b.n	8015a54 <_strtod_l+0xb24>
 8015a9c:	a314      	add	r3, pc, #80	; (adr r3, 8015af0 <_strtod_l+0xbc0>)
 8015a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aa2:	f7f2 fc4b 	bl	800833c <__aeabi_dcmplt>
 8015aa6:	e7b3      	b.n	8015a10 <_strtod_l+0xae0>
 8015aa8:	2300      	movs	r3, #0
 8015aaa:	930a      	str	r3, [sp, #40]	; 0x28
 8015aac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015aae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015ab0:	6013      	str	r3, [r2, #0]
 8015ab2:	f7ff ba7c 	b.w	8014fae <_strtod_l+0x7e>
 8015ab6:	2a65      	cmp	r2, #101	; 0x65
 8015ab8:	f43f ab75 	beq.w	80151a6 <_strtod_l+0x276>
 8015abc:	2a45      	cmp	r2, #69	; 0x45
 8015abe:	f43f ab72 	beq.w	80151a6 <_strtod_l+0x276>
 8015ac2:	2301      	movs	r3, #1
 8015ac4:	f7ff bbaa 	b.w	801521c <_strtod_l+0x2ec>
 8015ac8:	00000000 	.word	0x00000000
 8015acc:	bff00000 	.word	0xbff00000
 8015ad0:	00000000 	.word	0x00000000
 8015ad4:	3ff00000 	.word	0x3ff00000
 8015ad8:	94a03595 	.word	0x94a03595
 8015adc:	3fdfffff 	.word	0x3fdfffff
 8015ae0:	35afe535 	.word	0x35afe535
 8015ae4:	3fe00000 	.word	0x3fe00000
 8015ae8:	ffc00000 	.word	0xffc00000
 8015aec:	41dfffff 	.word	0x41dfffff
 8015af0:	94a03595 	.word	0x94a03595
 8015af4:	3fcfffff 	.word	0x3fcfffff
 8015af8:	3ff00000 	.word	0x3ff00000
 8015afc:	3fe00000 	.word	0x3fe00000
 8015b00:	7ff00000 	.word	0x7ff00000
 8015b04:	7fe00000 	.word	0x7fe00000
 8015b08:	7c9fffff 	.word	0x7c9fffff
 8015b0c:	7fefffff 	.word	0x7fefffff

08015b10 <strtof>:
 8015b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b14:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8015bd8 <strtof+0xc8>
 8015b18:	4b2a      	ldr	r3, [pc, #168]	; (8015bc4 <strtof+0xb4>)
 8015b1a:	460a      	mov	r2, r1
 8015b1c:	ed2d 8b02 	vpush	{d8}
 8015b20:	4601      	mov	r1, r0
 8015b22:	f8d8 0000 	ldr.w	r0, [r8]
 8015b26:	f7ff fa03 	bl	8014f30 <_strtod_l>
 8015b2a:	ec55 4b10 	vmov	r4, r5, d0
 8015b2e:	ee10 2a10 	vmov	r2, s0
 8015b32:	ee10 0a10 	vmov	r0, s0
 8015b36:	462b      	mov	r3, r5
 8015b38:	4629      	mov	r1, r5
 8015b3a:	f7f2 fc27 	bl	800838c <__aeabi_dcmpun>
 8015b3e:	b190      	cbz	r0, 8015b66 <strtof+0x56>
 8015b40:	2d00      	cmp	r5, #0
 8015b42:	4821      	ldr	r0, [pc, #132]	; (8015bc8 <strtof+0xb8>)
 8015b44:	da09      	bge.n	8015b5a <strtof+0x4a>
 8015b46:	f000 faaf 	bl	80160a8 <nanf>
 8015b4a:	eeb1 8a40 	vneg.f32	s16, s0
 8015b4e:	eeb0 0a48 	vmov.f32	s0, s16
 8015b52:	ecbd 8b02 	vpop	{d8}
 8015b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b5a:	ecbd 8b02 	vpop	{d8}
 8015b5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015b62:	f000 baa1 	b.w	80160a8 <nanf>
 8015b66:	4620      	mov	r0, r4
 8015b68:	4629      	mov	r1, r5
 8015b6a:	f7f2 fc45 	bl	80083f8 <__aeabi_d2f>
 8015b6e:	ee08 0a10 	vmov	s16, r0
 8015b72:	eddf 7a16 	vldr	s15, [pc, #88]	; 8015bcc <strtof+0xbc>
 8015b76:	eeb0 7ac8 	vabs.f32	s14, s16
 8015b7a:	eeb4 7a67 	vcmp.f32	s14, s15
 8015b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b82:	dd11      	ble.n	8015ba8 <strtof+0x98>
 8015b84:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8015b88:	4b11      	ldr	r3, [pc, #68]	; (8015bd0 <strtof+0xc0>)
 8015b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8015b8e:	4620      	mov	r0, r4
 8015b90:	4639      	mov	r1, r7
 8015b92:	f7f2 fbfb 	bl	800838c <__aeabi_dcmpun>
 8015b96:	b980      	cbnz	r0, 8015bba <strtof+0xaa>
 8015b98:	4b0d      	ldr	r3, [pc, #52]	; (8015bd0 <strtof+0xc0>)
 8015b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8015b9e:	4620      	mov	r0, r4
 8015ba0:	4639      	mov	r1, r7
 8015ba2:	f7f2 fbd5 	bl	8008350 <__aeabi_dcmple>
 8015ba6:	b940      	cbnz	r0, 8015bba <strtof+0xaa>
 8015ba8:	ee18 3a10 	vmov	r3, s16
 8015bac:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8015bb0:	d1cd      	bne.n	8015b4e <strtof+0x3e>
 8015bb2:	4b08      	ldr	r3, [pc, #32]	; (8015bd4 <strtof+0xc4>)
 8015bb4:	402b      	ands	r3, r5
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d0c9      	beq.n	8015b4e <strtof+0x3e>
 8015bba:	f8d8 3000 	ldr.w	r3, [r8]
 8015bbe:	2222      	movs	r2, #34	; 0x22
 8015bc0:	601a      	str	r2, [r3, #0]
 8015bc2:	e7c4      	b.n	8015b4e <strtof+0x3e>
 8015bc4:	200001a4 	.word	0x200001a4
 8015bc8:	080188a2 	.word	0x080188a2
 8015bcc:	7f7fffff 	.word	0x7f7fffff
 8015bd0:	7fefffff 	.word	0x7fefffff
 8015bd4:	7ff00000 	.word	0x7ff00000
 8015bd8:	2000035c 	.word	0x2000035c

08015bdc <_strtoul_l.constprop.0>:
 8015bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015be0:	4f36      	ldr	r7, [pc, #216]	; (8015cbc <_strtoul_l.constprop.0+0xe0>)
 8015be2:	4686      	mov	lr, r0
 8015be4:	460d      	mov	r5, r1
 8015be6:	4628      	mov	r0, r5
 8015be8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015bec:	5d3e      	ldrb	r6, [r7, r4]
 8015bee:	f016 0608 	ands.w	r6, r6, #8
 8015bf2:	d1f8      	bne.n	8015be6 <_strtoul_l.constprop.0+0xa>
 8015bf4:	2c2d      	cmp	r4, #45	; 0x2d
 8015bf6:	d130      	bne.n	8015c5a <_strtoul_l.constprop.0+0x7e>
 8015bf8:	782c      	ldrb	r4, [r5, #0]
 8015bfa:	2601      	movs	r6, #1
 8015bfc:	1c85      	adds	r5, r0, #2
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d057      	beq.n	8015cb2 <_strtoul_l.constprop.0+0xd6>
 8015c02:	2b10      	cmp	r3, #16
 8015c04:	d109      	bne.n	8015c1a <_strtoul_l.constprop.0+0x3e>
 8015c06:	2c30      	cmp	r4, #48	; 0x30
 8015c08:	d107      	bne.n	8015c1a <_strtoul_l.constprop.0+0x3e>
 8015c0a:	7828      	ldrb	r0, [r5, #0]
 8015c0c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8015c10:	2858      	cmp	r0, #88	; 0x58
 8015c12:	d149      	bne.n	8015ca8 <_strtoul_l.constprop.0+0xcc>
 8015c14:	786c      	ldrb	r4, [r5, #1]
 8015c16:	2310      	movs	r3, #16
 8015c18:	3502      	adds	r5, #2
 8015c1a:	f04f 38ff 	mov.w	r8, #4294967295
 8015c1e:	2700      	movs	r7, #0
 8015c20:	fbb8 f8f3 	udiv	r8, r8, r3
 8015c24:	fb03 f908 	mul.w	r9, r3, r8
 8015c28:	ea6f 0909 	mvn.w	r9, r9
 8015c2c:	4638      	mov	r0, r7
 8015c2e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8015c32:	f1bc 0f09 	cmp.w	ip, #9
 8015c36:	d815      	bhi.n	8015c64 <_strtoul_l.constprop.0+0x88>
 8015c38:	4664      	mov	r4, ip
 8015c3a:	42a3      	cmp	r3, r4
 8015c3c:	dd23      	ble.n	8015c86 <_strtoul_l.constprop.0+0xaa>
 8015c3e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8015c42:	d007      	beq.n	8015c54 <_strtoul_l.constprop.0+0x78>
 8015c44:	4580      	cmp	r8, r0
 8015c46:	d31b      	bcc.n	8015c80 <_strtoul_l.constprop.0+0xa4>
 8015c48:	d101      	bne.n	8015c4e <_strtoul_l.constprop.0+0x72>
 8015c4a:	45a1      	cmp	r9, r4
 8015c4c:	db18      	blt.n	8015c80 <_strtoul_l.constprop.0+0xa4>
 8015c4e:	fb00 4003 	mla	r0, r0, r3, r4
 8015c52:	2701      	movs	r7, #1
 8015c54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015c58:	e7e9      	b.n	8015c2e <_strtoul_l.constprop.0+0x52>
 8015c5a:	2c2b      	cmp	r4, #43	; 0x2b
 8015c5c:	bf04      	itt	eq
 8015c5e:	782c      	ldrbeq	r4, [r5, #0]
 8015c60:	1c85      	addeq	r5, r0, #2
 8015c62:	e7cc      	b.n	8015bfe <_strtoul_l.constprop.0+0x22>
 8015c64:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8015c68:	f1bc 0f19 	cmp.w	ip, #25
 8015c6c:	d801      	bhi.n	8015c72 <_strtoul_l.constprop.0+0x96>
 8015c6e:	3c37      	subs	r4, #55	; 0x37
 8015c70:	e7e3      	b.n	8015c3a <_strtoul_l.constprop.0+0x5e>
 8015c72:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8015c76:	f1bc 0f19 	cmp.w	ip, #25
 8015c7a:	d804      	bhi.n	8015c86 <_strtoul_l.constprop.0+0xaa>
 8015c7c:	3c57      	subs	r4, #87	; 0x57
 8015c7e:	e7dc      	b.n	8015c3a <_strtoul_l.constprop.0+0x5e>
 8015c80:	f04f 37ff 	mov.w	r7, #4294967295
 8015c84:	e7e6      	b.n	8015c54 <_strtoul_l.constprop.0+0x78>
 8015c86:	1c7b      	adds	r3, r7, #1
 8015c88:	d106      	bne.n	8015c98 <_strtoul_l.constprop.0+0xbc>
 8015c8a:	2322      	movs	r3, #34	; 0x22
 8015c8c:	f8ce 3000 	str.w	r3, [lr]
 8015c90:	4638      	mov	r0, r7
 8015c92:	b932      	cbnz	r2, 8015ca2 <_strtoul_l.constprop.0+0xc6>
 8015c94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c98:	b106      	cbz	r6, 8015c9c <_strtoul_l.constprop.0+0xc0>
 8015c9a:	4240      	negs	r0, r0
 8015c9c:	2a00      	cmp	r2, #0
 8015c9e:	d0f9      	beq.n	8015c94 <_strtoul_l.constprop.0+0xb8>
 8015ca0:	b107      	cbz	r7, 8015ca4 <_strtoul_l.constprop.0+0xc8>
 8015ca2:	1e69      	subs	r1, r5, #1
 8015ca4:	6011      	str	r1, [r2, #0]
 8015ca6:	e7f5      	b.n	8015c94 <_strtoul_l.constprop.0+0xb8>
 8015ca8:	2430      	movs	r4, #48	; 0x30
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d1b5      	bne.n	8015c1a <_strtoul_l.constprop.0+0x3e>
 8015cae:	2308      	movs	r3, #8
 8015cb0:	e7b3      	b.n	8015c1a <_strtoul_l.constprop.0+0x3e>
 8015cb2:	2c30      	cmp	r4, #48	; 0x30
 8015cb4:	d0a9      	beq.n	8015c0a <_strtoul_l.constprop.0+0x2e>
 8015cb6:	230a      	movs	r3, #10
 8015cb8:	e7af      	b.n	8015c1a <_strtoul_l.constprop.0+0x3e>
 8015cba:	bf00      	nop
 8015cbc:	08018549 	.word	0x08018549

08015cc0 <strtoul>:
 8015cc0:	4613      	mov	r3, r2
 8015cc2:	460a      	mov	r2, r1
 8015cc4:	4601      	mov	r1, r0
 8015cc6:	4802      	ldr	r0, [pc, #8]	; (8015cd0 <strtoul+0x10>)
 8015cc8:	6800      	ldr	r0, [r0, #0]
 8015cca:	f7ff bf87 	b.w	8015bdc <_strtoul_l.constprop.0>
 8015cce:	bf00      	nop
 8015cd0:	2000035c 	.word	0x2000035c

08015cd4 <std>:
 8015cd4:	2300      	movs	r3, #0
 8015cd6:	b510      	push	{r4, lr}
 8015cd8:	4604      	mov	r4, r0
 8015cda:	e9c0 3300 	strd	r3, r3, [r0]
 8015cde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015ce2:	6083      	str	r3, [r0, #8]
 8015ce4:	8181      	strh	r1, [r0, #12]
 8015ce6:	6643      	str	r3, [r0, #100]	; 0x64
 8015ce8:	81c2      	strh	r2, [r0, #14]
 8015cea:	6183      	str	r3, [r0, #24]
 8015cec:	4619      	mov	r1, r3
 8015cee:	2208      	movs	r2, #8
 8015cf0:	305c      	adds	r0, #92	; 0x5c
 8015cf2:	f000 f92d 	bl	8015f50 <memset>
 8015cf6:	4b0d      	ldr	r3, [pc, #52]	; (8015d2c <std+0x58>)
 8015cf8:	6263      	str	r3, [r4, #36]	; 0x24
 8015cfa:	4b0d      	ldr	r3, [pc, #52]	; (8015d30 <std+0x5c>)
 8015cfc:	62a3      	str	r3, [r4, #40]	; 0x28
 8015cfe:	4b0d      	ldr	r3, [pc, #52]	; (8015d34 <std+0x60>)
 8015d00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015d02:	4b0d      	ldr	r3, [pc, #52]	; (8015d38 <std+0x64>)
 8015d04:	6323      	str	r3, [r4, #48]	; 0x30
 8015d06:	4b0d      	ldr	r3, [pc, #52]	; (8015d3c <std+0x68>)
 8015d08:	6224      	str	r4, [r4, #32]
 8015d0a:	429c      	cmp	r4, r3
 8015d0c:	d006      	beq.n	8015d1c <std+0x48>
 8015d0e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8015d12:	4294      	cmp	r4, r2
 8015d14:	d002      	beq.n	8015d1c <std+0x48>
 8015d16:	33d0      	adds	r3, #208	; 0xd0
 8015d18:	429c      	cmp	r4, r3
 8015d1a:	d105      	bne.n	8015d28 <std+0x54>
 8015d1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015d24:	f000 b99e 	b.w	8016064 <__retarget_lock_init_recursive>
 8015d28:	bd10      	pop	{r4, pc}
 8015d2a:	bf00      	nop
 8015d2c:	08015e59 	.word	0x08015e59
 8015d30:	08015e7b 	.word	0x08015e7b
 8015d34:	08015eb3 	.word	0x08015eb3
 8015d38:	08015ed7 	.word	0x08015ed7
 8015d3c:	20003554 	.word	0x20003554

08015d40 <stdio_exit_handler>:
 8015d40:	4a02      	ldr	r2, [pc, #8]	; (8015d4c <stdio_exit_handler+0xc>)
 8015d42:	4903      	ldr	r1, [pc, #12]	; (8015d50 <stdio_exit_handler+0x10>)
 8015d44:	4803      	ldr	r0, [pc, #12]	; (8015d54 <stdio_exit_handler+0x14>)
 8015d46:	f000 b869 	b.w	8015e1c <_fwalk_sglue>
 8015d4a:	bf00      	nop
 8015d4c:	20000198 	.word	0x20000198
 8015d50:	080179c9 	.word	0x080179c9
 8015d54:	20000310 	.word	0x20000310

08015d58 <cleanup_stdio>:
 8015d58:	6841      	ldr	r1, [r0, #4]
 8015d5a:	4b0c      	ldr	r3, [pc, #48]	; (8015d8c <cleanup_stdio+0x34>)
 8015d5c:	4299      	cmp	r1, r3
 8015d5e:	b510      	push	{r4, lr}
 8015d60:	4604      	mov	r4, r0
 8015d62:	d001      	beq.n	8015d68 <cleanup_stdio+0x10>
 8015d64:	f001 fe30 	bl	80179c8 <_fflush_r>
 8015d68:	68a1      	ldr	r1, [r4, #8]
 8015d6a:	4b09      	ldr	r3, [pc, #36]	; (8015d90 <cleanup_stdio+0x38>)
 8015d6c:	4299      	cmp	r1, r3
 8015d6e:	d002      	beq.n	8015d76 <cleanup_stdio+0x1e>
 8015d70:	4620      	mov	r0, r4
 8015d72:	f001 fe29 	bl	80179c8 <_fflush_r>
 8015d76:	68e1      	ldr	r1, [r4, #12]
 8015d78:	4b06      	ldr	r3, [pc, #24]	; (8015d94 <cleanup_stdio+0x3c>)
 8015d7a:	4299      	cmp	r1, r3
 8015d7c:	d004      	beq.n	8015d88 <cleanup_stdio+0x30>
 8015d7e:	4620      	mov	r0, r4
 8015d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015d84:	f001 be20 	b.w	80179c8 <_fflush_r>
 8015d88:	bd10      	pop	{r4, pc}
 8015d8a:	bf00      	nop
 8015d8c:	20003554 	.word	0x20003554
 8015d90:	200035bc 	.word	0x200035bc
 8015d94:	20003624 	.word	0x20003624

08015d98 <global_stdio_init.part.0>:
 8015d98:	b510      	push	{r4, lr}
 8015d9a:	4b0b      	ldr	r3, [pc, #44]	; (8015dc8 <global_stdio_init.part.0+0x30>)
 8015d9c:	4c0b      	ldr	r4, [pc, #44]	; (8015dcc <global_stdio_init.part.0+0x34>)
 8015d9e:	4a0c      	ldr	r2, [pc, #48]	; (8015dd0 <global_stdio_init.part.0+0x38>)
 8015da0:	601a      	str	r2, [r3, #0]
 8015da2:	4620      	mov	r0, r4
 8015da4:	2200      	movs	r2, #0
 8015da6:	2104      	movs	r1, #4
 8015da8:	f7ff ff94 	bl	8015cd4 <std>
 8015dac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8015db0:	2201      	movs	r2, #1
 8015db2:	2109      	movs	r1, #9
 8015db4:	f7ff ff8e 	bl	8015cd4 <std>
 8015db8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8015dbc:	2202      	movs	r2, #2
 8015dbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015dc2:	2112      	movs	r1, #18
 8015dc4:	f7ff bf86 	b.w	8015cd4 <std>
 8015dc8:	2000368c 	.word	0x2000368c
 8015dcc:	20003554 	.word	0x20003554
 8015dd0:	08015d41 	.word	0x08015d41

08015dd4 <__sfp_lock_acquire>:
 8015dd4:	4801      	ldr	r0, [pc, #4]	; (8015ddc <__sfp_lock_acquire+0x8>)
 8015dd6:	f000 b946 	b.w	8016066 <__retarget_lock_acquire_recursive>
 8015dda:	bf00      	nop
 8015ddc:	20003695 	.word	0x20003695

08015de0 <__sfp_lock_release>:
 8015de0:	4801      	ldr	r0, [pc, #4]	; (8015de8 <__sfp_lock_release+0x8>)
 8015de2:	f000 b941 	b.w	8016068 <__retarget_lock_release_recursive>
 8015de6:	bf00      	nop
 8015de8:	20003695 	.word	0x20003695

08015dec <__sinit>:
 8015dec:	b510      	push	{r4, lr}
 8015dee:	4604      	mov	r4, r0
 8015df0:	f7ff fff0 	bl	8015dd4 <__sfp_lock_acquire>
 8015df4:	6a23      	ldr	r3, [r4, #32]
 8015df6:	b11b      	cbz	r3, 8015e00 <__sinit+0x14>
 8015df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015dfc:	f7ff bff0 	b.w	8015de0 <__sfp_lock_release>
 8015e00:	4b04      	ldr	r3, [pc, #16]	; (8015e14 <__sinit+0x28>)
 8015e02:	6223      	str	r3, [r4, #32]
 8015e04:	4b04      	ldr	r3, [pc, #16]	; (8015e18 <__sinit+0x2c>)
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d1f5      	bne.n	8015df8 <__sinit+0xc>
 8015e0c:	f7ff ffc4 	bl	8015d98 <global_stdio_init.part.0>
 8015e10:	e7f2      	b.n	8015df8 <__sinit+0xc>
 8015e12:	bf00      	nop
 8015e14:	08015d59 	.word	0x08015d59
 8015e18:	2000368c 	.word	0x2000368c

08015e1c <_fwalk_sglue>:
 8015e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e20:	4607      	mov	r7, r0
 8015e22:	4688      	mov	r8, r1
 8015e24:	4614      	mov	r4, r2
 8015e26:	2600      	movs	r6, #0
 8015e28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015e2c:	f1b9 0901 	subs.w	r9, r9, #1
 8015e30:	d505      	bpl.n	8015e3e <_fwalk_sglue+0x22>
 8015e32:	6824      	ldr	r4, [r4, #0]
 8015e34:	2c00      	cmp	r4, #0
 8015e36:	d1f7      	bne.n	8015e28 <_fwalk_sglue+0xc>
 8015e38:	4630      	mov	r0, r6
 8015e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015e3e:	89ab      	ldrh	r3, [r5, #12]
 8015e40:	2b01      	cmp	r3, #1
 8015e42:	d907      	bls.n	8015e54 <_fwalk_sglue+0x38>
 8015e44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015e48:	3301      	adds	r3, #1
 8015e4a:	d003      	beq.n	8015e54 <_fwalk_sglue+0x38>
 8015e4c:	4629      	mov	r1, r5
 8015e4e:	4638      	mov	r0, r7
 8015e50:	47c0      	blx	r8
 8015e52:	4306      	orrs	r6, r0
 8015e54:	3568      	adds	r5, #104	; 0x68
 8015e56:	e7e9      	b.n	8015e2c <_fwalk_sglue+0x10>

08015e58 <__sread>:
 8015e58:	b510      	push	{r4, lr}
 8015e5a:	460c      	mov	r4, r1
 8015e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e60:	f000 f8b2 	bl	8015fc8 <_read_r>
 8015e64:	2800      	cmp	r0, #0
 8015e66:	bfab      	itete	ge
 8015e68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015e6a:	89a3      	ldrhlt	r3, [r4, #12]
 8015e6c:	181b      	addge	r3, r3, r0
 8015e6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015e72:	bfac      	ite	ge
 8015e74:	6563      	strge	r3, [r4, #84]	; 0x54
 8015e76:	81a3      	strhlt	r3, [r4, #12]
 8015e78:	bd10      	pop	{r4, pc}

08015e7a <__swrite>:
 8015e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e7e:	461f      	mov	r7, r3
 8015e80:	898b      	ldrh	r3, [r1, #12]
 8015e82:	05db      	lsls	r3, r3, #23
 8015e84:	4605      	mov	r5, r0
 8015e86:	460c      	mov	r4, r1
 8015e88:	4616      	mov	r6, r2
 8015e8a:	d505      	bpl.n	8015e98 <__swrite+0x1e>
 8015e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015e90:	2302      	movs	r3, #2
 8015e92:	2200      	movs	r2, #0
 8015e94:	f000 f886 	bl	8015fa4 <_lseek_r>
 8015e98:	89a3      	ldrh	r3, [r4, #12]
 8015e9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015e9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015ea2:	81a3      	strh	r3, [r4, #12]
 8015ea4:	4632      	mov	r2, r6
 8015ea6:	463b      	mov	r3, r7
 8015ea8:	4628      	mov	r0, r5
 8015eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015eae:	f000 b89d 	b.w	8015fec <_write_r>

08015eb2 <__sseek>:
 8015eb2:	b510      	push	{r4, lr}
 8015eb4:	460c      	mov	r4, r1
 8015eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015eba:	f000 f873 	bl	8015fa4 <_lseek_r>
 8015ebe:	1c43      	adds	r3, r0, #1
 8015ec0:	89a3      	ldrh	r3, [r4, #12]
 8015ec2:	bf15      	itete	ne
 8015ec4:	6560      	strne	r0, [r4, #84]	; 0x54
 8015ec6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015eca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015ece:	81a3      	strheq	r3, [r4, #12]
 8015ed0:	bf18      	it	ne
 8015ed2:	81a3      	strhne	r3, [r4, #12]
 8015ed4:	bd10      	pop	{r4, pc}

08015ed6 <__sclose>:
 8015ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015eda:	f000 b853 	b.w	8015f84 <_close_r>

08015ede <_vsniprintf_r>:
 8015ede:	b530      	push	{r4, r5, lr}
 8015ee0:	4614      	mov	r4, r2
 8015ee2:	2c00      	cmp	r4, #0
 8015ee4:	b09b      	sub	sp, #108	; 0x6c
 8015ee6:	4605      	mov	r5, r0
 8015ee8:	461a      	mov	r2, r3
 8015eea:	da05      	bge.n	8015ef8 <_vsniprintf_r+0x1a>
 8015eec:	238b      	movs	r3, #139	; 0x8b
 8015eee:	6003      	str	r3, [r0, #0]
 8015ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8015ef4:	b01b      	add	sp, #108	; 0x6c
 8015ef6:	bd30      	pop	{r4, r5, pc}
 8015ef8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015efc:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015f00:	bf14      	ite	ne
 8015f02:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015f06:	4623      	moveq	r3, r4
 8015f08:	9302      	str	r3, [sp, #8]
 8015f0a:	9305      	str	r3, [sp, #20]
 8015f0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015f10:	9100      	str	r1, [sp, #0]
 8015f12:	9104      	str	r1, [sp, #16]
 8015f14:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015f18:	4669      	mov	r1, sp
 8015f1a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015f1c:	f001 fa40 	bl	80173a0 <_svfiprintf_r>
 8015f20:	1c43      	adds	r3, r0, #1
 8015f22:	bfbc      	itt	lt
 8015f24:	238b      	movlt	r3, #139	; 0x8b
 8015f26:	602b      	strlt	r3, [r5, #0]
 8015f28:	2c00      	cmp	r4, #0
 8015f2a:	d0e3      	beq.n	8015ef4 <_vsniprintf_r+0x16>
 8015f2c:	9b00      	ldr	r3, [sp, #0]
 8015f2e:	2200      	movs	r2, #0
 8015f30:	701a      	strb	r2, [r3, #0]
 8015f32:	e7df      	b.n	8015ef4 <_vsniprintf_r+0x16>

08015f34 <vsniprintf>:
 8015f34:	b507      	push	{r0, r1, r2, lr}
 8015f36:	9300      	str	r3, [sp, #0]
 8015f38:	4613      	mov	r3, r2
 8015f3a:	460a      	mov	r2, r1
 8015f3c:	4601      	mov	r1, r0
 8015f3e:	4803      	ldr	r0, [pc, #12]	; (8015f4c <vsniprintf+0x18>)
 8015f40:	6800      	ldr	r0, [r0, #0]
 8015f42:	f7ff ffcc 	bl	8015ede <_vsniprintf_r>
 8015f46:	b003      	add	sp, #12
 8015f48:	f85d fb04 	ldr.w	pc, [sp], #4
 8015f4c:	2000035c 	.word	0x2000035c

08015f50 <memset>:
 8015f50:	4402      	add	r2, r0
 8015f52:	4603      	mov	r3, r0
 8015f54:	4293      	cmp	r3, r2
 8015f56:	d100      	bne.n	8015f5a <memset+0xa>
 8015f58:	4770      	bx	lr
 8015f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8015f5e:	e7f9      	b.n	8015f54 <memset+0x4>

08015f60 <strncmp>:
 8015f60:	b510      	push	{r4, lr}
 8015f62:	b16a      	cbz	r2, 8015f80 <strncmp+0x20>
 8015f64:	3901      	subs	r1, #1
 8015f66:	1884      	adds	r4, r0, r2
 8015f68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015f6c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015f70:	429a      	cmp	r2, r3
 8015f72:	d103      	bne.n	8015f7c <strncmp+0x1c>
 8015f74:	42a0      	cmp	r0, r4
 8015f76:	d001      	beq.n	8015f7c <strncmp+0x1c>
 8015f78:	2a00      	cmp	r2, #0
 8015f7a:	d1f5      	bne.n	8015f68 <strncmp+0x8>
 8015f7c:	1ad0      	subs	r0, r2, r3
 8015f7e:	bd10      	pop	{r4, pc}
 8015f80:	4610      	mov	r0, r2
 8015f82:	e7fc      	b.n	8015f7e <strncmp+0x1e>

08015f84 <_close_r>:
 8015f84:	b538      	push	{r3, r4, r5, lr}
 8015f86:	4d06      	ldr	r5, [pc, #24]	; (8015fa0 <_close_r+0x1c>)
 8015f88:	2300      	movs	r3, #0
 8015f8a:	4604      	mov	r4, r0
 8015f8c:	4608      	mov	r0, r1
 8015f8e:	602b      	str	r3, [r5, #0]
 8015f90:	f7f2 fddd 	bl	8008b4e <_close>
 8015f94:	1c43      	adds	r3, r0, #1
 8015f96:	d102      	bne.n	8015f9e <_close_r+0x1a>
 8015f98:	682b      	ldr	r3, [r5, #0]
 8015f9a:	b103      	cbz	r3, 8015f9e <_close_r+0x1a>
 8015f9c:	6023      	str	r3, [r4, #0]
 8015f9e:	bd38      	pop	{r3, r4, r5, pc}
 8015fa0:	20003690 	.word	0x20003690

08015fa4 <_lseek_r>:
 8015fa4:	b538      	push	{r3, r4, r5, lr}
 8015fa6:	4d07      	ldr	r5, [pc, #28]	; (8015fc4 <_lseek_r+0x20>)
 8015fa8:	4604      	mov	r4, r0
 8015faa:	4608      	mov	r0, r1
 8015fac:	4611      	mov	r1, r2
 8015fae:	2200      	movs	r2, #0
 8015fb0:	602a      	str	r2, [r5, #0]
 8015fb2:	461a      	mov	r2, r3
 8015fb4:	f7f2 fdf2 	bl	8008b9c <_lseek>
 8015fb8:	1c43      	adds	r3, r0, #1
 8015fba:	d102      	bne.n	8015fc2 <_lseek_r+0x1e>
 8015fbc:	682b      	ldr	r3, [r5, #0]
 8015fbe:	b103      	cbz	r3, 8015fc2 <_lseek_r+0x1e>
 8015fc0:	6023      	str	r3, [r4, #0]
 8015fc2:	bd38      	pop	{r3, r4, r5, pc}
 8015fc4:	20003690 	.word	0x20003690

08015fc8 <_read_r>:
 8015fc8:	b538      	push	{r3, r4, r5, lr}
 8015fca:	4d07      	ldr	r5, [pc, #28]	; (8015fe8 <_read_r+0x20>)
 8015fcc:	4604      	mov	r4, r0
 8015fce:	4608      	mov	r0, r1
 8015fd0:	4611      	mov	r1, r2
 8015fd2:	2200      	movs	r2, #0
 8015fd4:	602a      	str	r2, [r5, #0]
 8015fd6:	461a      	mov	r2, r3
 8015fd8:	f7f2 fd80 	bl	8008adc <_read>
 8015fdc:	1c43      	adds	r3, r0, #1
 8015fde:	d102      	bne.n	8015fe6 <_read_r+0x1e>
 8015fe0:	682b      	ldr	r3, [r5, #0]
 8015fe2:	b103      	cbz	r3, 8015fe6 <_read_r+0x1e>
 8015fe4:	6023      	str	r3, [r4, #0]
 8015fe6:	bd38      	pop	{r3, r4, r5, pc}
 8015fe8:	20003690 	.word	0x20003690

08015fec <_write_r>:
 8015fec:	b538      	push	{r3, r4, r5, lr}
 8015fee:	4d07      	ldr	r5, [pc, #28]	; (801600c <_write_r+0x20>)
 8015ff0:	4604      	mov	r4, r0
 8015ff2:	4608      	mov	r0, r1
 8015ff4:	4611      	mov	r1, r2
 8015ff6:	2200      	movs	r2, #0
 8015ff8:	602a      	str	r2, [r5, #0]
 8015ffa:	461a      	mov	r2, r3
 8015ffc:	f7f2 fd8b 	bl	8008b16 <_write>
 8016000:	1c43      	adds	r3, r0, #1
 8016002:	d102      	bne.n	801600a <_write_r+0x1e>
 8016004:	682b      	ldr	r3, [r5, #0]
 8016006:	b103      	cbz	r3, 801600a <_write_r+0x1e>
 8016008:	6023      	str	r3, [r4, #0]
 801600a:	bd38      	pop	{r3, r4, r5, pc}
 801600c:	20003690 	.word	0x20003690

08016010 <__errno>:
 8016010:	4b01      	ldr	r3, [pc, #4]	; (8016018 <__errno+0x8>)
 8016012:	6818      	ldr	r0, [r3, #0]
 8016014:	4770      	bx	lr
 8016016:	bf00      	nop
 8016018:	2000035c 	.word	0x2000035c

0801601c <__libc_init_array>:
 801601c:	b570      	push	{r4, r5, r6, lr}
 801601e:	4d0d      	ldr	r5, [pc, #52]	; (8016054 <__libc_init_array+0x38>)
 8016020:	4c0d      	ldr	r4, [pc, #52]	; (8016058 <__libc_init_array+0x3c>)
 8016022:	1b64      	subs	r4, r4, r5
 8016024:	10a4      	asrs	r4, r4, #2
 8016026:	2600      	movs	r6, #0
 8016028:	42a6      	cmp	r6, r4
 801602a:	d109      	bne.n	8016040 <__libc_init_array+0x24>
 801602c:	4d0b      	ldr	r5, [pc, #44]	; (801605c <__libc_init_array+0x40>)
 801602e:	4c0c      	ldr	r4, [pc, #48]	; (8016060 <__libc_init_array+0x44>)
 8016030:	f002 f84a 	bl	80180c8 <_init>
 8016034:	1b64      	subs	r4, r4, r5
 8016036:	10a4      	asrs	r4, r4, #2
 8016038:	2600      	movs	r6, #0
 801603a:	42a6      	cmp	r6, r4
 801603c:	d105      	bne.n	801604a <__libc_init_array+0x2e>
 801603e:	bd70      	pop	{r4, r5, r6, pc}
 8016040:	f855 3b04 	ldr.w	r3, [r5], #4
 8016044:	4798      	blx	r3
 8016046:	3601      	adds	r6, #1
 8016048:	e7ee      	b.n	8016028 <__libc_init_array+0xc>
 801604a:	f855 3b04 	ldr.w	r3, [r5], #4
 801604e:	4798      	blx	r3
 8016050:	3601      	adds	r6, #1
 8016052:	e7f2      	b.n	801603a <__libc_init_array+0x1e>
 8016054:	080188ac 	.word	0x080188ac
 8016058:	080188ac 	.word	0x080188ac
 801605c:	080188ac 	.word	0x080188ac
 8016060:	080188b0 	.word	0x080188b0

08016064 <__retarget_lock_init_recursive>:
 8016064:	4770      	bx	lr

08016066 <__retarget_lock_acquire_recursive>:
 8016066:	4770      	bx	lr

08016068 <__retarget_lock_release_recursive>:
 8016068:	4770      	bx	lr

0801606a <strcpy>:
 801606a:	4603      	mov	r3, r0
 801606c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016070:	f803 2b01 	strb.w	r2, [r3], #1
 8016074:	2a00      	cmp	r2, #0
 8016076:	d1f9      	bne.n	801606c <strcpy+0x2>
 8016078:	4770      	bx	lr

0801607a <memcpy>:
 801607a:	440a      	add	r2, r1
 801607c:	4291      	cmp	r1, r2
 801607e:	f100 33ff 	add.w	r3, r0, #4294967295
 8016082:	d100      	bne.n	8016086 <memcpy+0xc>
 8016084:	4770      	bx	lr
 8016086:	b510      	push	{r4, lr}
 8016088:	f811 4b01 	ldrb.w	r4, [r1], #1
 801608c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016090:	4291      	cmp	r1, r2
 8016092:	d1f9      	bne.n	8016088 <memcpy+0xe>
 8016094:	bd10      	pop	{r4, pc}
	...

08016098 <nan>:
 8016098:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80160a0 <nan+0x8>
 801609c:	4770      	bx	lr
 801609e:	bf00      	nop
 80160a0:	00000000 	.word	0x00000000
 80160a4:	7ff80000 	.word	0x7ff80000

080160a8 <nanf>:
 80160a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80160b0 <nanf+0x8>
 80160ac:	4770      	bx	lr
 80160ae:	bf00      	nop
 80160b0:	7fc00000 	.word	0x7fc00000

080160b4 <_free_r>:
 80160b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80160b6:	2900      	cmp	r1, #0
 80160b8:	d044      	beq.n	8016144 <_free_r+0x90>
 80160ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80160be:	9001      	str	r0, [sp, #4]
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	f1a1 0404 	sub.w	r4, r1, #4
 80160c6:	bfb8      	it	lt
 80160c8:	18e4      	addlt	r4, r4, r3
 80160ca:	f000 fc49 	bl	8016960 <__malloc_lock>
 80160ce:	4a1e      	ldr	r2, [pc, #120]	; (8016148 <_free_r+0x94>)
 80160d0:	9801      	ldr	r0, [sp, #4]
 80160d2:	6813      	ldr	r3, [r2, #0]
 80160d4:	b933      	cbnz	r3, 80160e4 <_free_r+0x30>
 80160d6:	6063      	str	r3, [r4, #4]
 80160d8:	6014      	str	r4, [r2, #0]
 80160da:	b003      	add	sp, #12
 80160dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80160e0:	f000 bc44 	b.w	801696c <__malloc_unlock>
 80160e4:	42a3      	cmp	r3, r4
 80160e6:	d908      	bls.n	80160fa <_free_r+0x46>
 80160e8:	6825      	ldr	r5, [r4, #0]
 80160ea:	1961      	adds	r1, r4, r5
 80160ec:	428b      	cmp	r3, r1
 80160ee:	bf01      	itttt	eq
 80160f0:	6819      	ldreq	r1, [r3, #0]
 80160f2:	685b      	ldreq	r3, [r3, #4]
 80160f4:	1949      	addeq	r1, r1, r5
 80160f6:	6021      	streq	r1, [r4, #0]
 80160f8:	e7ed      	b.n	80160d6 <_free_r+0x22>
 80160fa:	461a      	mov	r2, r3
 80160fc:	685b      	ldr	r3, [r3, #4]
 80160fe:	b10b      	cbz	r3, 8016104 <_free_r+0x50>
 8016100:	42a3      	cmp	r3, r4
 8016102:	d9fa      	bls.n	80160fa <_free_r+0x46>
 8016104:	6811      	ldr	r1, [r2, #0]
 8016106:	1855      	adds	r5, r2, r1
 8016108:	42a5      	cmp	r5, r4
 801610a:	d10b      	bne.n	8016124 <_free_r+0x70>
 801610c:	6824      	ldr	r4, [r4, #0]
 801610e:	4421      	add	r1, r4
 8016110:	1854      	adds	r4, r2, r1
 8016112:	42a3      	cmp	r3, r4
 8016114:	6011      	str	r1, [r2, #0]
 8016116:	d1e0      	bne.n	80160da <_free_r+0x26>
 8016118:	681c      	ldr	r4, [r3, #0]
 801611a:	685b      	ldr	r3, [r3, #4]
 801611c:	6053      	str	r3, [r2, #4]
 801611e:	440c      	add	r4, r1
 8016120:	6014      	str	r4, [r2, #0]
 8016122:	e7da      	b.n	80160da <_free_r+0x26>
 8016124:	d902      	bls.n	801612c <_free_r+0x78>
 8016126:	230c      	movs	r3, #12
 8016128:	6003      	str	r3, [r0, #0]
 801612a:	e7d6      	b.n	80160da <_free_r+0x26>
 801612c:	6825      	ldr	r5, [r4, #0]
 801612e:	1961      	adds	r1, r4, r5
 8016130:	428b      	cmp	r3, r1
 8016132:	bf04      	itt	eq
 8016134:	6819      	ldreq	r1, [r3, #0]
 8016136:	685b      	ldreq	r3, [r3, #4]
 8016138:	6063      	str	r3, [r4, #4]
 801613a:	bf04      	itt	eq
 801613c:	1949      	addeq	r1, r1, r5
 801613e:	6021      	streq	r1, [r4, #0]
 8016140:	6054      	str	r4, [r2, #4]
 8016142:	e7ca      	b.n	80160da <_free_r+0x26>
 8016144:	b003      	add	sp, #12
 8016146:	bd30      	pop	{r4, r5, pc}
 8016148:	20003698 	.word	0x20003698

0801614c <rshift>:
 801614c:	6903      	ldr	r3, [r0, #16]
 801614e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016152:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016156:	ea4f 1261 	mov.w	r2, r1, asr #5
 801615a:	f100 0414 	add.w	r4, r0, #20
 801615e:	dd45      	ble.n	80161ec <rshift+0xa0>
 8016160:	f011 011f 	ands.w	r1, r1, #31
 8016164:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016168:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801616c:	d10c      	bne.n	8016188 <rshift+0x3c>
 801616e:	f100 0710 	add.w	r7, r0, #16
 8016172:	4629      	mov	r1, r5
 8016174:	42b1      	cmp	r1, r6
 8016176:	d334      	bcc.n	80161e2 <rshift+0x96>
 8016178:	1a9b      	subs	r3, r3, r2
 801617a:	009b      	lsls	r3, r3, #2
 801617c:	1eea      	subs	r2, r5, #3
 801617e:	4296      	cmp	r6, r2
 8016180:	bf38      	it	cc
 8016182:	2300      	movcc	r3, #0
 8016184:	4423      	add	r3, r4
 8016186:	e015      	b.n	80161b4 <rshift+0x68>
 8016188:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801618c:	f1c1 0820 	rsb	r8, r1, #32
 8016190:	40cf      	lsrs	r7, r1
 8016192:	f105 0e04 	add.w	lr, r5, #4
 8016196:	46a1      	mov	r9, r4
 8016198:	4576      	cmp	r6, lr
 801619a:	46f4      	mov	ip, lr
 801619c:	d815      	bhi.n	80161ca <rshift+0x7e>
 801619e:	1a9a      	subs	r2, r3, r2
 80161a0:	0092      	lsls	r2, r2, #2
 80161a2:	3a04      	subs	r2, #4
 80161a4:	3501      	adds	r5, #1
 80161a6:	42ae      	cmp	r6, r5
 80161a8:	bf38      	it	cc
 80161aa:	2200      	movcc	r2, #0
 80161ac:	18a3      	adds	r3, r4, r2
 80161ae:	50a7      	str	r7, [r4, r2]
 80161b0:	b107      	cbz	r7, 80161b4 <rshift+0x68>
 80161b2:	3304      	adds	r3, #4
 80161b4:	1b1a      	subs	r2, r3, r4
 80161b6:	42a3      	cmp	r3, r4
 80161b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80161bc:	bf08      	it	eq
 80161be:	2300      	moveq	r3, #0
 80161c0:	6102      	str	r2, [r0, #16]
 80161c2:	bf08      	it	eq
 80161c4:	6143      	streq	r3, [r0, #20]
 80161c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80161ca:	f8dc c000 	ldr.w	ip, [ip]
 80161ce:	fa0c fc08 	lsl.w	ip, ip, r8
 80161d2:	ea4c 0707 	orr.w	r7, ip, r7
 80161d6:	f849 7b04 	str.w	r7, [r9], #4
 80161da:	f85e 7b04 	ldr.w	r7, [lr], #4
 80161de:	40cf      	lsrs	r7, r1
 80161e0:	e7da      	b.n	8016198 <rshift+0x4c>
 80161e2:	f851 cb04 	ldr.w	ip, [r1], #4
 80161e6:	f847 cf04 	str.w	ip, [r7, #4]!
 80161ea:	e7c3      	b.n	8016174 <rshift+0x28>
 80161ec:	4623      	mov	r3, r4
 80161ee:	e7e1      	b.n	80161b4 <rshift+0x68>

080161f0 <__hexdig_fun>:
 80161f0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80161f4:	2b09      	cmp	r3, #9
 80161f6:	d802      	bhi.n	80161fe <__hexdig_fun+0xe>
 80161f8:	3820      	subs	r0, #32
 80161fa:	b2c0      	uxtb	r0, r0
 80161fc:	4770      	bx	lr
 80161fe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016202:	2b05      	cmp	r3, #5
 8016204:	d801      	bhi.n	801620a <__hexdig_fun+0x1a>
 8016206:	3847      	subs	r0, #71	; 0x47
 8016208:	e7f7      	b.n	80161fa <__hexdig_fun+0xa>
 801620a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801620e:	2b05      	cmp	r3, #5
 8016210:	d801      	bhi.n	8016216 <__hexdig_fun+0x26>
 8016212:	3827      	subs	r0, #39	; 0x27
 8016214:	e7f1      	b.n	80161fa <__hexdig_fun+0xa>
 8016216:	2000      	movs	r0, #0
 8016218:	4770      	bx	lr
	...

0801621c <__gethex>:
 801621c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016220:	4617      	mov	r7, r2
 8016222:	680a      	ldr	r2, [r1, #0]
 8016224:	b085      	sub	sp, #20
 8016226:	f102 0b02 	add.w	fp, r2, #2
 801622a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801622e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016232:	4681      	mov	r9, r0
 8016234:	468a      	mov	sl, r1
 8016236:	9302      	str	r3, [sp, #8]
 8016238:	32fe      	adds	r2, #254	; 0xfe
 801623a:	eb02 030b 	add.w	r3, r2, fp
 801623e:	46d8      	mov	r8, fp
 8016240:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8016244:	9301      	str	r3, [sp, #4]
 8016246:	2830      	cmp	r0, #48	; 0x30
 8016248:	d0f7      	beq.n	801623a <__gethex+0x1e>
 801624a:	f7ff ffd1 	bl	80161f0 <__hexdig_fun>
 801624e:	4604      	mov	r4, r0
 8016250:	2800      	cmp	r0, #0
 8016252:	d138      	bne.n	80162c6 <__gethex+0xaa>
 8016254:	49a7      	ldr	r1, [pc, #668]	; (80164f4 <__gethex+0x2d8>)
 8016256:	2201      	movs	r2, #1
 8016258:	4640      	mov	r0, r8
 801625a:	f7ff fe81 	bl	8015f60 <strncmp>
 801625e:	4606      	mov	r6, r0
 8016260:	2800      	cmp	r0, #0
 8016262:	d169      	bne.n	8016338 <__gethex+0x11c>
 8016264:	f898 0001 	ldrb.w	r0, [r8, #1]
 8016268:	465d      	mov	r5, fp
 801626a:	f7ff ffc1 	bl	80161f0 <__hexdig_fun>
 801626e:	2800      	cmp	r0, #0
 8016270:	d064      	beq.n	801633c <__gethex+0x120>
 8016272:	465a      	mov	r2, fp
 8016274:	7810      	ldrb	r0, [r2, #0]
 8016276:	2830      	cmp	r0, #48	; 0x30
 8016278:	4690      	mov	r8, r2
 801627a:	f102 0201 	add.w	r2, r2, #1
 801627e:	d0f9      	beq.n	8016274 <__gethex+0x58>
 8016280:	f7ff ffb6 	bl	80161f0 <__hexdig_fun>
 8016284:	2301      	movs	r3, #1
 8016286:	fab0 f480 	clz	r4, r0
 801628a:	0964      	lsrs	r4, r4, #5
 801628c:	465e      	mov	r6, fp
 801628e:	9301      	str	r3, [sp, #4]
 8016290:	4642      	mov	r2, r8
 8016292:	4615      	mov	r5, r2
 8016294:	3201      	adds	r2, #1
 8016296:	7828      	ldrb	r0, [r5, #0]
 8016298:	f7ff ffaa 	bl	80161f0 <__hexdig_fun>
 801629c:	2800      	cmp	r0, #0
 801629e:	d1f8      	bne.n	8016292 <__gethex+0x76>
 80162a0:	4994      	ldr	r1, [pc, #592]	; (80164f4 <__gethex+0x2d8>)
 80162a2:	2201      	movs	r2, #1
 80162a4:	4628      	mov	r0, r5
 80162a6:	f7ff fe5b 	bl	8015f60 <strncmp>
 80162aa:	b978      	cbnz	r0, 80162cc <__gethex+0xb0>
 80162ac:	b946      	cbnz	r6, 80162c0 <__gethex+0xa4>
 80162ae:	1c6e      	adds	r6, r5, #1
 80162b0:	4632      	mov	r2, r6
 80162b2:	4615      	mov	r5, r2
 80162b4:	3201      	adds	r2, #1
 80162b6:	7828      	ldrb	r0, [r5, #0]
 80162b8:	f7ff ff9a 	bl	80161f0 <__hexdig_fun>
 80162bc:	2800      	cmp	r0, #0
 80162be:	d1f8      	bne.n	80162b2 <__gethex+0x96>
 80162c0:	1b73      	subs	r3, r6, r5
 80162c2:	009e      	lsls	r6, r3, #2
 80162c4:	e004      	b.n	80162d0 <__gethex+0xb4>
 80162c6:	2400      	movs	r4, #0
 80162c8:	4626      	mov	r6, r4
 80162ca:	e7e1      	b.n	8016290 <__gethex+0x74>
 80162cc:	2e00      	cmp	r6, #0
 80162ce:	d1f7      	bne.n	80162c0 <__gethex+0xa4>
 80162d0:	782b      	ldrb	r3, [r5, #0]
 80162d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80162d6:	2b50      	cmp	r3, #80	; 0x50
 80162d8:	d13d      	bne.n	8016356 <__gethex+0x13a>
 80162da:	786b      	ldrb	r3, [r5, #1]
 80162dc:	2b2b      	cmp	r3, #43	; 0x2b
 80162de:	d02f      	beq.n	8016340 <__gethex+0x124>
 80162e0:	2b2d      	cmp	r3, #45	; 0x2d
 80162e2:	d031      	beq.n	8016348 <__gethex+0x12c>
 80162e4:	1c69      	adds	r1, r5, #1
 80162e6:	f04f 0b00 	mov.w	fp, #0
 80162ea:	7808      	ldrb	r0, [r1, #0]
 80162ec:	f7ff ff80 	bl	80161f0 <__hexdig_fun>
 80162f0:	1e42      	subs	r2, r0, #1
 80162f2:	b2d2      	uxtb	r2, r2
 80162f4:	2a18      	cmp	r2, #24
 80162f6:	d82e      	bhi.n	8016356 <__gethex+0x13a>
 80162f8:	f1a0 0210 	sub.w	r2, r0, #16
 80162fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016300:	f7ff ff76 	bl	80161f0 <__hexdig_fun>
 8016304:	f100 3cff 	add.w	ip, r0, #4294967295
 8016308:	fa5f fc8c 	uxtb.w	ip, ip
 801630c:	f1bc 0f18 	cmp.w	ip, #24
 8016310:	d91d      	bls.n	801634e <__gethex+0x132>
 8016312:	f1bb 0f00 	cmp.w	fp, #0
 8016316:	d000      	beq.n	801631a <__gethex+0xfe>
 8016318:	4252      	negs	r2, r2
 801631a:	4416      	add	r6, r2
 801631c:	f8ca 1000 	str.w	r1, [sl]
 8016320:	b1dc      	cbz	r4, 801635a <__gethex+0x13e>
 8016322:	9b01      	ldr	r3, [sp, #4]
 8016324:	2b00      	cmp	r3, #0
 8016326:	bf14      	ite	ne
 8016328:	f04f 0800 	movne.w	r8, #0
 801632c:	f04f 0806 	moveq.w	r8, #6
 8016330:	4640      	mov	r0, r8
 8016332:	b005      	add	sp, #20
 8016334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016338:	4645      	mov	r5, r8
 801633a:	4626      	mov	r6, r4
 801633c:	2401      	movs	r4, #1
 801633e:	e7c7      	b.n	80162d0 <__gethex+0xb4>
 8016340:	f04f 0b00 	mov.w	fp, #0
 8016344:	1ca9      	adds	r1, r5, #2
 8016346:	e7d0      	b.n	80162ea <__gethex+0xce>
 8016348:	f04f 0b01 	mov.w	fp, #1
 801634c:	e7fa      	b.n	8016344 <__gethex+0x128>
 801634e:	230a      	movs	r3, #10
 8016350:	fb03 0002 	mla	r0, r3, r2, r0
 8016354:	e7d0      	b.n	80162f8 <__gethex+0xdc>
 8016356:	4629      	mov	r1, r5
 8016358:	e7e0      	b.n	801631c <__gethex+0x100>
 801635a:	eba5 0308 	sub.w	r3, r5, r8
 801635e:	3b01      	subs	r3, #1
 8016360:	4621      	mov	r1, r4
 8016362:	2b07      	cmp	r3, #7
 8016364:	dc0a      	bgt.n	801637c <__gethex+0x160>
 8016366:	4648      	mov	r0, r9
 8016368:	f000 fb06 	bl	8016978 <_Balloc>
 801636c:	4604      	mov	r4, r0
 801636e:	b940      	cbnz	r0, 8016382 <__gethex+0x166>
 8016370:	4b61      	ldr	r3, [pc, #388]	; (80164f8 <__gethex+0x2dc>)
 8016372:	4602      	mov	r2, r0
 8016374:	21e4      	movs	r1, #228	; 0xe4
 8016376:	4861      	ldr	r0, [pc, #388]	; (80164fc <__gethex+0x2e0>)
 8016378:	f001 fb78 	bl	8017a6c <__assert_func>
 801637c:	3101      	adds	r1, #1
 801637e:	105b      	asrs	r3, r3, #1
 8016380:	e7ef      	b.n	8016362 <__gethex+0x146>
 8016382:	f100 0a14 	add.w	sl, r0, #20
 8016386:	2300      	movs	r3, #0
 8016388:	495a      	ldr	r1, [pc, #360]	; (80164f4 <__gethex+0x2d8>)
 801638a:	f8cd a004 	str.w	sl, [sp, #4]
 801638e:	469b      	mov	fp, r3
 8016390:	45a8      	cmp	r8, r5
 8016392:	d342      	bcc.n	801641a <__gethex+0x1fe>
 8016394:	9801      	ldr	r0, [sp, #4]
 8016396:	f840 bb04 	str.w	fp, [r0], #4
 801639a:	eba0 000a 	sub.w	r0, r0, sl
 801639e:	1080      	asrs	r0, r0, #2
 80163a0:	6120      	str	r0, [r4, #16]
 80163a2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80163a6:	4658      	mov	r0, fp
 80163a8:	f000 fbd8 	bl	8016b5c <__hi0bits>
 80163ac:	683d      	ldr	r5, [r7, #0]
 80163ae:	eba8 0000 	sub.w	r0, r8, r0
 80163b2:	42a8      	cmp	r0, r5
 80163b4:	dd59      	ble.n	801646a <__gethex+0x24e>
 80163b6:	eba0 0805 	sub.w	r8, r0, r5
 80163ba:	4641      	mov	r1, r8
 80163bc:	4620      	mov	r0, r4
 80163be:	f000 ff67 	bl	8017290 <__any_on>
 80163c2:	4683      	mov	fp, r0
 80163c4:	b1b8      	cbz	r0, 80163f6 <__gethex+0x1da>
 80163c6:	f108 33ff 	add.w	r3, r8, #4294967295
 80163ca:	1159      	asrs	r1, r3, #5
 80163cc:	f003 021f 	and.w	r2, r3, #31
 80163d0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80163d4:	f04f 0b01 	mov.w	fp, #1
 80163d8:	fa0b f202 	lsl.w	r2, fp, r2
 80163dc:	420a      	tst	r2, r1
 80163de:	d00a      	beq.n	80163f6 <__gethex+0x1da>
 80163e0:	455b      	cmp	r3, fp
 80163e2:	dd06      	ble.n	80163f2 <__gethex+0x1d6>
 80163e4:	f1a8 0102 	sub.w	r1, r8, #2
 80163e8:	4620      	mov	r0, r4
 80163ea:	f000 ff51 	bl	8017290 <__any_on>
 80163ee:	2800      	cmp	r0, #0
 80163f0:	d138      	bne.n	8016464 <__gethex+0x248>
 80163f2:	f04f 0b02 	mov.w	fp, #2
 80163f6:	4641      	mov	r1, r8
 80163f8:	4620      	mov	r0, r4
 80163fa:	f7ff fea7 	bl	801614c <rshift>
 80163fe:	4446      	add	r6, r8
 8016400:	68bb      	ldr	r3, [r7, #8]
 8016402:	42b3      	cmp	r3, r6
 8016404:	da41      	bge.n	801648a <__gethex+0x26e>
 8016406:	4621      	mov	r1, r4
 8016408:	4648      	mov	r0, r9
 801640a:	f000 faf5 	bl	80169f8 <_Bfree>
 801640e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016410:	2300      	movs	r3, #0
 8016412:	6013      	str	r3, [r2, #0]
 8016414:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8016418:	e78a      	b.n	8016330 <__gethex+0x114>
 801641a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801641e:	2a2e      	cmp	r2, #46	; 0x2e
 8016420:	d014      	beq.n	801644c <__gethex+0x230>
 8016422:	2b20      	cmp	r3, #32
 8016424:	d106      	bne.n	8016434 <__gethex+0x218>
 8016426:	9b01      	ldr	r3, [sp, #4]
 8016428:	f843 bb04 	str.w	fp, [r3], #4
 801642c:	f04f 0b00 	mov.w	fp, #0
 8016430:	9301      	str	r3, [sp, #4]
 8016432:	465b      	mov	r3, fp
 8016434:	7828      	ldrb	r0, [r5, #0]
 8016436:	9303      	str	r3, [sp, #12]
 8016438:	f7ff feda 	bl	80161f0 <__hexdig_fun>
 801643c:	9b03      	ldr	r3, [sp, #12]
 801643e:	f000 000f 	and.w	r0, r0, #15
 8016442:	4098      	lsls	r0, r3
 8016444:	ea4b 0b00 	orr.w	fp, fp, r0
 8016448:	3304      	adds	r3, #4
 801644a:	e7a1      	b.n	8016390 <__gethex+0x174>
 801644c:	45a8      	cmp	r8, r5
 801644e:	d8e8      	bhi.n	8016422 <__gethex+0x206>
 8016450:	2201      	movs	r2, #1
 8016452:	4628      	mov	r0, r5
 8016454:	9303      	str	r3, [sp, #12]
 8016456:	f7ff fd83 	bl	8015f60 <strncmp>
 801645a:	4926      	ldr	r1, [pc, #152]	; (80164f4 <__gethex+0x2d8>)
 801645c:	9b03      	ldr	r3, [sp, #12]
 801645e:	2800      	cmp	r0, #0
 8016460:	d1df      	bne.n	8016422 <__gethex+0x206>
 8016462:	e795      	b.n	8016390 <__gethex+0x174>
 8016464:	f04f 0b03 	mov.w	fp, #3
 8016468:	e7c5      	b.n	80163f6 <__gethex+0x1da>
 801646a:	da0b      	bge.n	8016484 <__gethex+0x268>
 801646c:	eba5 0800 	sub.w	r8, r5, r0
 8016470:	4621      	mov	r1, r4
 8016472:	4642      	mov	r2, r8
 8016474:	4648      	mov	r0, r9
 8016476:	f000 fcd9 	bl	8016e2c <__lshift>
 801647a:	eba6 0608 	sub.w	r6, r6, r8
 801647e:	4604      	mov	r4, r0
 8016480:	f100 0a14 	add.w	sl, r0, #20
 8016484:	f04f 0b00 	mov.w	fp, #0
 8016488:	e7ba      	b.n	8016400 <__gethex+0x1e4>
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	42b3      	cmp	r3, r6
 801648e:	dd73      	ble.n	8016578 <__gethex+0x35c>
 8016490:	1b9e      	subs	r6, r3, r6
 8016492:	42b5      	cmp	r5, r6
 8016494:	dc34      	bgt.n	8016500 <__gethex+0x2e4>
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	2b02      	cmp	r3, #2
 801649a:	d023      	beq.n	80164e4 <__gethex+0x2c8>
 801649c:	2b03      	cmp	r3, #3
 801649e:	d025      	beq.n	80164ec <__gethex+0x2d0>
 80164a0:	2b01      	cmp	r3, #1
 80164a2:	d115      	bne.n	80164d0 <__gethex+0x2b4>
 80164a4:	42b5      	cmp	r5, r6
 80164a6:	d113      	bne.n	80164d0 <__gethex+0x2b4>
 80164a8:	2d01      	cmp	r5, #1
 80164aa:	d10b      	bne.n	80164c4 <__gethex+0x2a8>
 80164ac:	9a02      	ldr	r2, [sp, #8]
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	6013      	str	r3, [r2, #0]
 80164b2:	2301      	movs	r3, #1
 80164b4:	6123      	str	r3, [r4, #16]
 80164b6:	f8ca 3000 	str.w	r3, [sl]
 80164ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80164bc:	f04f 0862 	mov.w	r8, #98	; 0x62
 80164c0:	601c      	str	r4, [r3, #0]
 80164c2:	e735      	b.n	8016330 <__gethex+0x114>
 80164c4:	1e69      	subs	r1, r5, #1
 80164c6:	4620      	mov	r0, r4
 80164c8:	f000 fee2 	bl	8017290 <__any_on>
 80164cc:	2800      	cmp	r0, #0
 80164ce:	d1ed      	bne.n	80164ac <__gethex+0x290>
 80164d0:	4621      	mov	r1, r4
 80164d2:	4648      	mov	r0, r9
 80164d4:	f000 fa90 	bl	80169f8 <_Bfree>
 80164d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80164da:	2300      	movs	r3, #0
 80164dc:	6013      	str	r3, [r2, #0]
 80164de:	f04f 0850 	mov.w	r8, #80	; 0x50
 80164e2:	e725      	b.n	8016330 <__gethex+0x114>
 80164e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d1f2      	bne.n	80164d0 <__gethex+0x2b4>
 80164ea:	e7df      	b.n	80164ac <__gethex+0x290>
 80164ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d1dc      	bne.n	80164ac <__gethex+0x290>
 80164f2:	e7ed      	b.n	80164d0 <__gethex+0x2b4>
 80164f4:	080184e4 	.word	0x080184e4
 80164f8:	08018651 	.word	0x08018651
 80164fc:	08018662 	.word	0x08018662
 8016500:	f106 38ff 	add.w	r8, r6, #4294967295
 8016504:	f1bb 0f00 	cmp.w	fp, #0
 8016508:	d133      	bne.n	8016572 <__gethex+0x356>
 801650a:	f1b8 0f00 	cmp.w	r8, #0
 801650e:	d004      	beq.n	801651a <__gethex+0x2fe>
 8016510:	4641      	mov	r1, r8
 8016512:	4620      	mov	r0, r4
 8016514:	f000 febc 	bl	8017290 <__any_on>
 8016518:	4683      	mov	fp, r0
 801651a:	ea4f 1268 	mov.w	r2, r8, asr #5
 801651e:	2301      	movs	r3, #1
 8016520:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8016524:	f008 081f 	and.w	r8, r8, #31
 8016528:	fa03 f308 	lsl.w	r3, r3, r8
 801652c:	4213      	tst	r3, r2
 801652e:	4631      	mov	r1, r6
 8016530:	4620      	mov	r0, r4
 8016532:	bf18      	it	ne
 8016534:	f04b 0b02 	orrne.w	fp, fp, #2
 8016538:	1bad      	subs	r5, r5, r6
 801653a:	f7ff fe07 	bl	801614c <rshift>
 801653e:	687e      	ldr	r6, [r7, #4]
 8016540:	f04f 0802 	mov.w	r8, #2
 8016544:	f1bb 0f00 	cmp.w	fp, #0
 8016548:	d04a      	beq.n	80165e0 <__gethex+0x3c4>
 801654a:	68fb      	ldr	r3, [r7, #12]
 801654c:	2b02      	cmp	r3, #2
 801654e:	d016      	beq.n	801657e <__gethex+0x362>
 8016550:	2b03      	cmp	r3, #3
 8016552:	d018      	beq.n	8016586 <__gethex+0x36a>
 8016554:	2b01      	cmp	r3, #1
 8016556:	d109      	bne.n	801656c <__gethex+0x350>
 8016558:	f01b 0f02 	tst.w	fp, #2
 801655c:	d006      	beq.n	801656c <__gethex+0x350>
 801655e:	f8da 3000 	ldr.w	r3, [sl]
 8016562:	ea4b 0b03 	orr.w	fp, fp, r3
 8016566:	f01b 0f01 	tst.w	fp, #1
 801656a:	d10f      	bne.n	801658c <__gethex+0x370>
 801656c:	f048 0810 	orr.w	r8, r8, #16
 8016570:	e036      	b.n	80165e0 <__gethex+0x3c4>
 8016572:	f04f 0b01 	mov.w	fp, #1
 8016576:	e7d0      	b.n	801651a <__gethex+0x2fe>
 8016578:	f04f 0801 	mov.w	r8, #1
 801657c:	e7e2      	b.n	8016544 <__gethex+0x328>
 801657e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016580:	f1c3 0301 	rsb	r3, r3, #1
 8016584:	930f      	str	r3, [sp, #60]	; 0x3c
 8016586:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016588:	2b00      	cmp	r3, #0
 801658a:	d0ef      	beq.n	801656c <__gethex+0x350>
 801658c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016590:	f104 0214 	add.w	r2, r4, #20
 8016594:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8016598:	9301      	str	r3, [sp, #4]
 801659a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801659e:	2300      	movs	r3, #0
 80165a0:	4694      	mov	ip, r2
 80165a2:	f852 1b04 	ldr.w	r1, [r2], #4
 80165a6:	f1b1 3fff 	cmp.w	r1, #4294967295
 80165aa:	d01e      	beq.n	80165ea <__gethex+0x3ce>
 80165ac:	3101      	adds	r1, #1
 80165ae:	f8cc 1000 	str.w	r1, [ip]
 80165b2:	f1b8 0f02 	cmp.w	r8, #2
 80165b6:	f104 0214 	add.w	r2, r4, #20
 80165ba:	d13d      	bne.n	8016638 <__gethex+0x41c>
 80165bc:	683b      	ldr	r3, [r7, #0]
 80165be:	3b01      	subs	r3, #1
 80165c0:	42ab      	cmp	r3, r5
 80165c2:	d10b      	bne.n	80165dc <__gethex+0x3c0>
 80165c4:	1169      	asrs	r1, r5, #5
 80165c6:	2301      	movs	r3, #1
 80165c8:	f005 051f 	and.w	r5, r5, #31
 80165cc:	fa03 f505 	lsl.w	r5, r3, r5
 80165d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80165d4:	421d      	tst	r5, r3
 80165d6:	bf18      	it	ne
 80165d8:	f04f 0801 	movne.w	r8, #1
 80165dc:	f048 0820 	orr.w	r8, r8, #32
 80165e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80165e2:	601c      	str	r4, [r3, #0]
 80165e4:	9b02      	ldr	r3, [sp, #8]
 80165e6:	601e      	str	r6, [r3, #0]
 80165e8:	e6a2      	b.n	8016330 <__gethex+0x114>
 80165ea:	4290      	cmp	r0, r2
 80165ec:	f842 3c04 	str.w	r3, [r2, #-4]
 80165f0:	d8d6      	bhi.n	80165a0 <__gethex+0x384>
 80165f2:	68a2      	ldr	r2, [r4, #8]
 80165f4:	4593      	cmp	fp, r2
 80165f6:	db17      	blt.n	8016628 <__gethex+0x40c>
 80165f8:	6861      	ldr	r1, [r4, #4]
 80165fa:	4648      	mov	r0, r9
 80165fc:	3101      	adds	r1, #1
 80165fe:	f000 f9bb 	bl	8016978 <_Balloc>
 8016602:	4682      	mov	sl, r0
 8016604:	b918      	cbnz	r0, 801660e <__gethex+0x3f2>
 8016606:	4b1b      	ldr	r3, [pc, #108]	; (8016674 <__gethex+0x458>)
 8016608:	4602      	mov	r2, r0
 801660a:	2184      	movs	r1, #132	; 0x84
 801660c:	e6b3      	b.n	8016376 <__gethex+0x15a>
 801660e:	6922      	ldr	r2, [r4, #16]
 8016610:	3202      	adds	r2, #2
 8016612:	f104 010c 	add.w	r1, r4, #12
 8016616:	0092      	lsls	r2, r2, #2
 8016618:	300c      	adds	r0, #12
 801661a:	f7ff fd2e 	bl	801607a <memcpy>
 801661e:	4621      	mov	r1, r4
 8016620:	4648      	mov	r0, r9
 8016622:	f000 f9e9 	bl	80169f8 <_Bfree>
 8016626:	4654      	mov	r4, sl
 8016628:	6922      	ldr	r2, [r4, #16]
 801662a:	1c51      	adds	r1, r2, #1
 801662c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8016630:	6121      	str	r1, [r4, #16]
 8016632:	2101      	movs	r1, #1
 8016634:	6151      	str	r1, [r2, #20]
 8016636:	e7bc      	b.n	80165b2 <__gethex+0x396>
 8016638:	6921      	ldr	r1, [r4, #16]
 801663a:	4559      	cmp	r1, fp
 801663c:	dd0b      	ble.n	8016656 <__gethex+0x43a>
 801663e:	2101      	movs	r1, #1
 8016640:	4620      	mov	r0, r4
 8016642:	f7ff fd83 	bl	801614c <rshift>
 8016646:	68bb      	ldr	r3, [r7, #8]
 8016648:	3601      	adds	r6, #1
 801664a:	42b3      	cmp	r3, r6
 801664c:	f6ff aedb 	blt.w	8016406 <__gethex+0x1ea>
 8016650:	f04f 0801 	mov.w	r8, #1
 8016654:	e7c2      	b.n	80165dc <__gethex+0x3c0>
 8016656:	f015 051f 	ands.w	r5, r5, #31
 801665a:	d0f9      	beq.n	8016650 <__gethex+0x434>
 801665c:	9b01      	ldr	r3, [sp, #4]
 801665e:	441a      	add	r2, r3
 8016660:	f1c5 0520 	rsb	r5, r5, #32
 8016664:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8016668:	f000 fa78 	bl	8016b5c <__hi0bits>
 801666c:	42a8      	cmp	r0, r5
 801666e:	dbe6      	blt.n	801663e <__gethex+0x422>
 8016670:	e7ee      	b.n	8016650 <__gethex+0x434>
 8016672:	bf00      	nop
 8016674:	08018651 	.word	0x08018651

08016678 <L_shift>:
 8016678:	f1c2 0208 	rsb	r2, r2, #8
 801667c:	0092      	lsls	r2, r2, #2
 801667e:	b570      	push	{r4, r5, r6, lr}
 8016680:	f1c2 0620 	rsb	r6, r2, #32
 8016684:	6843      	ldr	r3, [r0, #4]
 8016686:	6804      	ldr	r4, [r0, #0]
 8016688:	fa03 f506 	lsl.w	r5, r3, r6
 801668c:	432c      	orrs	r4, r5
 801668e:	40d3      	lsrs	r3, r2
 8016690:	6004      	str	r4, [r0, #0]
 8016692:	f840 3f04 	str.w	r3, [r0, #4]!
 8016696:	4288      	cmp	r0, r1
 8016698:	d3f4      	bcc.n	8016684 <L_shift+0xc>
 801669a:	bd70      	pop	{r4, r5, r6, pc}

0801669c <__match>:
 801669c:	b530      	push	{r4, r5, lr}
 801669e:	6803      	ldr	r3, [r0, #0]
 80166a0:	3301      	adds	r3, #1
 80166a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80166a6:	b914      	cbnz	r4, 80166ae <__match+0x12>
 80166a8:	6003      	str	r3, [r0, #0]
 80166aa:	2001      	movs	r0, #1
 80166ac:	bd30      	pop	{r4, r5, pc}
 80166ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80166b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80166b6:	2d19      	cmp	r5, #25
 80166b8:	bf98      	it	ls
 80166ba:	3220      	addls	r2, #32
 80166bc:	42a2      	cmp	r2, r4
 80166be:	d0f0      	beq.n	80166a2 <__match+0x6>
 80166c0:	2000      	movs	r0, #0
 80166c2:	e7f3      	b.n	80166ac <__match+0x10>

080166c4 <__hexnan>:
 80166c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166c8:	680b      	ldr	r3, [r1, #0]
 80166ca:	6801      	ldr	r1, [r0, #0]
 80166cc:	115e      	asrs	r6, r3, #5
 80166ce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80166d2:	f013 031f 	ands.w	r3, r3, #31
 80166d6:	b087      	sub	sp, #28
 80166d8:	bf18      	it	ne
 80166da:	3604      	addne	r6, #4
 80166dc:	2500      	movs	r5, #0
 80166de:	1f37      	subs	r7, r6, #4
 80166e0:	4682      	mov	sl, r0
 80166e2:	4690      	mov	r8, r2
 80166e4:	9301      	str	r3, [sp, #4]
 80166e6:	f846 5c04 	str.w	r5, [r6, #-4]
 80166ea:	46b9      	mov	r9, r7
 80166ec:	463c      	mov	r4, r7
 80166ee:	9502      	str	r5, [sp, #8]
 80166f0:	46ab      	mov	fp, r5
 80166f2:	784a      	ldrb	r2, [r1, #1]
 80166f4:	1c4b      	adds	r3, r1, #1
 80166f6:	9303      	str	r3, [sp, #12]
 80166f8:	b342      	cbz	r2, 801674c <__hexnan+0x88>
 80166fa:	4610      	mov	r0, r2
 80166fc:	9105      	str	r1, [sp, #20]
 80166fe:	9204      	str	r2, [sp, #16]
 8016700:	f7ff fd76 	bl	80161f0 <__hexdig_fun>
 8016704:	2800      	cmp	r0, #0
 8016706:	d14f      	bne.n	80167a8 <__hexnan+0xe4>
 8016708:	9a04      	ldr	r2, [sp, #16]
 801670a:	9905      	ldr	r1, [sp, #20]
 801670c:	2a20      	cmp	r2, #32
 801670e:	d818      	bhi.n	8016742 <__hexnan+0x7e>
 8016710:	9b02      	ldr	r3, [sp, #8]
 8016712:	459b      	cmp	fp, r3
 8016714:	dd13      	ble.n	801673e <__hexnan+0x7a>
 8016716:	454c      	cmp	r4, r9
 8016718:	d206      	bcs.n	8016728 <__hexnan+0x64>
 801671a:	2d07      	cmp	r5, #7
 801671c:	dc04      	bgt.n	8016728 <__hexnan+0x64>
 801671e:	462a      	mov	r2, r5
 8016720:	4649      	mov	r1, r9
 8016722:	4620      	mov	r0, r4
 8016724:	f7ff ffa8 	bl	8016678 <L_shift>
 8016728:	4544      	cmp	r4, r8
 801672a:	d950      	bls.n	80167ce <__hexnan+0x10a>
 801672c:	2300      	movs	r3, #0
 801672e:	f1a4 0904 	sub.w	r9, r4, #4
 8016732:	f844 3c04 	str.w	r3, [r4, #-4]
 8016736:	f8cd b008 	str.w	fp, [sp, #8]
 801673a:	464c      	mov	r4, r9
 801673c:	461d      	mov	r5, r3
 801673e:	9903      	ldr	r1, [sp, #12]
 8016740:	e7d7      	b.n	80166f2 <__hexnan+0x2e>
 8016742:	2a29      	cmp	r2, #41	; 0x29
 8016744:	d155      	bne.n	80167f2 <__hexnan+0x12e>
 8016746:	3102      	adds	r1, #2
 8016748:	f8ca 1000 	str.w	r1, [sl]
 801674c:	f1bb 0f00 	cmp.w	fp, #0
 8016750:	d04f      	beq.n	80167f2 <__hexnan+0x12e>
 8016752:	454c      	cmp	r4, r9
 8016754:	d206      	bcs.n	8016764 <__hexnan+0xa0>
 8016756:	2d07      	cmp	r5, #7
 8016758:	dc04      	bgt.n	8016764 <__hexnan+0xa0>
 801675a:	462a      	mov	r2, r5
 801675c:	4649      	mov	r1, r9
 801675e:	4620      	mov	r0, r4
 8016760:	f7ff ff8a 	bl	8016678 <L_shift>
 8016764:	4544      	cmp	r4, r8
 8016766:	d934      	bls.n	80167d2 <__hexnan+0x10e>
 8016768:	f1a8 0204 	sub.w	r2, r8, #4
 801676c:	4623      	mov	r3, r4
 801676e:	f853 1b04 	ldr.w	r1, [r3], #4
 8016772:	f842 1f04 	str.w	r1, [r2, #4]!
 8016776:	429f      	cmp	r7, r3
 8016778:	d2f9      	bcs.n	801676e <__hexnan+0xaa>
 801677a:	1b3b      	subs	r3, r7, r4
 801677c:	f023 0303 	bic.w	r3, r3, #3
 8016780:	3304      	adds	r3, #4
 8016782:	3e03      	subs	r6, #3
 8016784:	3401      	adds	r4, #1
 8016786:	42a6      	cmp	r6, r4
 8016788:	bf38      	it	cc
 801678a:	2304      	movcc	r3, #4
 801678c:	4443      	add	r3, r8
 801678e:	2200      	movs	r2, #0
 8016790:	f843 2b04 	str.w	r2, [r3], #4
 8016794:	429f      	cmp	r7, r3
 8016796:	d2fb      	bcs.n	8016790 <__hexnan+0xcc>
 8016798:	683b      	ldr	r3, [r7, #0]
 801679a:	b91b      	cbnz	r3, 80167a4 <__hexnan+0xe0>
 801679c:	4547      	cmp	r7, r8
 801679e:	d126      	bne.n	80167ee <__hexnan+0x12a>
 80167a0:	2301      	movs	r3, #1
 80167a2:	603b      	str	r3, [r7, #0]
 80167a4:	2005      	movs	r0, #5
 80167a6:	e025      	b.n	80167f4 <__hexnan+0x130>
 80167a8:	3501      	adds	r5, #1
 80167aa:	2d08      	cmp	r5, #8
 80167ac:	f10b 0b01 	add.w	fp, fp, #1
 80167b0:	dd06      	ble.n	80167c0 <__hexnan+0xfc>
 80167b2:	4544      	cmp	r4, r8
 80167b4:	d9c3      	bls.n	801673e <__hexnan+0x7a>
 80167b6:	2300      	movs	r3, #0
 80167b8:	f844 3c04 	str.w	r3, [r4, #-4]
 80167bc:	2501      	movs	r5, #1
 80167be:	3c04      	subs	r4, #4
 80167c0:	6822      	ldr	r2, [r4, #0]
 80167c2:	f000 000f 	and.w	r0, r0, #15
 80167c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80167ca:	6020      	str	r0, [r4, #0]
 80167cc:	e7b7      	b.n	801673e <__hexnan+0x7a>
 80167ce:	2508      	movs	r5, #8
 80167d0:	e7b5      	b.n	801673e <__hexnan+0x7a>
 80167d2:	9b01      	ldr	r3, [sp, #4]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d0df      	beq.n	8016798 <__hexnan+0xd4>
 80167d8:	f1c3 0320 	rsb	r3, r3, #32
 80167dc:	f04f 32ff 	mov.w	r2, #4294967295
 80167e0:	40da      	lsrs	r2, r3
 80167e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80167e6:	4013      	ands	r3, r2
 80167e8:	f846 3c04 	str.w	r3, [r6, #-4]
 80167ec:	e7d4      	b.n	8016798 <__hexnan+0xd4>
 80167ee:	3f04      	subs	r7, #4
 80167f0:	e7d2      	b.n	8016798 <__hexnan+0xd4>
 80167f2:	2004      	movs	r0, #4
 80167f4:	b007      	add	sp, #28
 80167f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080167fc <sbrk_aligned>:
 80167fc:	b570      	push	{r4, r5, r6, lr}
 80167fe:	4e0e      	ldr	r6, [pc, #56]	; (8016838 <sbrk_aligned+0x3c>)
 8016800:	460c      	mov	r4, r1
 8016802:	6831      	ldr	r1, [r6, #0]
 8016804:	4605      	mov	r5, r0
 8016806:	b911      	cbnz	r1, 801680e <sbrk_aligned+0x12>
 8016808:	f001 f920 	bl	8017a4c <_sbrk_r>
 801680c:	6030      	str	r0, [r6, #0]
 801680e:	4621      	mov	r1, r4
 8016810:	4628      	mov	r0, r5
 8016812:	f001 f91b 	bl	8017a4c <_sbrk_r>
 8016816:	1c43      	adds	r3, r0, #1
 8016818:	d00a      	beq.n	8016830 <sbrk_aligned+0x34>
 801681a:	1cc4      	adds	r4, r0, #3
 801681c:	f024 0403 	bic.w	r4, r4, #3
 8016820:	42a0      	cmp	r0, r4
 8016822:	d007      	beq.n	8016834 <sbrk_aligned+0x38>
 8016824:	1a21      	subs	r1, r4, r0
 8016826:	4628      	mov	r0, r5
 8016828:	f001 f910 	bl	8017a4c <_sbrk_r>
 801682c:	3001      	adds	r0, #1
 801682e:	d101      	bne.n	8016834 <sbrk_aligned+0x38>
 8016830:	f04f 34ff 	mov.w	r4, #4294967295
 8016834:	4620      	mov	r0, r4
 8016836:	bd70      	pop	{r4, r5, r6, pc}
 8016838:	2000369c 	.word	0x2000369c

0801683c <_malloc_r>:
 801683c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016840:	1ccd      	adds	r5, r1, #3
 8016842:	f025 0503 	bic.w	r5, r5, #3
 8016846:	3508      	adds	r5, #8
 8016848:	2d0c      	cmp	r5, #12
 801684a:	bf38      	it	cc
 801684c:	250c      	movcc	r5, #12
 801684e:	2d00      	cmp	r5, #0
 8016850:	4607      	mov	r7, r0
 8016852:	db01      	blt.n	8016858 <_malloc_r+0x1c>
 8016854:	42a9      	cmp	r1, r5
 8016856:	d905      	bls.n	8016864 <_malloc_r+0x28>
 8016858:	230c      	movs	r3, #12
 801685a:	603b      	str	r3, [r7, #0]
 801685c:	2600      	movs	r6, #0
 801685e:	4630      	mov	r0, r6
 8016860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016864:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8016938 <_malloc_r+0xfc>
 8016868:	f000 f87a 	bl	8016960 <__malloc_lock>
 801686c:	f8d8 3000 	ldr.w	r3, [r8]
 8016870:	461c      	mov	r4, r3
 8016872:	bb5c      	cbnz	r4, 80168cc <_malloc_r+0x90>
 8016874:	4629      	mov	r1, r5
 8016876:	4638      	mov	r0, r7
 8016878:	f7ff ffc0 	bl	80167fc <sbrk_aligned>
 801687c:	1c43      	adds	r3, r0, #1
 801687e:	4604      	mov	r4, r0
 8016880:	d155      	bne.n	801692e <_malloc_r+0xf2>
 8016882:	f8d8 4000 	ldr.w	r4, [r8]
 8016886:	4626      	mov	r6, r4
 8016888:	2e00      	cmp	r6, #0
 801688a:	d145      	bne.n	8016918 <_malloc_r+0xdc>
 801688c:	2c00      	cmp	r4, #0
 801688e:	d048      	beq.n	8016922 <_malloc_r+0xe6>
 8016890:	6823      	ldr	r3, [r4, #0]
 8016892:	4631      	mov	r1, r6
 8016894:	4638      	mov	r0, r7
 8016896:	eb04 0903 	add.w	r9, r4, r3
 801689a:	f001 f8d7 	bl	8017a4c <_sbrk_r>
 801689e:	4581      	cmp	r9, r0
 80168a0:	d13f      	bne.n	8016922 <_malloc_r+0xe6>
 80168a2:	6821      	ldr	r1, [r4, #0]
 80168a4:	1a6d      	subs	r5, r5, r1
 80168a6:	4629      	mov	r1, r5
 80168a8:	4638      	mov	r0, r7
 80168aa:	f7ff ffa7 	bl	80167fc <sbrk_aligned>
 80168ae:	3001      	adds	r0, #1
 80168b0:	d037      	beq.n	8016922 <_malloc_r+0xe6>
 80168b2:	6823      	ldr	r3, [r4, #0]
 80168b4:	442b      	add	r3, r5
 80168b6:	6023      	str	r3, [r4, #0]
 80168b8:	f8d8 3000 	ldr.w	r3, [r8]
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d038      	beq.n	8016932 <_malloc_r+0xf6>
 80168c0:	685a      	ldr	r2, [r3, #4]
 80168c2:	42a2      	cmp	r2, r4
 80168c4:	d12b      	bne.n	801691e <_malloc_r+0xe2>
 80168c6:	2200      	movs	r2, #0
 80168c8:	605a      	str	r2, [r3, #4]
 80168ca:	e00f      	b.n	80168ec <_malloc_r+0xb0>
 80168cc:	6822      	ldr	r2, [r4, #0]
 80168ce:	1b52      	subs	r2, r2, r5
 80168d0:	d41f      	bmi.n	8016912 <_malloc_r+0xd6>
 80168d2:	2a0b      	cmp	r2, #11
 80168d4:	d917      	bls.n	8016906 <_malloc_r+0xca>
 80168d6:	1961      	adds	r1, r4, r5
 80168d8:	42a3      	cmp	r3, r4
 80168da:	6025      	str	r5, [r4, #0]
 80168dc:	bf18      	it	ne
 80168de:	6059      	strne	r1, [r3, #4]
 80168e0:	6863      	ldr	r3, [r4, #4]
 80168e2:	bf08      	it	eq
 80168e4:	f8c8 1000 	streq.w	r1, [r8]
 80168e8:	5162      	str	r2, [r4, r5]
 80168ea:	604b      	str	r3, [r1, #4]
 80168ec:	4638      	mov	r0, r7
 80168ee:	f104 060b 	add.w	r6, r4, #11
 80168f2:	f000 f83b 	bl	801696c <__malloc_unlock>
 80168f6:	f026 0607 	bic.w	r6, r6, #7
 80168fa:	1d23      	adds	r3, r4, #4
 80168fc:	1af2      	subs	r2, r6, r3
 80168fe:	d0ae      	beq.n	801685e <_malloc_r+0x22>
 8016900:	1b9b      	subs	r3, r3, r6
 8016902:	50a3      	str	r3, [r4, r2]
 8016904:	e7ab      	b.n	801685e <_malloc_r+0x22>
 8016906:	42a3      	cmp	r3, r4
 8016908:	6862      	ldr	r2, [r4, #4]
 801690a:	d1dd      	bne.n	80168c8 <_malloc_r+0x8c>
 801690c:	f8c8 2000 	str.w	r2, [r8]
 8016910:	e7ec      	b.n	80168ec <_malloc_r+0xb0>
 8016912:	4623      	mov	r3, r4
 8016914:	6864      	ldr	r4, [r4, #4]
 8016916:	e7ac      	b.n	8016872 <_malloc_r+0x36>
 8016918:	4634      	mov	r4, r6
 801691a:	6876      	ldr	r6, [r6, #4]
 801691c:	e7b4      	b.n	8016888 <_malloc_r+0x4c>
 801691e:	4613      	mov	r3, r2
 8016920:	e7cc      	b.n	80168bc <_malloc_r+0x80>
 8016922:	230c      	movs	r3, #12
 8016924:	603b      	str	r3, [r7, #0]
 8016926:	4638      	mov	r0, r7
 8016928:	f000 f820 	bl	801696c <__malloc_unlock>
 801692c:	e797      	b.n	801685e <_malloc_r+0x22>
 801692e:	6025      	str	r5, [r4, #0]
 8016930:	e7dc      	b.n	80168ec <_malloc_r+0xb0>
 8016932:	605b      	str	r3, [r3, #4]
 8016934:	deff      	udf	#255	; 0xff
 8016936:	bf00      	nop
 8016938:	20003698 	.word	0x20003698

0801693c <__ascii_mbtowc>:
 801693c:	b082      	sub	sp, #8
 801693e:	b901      	cbnz	r1, 8016942 <__ascii_mbtowc+0x6>
 8016940:	a901      	add	r1, sp, #4
 8016942:	b142      	cbz	r2, 8016956 <__ascii_mbtowc+0x1a>
 8016944:	b14b      	cbz	r3, 801695a <__ascii_mbtowc+0x1e>
 8016946:	7813      	ldrb	r3, [r2, #0]
 8016948:	600b      	str	r3, [r1, #0]
 801694a:	7812      	ldrb	r2, [r2, #0]
 801694c:	1e10      	subs	r0, r2, #0
 801694e:	bf18      	it	ne
 8016950:	2001      	movne	r0, #1
 8016952:	b002      	add	sp, #8
 8016954:	4770      	bx	lr
 8016956:	4610      	mov	r0, r2
 8016958:	e7fb      	b.n	8016952 <__ascii_mbtowc+0x16>
 801695a:	f06f 0001 	mvn.w	r0, #1
 801695e:	e7f8      	b.n	8016952 <__ascii_mbtowc+0x16>

08016960 <__malloc_lock>:
 8016960:	4801      	ldr	r0, [pc, #4]	; (8016968 <__malloc_lock+0x8>)
 8016962:	f7ff bb80 	b.w	8016066 <__retarget_lock_acquire_recursive>
 8016966:	bf00      	nop
 8016968:	20003694 	.word	0x20003694

0801696c <__malloc_unlock>:
 801696c:	4801      	ldr	r0, [pc, #4]	; (8016974 <__malloc_unlock+0x8>)
 801696e:	f7ff bb7b 	b.w	8016068 <__retarget_lock_release_recursive>
 8016972:	bf00      	nop
 8016974:	20003694 	.word	0x20003694

08016978 <_Balloc>:
 8016978:	b570      	push	{r4, r5, r6, lr}
 801697a:	69c6      	ldr	r6, [r0, #28]
 801697c:	4604      	mov	r4, r0
 801697e:	460d      	mov	r5, r1
 8016980:	b976      	cbnz	r6, 80169a0 <_Balloc+0x28>
 8016982:	2010      	movs	r0, #16
 8016984:	f001 f8a6 	bl	8017ad4 <malloc>
 8016988:	4602      	mov	r2, r0
 801698a:	61e0      	str	r0, [r4, #28]
 801698c:	b920      	cbnz	r0, 8016998 <_Balloc+0x20>
 801698e:	4b18      	ldr	r3, [pc, #96]	; (80169f0 <_Balloc+0x78>)
 8016990:	4818      	ldr	r0, [pc, #96]	; (80169f4 <_Balloc+0x7c>)
 8016992:	216b      	movs	r1, #107	; 0x6b
 8016994:	f001 f86a 	bl	8017a6c <__assert_func>
 8016998:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801699c:	6006      	str	r6, [r0, #0]
 801699e:	60c6      	str	r6, [r0, #12]
 80169a0:	69e6      	ldr	r6, [r4, #28]
 80169a2:	68f3      	ldr	r3, [r6, #12]
 80169a4:	b183      	cbz	r3, 80169c8 <_Balloc+0x50>
 80169a6:	69e3      	ldr	r3, [r4, #28]
 80169a8:	68db      	ldr	r3, [r3, #12]
 80169aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80169ae:	b9b8      	cbnz	r0, 80169e0 <_Balloc+0x68>
 80169b0:	2101      	movs	r1, #1
 80169b2:	fa01 f605 	lsl.w	r6, r1, r5
 80169b6:	1d72      	adds	r2, r6, #5
 80169b8:	0092      	lsls	r2, r2, #2
 80169ba:	4620      	mov	r0, r4
 80169bc:	f001 f874 	bl	8017aa8 <_calloc_r>
 80169c0:	b160      	cbz	r0, 80169dc <_Balloc+0x64>
 80169c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80169c6:	e00e      	b.n	80169e6 <_Balloc+0x6e>
 80169c8:	2221      	movs	r2, #33	; 0x21
 80169ca:	2104      	movs	r1, #4
 80169cc:	4620      	mov	r0, r4
 80169ce:	f001 f86b 	bl	8017aa8 <_calloc_r>
 80169d2:	69e3      	ldr	r3, [r4, #28]
 80169d4:	60f0      	str	r0, [r6, #12]
 80169d6:	68db      	ldr	r3, [r3, #12]
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d1e4      	bne.n	80169a6 <_Balloc+0x2e>
 80169dc:	2000      	movs	r0, #0
 80169de:	bd70      	pop	{r4, r5, r6, pc}
 80169e0:	6802      	ldr	r2, [r0, #0]
 80169e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80169e6:	2300      	movs	r3, #0
 80169e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80169ec:	e7f7      	b.n	80169de <_Balloc+0x66>
 80169ee:	bf00      	nop
 80169f0:	080186c2 	.word	0x080186c2
 80169f4:	080186d9 	.word	0x080186d9

080169f8 <_Bfree>:
 80169f8:	b570      	push	{r4, r5, r6, lr}
 80169fa:	69c6      	ldr	r6, [r0, #28]
 80169fc:	4605      	mov	r5, r0
 80169fe:	460c      	mov	r4, r1
 8016a00:	b976      	cbnz	r6, 8016a20 <_Bfree+0x28>
 8016a02:	2010      	movs	r0, #16
 8016a04:	f001 f866 	bl	8017ad4 <malloc>
 8016a08:	4602      	mov	r2, r0
 8016a0a:	61e8      	str	r0, [r5, #28]
 8016a0c:	b920      	cbnz	r0, 8016a18 <_Bfree+0x20>
 8016a0e:	4b09      	ldr	r3, [pc, #36]	; (8016a34 <_Bfree+0x3c>)
 8016a10:	4809      	ldr	r0, [pc, #36]	; (8016a38 <_Bfree+0x40>)
 8016a12:	218f      	movs	r1, #143	; 0x8f
 8016a14:	f001 f82a 	bl	8017a6c <__assert_func>
 8016a18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016a1c:	6006      	str	r6, [r0, #0]
 8016a1e:	60c6      	str	r6, [r0, #12]
 8016a20:	b13c      	cbz	r4, 8016a32 <_Bfree+0x3a>
 8016a22:	69eb      	ldr	r3, [r5, #28]
 8016a24:	6862      	ldr	r2, [r4, #4]
 8016a26:	68db      	ldr	r3, [r3, #12]
 8016a28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016a2c:	6021      	str	r1, [r4, #0]
 8016a2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016a32:	bd70      	pop	{r4, r5, r6, pc}
 8016a34:	080186c2 	.word	0x080186c2
 8016a38:	080186d9 	.word	0x080186d9

08016a3c <__multadd>:
 8016a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a40:	690d      	ldr	r5, [r1, #16]
 8016a42:	4607      	mov	r7, r0
 8016a44:	460c      	mov	r4, r1
 8016a46:	461e      	mov	r6, r3
 8016a48:	f101 0c14 	add.w	ip, r1, #20
 8016a4c:	2000      	movs	r0, #0
 8016a4e:	f8dc 3000 	ldr.w	r3, [ip]
 8016a52:	b299      	uxth	r1, r3
 8016a54:	fb02 6101 	mla	r1, r2, r1, r6
 8016a58:	0c1e      	lsrs	r6, r3, #16
 8016a5a:	0c0b      	lsrs	r3, r1, #16
 8016a5c:	fb02 3306 	mla	r3, r2, r6, r3
 8016a60:	b289      	uxth	r1, r1
 8016a62:	3001      	adds	r0, #1
 8016a64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016a68:	4285      	cmp	r5, r0
 8016a6a:	f84c 1b04 	str.w	r1, [ip], #4
 8016a6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016a72:	dcec      	bgt.n	8016a4e <__multadd+0x12>
 8016a74:	b30e      	cbz	r6, 8016aba <__multadd+0x7e>
 8016a76:	68a3      	ldr	r3, [r4, #8]
 8016a78:	42ab      	cmp	r3, r5
 8016a7a:	dc19      	bgt.n	8016ab0 <__multadd+0x74>
 8016a7c:	6861      	ldr	r1, [r4, #4]
 8016a7e:	4638      	mov	r0, r7
 8016a80:	3101      	adds	r1, #1
 8016a82:	f7ff ff79 	bl	8016978 <_Balloc>
 8016a86:	4680      	mov	r8, r0
 8016a88:	b928      	cbnz	r0, 8016a96 <__multadd+0x5a>
 8016a8a:	4602      	mov	r2, r0
 8016a8c:	4b0c      	ldr	r3, [pc, #48]	; (8016ac0 <__multadd+0x84>)
 8016a8e:	480d      	ldr	r0, [pc, #52]	; (8016ac4 <__multadd+0x88>)
 8016a90:	21ba      	movs	r1, #186	; 0xba
 8016a92:	f000 ffeb 	bl	8017a6c <__assert_func>
 8016a96:	6922      	ldr	r2, [r4, #16]
 8016a98:	3202      	adds	r2, #2
 8016a9a:	f104 010c 	add.w	r1, r4, #12
 8016a9e:	0092      	lsls	r2, r2, #2
 8016aa0:	300c      	adds	r0, #12
 8016aa2:	f7ff faea 	bl	801607a <memcpy>
 8016aa6:	4621      	mov	r1, r4
 8016aa8:	4638      	mov	r0, r7
 8016aaa:	f7ff ffa5 	bl	80169f8 <_Bfree>
 8016aae:	4644      	mov	r4, r8
 8016ab0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016ab4:	3501      	adds	r5, #1
 8016ab6:	615e      	str	r6, [r3, #20]
 8016ab8:	6125      	str	r5, [r4, #16]
 8016aba:	4620      	mov	r0, r4
 8016abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ac0:	08018651 	.word	0x08018651
 8016ac4:	080186d9 	.word	0x080186d9

08016ac8 <__s2b>:
 8016ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016acc:	460c      	mov	r4, r1
 8016ace:	4615      	mov	r5, r2
 8016ad0:	461f      	mov	r7, r3
 8016ad2:	2209      	movs	r2, #9
 8016ad4:	3308      	adds	r3, #8
 8016ad6:	4606      	mov	r6, r0
 8016ad8:	fb93 f3f2 	sdiv	r3, r3, r2
 8016adc:	2100      	movs	r1, #0
 8016ade:	2201      	movs	r2, #1
 8016ae0:	429a      	cmp	r2, r3
 8016ae2:	db09      	blt.n	8016af8 <__s2b+0x30>
 8016ae4:	4630      	mov	r0, r6
 8016ae6:	f7ff ff47 	bl	8016978 <_Balloc>
 8016aea:	b940      	cbnz	r0, 8016afe <__s2b+0x36>
 8016aec:	4602      	mov	r2, r0
 8016aee:	4b19      	ldr	r3, [pc, #100]	; (8016b54 <__s2b+0x8c>)
 8016af0:	4819      	ldr	r0, [pc, #100]	; (8016b58 <__s2b+0x90>)
 8016af2:	21d3      	movs	r1, #211	; 0xd3
 8016af4:	f000 ffba 	bl	8017a6c <__assert_func>
 8016af8:	0052      	lsls	r2, r2, #1
 8016afa:	3101      	adds	r1, #1
 8016afc:	e7f0      	b.n	8016ae0 <__s2b+0x18>
 8016afe:	9b08      	ldr	r3, [sp, #32]
 8016b00:	6143      	str	r3, [r0, #20]
 8016b02:	2d09      	cmp	r5, #9
 8016b04:	f04f 0301 	mov.w	r3, #1
 8016b08:	6103      	str	r3, [r0, #16]
 8016b0a:	dd16      	ble.n	8016b3a <__s2b+0x72>
 8016b0c:	f104 0909 	add.w	r9, r4, #9
 8016b10:	46c8      	mov	r8, r9
 8016b12:	442c      	add	r4, r5
 8016b14:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016b18:	4601      	mov	r1, r0
 8016b1a:	3b30      	subs	r3, #48	; 0x30
 8016b1c:	220a      	movs	r2, #10
 8016b1e:	4630      	mov	r0, r6
 8016b20:	f7ff ff8c 	bl	8016a3c <__multadd>
 8016b24:	45a0      	cmp	r8, r4
 8016b26:	d1f5      	bne.n	8016b14 <__s2b+0x4c>
 8016b28:	f1a5 0408 	sub.w	r4, r5, #8
 8016b2c:	444c      	add	r4, r9
 8016b2e:	1b2d      	subs	r5, r5, r4
 8016b30:	1963      	adds	r3, r4, r5
 8016b32:	42bb      	cmp	r3, r7
 8016b34:	db04      	blt.n	8016b40 <__s2b+0x78>
 8016b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b3a:	340a      	adds	r4, #10
 8016b3c:	2509      	movs	r5, #9
 8016b3e:	e7f6      	b.n	8016b2e <__s2b+0x66>
 8016b40:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016b44:	4601      	mov	r1, r0
 8016b46:	3b30      	subs	r3, #48	; 0x30
 8016b48:	220a      	movs	r2, #10
 8016b4a:	4630      	mov	r0, r6
 8016b4c:	f7ff ff76 	bl	8016a3c <__multadd>
 8016b50:	e7ee      	b.n	8016b30 <__s2b+0x68>
 8016b52:	bf00      	nop
 8016b54:	08018651 	.word	0x08018651
 8016b58:	080186d9 	.word	0x080186d9

08016b5c <__hi0bits>:
 8016b5c:	0c03      	lsrs	r3, r0, #16
 8016b5e:	041b      	lsls	r3, r3, #16
 8016b60:	b9d3      	cbnz	r3, 8016b98 <__hi0bits+0x3c>
 8016b62:	0400      	lsls	r0, r0, #16
 8016b64:	2310      	movs	r3, #16
 8016b66:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016b6a:	bf04      	itt	eq
 8016b6c:	0200      	lsleq	r0, r0, #8
 8016b6e:	3308      	addeq	r3, #8
 8016b70:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016b74:	bf04      	itt	eq
 8016b76:	0100      	lsleq	r0, r0, #4
 8016b78:	3304      	addeq	r3, #4
 8016b7a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016b7e:	bf04      	itt	eq
 8016b80:	0080      	lsleq	r0, r0, #2
 8016b82:	3302      	addeq	r3, #2
 8016b84:	2800      	cmp	r0, #0
 8016b86:	db05      	blt.n	8016b94 <__hi0bits+0x38>
 8016b88:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016b8c:	f103 0301 	add.w	r3, r3, #1
 8016b90:	bf08      	it	eq
 8016b92:	2320      	moveq	r3, #32
 8016b94:	4618      	mov	r0, r3
 8016b96:	4770      	bx	lr
 8016b98:	2300      	movs	r3, #0
 8016b9a:	e7e4      	b.n	8016b66 <__hi0bits+0xa>

08016b9c <__lo0bits>:
 8016b9c:	6803      	ldr	r3, [r0, #0]
 8016b9e:	f013 0207 	ands.w	r2, r3, #7
 8016ba2:	d00c      	beq.n	8016bbe <__lo0bits+0x22>
 8016ba4:	07d9      	lsls	r1, r3, #31
 8016ba6:	d422      	bmi.n	8016bee <__lo0bits+0x52>
 8016ba8:	079a      	lsls	r2, r3, #30
 8016baa:	bf49      	itett	mi
 8016bac:	085b      	lsrmi	r3, r3, #1
 8016bae:	089b      	lsrpl	r3, r3, #2
 8016bb0:	6003      	strmi	r3, [r0, #0]
 8016bb2:	2201      	movmi	r2, #1
 8016bb4:	bf5c      	itt	pl
 8016bb6:	6003      	strpl	r3, [r0, #0]
 8016bb8:	2202      	movpl	r2, #2
 8016bba:	4610      	mov	r0, r2
 8016bbc:	4770      	bx	lr
 8016bbe:	b299      	uxth	r1, r3
 8016bc0:	b909      	cbnz	r1, 8016bc6 <__lo0bits+0x2a>
 8016bc2:	0c1b      	lsrs	r3, r3, #16
 8016bc4:	2210      	movs	r2, #16
 8016bc6:	b2d9      	uxtb	r1, r3
 8016bc8:	b909      	cbnz	r1, 8016bce <__lo0bits+0x32>
 8016bca:	3208      	adds	r2, #8
 8016bcc:	0a1b      	lsrs	r3, r3, #8
 8016bce:	0719      	lsls	r1, r3, #28
 8016bd0:	bf04      	itt	eq
 8016bd2:	091b      	lsreq	r3, r3, #4
 8016bd4:	3204      	addeq	r2, #4
 8016bd6:	0799      	lsls	r1, r3, #30
 8016bd8:	bf04      	itt	eq
 8016bda:	089b      	lsreq	r3, r3, #2
 8016bdc:	3202      	addeq	r2, #2
 8016bde:	07d9      	lsls	r1, r3, #31
 8016be0:	d403      	bmi.n	8016bea <__lo0bits+0x4e>
 8016be2:	085b      	lsrs	r3, r3, #1
 8016be4:	f102 0201 	add.w	r2, r2, #1
 8016be8:	d003      	beq.n	8016bf2 <__lo0bits+0x56>
 8016bea:	6003      	str	r3, [r0, #0]
 8016bec:	e7e5      	b.n	8016bba <__lo0bits+0x1e>
 8016bee:	2200      	movs	r2, #0
 8016bf0:	e7e3      	b.n	8016bba <__lo0bits+0x1e>
 8016bf2:	2220      	movs	r2, #32
 8016bf4:	e7e1      	b.n	8016bba <__lo0bits+0x1e>
	...

08016bf8 <__i2b>:
 8016bf8:	b510      	push	{r4, lr}
 8016bfa:	460c      	mov	r4, r1
 8016bfc:	2101      	movs	r1, #1
 8016bfe:	f7ff febb 	bl	8016978 <_Balloc>
 8016c02:	4602      	mov	r2, r0
 8016c04:	b928      	cbnz	r0, 8016c12 <__i2b+0x1a>
 8016c06:	4b05      	ldr	r3, [pc, #20]	; (8016c1c <__i2b+0x24>)
 8016c08:	4805      	ldr	r0, [pc, #20]	; (8016c20 <__i2b+0x28>)
 8016c0a:	f240 1145 	movw	r1, #325	; 0x145
 8016c0e:	f000 ff2d 	bl	8017a6c <__assert_func>
 8016c12:	2301      	movs	r3, #1
 8016c14:	6144      	str	r4, [r0, #20]
 8016c16:	6103      	str	r3, [r0, #16]
 8016c18:	bd10      	pop	{r4, pc}
 8016c1a:	bf00      	nop
 8016c1c:	08018651 	.word	0x08018651
 8016c20:	080186d9 	.word	0x080186d9

08016c24 <__multiply>:
 8016c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c28:	4691      	mov	r9, r2
 8016c2a:	690a      	ldr	r2, [r1, #16]
 8016c2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016c30:	429a      	cmp	r2, r3
 8016c32:	bfb8      	it	lt
 8016c34:	460b      	movlt	r3, r1
 8016c36:	460c      	mov	r4, r1
 8016c38:	bfbc      	itt	lt
 8016c3a:	464c      	movlt	r4, r9
 8016c3c:	4699      	movlt	r9, r3
 8016c3e:	6927      	ldr	r7, [r4, #16]
 8016c40:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016c44:	68a3      	ldr	r3, [r4, #8]
 8016c46:	6861      	ldr	r1, [r4, #4]
 8016c48:	eb07 060a 	add.w	r6, r7, sl
 8016c4c:	42b3      	cmp	r3, r6
 8016c4e:	b085      	sub	sp, #20
 8016c50:	bfb8      	it	lt
 8016c52:	3101      	addlt	r1, #1
 8016c54:	f7ff fe90 	bl	8016978 <_Balloc>
 8016c58:	b930      	cbnz	r0, 8016c68 <__multiply+0x44>
 8016c5a:	4602      	mov	r2, r0
 8016c5c:	4b44      	ldr	r3, [pc, #272]	; (8016d70 <__multiply+0x14c>)
 8016c5e:	4845      	ldr	r0, [pc, #276]	; (8016d74 <__multiply+0x150>)
 8016c60:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8016c64:	f000 ff02 	bl	8017a6c <__assert_func>
 8016c68:	f100 0514 	add.w	r5, r0, #20
 8016c6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016c70:	462b      	mov	r3, r5
 8016c72:	2200      	movs	r2, #0
 8016c74:	4543      	cmp	r3, r8
 8016c76:	d321      	bcc.n	8016cbc <__multiply+0x98>
 8016c78:	f104 0314 	add.w	r3, r4, #20
 8016c7c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8016c80:	f109 0314 	add.w	r3, r9, #20
 8016c84:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8016c88:	9202      	str	r2, [sp, #8]
 8016c8a:	1b3a      	subs	r2, r7, r4
 8016c8c:	3a15      	subs	r2, #21
 8016c8e:	f022 0203 	bic.w	r2, r2, #3
 8016c92:	3204      	adds	r2, #4
 8016c94:	f104 0115 	add.w	r1, r4, #21
 8016c98:	428f      	cmp	r7, r1
 8016c9a:	bf38      	it	cc
 8016c9c:	2204      	movcc	r2, #4
 8016c9e:	9201      	str	r2, [sp, #4]
 8016ca0:	9a02      	ldr	r2, [sp, #8]
 8016ca2:	9303      	str	r3, [sp, #12]
 8016ca4:	429a      	cmp	r2, r3
 8016ca6:	d80c      	bhi.n	8016cc2 <__multiply+0x9e>
 8016ca8:	2e00      	cmp	r6, #0
 8016caa:	dd03      	ble.n	8016cb4 <__multiply+0x90>
 8016cac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d05b      	beq.n	8016d6c <__multiply+0x148>
 8016cb4:	6106      	str	r6, [r0, #16]
 8016cb6:	b005      	add	sp, #20
 8016cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cbc:	f843 2b04 	str.w	r2, [r3], #4
 8016cc0:	e7d8      	b.n	8016c74 <__multiply+0x50>
 8016cc2:	f8b3 a000 	ldrh.w	sl, [r3]
 8016cc6:	f1ba 0f00 	cmp.w	sl, #0
 8016cca:	d024      	beq.n	8016d16 <__multiply+0xf2>
 8016ccc:	f104 0e14 	add.w	lr, r4, #20
 8016cd0:	46a9      	mov	r9, r5
 8016cd2:	f04f 0c00 	mov.w	ip, #0
 8016cd6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8016cda:	f8d9 1000 	ldr.w	r1, [r9]
 8016cde:	fa1f fb82 	uxth.w	fp, r2
 8016ce2:	b289      	uxth	r1, r1
 8016ce4:	fb0a 110b 	mla	r1, sl, fp, r1
 8016ce8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8016cec:	f8d9 2000 	ldr.w	r2, [r9]
 8016cf0:	4461      	add	r1, ip
 8016cf2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016cf6:	fb0a c20b 	mla	r2, sl, fp, ip
 8016cfa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016cfe:	b289      	uxth	r1, r1
 8016d00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016d04:	4577      	cmp	r7, lr
 8016d06:	f849 1b04 	str.w	r1, [r9], #4
 8016d0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016d0e:	d8e2      	bhi.n	8016cd6 <__multiply+0xb2>
 8016d10:	9a01      	ldr	r2, [sp, #4]
 8016d12:	f845 c002 	str.w	ip, [r5, r2]
 8016d16:	9a03      	ldr	r2, [sp, #12]
 8016d18:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016d1c:	3304      	adds	r3, #4
 8016d1e:	f1b9 0f00 	cmp.w	r9, #0
 8016d22:	d021      	beq.n	8016d68 <__multiply+0x144>
 8016d24:	6829      	ldr	r1, [r5, #0]
 8016d26:	f104 0c14 	add.w	ip, r4, #20
 8016d2a:	46ae      	mov	lr, r5
 8016d2c:	f04f 0a00 	mov.w	sl, #0
 8016d30:	f8bc b000 	ldrh.w	fp, [ip]
 8016d34:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8016d38:	fb09 220b 	mla	r2, r9, fp, r2
 8016d3c:	4452      	add	r2, sl
 8016d3e:	b289      	uxth	r1, r1
 8016d40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016d44:	f84e 1b04 	str.w	r1, [lr], #4
 8016d48:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016d4c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016d50:	f8be 1000 	ldrh.w	r1, [lr]
 8016d54:	fb09 110a 	mla	r1, r9, sl, r1
 8016d58:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8016d5c:	4567      	cmp	r7, ip
 8016d5e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016d62:	d8e5      	bhi.n	8016d30 <__multiply+0x10c>
 8016d64:	9a01      	ldr	r2, [sp, #4]
 8016d66:	50a9      	str	r1, [r5, r2]
 8016d68:	3504      	adds	r5, #4
 8016d6a:	e799      	b.n	8016ca0 <__multiply+0x7c>
 8016d6c:	3e01      	subs	r6, #1
 8016d6e:	e79b      	b.n	8016ca8 <__multiply+0x84>
 8016d70:	08018651 	.word	0x08018651
 8016d74:	080186d9 	.word	0x080186d9

08016d78 <__pow5mult>:
 8016d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d7c:	4615      	mov	r5, r2
 8016d7e:	f012 0203 	ands.w	r2, r2, #3
 8016d82:	4606      	mov	r6, r0
 8016d84:	460f      	mov	r7, r1
 8016d86:	d007      	beq.n	8016d98 <__pow5mult+0x20>
 8016d88:	4c25      	ldr	r4, [pc, #148]	; (8016e20 <__pow5mult+0xa8>)
 8016d8a:	3a01      	subs	r2, #1
 8016d8c:	2300      	movs	r3, #0
 8016d8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016d92:	f7ff fe53 	bl	8016a3c <__multadd>
 8016d96:	4607      	mov	r7, r0
 8016d98:	10ad      	asrs	r5, r5, #2
 8016d9a:	d03d      	beq.n	8016e18 <__pow5mult+0xa0>
 8016d9c:	69f4      	ldr	r4, [r6, #28]
 8016d9e:	b97c      	cbnz	r4, 8016dc0 <__pow5mult+0x48>
 8016da0:	2010      	movs	r0, #16
 8016da2:	f000 fe97 	bl	8017ad4 <malloc>
 8016da6:	4602      	mov	r2, r0
 8016da8:	61f0      	str	r0, [r6, #28]
 8016daa:	b928      	cbnz	r0, 8016db8 <__pow5mult+0x40>
 8016dac:	4b1d      	ldr	r3, [pc, #116]	; (8016e24 <__pow5mult+0xac>)
 8016dae:	481e      	ldr	r0, [pc, #120]	; (8016e28 <__pow5mult+0xb0>)
 8016db0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8016db4:	f000 fe5a 	bl	8017a6c <__assert_func>
 8016db8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016dbc:	6004      	str	r4, [r0, #0]
 8016dbe:	60c4      	str	r4, [r0, #12]
 8016dc0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8016dc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016dc8:	b94c      	cbnz	r4, 8016dde <__pow5mult+0x66>
 8016dca:	f240 2171 	movw	r1, #625	; 0x271
 8016dce:	4630      	mov	r0, r6
 8016dd0:	f7ff ff12 	bl	8016bf8 <__i2b>
 8016dd4:	2300      	movs	r3, #0
 8016dd6:	f8c8 0008 	str.w	r0, [r8, #8]
 8016dda:	4604      	mov	r4, r0
 8016ddc:	6003      	str	r3, [r0, #0]
 8016dde:	f04f 0900 	mov.w	r9, #0
 8016de2:	07eb      	lsls	r3, r5, #31
 8016de4:	d50a      	bpl.n	8016dfc <__pow5mult+0x84>
 8016de6:	4639      	mov	r1, r7
 8016de8:	4622      	mov	r2, r4
 8016dea:	4630      	mov	r0, r6
 8016dec:	f7ff ff1a 	bl	8016c24 <__multiply>
 8016df0:	4639      	mov	r1, r7
 8016df2:	4680      	mov	r8, r0
 8016df4:	4630      	mov	r0, r6
 8016df6:	f7ff fdff 	bl	80169f8 <_Bfree>
 8016dfa:	4647      	mov	r7, r8
 8016dfc:	106d      	asrs	r5, r5, #1
 8016dfe:	d00b      	beq.n	8016e18 <__pow5mult+0xa0>
 8016e00:	6820      	ldr	r0, [r4, #0]
 8016e02:	b938      	cbnz	r0, 8016e14 <__pow5mult+0x9c>
 8016e04:	4622      	mov	r2, r4
 8016e06:	4621      	mov	r1, r4
 8016e08:	4630      	mov	r0, r6
 8016e0a:	f7ff ff0b 	bl	8016c24 <__multiply>
 8016e0e:	6020      	str	r0, [r4, #0]
 8016e10:	f8c0 9000 	str.w	r9, [r0]
 8016e14:	4604      	mov	r4, r0
 8016e16:	e7e4      	b.n	8016de2 <__pow5mult+0x6a>
 8016e18:	4638      	mov	r0, r7
 8016e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e1e:	bf00      	nop
 8016e20:	08018828 	.word	0x08018828
 8016e24:	080186c2 	.word	0x080186c2
 8016e28:	080186d9 	.word	0x080186d9

08016e2c <__lshift>:
 8016e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e30:	460c      	mov	r4, r1
 8016e32:	6849      	ldr	r1, [r1, #4]
 8016e34:	6923      	ldr	r3, [r4, #16]
 8016e36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016e3a:	68a3      	ldr	r3, [r4, #8]
 8016e3c:	4607      	mov	r7, r0
 8016e3e:	4691      	mov	r9, r2
 8016e40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016e44:	f108 0601 	add.w	r6, r8, #1
 8016e48:	42b3      	cmp	r3, r6
 8016e4a:	db0b      	blt.n	8016e64 <__lshift+0x38>
 8016e4c:	4638      	mov	r0, r7
 8016e4e:	f7ff fd93 	bl	8016978 <_Balloc>
 8016e52:	4605      	mov	r5, r0
 8016e54:	b948      	cbnz	r0, 8016e6a <__lshift+0x3e>
 8016e56:	4602      	mov	r2, r0
 8016e58:	4b28      	ldr	r3, [pc, #160]	; (8016efc <__lshift+0xd0>)
 8016e5a:	4829      	ldr	r0, [pc, #164]	; (8016f00 <__lshift+0xd4>)
 8016e5c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8016e60:	f000 fe04 	bl	8017a6c <__assert_func>
 8016e64:	3101      	adds	r1, #1
 8016e66:	005b      	lsls	r3, r3, #1
 8016e68:	e7ee      	b.n	8016e48 <__lshift+0x1c>
 8016e6a:	2300      	movs	r3, #0
 8016e6c:	f100 0114 	add.w	r1, r0, #20
 8016e70:	f100 0210 	add.w	r2, r0, #16
 8016e74:	4618      	mov	r0, r3
 8016e76:	4553      	cmp	r3, sl
 8016e78:	db33      	blt.n	8016ee2 <__lshift+0xb6>
 8016e7a:	6920      	ldr	r0, [r4, #16]
 8016e7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016e80:	f104 0314 	add.w	r3, r4, #20
 8016e84:	f019 091f 	ands.w	r9, r9, #31
 8016e88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016e8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016e90:	d02b      	beq.n	8016eea <__lshift+0xbe>
 8016e92:	f1c9 0e20 	rsb	lr, r9, #32
 8016e96:	468a      	mov	sl, r1
 8016e98:	2200      	movs	r2, #0
 8016e9a:	6818      	ldr	r0, [r3, #0]
 8016e9c:	fa00 f009 	lsl.w	r0, r0, r9
 8016ea0:	4310      	orrs	r0, r2
 8016ea2:	f84a 0b04 	str.w	r0, [sl], #4
 8016ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8016eaa:	459c      	cmp	ip, r3
 8016eac:	fa22 f20e 	lsr.w	r2, r2, lr
 8016eb0:	d8f3      	bhi.n	8016e9a <__lshift+0x6e>
 8016eb2:	ebac 0304 	sub.w	r3, ip, r4
 8016eb6:	3b15      	subs	r3, #21
 8016eb8:	f023 0303 	bic.w	r3, r3, #3
 8016ebc:	3304      	adds	r3, #4
 8016ebe:	f104 0015 	add.w	r0, r4, #21
 8016ec2:	4584      	cmp	ip, r0
 8016ec4:	bf38      	it	cc
 8016ec6:	2304      	movcc	r3, #4
 8016ec8:	50ca      	str	r2, [r1, r3]
 8016eca:	b10a      	cbz	r2, 8016ed0 <__lshift+0xa4>
 8016ecc:	f108 0602 	add.w	r6, r8, #2
 8016ed0:	3e01      	subs	r6, #1
 8016ed2:	4638      	mov	r0, r7
 8016ed4:	612e      	str	r6, [r5, #16]
 8016ed6:	4621      	mov	r1, r4
 8016ed8:	f7ff fd8e 	bl	80169f8 <_Bfree>
 8016edc:	4628      	mov	r0, r5
 8016ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ee2:	f842 0f04 	str.w	r0, [r2, #4]!
 8016ee6:	3301      	adds	r3, #1
 8016ee8:	e7c5      	b.n	8016e76 <__lshift+0x4a>
 8016eea:	3904      	subs	r1, #4
 8016eec:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ef0:	f841 2f04 	str.w	r2, [r1, #4]!
 8016ef4:	459c      	cmp	ip, r3
 8016ef6:	d8f9      	bhi.n	8016eec <__lshift+0xc0>
 8016ef8:	e7ea      	b.n	8016ed0 <__lshift+0xa4>
 8016efa:	bf00      	nop
 8016efc:	08018651 	.word	0x08018651
 8016f00:	080186d9 	.word	0x080186d9

08016f04 <__mcmp>:
 8016f04:	b530      	push	{r4, r5, lr}
 8016f06:	6902      	ldr	r2, [r0, #16]
 8016f08:	690c      	ldr	r4, [r1, #16]
 8016f0a:	1b12      	subs	r2, r2, r4
 8016f0c:	d10e      	bne.n	8016f2c <__mcmp+0x28>
 8016f0e:	f100 0314 	add.w	r3, r0, #20
 8016f12:	3114      	adds	r1, #20
 8016f14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016f18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016f1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016f20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016f24:	42a5      	cmp	r5, r4
 8016f26:	d003      	beq.n	8016f30 <__mcmp+0x2c>
 8016f28:	d305      	bcc.n	8016f36 <__mcmp+0x32>
 8016f2a:	2201      	movs	r2, #1
 8016f2c:	4610      	mov	r0, r2
 8016f2e:	bd30      	pop	{r4, r5, pc}
 8016f30:	4283      	cmp	r3, r0
 8016f32:	d3f3      	bcc.n	8016f1c <__mcmp+0x18>
 8016f34:	e7fa      	b.n	8016f2c <__mcmp+0x28>
 8016f36:	f04f 32ff 	mov.w	r2, #4294967295
 8016f3a:	e7f7      	b.n	8016f2c <__mcmp+0x28>

08016f3c <__mdiff>:
 8016f3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f40:	460c      	mov	r4, r1
 8016f42:	4606      	mov	r6, r0
 8016f44:	4611      	mov	r1, r2
 8016f46:	4620      	mov	r0, r4
 8016f48:	4690      	mov	r8, r2
 8016f4a:	f7ff ffdb 	bl	8016f04 <__mcmp>
 8016f4e:	1e05      	subs	r5, r0, #0
 8016f50:	d110      	bne.n	8016f74 <__mdiff+0x38>
 8016f52:	4629      	mov	r1, r5
 8016f54:	4630      	mov	r0, r6
 8016f56:	f7ff fd0f 	bl	8016978 <_Balloc>
 8016f5a:	b930      	cbnz	r0, 8016f6a <__mdiff+0x2e>
 8016f5c:	4b3a      	ldr	r3, [pc, #232]	; (8017048 <__mdiff+0x10c>)
 8016f5e:	4602      	mov	r2, r0
 8016f60:	f240 2137 	movw	r1, #567	; 0x237
 8016f64:	4839      	ldr	r0, [pc, #228]	; (801704c <__mdiff+0x110>)
 8016f66:	f000 fd81 	bl	8017a6c <__assert_func>
 8016f6a:	2301      	movs	r3, #1
 8016f6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016f70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f74:	bfa4      	itt	ge
 8016f76:	4643      	movge	r3, r8
 8016f78:	46a0      	movge	r8, r4
 8016f7a:	4630      	mov	r0, r6
 8016f7c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016f80:	bfa6      	itte	ge
 8016f82:	461c      	movge	r4, r3
 8016f84:	2500      	movge	r5, #0
 8016f86:	2501      	movlt	r5, #1
 8016f88:	f7ff fcf6 	bl	8016978 <_Balloc>
 8016f8c:	b920      	cbnz	r0, 8016f98 <__mdiff+0x5c>
 8016f8e:	4b2e      	ldr	r3, [pc, #184]	; (8017048 <__mdiff+0x10c>)
 8016f90:	4602      	mov	r2, r0
 8016f92:	f240 2145 	movw	r1, #581	; 0x245
 8016f96:	e7e5      	b.n	8016f64 <__mdiff+0x28>
 8016f98:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016f9c:	6926      	ldr	r6, [r4, #16]
 8016f9e:	60c5      	str	r5, [r0, #12]
 8016fa0:	f104 0914 	add.w	r9, r4, #20
 8016fa4:	f108 0514 	add.w	r5, r8, #20
 8016fa8:	f100 0e14 	add.w	lr, r0, #20
 8016fac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016fb0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016fb4:	f108 0210 	add.w	r2, r8, #16
 8016fb8:	46f2      	mov	sl, lr
 8016fba:	2100      	movs	r1, #0
 8016fbc:	f859 3b04 	ldr.w	r3, [r9], #4
 8016fc0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016fc4:	fa11 f88b 	uxtah	r8, r1, fp
 8016fc8:	b299      	uxth	r1, r3
 8016fca:	0c1b      	lsrs	r3, r3, #16
 8016fcc:	eba8 0801 	sub.w	r8, r8, r1
 8016fd0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016fd4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016fd8:	fa1f f888 	uxth.w	r8, r8
 8016fdc:	1419      	asrs	r1, r3, #16
 8016fde:	454e      	cmp	r6, r9
 8016fe0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016fe4:	f84a 3b04 	str.w	r3, [sl], #4
 8016fe8:	d8e8      	bhi.n	8016fbc <__mdiff+0x80>
 8016fea:	1b33      	subs	r3, r6, r4
 8016fec:	3b15      	subs	r3, #21
 8016fee:	f023 0303 	bic.w	r3, r3, #3
 8016ff2:	3304      	adds	r3, #4
 8016ff4:	3415      	adds	r4, #21
 8016ff6:	42a6      	cmp	r6, r4
 8016ff8:	bf38      	it	cc
 8016ffa:	2304      	movcc	r3, #4
 8016ffc:	441d      	add	r5, r3
 8016ffe:	4473      	add	r3, lr
 8017000:	469e      	mov	lr, r3
 8017002:	462e      	mov	r6, r5
 8017004:	4566      	cmp	r6, ip
 8017006:	d30e      	bcc.n	8017026 <__mdiff+0xea>
 8017008:	f10c 0203 	add.w	r2, ip, #3
 801700c:	1b52      	subs	r2, r2, r5
 801700e:	f022 0203 	bic.w	r2, r2, #3
 8017012:	3d03      	subs	r5, #3
 8017014:	45ac      	cmp	ip, r5
 8017016:	bf38      	it	cc
 8017018:	2200      	movcc	r2, #0
 801701a:	4413      	add	r3, r2
 801701c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8017020:	b17a      	cbz	r2, 8017042 <__mdiff+0x106>
 8017022:	6107      	str	r7, [r0, #16]
 8017024:	e7a4      	b.n	8016f70 <__mdiff+0x34>
 8017026:	f856 8b04 	ldr.w	r8, [r6], #4
 801702a:	fa11 f288 	uxtah	r2, r1, r8
 801702e:	1414      	asrs	r4, r2, #16
 8017030:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8017034:	b292      	uxth	r2, r2
 8017036:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801703a:	f84e 2b04 	str.w	r2, [lr], #4
 801703e:	1421      	asrs	r1, r4, #16
 8017040:	e7e0      	b.n	8017004 <__mdiff+0xc8>
 8017042:	3f01      	subs	r7, #1
 8017044:	e7ea      	b.n	801701c <__mdiff+0xe0>
 8017046:	bf00      	nop
 8017048:	08018651 	.word	0x08018651
 801704c:	080186d9 	.word	0x080186d9

08017050 <__ulp>:
 8017050:	b082      	sub	sp, #8
 8017052:	ed8d 0b00 	vstr	d0, [sp]
 8017056:	9a01      	ldr	r2, [sp, #4]
 8017058:	4b0f      	ldr	r3, [pc, #60]	; (8017098 <__ulp+0x48>)
 801705a:	4013      	ands	r3, r2
 801705c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8017060:	2b00      	cmp	r3, #0
 8017062:	dc08      	bgt.n	8017076 <__ulp+0x26>
 8017064:	425b      	negs	r3, r3
 8017066:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801706a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801706e:	da04      	bge.n	801707a <__ulp+0x2a>
 8017070:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8017074:	4113      	asrs	r3, r2
 8017076:	2200      	movs	r2, #0
 8017078:	e008      	b.n	801708c <__ulp+0x3c>
 801707a:	f1a2 0314 	sub.w	r3, r2, #20
 801707e:	2b1e      	cmp	r3, #30
 8017080:	bfda      	itte	le
 8017082:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8017086:	40da      	lsrle	r2, r3
 8017088:	2201      	movgt	r2, #1
 801708a:	2300      	movs	r3, #0
 801708c:	4619      	mov	r1, r3
 801708e:	4610      	mov	r0, r2
 8017090:	ec41 0b10 	vmov	d0, r0, r1
 8017094:	b002      	add	sp, #8
 8017096:	4770      	bx	lr
 8017098:	7ff00000 	.word	0x7ff00000

0801709c <__b2d>:
 801709c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170a0:	6906      	ldr	r6, [r0, #16]
 80170a2:	f100 0814 	add.w	r8, r0, #20
 80170a6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80170aa:	1f37      	subs	r7, r6, #4
 80170ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80170b0:	4610      	mov	r0, r2
 80170b2:	f7ff fd53 	bl	8016b5c <__hi0bits>
 80170b6:	f1c0 0320 	rsb	r3, r0, #32
 80170ba:	280a      	cmp	r0, #10
 80170bc:	600b      	str	r3, [r1, #0]
 80170be:	491b      	ldr	r1, [pc, #108]	; (801712c <__b2d+0x90>)
 80170c0:	dc15      	bgt.n	80170ee <__b2d+0x52>
 80170c2:	f1c0 0c0b 	rsb	ip, r0, #11
 80170c6:	fa22 f30c 	lsr.w	r3, r2, ip
 80170ca:	45b8      	cmp	r8, r7
 80170cc:	ea43 0501 	orr.w	r5, r3, r1
 80170d0:	bf34      	ite	cc
 80170d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80170d6:	2300      	movcs	r3, #0
 80170d8:	3015      	adds	r0, #21
 80170da:	fa02 f000 	lsl.w	r0, r2, r0
 80170de:	fa23 f30c 	lsr.w	r3, r3, ip
 80170e2:	4303      	orrs	r3, r0
 80170e4:	461c      	mov	r4, r3
 80170e6:	ec45 4b10 	vmov	d0, r4, r5
 80170ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170ee:	45b8      	cmp	r8, r7
 80170f0:	bf3a      	itte	cc
 80170f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80170f6:	f1a6 0708 	subcc.w	r7, r6, #8
 80170fa:	2300      	movcs	r3, #0
 80170fc:	380b      	subs	r0, #11
 80170fe:	d012      	beq.n	8017126 <__b2d+0x8a>
 8017100:	f1c0 0120 	rsb	r1, r0, #32
 8017104:	fa23 f401 	lsr.w	r4, r3, r1
 8017108:	4082      	lsls	r2, r0
 801710a:	4322      	orrs	r2, r4
 801710c:	4547      	cmp	r7, r8
 801710e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8017112:	bf8c      	ite	hi
 8017114:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8017118:	2200      	movls	r2, #0
 801711a:	4083      	lsls	r3, r0
 801711c:	40ca      	lsrs	r2, r1
 801711e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8017122:	4313      	orrs	r3, r2
 8017124:	e7de      	b.n	80170e4 <__b2d+0x48>
 8017126:	ea42 0501 	orr.w	r5, r2, r1
 801712a:	e7db      	b.n	80170e4 <__b2d+0x48>
 801712c:	3ff00000 	.word	0x3ff00000

08017130 <__d2b>:
 8017130:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017134:	460f      	mov	r7, r1
 8017136:	2101      	movs	r1, #1
 8017138:	ec59 8b10 	vmov	r8, r9, d0
 801713c:	4616      	mov	r6, r2
 801713e:	f7ff fc1b 	bl	8016978 <_Balloc>
 8017142:	4604      	mov	r4, r0
 8017144:	b930      	cbnz	r0, 8017154 <__d2b+0x24>
 8017146:	4602      	mov	r2, r0
 8017148:	4b24      	ldr	r3, [pc, #144]	; (80171dc <__d2b+0xac>)
 801714a:	4825      	ldr	r0, [pc, #148]	; (80171e0 <__d2b+0xb0>)
 801714c:	f240 310f 	movw	r1, #783	; 0x30f
 8017150:	f000 fc8c 	bl	8017a6c <__assert_func>
 8017154:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017158:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801715c:	bb2d      	cbnz	r5, 80171aa <__d2b+0x7a>
 801715e:	9301      	str	r3, [sp, #4]
 8017160:	f1b8 0300 	subs.w	r3, r8, #0
 8017164:	d026      	beq.n	80171b4 <__d2b+0x84>
 8017166:	4668      	mov	r0, sp
 8017168:	9300      	str	r3, [sp, #0]
 801716a:	f7ff fd17 	bl	8016b9c <__lo0bits>
 801716e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8017172:	b1e8      	cbz	r0, 80171b0 <__d2b+0x80>
 8017174:	f1c0 0320 	rsb	r3, r0, #32
 8017178:	fa02 f303 	lsl.w	r3, r2, r3
 801717c:	430b      	orrs	r3, r1
 801717e:	40c2      	lsrs	r2, r0
 8017180:	6163      	str	r3, [r4, #20]
 8017182:	9201      	str	r2, [sp, #4]
 8017184:	9b01      	ldr	r3, [sp, #4]
 8017186:	61a3      	str	r3, [r4, #24]
 8017188:	2b00      	cmp	r3, #0
 801718a:	bf14      	ite	ne
 801718c:	2202      	movne	r2, #2
 801718e:	2201      	moveq	r2, #1
 8017190:	6122      	str	r2, [r4, #16]
 8017192:	b1bd      	cbz	r5, 80171c4 <__d2b+0x94>
 8017194:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8017198:	4405      	add	r5, r0
 801719a:	603d      	str	r5, [r7, #0]
 801719c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80171a0:	6030      	str	r0, [r6, #0]
 80171a2:	4620      	mov	r0, r4
 80171a4:	b003      	add	sp, #12
 80171a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80171aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80171ae:	e7d6      	b.n	801715e <__d2b+0x2e>
 80171b0:	6161      	str	r1, [r4, #20]
 80171b2:	e7e7      	b.n	8017184 <__d2b+0x54>
 80171b4:	a801      	add	r0, sp, #4
 80171b6:	f7ff fcf1 	bl	8016b9c <__lo0bits>
 80171ba:	9b01      	ldr	r3, [sp, #4]
 80171bc:	6163      	str	r3, [r4, #20]
 80171be:	3020      	adds	r0, #32
 80171c0:	2201      	movs	r2, #1
 80171c2:	e7e5      	b.n	8017190 <__d2b+0x60>
 80171c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80171c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80171cc:	6038      	str	r0, [r7, #0]
 80171ce:	6918      	ldr	r0, [r3, #16]
 80171d0:	f7ff fcc4 	bl	8016b5c <__hi0bits>
 80171d4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80171d8:	e7e2      	b.n	80171a0 <__d2b+0x70>
 80171da:	bf00      	nop
 80171dc:	08018651 	.word	0x08018651
 80171e0:	080186d9 	.word	0x080186d9

080171e4 <__ratio>:
 80171e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171e8:	4688      	mov	r8, r1
 80171ea:	4669      	mov	r1, sp
 80171ec:	4681      	mov	r9, r0
 80171ee:	f7ff ff55 	bl	801709c <__b2d>
 80171f2:	a901      	add	r1, sp, #4
 80171f4:	4640      	mov	r0, r8
 80171f6:	ec55 4b10 	vmov	r4, r5, d0
 80171fa:	f7ff ff4f 	bl	801709c <__b2d>
 80171fe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017202:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017206:	eba3 0c02 	sub.w	ip, r3, r2
 801720a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801720e:	1a9b      	subs	r3, r3, r2
 8017210:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017214:	ec51 0b10 	vmov	r0, r1, d0
 8017218:	2b00      	cmp	r3, #0
 801721a:	bfd6      	itet	le
 801721c:	460a      	movle	r2, r1
 801721e:	462a      	movgt	r2, r5
 8017220:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017224:	468b      	mov	fp, r1
 8017226:	462f      	mov	r7, r5
 8017228:	bfd4      	ite	le
 801722a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801722e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8017232:	4620      	mov	r0, r4
 8017234:	ee10 2a10 	vmov	r2, s0
 8017238:	465b      	mov	r3, fp
 801723a:	4639      	mov	r1, r7
 801723c:	f7f0 ff36 	bl	80080ac <__aeabi_ddiv>
 8017240:	ec41 0b10 	vmov	d0, r0, r1
 8017244:	b003      	add	sp, #12
 8017246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801724a <__copybits>:
 801724a:	3901      	subs	r1, #1
 801724c:	b570      	push	{r4, r5, r6, lr}
 801724e:	1149      	asrs	r1, r1, #5
 8017250:	6914      	ldr	r4, [r2, #16]
 8017252:	3101      	adds	r1, #1
 8017254:	f102 0314 	add.w	r3, r2, #20
 8017258:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801725c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017260:	1f05      	subs	r5, r0, #4
 8017262:	42a3      	cmp	r3, r4
 8017264:	d30c      	bcc.n	8017280 <__copybits+0x36>
 8017266:	1aa3      	subs	r3, r4, r2
 8017268:	3b11      	subs	r3, #17
 801726a:	f023 0303 	bic.w	r3, r3, #3
 801726e:	3211      	adds	r2, #17
 8017270:	42a2      	cmp	r2, r4
 8017272:	bf88      	it	hi
 8017274:	2300      	movhi	r3, #0
 8017276:	4418      	add	r0, r3
 8017278:	2300      	movs	r3, #0
 801727a:	4288      	cmp	r0, r1
 801727c:	d305      	bcc.n	801728a <__copybits+0x40>
 801727e:	bd70      	pop	{r4, r5, r6, pc}
 8017280:	f853 6b04 	ldr.w	r6, [r3], #4
 8017284:	f845 6f04 	str.w	r6, [r5, #4]!
 8017288:	e7eb      	b.n	8017262 <__copybits+0x18>
 801728a:	f840 3b04 	str.w	r3, [r0], #4
 801728e:	e7f4      	b.n	801727a <__copybits+0x30>

08017290 <__any_on>:
 8017290:	f100 0214 	add.w	r2, r0, #20
 8017294:	6900      	ldr	r0, [r0, #16]
 8017296:	114b      	asrs	r3, r1, #5
 8017298:	4298      	cmp	r0, r3
 801729a:	b510      	push	{r4, lr}
 801729c:	db11      	blt.n	80172c2 <__any_on+0x32>
 801729e:	dd0a      	ble.n	80172b6 <__any_on+0x26>
 80172a0:	f011 011f 	ands.w	r1, r1, #31
 80172a4:	d007      	beq.n	80172b6 <__any_on+0x26>
 80172a6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80172aa:	fa24 f001 	lsr.w	r0, r4, r1
 80172ae:	fa00 f101 	lsl.w	r1, r0, r1
 80172b2:	428c      	cmp	r4, r1
 80172b4:	d10b      	bne.n	80172ce <__any_on+0x3e>
 80172b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80172ba:	4293      	cmp	r3, r2
 80172bc:	d803      	bhi.n	80172c6 <__any_on+0x36>
 80172be:	2000      	movs	r0, #0
 80172c0:	bd10      	pop	{r4, pc}
 80172c2:	4603      	mov	r3, r0
 80172c4:	e7f7      	b.n	80172b6 <__any_on+0x26>
 80172c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80172ca:	2900      	cmp	r1, #0
 80172cc:	d0f5      	beq.n	80172ba <__any_on+0x2a>
 80172ce:	2001      	movs	r0, #1
 80172d0:	e7f6      	b.n	80172c0 <__any_on+0x30>

080172d2 <__ascii_wctomb>:
 80172d2:	b149      	cbz	r1, 80172e8 <__ascii_wctomb+0x16>
 80172d4:	2aff      	cmp	r2, #255	; 0xff
 80172d6:	bf85      	ittet	hi
 80172d8:	238a      	movhi	r3, #138	; 0x8a
 80172da:	6003      	strhi	r3, [r0, #0]
 80172dc:	700a      	strbls	r2, [r1, #0]
 80172de:	f04f 30ff 	movhi.w	r0, #4294967295
 80172e2:	bf98      	it	ls
 80172e4:	2001      	movls	r0, #1
 80172e6:	4770      	bx	lr
 80172e8:	4608      	mov	r0, r1
 80172ea:	4770      	bx	lr

080172ec <__ssputs_r>:
 80172ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172f0:	688e      	ldr	r6, [r1, #8]
 80172f2:	461f      	mov	r7, r3
 80172f4:	42be      	cmp	r6, r7
 80172f6:	680b      	ldr	r3, [r1, #0]
 80172f8:	4682      	mov	sl, r0
 80172fa:	460c      	mov	r4, r1
 80172fc:	4690      	mov	r8, r2
 80172fe:	d82c      	bhi.n	801735a <__ssputs_r+0x6e>
 8017300:	898a      	ldrh	r2, [r1, #12]
 8017302:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017306:	d026      	beq.n	8017356 <__ssputs_r+0x6a>
 8017308:	6965      	ldr	r5, [r4, #20]
 801730a:	6909      	ldr	r1, [r1, #16]
 801730c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017310:	eba3 0901 	sub.w	r9, r3, r1
 8017314:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017318:	1c7b      	adds	r3, r7, #1
 801731a:	444b      	add	r3, r9
 801731c:	106d      	asrs	r5, r5, #1
 801731e:	429d      	cmp	r5, r3
 8017320:	bf38      	it	cc
 8017322:	461d      	movcc	r5, r3
 8017324:	0553      	lsls	r3, r2, #21
 8017326:	d527      	bpl.n	8017378 <__ssputs_r+0x8c>
 8017328:	4629      	mov	r1, r5
 801732a:	f7ff fa87 	bl	801683c <_malloc_r>
 801732e:	4606      	mov	r6, r0
 8017330:	b360      	cbz	r0, 801738c <__ssputs_r+0xa0>
 8017332:	6921      	ldr	r1, [r4, #16]
 8017334:	464a      	mov	r2, r9
 8017336:	f7fe fea0 	bl	801607a <memcpy>
 801733a:	89a3      	ldrh	r3, [r4, #12]
 801733c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017344:	81a3      	strh	r3, [r4, #12]
 8017346:	6126      	str	r6, [r4, #16]
 8017348:	6165      	str	r5, [r4, #20]
 801734a:	444e      	add	r6, r9
 801734c:	eba5 0509 	sub.w	r5, r5, r9
 8017350:	6026      	str	r6, [r4, #0]
 8017352:	60a5      	str	r5, [r4, #8]
 8017354:	463e      	mov	r6, r7
 8017356:	42be      	cmp	r6, r7
 8017358:	d900      	bls.n	801735c <__ssputs_r+0x70>
 801735a:	463e      	mov	r6, r7
 801735c:	6820      	ldr	r0, [r4, #0]
 801735e:	4632      	mov	r2, r6
 8017360:	4641      	mov	r1, r8
 8017362:	f000 fb59 	bl	8017a18 <memmove>
 8017366:	68a3      	ldr	r3, [r4, #8]
 8017368:	1b9b      	subs	r3, r3, r6
 801736a:	60a3      	str	r3, [r4, #8]
 801736c:	6823      	ldr	r3, [r4, #0]
 801736e:	4433      	add	r3, r6
 8017370:	6023      	str	r3, [r4, #0]
 8017372:	2000      	movs	r0, #0
 8017374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017378:	462a      	mov	r2, r5
 801737a:	f000 fbb3 	bl	8017ae4 <_realloc_r>
 801737e:	4606      	mov	r6, r0
 8017380:	2800      	cmp	r0, #0
 8017382:	d1e0      	bne.n	8017346 <__ssputs_r+0x5a>
 8017384:	6921      	ldr	r1, [r4, #16]
 8017386:	4650      	mov	r0, sl
 8017388:	f7fe fe94 	bl	80160b4 <_free_r>
 801738c:	230c      	movs	r3, #12
 801738e:	f8ca 3000 	str.w	r3, [sl]
 8017392:	89a3      	ldrh	r3, [r4, #12]
 8017394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017398:	81a3      	strh	r3, [r4, #12]
 801739a:	f04f 30ff 	mov.w	r0, #4294967295
 801739e:	e7e9      	b.n	8017374 <__ssputs_r+0x88>

080173a0 <_svfiprintf_r>:
 80173a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173a4:	4698      	mov	r8, r3
 80173a6:	898b      	ldrh	r3, [r1, #12]
 80173a8:	061b      	lsls	r3, r3, #24
 80173aa:	b09d      	sub	sp, #116	; 0x74
 80173ac:	4607      	mov	r7, r0
 80173ae:	460d      	mov	r5, r1
 80173b0:	4614      	mov	r4, r2
 80173b2:	d50e      	bpl.n	80173d2 <_svfiprintf_r+0x32>
 80173b4:	690b      	ldr	r3, [r1, #16]
 80173b6:	b963      	cbnz	r3, 80173d2 <_svfiprintf_r+0x32>
 80173b8:	2140      	movs	r1, #64	; 0x40
 80173ba:	f7ff fa3f 	bl	801683c <_malloc_r>
 80173be:	6028      	str	r0, [r5, #0]
 80173c0:	6128      	str	r0, [r5, #16]
 80173c2:	b920      	cbnz	r0, 80173ce <_svfiprintf_r+0x2e>
 80173c4:	230c      	movs	r3, #12
 80173c6:	603b      	str	r3, [r7, #0]
 80173c8:	f04f 30ff 	mov.w	r0, #4294967295
 80173cc:	e0d0      	b.n	8017570 <_svfiprintf_r+0x1d0>
 80173ce:	2340      	movs	r3, #64	; 0x40
 80173d0:	616b      	str	r3, [r5, #20]
 80173d2:	2300      	movs	r3, #0
 80173d4:	9309      	str	r3, [sp, #36]	; 0x24
 80173d6:	2320      	movs	r3, #32
 80173d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80173dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80173e0:	2330      	movs	r3, #48	; 0x30
 80173e2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017588 <_svfiprintf_r+0x1e8>
 80173e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80173ea:	f04f 0901 	mov.w	r9, #1
 80173ee:	4623      	mov	r3, r4
 80173f0:	469a      	mov	sl, r3
 80173f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80173f6:	b10a      	cbz	r2, 80173fc <_svfiprintf_r+0x5c>
 80173f8:	2a25      	cmp	r2, #37	; 0x25
 80173fa:	d1f9      	bne.n	80173f0 <_svfiprintf_r+0x50>
 80173fc:	ebba 0b04 	subs.w	fp, sl, r4
 8017400:	d00b      	beq.n	801741a <_svfiprintf_r+0x7a>
 8017402:	465b      	mov	r3, fp
 8017404:	4622      	mov	r2, r4
 8017406:	4629      	mov	r1, r5
 8017408:	4638      	mov	r0, r7
 801740a:	f7ff ff6f 	bl	80172ec <__ssputs_r>
 801740e:	3001      	adds	r0, #1
 8017410:	f000 80a9 	beq.w	8017566 <_svfiprintf_r+0x1c6>
 8017414:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017416:	445a      	add	r2, fp
 8017418:	9209      	str	r2, [sp, #36]	; 0x24
 801741a:	f89a 3000 	ldrb.w	r3, [sl]
 801741e:	2b00      	cmp	r3, #0
 8017420:	f000 80a1 	beq.w	8017566 <_svfiprintf_r+0x1c6>
 8017424:	2300      	movs	r3, #0
 8017426:	f04f 32ff 	mov.w	r2, #4294967295
 801742a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801742e:	f10a 0a01 	add.w	sl, sl, #1
 8017432:	9304      	str	r3, [sp, #16]
 8017434:	9307      	str	r3, [sp, #28]
 8017436:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801743a:	931a      	str	r3, [sp, #104]	; 0x68
 801743c:	4654      	mov	r4, sl
 801743e:	2205      	movs	r2, #5
 8017440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017444:	4850      	ldr	r0, [pc, #320]	; (8017588 <_svfiprintf_r+0x1e8>)
 8017446:	f7f0 fafb 	bl	8007a40 <memchr>
 801744a:	9a04      	ldr	r2, [sp, #16]
 801744c:	b9d8      	cbnz	r0, 8017486 <_svfiprintf_r+0xe6>
 801744e:	06d0      	lsls	r0, r2, #27
 8017450:	bf44      	itt	mi
 8017452:	2320      	movmi	r3, #32
 8017454:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017458:	0711      	lsls	r1, r2, #28
 801745a:	bf44      	itt	mi
 801745c:	232b      	movmi	r3, #43	; 0x2b
 801745e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017462:	f89a 3000 	ldrb.w	r3, [sl]
 8017466:	2b2a      	cmp	r3, #42	; 0x2a
 8017468:	d015      	beq.n	8017496 <_svfiprintf_r+0xf6>
 801746a:	9a07      	ldr	r2, [sp, #28]
 801746c:	4654      	mov	r4, sl
 801746e:	2000      	movs	r0, #0
 8017470:	f04f 0c0a 	mov.w	ip, #10
 8017474:	4621      	mov	r1, r4
 8017476:	f811 3b01 	ldrb.w	r3, [r1], #1
 801747a:	3b30      	subs	r3, #48	; 0x30
 801747c:	2b09      	cmp	r3, #9
 801747e:	d94d      	bls.n	801751c <_svfiprintf_r+0x17c>
 8017480:	b1b0      	cbz	r0, 80174b0 <_svfiprintf_r+0x110>
 8017482:	9207      	str	r2, [sp, #28]
 8017484:	e014      	b.n	80174b0 <_svfiprintf_r+0x110>
 8017486:	eba0 0308 	sub.w	r3, r0, r8
 801748a:	fa09 f303 	lsl.w	r3, r9, r3
 801748e:	4313      	orrs	r3, r2
 8017490:	9304      	str	r3, [sp, #16]
 8017492:	46a2      	mov	sl, r4
 8017494:	e7d2      	b.n	801743c <_svfiprintf_r+0x9c>
 8017496:	9b03      	ldr	r3, [sp, #12]
 8017498:	1d19      	adds	r1, r3, #4
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	9103      	str	r1, [sp, #12]
 801749e:	2b00      	cmp	r3, #0
 80174a0:	bfbb      	ittet	lt
 80174a2:	425b      	neglt	r3, r3
 80174a4:	f042 0202 	orrlt.w	r2, r2, #2
 80174a8:	9307      	strge	r3, [sp, #28]
 80174aa:	9307      	strlt	r3, [sp, #28]
 80174ac:	bfb8      	it	lt
 80174ae:	9204      	strlt	r2, [sp, #16]
 80174b0:	7823      	ldrb	r3, [r4, #0]
 80174b2:	2b2e      	cmp	r3, #46	; 0x2e
 80174b4:	d10c      	bne.n	80174d0 <_svfiprintf_r+0x130>
 80174b6:	7863      	ldrb	r3, [r4, #1]
 80174b8:	2b2a      	cmp	r3, #42	; 0x2a
 80174ba:	d134      	bne.n	8017526 <_svfiprintf_r+0x186>
 80174bc:	9b03      	ldr	r3, [sp, #12]
 80174be:	1d1a      	adds	r2, r3, #4
 80174c0:	681b      	ldr	r3, [r3, #0]
 80174c2:	9203      	str	r2, [sp, #12]
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	bfb8      	it	lt
 80174c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80174cc:	3402      	adds	r4, #2
 80174ce:	9305      	str	r3, [sp, #20]
 80174d0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017598 <_svfiprintf_r+0x1f8>
 80174d4:	7821      	ldrb	r1, [r4, #0]
 80174d6:	2203      	movs	r2, #3
 80174d8:	4650      	mov	r0, sl
 80174da:	f7f0 fab1 	bl	8007a40 <memchr>
 80174de:	b138      	cbz	r0, 80174f0 <_svfiprintf_r+0x150>
 80174e0:	9b04      	ldr	r3, [sp, #16]
 80174e2:	eba0 000a 	sub.w	r0, r0, sl
 80174e6:	2240      	movs	r2, #64	; 0x40
 80174e8:	4082      	lsls	r2, r0
 80174ea:	4313      	orrs	r3, r2
 80174ec:	3401      	adds	r4, #1
 80174ee:	9304      	str	r3, [sp, #16]
 80174f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80174f4:	4825      	ldr	r0, [pc, #148]	; (801758c <_svfiprintf_r+0x1ec>)
 80174f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80174fa:	2206      	movs	r2, #6
 80174fc:	f7f0 faa0 	bl	8007a40 <memchr>
 8017500:	2800      	cmp	r0, #0
 8017502:	d038      	beq.n	8017576 <_svfiprintf_r+0x1d6>
 8017504:	4b22      	ldr	r3, [pc, #136]	; (8017590 <_svfiprintf_r+0x1f0>)
 8017506:	bb1b      	cbnz	r3, 8017550 <_svfiprintf_r+0x1b0>
 8017508:	9b03      	ldr	r3, [sp, #12]
 801750a:	3307      	adds	r3, #7
 801750c:	f023 0307 	bic.w	r3, r3, #7
 8017510:	3308      	adds	r3, #8
 8017512:	9303      	str	r3, [sp, #12]
 8017514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017516:	4433      	add	r3, r6
 8017518:	9309      	str	r3, [sp, #36]	; 0x24
 801751a:	e768      	b.n	80173ee <_svfiprintf_r+0x4e>
 801751c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017520:	460c      	mov	r4, r1
 8017522:	2001      	movs	r0, #1
 8017524:	e7a6      	b.n	8017474 <_svfiprintf_r+0xd4>
 8017526:	2300      	movs	r3, #0
 8017528:	3401      	adds	r4, #1
 801752a:	9305      	str	r3, [sp, #20]
 801752c:	4619      	mov	r1, r3
 801752e:	f04f 0c0a 	mov.w	ip, #10
 8017532:	4620      	mov	r0, r4
 8017534:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017538:	3a30      	subs	r2, #48	; 0x30
 801753a:	2a09      	cmp	r2, #9
 801753c:	d903      	bls.n	8017546 <_svfiprintf_r+0x1a6>
 801753e:	2b00      	cmp	r3, #0
 8017540:	d0c6      	beq.n	80174d0 <_svfiprintf_r+0x130>
 8017542:	9105      	str	r1, [sp, #20]
 8017544:	e7c4      	b.n	80174d0 <_svfiprintf_r+0x130>
 8017546:	fb0c 2101 	mla	r1, ip, r1, r2
 801754a:	4604      	mov	r4, r0
 801754c:	2301      	movs	r3, #1
 801754e:	e7f0      	b.n	8017532 <_svfiprintf_r+0x192>
 8017550:	ab03      	add	r3, sp, #12
 8017552:	9300      	str	r3, [sp, #0]
 8017554:	462a      	mov	r2, r5
 8017556:	4b0f      	ldr	r3, [pc, #60]	; (8017594 <_svfiprintf_r+0x1f4>)
 8017558:	a904      	add	r1, sp, #16
 801755a:	4638      	mov	r0, r7
 801755c:	f3af 8000 	nop.w
 8017560:	1c42      	adds	r2, r0, #1
 8017562:	4606      	mov	r6, r0
 8017564:	d1d6      	bne.n	8017514 <_svfiprintf_r+0x174>
 8017566:	89ab      	ldrh	r3, [r5, #12]
 8017568:	065b      	lsls	r3, r3, #25
 801756a:	f53f af2d 	bmi.w	80173c8 <_svfiprintf_r+0x28>
 801756e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017570:	b01d      	add	sp, #116	; 0x74
 8017572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017576:	ab03      	add	r3, sp, #12
 8017578:	9300      	str	r3, [sp, #0]
 801757a:	462a      	mov	r2, r5
 801757c:	4b05      	ldr	r3, [pc, #20]	; (8017594 <_svfiprintf_r+0x1f4>)
 801757e:	a904      	add	r1, sp, #16
 8017580:	4638      	mov	r0, r7
 8017582:	f000 f879 	bl	8017678 <_printf_i>
 8017586:	e7eb      	b.n	8017560 <_svfiprintf_r+0x1c0>
 8017588:	08018834 	.word	0x08018834
 801758c:	0801883e 	.word	0x0801883e
 8017590:	00000000 	.word	0x00000000
 8017594:	080172ed 	.word	0x080172ed
 8017598:	0801883a 	.word	0x0801883a

0801759c <_printf_common>:
 801759c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80175a0:	4616      	mov	r6, r2
 80175a2:	4699      	mov	r9, r3
 80175a4:	688a      	ldr	r2, [r1, #8]
 80175a6:	690b      	ldr	r3, [r1, #16]
 80175a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80175ac:	4293      	cmp	r3, r2
 80175ae:	bfb8      	it	lt
 80175b0:	4613      	movlt	r3, r2
 80175b2:	6033      	str	r3, [r6, #0]
 80175b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80175b8:	4607      	mov	r7, r0
 80175ba:	460c      	mov	r4, r1
 80175bc:	b10a      	cbz	r2, 80175c2 <_printf_common+0x26>
 80175be:	3301      	adds	r3, #1
 80175c0:	6033      	str	r3, [r6, #0]
 80175c2:	6823      	ldr	r3, [r4, #0]
 80175c4:	0699      	lsls	r1, r3, #26
 80175c6:	bf42      	ittt	mi
 80175c8:	6833      	ldrmi	r3, [r6, #0]
 80175ca:	3302      	addmi	r3, #2
 80175cc:	6033      	strmi	r3, [r6, #0]
 80175ce:	6825      	ldr	r5, [r4, #0]
 80175d0:	f015 0506 	ands.w	r5, r5, #6
 80175d4:	d106      	bne.n	80175e4 <_printf_common+0x48>
 80175d6:	f104 0a19 	add.w	sl, r4, #25
 80175da:	68e3      	ldr	r3, [r4, #12]
 80175dc:	6832      	ldr	r2, [r6, #0]
 80175de:	1a9b      	subs	r3, r3, r2
 80175e0:	42ab      	cmp	r3, r5
 80175e2:	dc26      	bgt.n	8017632 <_printf_common+0x96>
 80175e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80175e8:	1e13      	subs	r3, r2, #0
 80175ea:	6822      	ldr	r2, [r4, #0]
 80175ec:	bf18      	it	ne
 80175ee:	2301      	movne	r3, #1
 80175f0:	0692      	lsls	r2, r2, #26
 80175f2:	d42b      	bmi.n	801764c <_printf_common+0xb0>
 80175f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80175f8:	4649      	mov	r1, r9
 80175fa:	4638      	mov	r0, r7
 80175fc:	47c0      	blx	r8
 80175fe:	3001      	adds	r0, #1
 8017600:	d01e      	beq.n	8017640 <_printf_common+0xa4>
 8017602:	6823      	ldr	r3, [r4, #0]
 8017604:	6922      	ldr	r2, [r4, #16]
 8017606:	f003 0306 	and.w	r3, r3, #6
 801760a:	2b04      	cmp	r3, #4
 801760c:	bf02      	ittt	eq
 801760e:	68e5      	ldreq	r5, [r4, #12]
 8017610:	6833      	ldreq	r3, [r6, #0]
 8017612:	1aed      	subeq	r5, r5, r3
 8017614:	68a3      	ldr	r3, [r4, #8]
 8017616:	bf0c      	ite	eq
 8017618:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801761c:	2500      	movne	r5, #0
 801761e:	4293      	cmp	r3, r2
 8017620:	bfc4      	itt	gt
 8017622:	1a9b      	subgt	r3, r3, r2
 8017624:	18ed      	addgt	r5, r5, r3
 8017626:	2600      	movs	r6, #0
 8017628:	341a      	adds	r4, #26
 801762a:	42b5      	cmp	r5, r6
 801762c:	d11a      	bne.n	8017664 <_printf_common+0xc8>
 801762e:	2000      	movs	r0, #0
 8017630:	e008      	b.n	8017644 <_printf_common+0xa8>
 8017632:	2301      	movs	r3, #1
 8017634:	4652      	mov	r2, sl
 8017636:	4649      	mov	r1, r9
 8017638:	4638      	mov	r0, r7
 801763a:	47c0      	blx	r8
 801763c:	3001      	adds	r0, #1
 801763e:	d103      	bne.n	8017648 <_printf_common+0xac>
 8017640:	f04f 30ff 	mov.w	r0, #4294967295
 8017644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017648:	3501      	adds	r5, #1
 801764a:	e7c6      	b.n	80175da <_printf_common+0x3e>
 801764c:	18e1      	adds	r1, r4, r3
 801764e:	1c5a      	adds	r2, r3, #1
 8017650:	2030      	movs	r0, #48	; 0x30
 8017652:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017656:	4422      	add	r2, r4
 8017658:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801765c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017660:	3302      	adds	r3, #2
 8017662:	e7c7      	b.n	80175f4 <_printf_common+0x58>
 8017664:	2301      	movs	r3, #1
 8017666:	4622      	mov	r2, r4
 8017668:	4649      	mov	r1, r9
 801766a:	4638      	mov	r0, r7
 801766c:	47c0      	blx	r8
 801766e:	3001      	adds	r0, #1
 8017670:	d0e6      	beq.n	8017640 <_printf_common+0xa4>
 8017672:	3601      	adds	r6, #1
 8017674:	e7d9      	b.n	801762a <_printf_common+0x8e>
	...

08017678 <_printf_i>:
 8017678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801767c:	7e0f      	ldrb	r7, [r1, #24]
 801767e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017680:	2f78      	cmp	r7, #120	; 0x78
 8017682:	4691      	mov	r9, r2
 8017684:	4680      	mov	r8, r0
 8017686:	460c      	mov	r4, r1
 8017688:	469a      	mov	sl, r3
 801768a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801768e:	d807      	bhi.n	80176a0 <_printf_i+0x28>
 8017690:	2f62      	cmp	r7, #98	; 0x62
 8017692:	d80a      	bhi.n	80176aa <_printf_i+0x32>
 8017694:	2f00      	cmp	r7, #0
 8017696:	f000 80d4 	beq.w	8017842 <_printf_i+0x1ca>
 801769a:	2f58      	cmp	r7, #88	; 0x58
 801769c:	f000 80c0 	beq.w	8017820 <_printf_i+0x1a8>
 80176a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80176a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80176a8:	e03a      	b.n	8017720 <_printf_i+0xa8>
 80176aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80176ae:	2b15      	cmp	r3, #21
 80176b0:	d8f6      	bhi.n	80176a0 <_printf_i+0x28>
 80176b2:	a101      	add	r1, pc, #4	; (adr r1, 80176b8 <_printf_i+0x40>)
 80176b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80176b8:	08017711 	.word	0x08017711
 80176bc:	08017725 	.word	0x08017725
 80176c0:	080176a1 	.word	0x080176a1
 80176c4:	080176a1 	.word	0x080176a1
 80176c8:	080176a1 	.word	0x080176a1
 80176cc:	080176a1 	.word	0x080176a1
 80176d0:	08017725 	.word	0x08017725
 80176d4:	080176a1 	.word	0x080176a1
 80176d8:	080176a1 	.word	0x080176a1
 80176dc:	080176a1 	.word	0x080176a1
 80176e0:	080176a1 	.word	0x080176a1
 80176e4:	08017829 	.word	0x08017829
 80176e8:	08017751 	.word	0x08017751
 80176ec:	080177e3 	.word	0x080177e3
 80176f0:	080176a1 	.word	0x080176a1
 80176f4:	080176a1 	.word	0x080176a1
 80176f8:	0801784b 	.word	0x0801784b
 80176fc:	080176a1 	.word	0x080176a1
 8017700:	08017751 	.word	0x08017751
 8017704:	080176a1 	.word	0x080176a1
 8017708:	080176a1 	.word	0x080176a1
 801770c:	080177eb 	.word	0x080177eb
 8017710:	682b      	ldr	r3, [r5, #0]
 8017712:	1d1a      	adds	r2, r3, #4
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	602a      	str	r2, [r5, #0]
 8017718:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801771c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017720:	2301      	movs	r3, #1
 8017722:	e09f      	b.n	8017864 <_printf_i+0x1ec>
 8017724:	6820      	ldr	r0, [r4, #0]
 8017726:	682b      	ldr	r3, [r5, #0]
 8017728:	0607      	lsls	r7, r0, #24
 801772a:	f103 0104 	add.w	r1, r3, #4
 801772e:	6029      	str	r1, [r5, #0]
 8017730:	d501      	bpl.n	8017736 <_printf_i+0xbe>
 8017732:	681e      	ldr	r6, [r3, #0]
 8017734:	e003      	b.n	801773e <_printf_i+0xc6>
 8017736:	0646      	lsls	r6, r0, #25
 8017738:	d5fb      	bpl.n	8017732 <_printf_i+0xba>
 801773a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801773e:	2e00      	cmp	r6, #0
 8017740:	da03      	bge.n	801774a <_printf_i+0xd2>
 8017742:	232d      	movs	r3, #45	; 0x2d
 8017744:	4276      	negs	r6, r6
 8017746:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801774a:	485a      	ldr	r0, [pc, #360]	; (80178b4 <_printf_i+0x23c>)
 801774c:	230a      	movs	r3, #10
 801774e:	e012      	b.n	8017776 <_printf_i+0xfe>
 8017750:	682b      	ldr	r3, [r5, #0]
 8017752:	6820      	ldr	r0, [r4, #0]
 8017754:	1d19      	adds	r1, r3, #4
 8017756:	6029      	str	r1, [r5, #0]
 8017758:	0605      	lsls	r5, r0, #24
 801775a:	d501      	bpl.n	8017760 <_printf_i+0xe8>
 801775c:	681e      	ldr	r6, [r3, #0]
 801775e:	e002      	b.n	8017766 <_printf_i+0xee>
 8017760:	0641      	lsls	r1, r0, #25
 8017762:	d5fb      	bpl.n	801775c <_printf_i+0xe4>
 8017764:	881e      	ldrh	r6, [r3, #0]
 8017766:	4853      	ldr	r0, [pc, #332]	; (80178b4 <_printf_i+0x23c>)
 8017768:	2f6f      	cmp	r7, #111	; 0x6f
 801776a:	bf0c      	ite	eq
 801776c:	2308      	moveq	r3, #8
 801776e:	230a      	movne	r3, #10
 8017770:	2100      	movs	r1, #0
 8017772:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017776:	6865      	ldr	r5, [r4, #4]
 8017778:	60a5      	str	r5, [r4, #8]
 801777a:	2d00      	cmp	r5, #0
 801777c:	bfa2      	ittt	ge
 801777e:	6821      	ldrge	r1, [r4, #0]
 8017780:	f021 0104 	bicge.w	r1, r1, #4
 8017784:	6021      	strge	r1, [r4, #0]
 8017786:	b90e      	cbnz	r6, 801778c <_printf_i+0x114>
 8017788:	2d00      	cmp	r5, #0
 801778a:	d04b      	beq.n	8017824 <_printf_i+0x1ac>
 801778c:	4615      	mov	r5, r2
 801778e:	fbb6 f1f3 	udiv	r1, r6, r3
 8017792:	fb03 6711 	mls	r7, r3, r1, r6
 8017796:	5dc7      	ldrb	r7, [r0, r7]
 8017798:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801779c:	4637      	mov	r7, r6
 801779e:	42bb      	cmp	r3, r7
 80177a0:	460e      	mov	r6, r1
 80177a2:	d9f4      	bls.n	801778e <_printf_i+0x116>
 80177a4:	2b08      	cmp	r3, #8
 80177a6:	d10b      	bne.n	80177c0 <_printf_i+0x148>
 80177a8:	6823      	ldr	r3, [r4, #0]
 80177aa:	07de      	lsls	r6, r3, #31
 80177ac:	d508      	bpl.n	80177c0 <_printf_i+0x148>
 80177ae:	6923      	ldr	r3, [r4, #16]
 80177b0:	6861      	ldr	r1, [r4, #4]
 80177b2:	4299      	cmp	r1, r3
 80177b4:	bfde      	ittt	le
 80177b6:	2330      	movle	r3, #48	; 0x30
 80177b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80177bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80177c0:	1b52      	subs	r2, r2, r5
 80177c2:	6122      	str	r2, [r4, #16]
 80177c4:	f8cd a000 	str.w	sl, [sp]
 80177c8:	464b      	mov	r3, r9
 80177ca:	aa03      	add	r2, sp, #12
 80177cc:	4621      	mov	r1, r4
 80177ce:	4640      	mov	r0, r8
 80177d0:	f7ff fee4 	bl	801759c <_printf_common>
 80177d4:	3001      	adds	r0, #1
 80177d6:	d14a      	bne.n	801786e <_printf_i+0x1f6>
 80177d8:	f04f 30ff 	mov.w	r0, #4294967295
 80177dc:	b004      	add	sp, #16
 80177de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177e2:	6823      	ldr	r3, [r4, #0]
 80177e4:	f043 0320 	orr.w	r3, r3, #32
 80177e8:	6023      	str	r3, [r4, #0]
 80177ea:	4833      	ldr	r0, [pc, #204]	; (80178b8 <_printf_i+0x240>)
 80177ec:	2778      	movs	r7, #120	; 0x78
 80177ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80177f2:	6823      	ldr	r3, [r4, #0]
 80177f4:	6829      	ldr	r1, [r5, #0]
 80177f6:	061f      	lsls	r7, r3, #24
 80177f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80177fc:	d402      	bmi.n	8017804 <_printf_i+0x18c>
 80177fe:	065f      	lsls	r7, r3, #25
 8017800:	bf48      	it	mi
 8017802:	b2b6      	uxthmi	r6, r6
 8017804:	07df      	lsls	r7, r3, #31
 8017806:	bf48      	it	mi
 8017808:	f043 0320 	orrmi.w	r3, r3, #32
 801780c:	6029      	str	r1, [r5, #0]
 801780e:	bf48      	it	mi
 8017810:	6023      	strmi	r3, [r4, #0]
 8017812:	b91e      	cbnz	r6, 801781c <_printf_i+0x1a4>
 8017814:	6823      	ldr	r3, [r4, #0]
 8017816:	f023 0320 	bic.w	r3, r3, #32
 801781a:	6023      	str	r3, [r4, #0]
 801781c:	2310      	movs	r3, #16
 801781e:	e7a7      	b.n	8017770 <_printf_i+0xf8>
 8017820:	4824      	ldr	r0, [pc, #144]	; (80178b4 <_printf_i+0x23c>)
 8017822:	e7e4      	b.n	80177ee <_printf_i+0x176>
 8017824:	4615      	mov	r5, r2
 8017826:	e7bd      	b.n	80177a4 <_printf_i+0x12c>
 8017828:	682b      	ldr	r3, [r5, #0]
 801782a:	6826      	ldr	r6, [r4, #0]
 801782c:	6961      	ldr	r1, [r4, #20]
 801782e:	1d18      	adds	r0, r3, #4
 8017830:	6028      	str	r0, [r5, #0]
 8017832:	0635      	lsls	r5, r6, #24
 8017834:	681b      	ldr	r3, [r3, #0]
 8017836:	d501      	bpl.n	801783c <_printf_i+0x1c4>
 8017838:	6019      	str	r1, [r3, #0]
 801783a:	e002      	b.n	8017842 <_printf_i+0x1ca>
 801783c:	0670      	lsls	r0, r6, #25
 801783e:	d5fb      	bpl.n	8017838 <_printf_i+0x1c0>
 8017840:	8019      	strh	r1, [r3, #0]
 8017842:	2300      	movs	r3, #0
 8017844:	6123      	str	r3, [r4, #16]
 8017846:	4615      	mov	r5, r2
 8017848:	e7bc      	b.n	80177c4 <_printf_i+0x14c>
 801784a:	682b      	ldr	r3, [r5, #0]
 801784c:	1d1a      	adds	r2, r3, #4
 801784e:	602a      	str	r2, [r5, #0]
 8017850:	681d      	ldr	r5, [r3, #0]
 8017852:	6862      	ldr	r2, [r4, #4]
 8017854:	2100      	movs	r1, #0
 8017856:	4628      	mov	r0, r5
 8017858:	f7f0 f8f2 	bl	8007a40 <memchr>
 801785c:	b108      	cbz	r0, 8017862 <_printf_i+0x1ea>
 801785e:	1b40      	subs	r0, r0, r5
 8017860:	6060      	str	r0, [r4, #4]
 8017862:	6863      	ldr	r3, [r4, #4]
 8017864:	6123      	str	r3, [r4, #16]
 8017866:	2300      	movs	r3, #0
 8017868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801786c:	e7aa      	b.n	80177c4 <_printf_i+0x14c>
 801786e:	6923      	ldr	r3, [r4, #16]
 8017870:	462a      	mov	r2, r5
 8017872:	4649      	mov	r1, r9
 8017874:	4640      	mov	r0, r8
 8017876:	47d0      	blx	sl
 8017878:	3001      	adds	r0, #1
 801787a:	d0ad      	beq.n	80177d8 <_printf_i+0x160>
 801787c:	6823      	ldr	r3, [r4, #0]
 801787e:	079b      	lsls	r3, r3, #30
 8017880:	d413      	bmi.n	80178aa <_printf_i+0x232>
 8017882:	68e0      	ldr	r0, [r4, #12]
 8017884:	9b03      	ldr	r3, [sp, #12]
 8017886:	4298      	cmp	r0, r3
 8017888:	bfb8      	it	lt
 801788a:	4618      	movlt	r0, r3
 801788c:	e7a6      	b.n	80177dc <_printf_i+0x164>
 801788e:	2301      	movs	r3, #1
 8017890:	4632      	mov	r2, r6
 8017892:	4649      	mov	r1, r9
 8017894:	4640      	mov	r0, r8
 8017896:	47d0      	blx	sl
 8017898:	3001      	adds	r0, #1
 801789a:	d09d      	beq.n	80177d8 <_printf_i+0x160>
 801789c:	3501      	adds	r5, #1
 801789e:	68e3      	ldr	r3, [r4, #12]
 80178a0:	9903      	ldr	r1, [sp, #12]
 80178a2:	1a5b      	subs	r3, r3, r1
 80178a4:	42ab      	cmp	r3, r5
 80178a6:	dcf2      	bgt.n	801788e <_printf_i+0x216>
 80178a8:	e7eb      	b.n	8017882 <_printf_i+0x20a>
 80178aa:	2500      	movs	r5, #0
 80178ac:	f104 0619 	add.w	r6, r4, #25
 80178b0:	e7f5      	b.n	801789e <_printf_i+0x226>
 80178b2:	bf00      	nop
 80178b4:	08018845 	.word	0x08018845
 80178b8:	08018856 	.word	0x08018856

080178bc <__sflush_r>:
 80178bc:	898a      	ldrh	r2, [r1, #12]
 80178be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178c2:	4605      	mov	r5, r0
 80178c4:	0710      	lsls	r0, r2, #28
 80178c6:	460c      	mov	r4, r1
 80178c8:	d458      	bmi.n	801797c <__sflush_r+0xc0>
 80178ca:	684b      	ldr	r3, [r1, #4]
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	dc05      	bgt.n	80178dc <__sflush_r+0x20>
 80178d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	dc02      	bgt.n	80178dc <__sflush_r+0x20>
 80178d6:	2000      	movs	r0, #0
 80178d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80178de:	2e00      	cmp	r6, #0
 80178e0:	d0f9      	beq.n	80178d6 <__sflush_r+0x1a>
 80178e2:	2300      	movs	r3, #0
 80178e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80178e8:	682f      	ldr	r7, [r5, #0]
 80178ea:	6a21      	ldr	r1, [r4, #32]
 80178ec:	602b      	str	r3, [r5, #0]
 80178ee:	d032      	beq.n	8017956 <__sflush_r+0x9a>
 80178f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80178f2:	89a3      	ldrh	r3, [r4, #12]
 80178f4:	075a      	lsls	r2, r3, #29
 80178f6:	d505      	bpl.n	8017904 <__sflush_r+0x48>
 80178f8:	6863      	ldr	r3, [r4, #4]
 80178fa:	1ac0      	subs	r0, r0, r3
 80178fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80178fe:	b10b      	cbz	r3, 8017904 <__sflush_r+0x48>
 8017900:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017902:	1ac0      	subs	r0, r0, r3
 8017904:	2300      	movs	r3, #0
 8017906:	4602      	mov	r2, r0
 8017908:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801790a:	6a21      	ldr	r1, [r4, #32]
 801790c:	4628      	mov	r0, r5
 801790e:	47b0      	blx	r6
 8017910:	1c43      	adds	r3, r0, #1
 8017912:	89a3      	ldrh	r3, [r4, #12]
 8017914:	d106      	bne.n	8017924 <__sflush_r+0x68>
 8017916:	6829      	ldr	r1, [r5, #0]
 8017918:	291d      	cmp	r1, #29
 801791a:	d82b      	bhi.n	8017974 <__sflush_r+0xb8>
 801791c:	4a29      	ldr	r2, [pc, #164]	; (80179c4 <__sflush_r+0x108>)
 801791e:	410a      	asrs	r2, r1
 8017920:	07d6      	lsls	r6, r2, #31
 8017922:	d427      	bmi.n	8017974 <__sflush_r+0xb8>
 8017924:	2200      	movs	r2, #0
 8017926:	6062      	str	r2, [r4, #4]
 8017928:	04d9      	lsls	r1, r3, #19
 801792a:	6922      	ldr	r2, [r4, #16]
 801792c:	6022      	str	r2, [r4, #0]
 801792e:	d504      	bpl.n	801793a <__sflush_r+0x7e>
 8017930:	1c42      	adds	r2, r0, #1
 8017932:	d101      	bne.n	8017938 <__sflush_r+0x7c>
 8017934:	682b      	ldr	r3, [r5, #0]
 8017936:	b903      	cbnz	r3, 801793a <__sflush_r+0x7e>
 8017938:	6560      	str	r0, [r4, #84]	; 0x54
 801793a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801793c:	602f      	str	r7, [r5, #0]
 801793e:	2900      	cmp	r1, #0
 8017940:	d0c9      	beq.n	80178d6 <__sflush_r+0x1a>
 8017942:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017946:	4299      	cmp	r1, r3
 8017948:	d002      	beq.n	8017950 <__sflush_r+0x94>
 801794a:	4628      	mov	r0, r5
 801794c:	f7fe fbb2 	bl	80160b4 <_free_r>
 8017950:	2000      	movs	r0, #0
 8017952:	6360      	str	r0, [r4, #52]	; 0x34
 8017954:	e7c0      	b.n	80178d8 <__sflush_r+0x1c>
 8017956:	2301      	movs	r3, #1
 8017958:	4628      	mov	r0, r5
 801795a:	47b0      	blx	r6
 801795c:	1c41      	adds	r1, r0, #1
 801795e:	d1c8      	bne.n	80178f2 <__sflush_r+0x36>
 8017960:	682b      	ldr	r3, [r5, #0]
 8017962:	2b00      	cmp	r3, #0
 8017964:	d0c5      	beq.n	80178f2 <__sflush_r+0x36>
 8017966:	2b1d      	cmp	r3, #29
 8017968:	d001      	beq.n	801796e <__sflush_r+0xb2>
 801796a:	2b16      	cmp	r3, #22
 801796c:	d101      	bne.n	8017972 <__sflush_r+0xb6>
 801796e:	602f      	str	r7, [r5, #0]
 8017970:	e7b1      	b.n	80178d6 <__sflush_r+0x1a>
 8017972:	89a3      	ldrh	r3, [r4, #12]
 8017974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017978:	81a3      	strh	r3, [r4, #12]
 801797a:	e7ad      	b.n	80178d8 <__sflush_r+0x1c>
 801797c:	690f      	ldr	r7, [r1, #16]
 801797e:	2f00      	cmp	r7, #0
 8017980:	d0a9      	beq.n	80178d6 <__sflush_r+0x1a>
 8017982:	0793      	lsls	r3, r2, #30
 8017984:	680e      	ldr	r6, [r1, #0]
 8017986:	bf08      	it	eq
 8017988:	694b      	ldreq	r3, [r1, #20]
 801798a:	600f      	str	r7, [r1, #0]
 801798c:	bf18      	it	ne
 801798e:	2300      	movne	r3, #0
 8017990:	eba6 0807 	sub.w	r8, r6, r7
 8017994:	608b      	str	r3, [r1, #8]
 8017996:	f1b8 0f00 	cmp.w	r8, #0
 801799a:	dd9c      	ble.n	80178d6 <__sflush_r+0x1a>
 801799c:	6a21      	ldr	r1, [r4, #32]
 801799e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80179a0:	4643      	mov	r3, r8
 80179a2:	463a      	mov	r2, r7
 80179a4:	4628      	mov	r0, r5
 80179a6:	47b0      	blx	r6
 80179a8:	2800      	cmp	r0, #0
 80179aa:	dc06      	bgt.n	80179ba <__sflush_r+0xfe>
 80179ac:	89a3      	ldrh	r3, [r4, #12]
 80179ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80179b2:	81a3      	strh	r3, [r4, #12]
 80179b4:	f04f 30ff 	mov.w	r0, #4294967295
 80179b8:	e78e      	b.n	80178d8 <__sflush_r+0x1c>
 80179ba:	4407      	add	r7, r0
 80179bc:	eba8 0800 	sub.w	r8, r8, r0
 80179c0:	e7e9      	b.n	8017996 <__sflush_r+0xda>
 80179c2:	bf00      	nop
 80179c4:	dfbffffe 	.word	0xdfbffffe

080179c8 <_fflush_r>:
 80179c8:	b538      	push	{r3, r4, r5, lr}
 80179ca:	690b      	ldr	r3, [r1, #16]
 80179cc:	4605      	mov	r5, r0
 80179ce:	460c      	mov	r4, r1
 80179d0:	b913      	cbnz	r3, 80179d8 <_fflush_r+0x10>
 80179d2:	2500      	movs	r5, #0
 80179d4:	4628      	mov	r0, r5
 80179d6:	bd38      	pop	{r3, r4, r5, pc}
 80179d8:	b118      	cbz	r0, 80179e2 <_fflush_r+0x1a>
 80179da:	6a03      	ldr	r3, [r0, #32]
 80179dc:	b90b      	cbnz	r3, 80179e2 <_fflush_r+0x1a>
 80179de:	f7fe fa05 	bl	8015dec <__sinit>
 80179e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d0f3      	beq.n	80179d2 <_fflush_r+0xa>
 80179ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80179ec:	07d0      	lsls	r0, r2, #31
 80179ee:	d404      	bmi.n	80179fa <_fflush_r+0x32>
 80179f0:	0599      	lsls	r1, r3, #22
 80179f2:	d402      	bmi.n	80179fa <_fflush_r+0x32>
 80179f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80179f6:	f7fe fb36 	bl	8016066 <__retarget_lock_acquire_recursive>
 80179fa:	4628      	mov	r0, r5
 80179fc:	4621      	mov	r1, r4
 80179fe:	f7ff ff5d 	bl	80178bc <__sflush_r>
 8017a02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017a04:	07da      	lsls	r2, r3, #31
 8017a06:	4605      	mov	r5, r0
 8017a08:	d4e4      	bmi.n	80179d4 <_fflush_r+0xc>
 8017a0a:	89a3      	ldrh	r3, [r4, #12]
 8017a0c:	059b      	lsls	r3, r3, #22
 8017a0e:	d4e1      	bmi.n	80179d4 <_fflush_r+0xc>
 8017a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017a12:	f7fe fb29 	bl	8016068 <__retarget_lock_release_recursive>
 8017a16:	e7dd      	b.n	80179d4 <_fflush_r+0xc>

08017a18 <memmove>:
 8017a18:	4288      	cmp	r0, r1
 8017a1a:	b510      	push	{r4, lr}
 8017a1c:	eb01 0402 	add.w	r4, r1, r2
 8017a20:	d902      	bls.n	8017a28 <memmove+0x10>
 8017a22:	4284      	cmp	r4, r0
 8017a24:	4623      	mov	r3, r4
 8017a26:	d807      	bhi.n	8017a38 <memmove+0x20>
 8017a28:	1e43      	subs	r3, r0, #1
 8017a2a:	42a1      	cmp	r1, r4
 8017a2c:	d008      	beq.n	8017a40 <memmove+0x28>
 8017a2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017a32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017a36:	e7f8      	b.n	8017a2a <memmove+0x12>
 8017a38:	4402      	add	r2, r0
 8017a3a:	4601      	mov	r1, r0
 8017a3c:	428a      	cmp	r2, r1
 8017a3e:	d100      	bne.n	8017a42 <memmove+0x2a>
 8017a40:	bd10      	pop	{r4, pc}
 8017a42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017a46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017a4a:	e7f7      	b.n	8017a3c <memmove+0x24>

08017a4c <_sbrk_r>:
 8017a4c:	b538      	push	{r3, r4, r5, lr}
 8017a4e:	4d06      	ldr	r5, [pc, #24]	; (8017a68 <_sbrk_r+0x1c>)
 8017a50:	2300      	movs	r3, #0
 8017a52:	4604      	mov	r4, r0
 8017a54:	4608      	mov	r0, r1
 8017a56:	602b      	str	r3, [r5, #0]
 8017a58:	f7f1 f8ae 	bl	8008bb8 <_sbrk>
 8017a5c:	1c43      	adds	r3, r0, #1
 8017a5e:	d102      	bne.n	8017a66 <_sbrk_r+0x1a>
 8017a60:	682b      	ldr	r3, [r5, #0]
 8017a62:	b103      	cbz	r3, 8017a66 <_sbrk_r+0x1a>
 8017a64:	6023      	str	r3, [r4, #0]
 8017a66:	bd38      	pop	{r3, r4, r5, pc}
 8017a68:	20003690 	.word	0x20003690

08017a6c <__assert_func>:
 8017a6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017a6e:	4614      	mov	r4, r2
 8017a70:	461a      	mov	r2, r3
 8017a72:	4b09      	ldr	r3, [pc, #36]	; (8017a98 <__assert_func+0x2c>)
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	4605      	mov	r5, r0
 8017a78:	68d8      	ldr	r0, [r3, #12]
 8017a7a:	b14c      	cbz	r4, 8017a90 <__assert_func+0x24>
 8017a7c:	4b07      	ldr	r3, [pc, #28]	; (8017a9c <__assert_func+0x30>)
 8017a7e:	9100      	str	r1, [sp, #0]
 8017a80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017a84:	4906      	ldr	r1, [pc, #24]	; (8017aa0 <__assert_func+0x34>)
 8017a86:	462b      	mov	r3, r5
 8017a88:	f000 f85c 	bl	8017b44 <fiprintf>
 8017a8c:	f000 f86c 	bl	8017b68 <abort>
 8017a90:	4b04      	ldr	r3, [pc, #16]	; (8017aa4 <__assert_func+0x38>)
 8017a92:	461c      	mov	r4, r3
 8017a94:	e7f3      	b.n	8017a7e <__assert_func+0x12>
 8017a96:	bf00      	nop
 8017a98:	2000035c 	.word	0x2000035c
 8017a9c:	08018867 	.word	0x08018867
 8017aa0:	08018874 	.word	0x08018874
 8017aa4:	080188a2 	.word	0x080188a2

08017aa8 <_calloc_r>:
 8017aa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017aaa:	fba1 2402 	umull	r2, r4, r1, r2
 8017aae:	b94c      	cbnz	r4, 8017ac4 <_calloc_r+0x1c>
 8017ab0:	4611      	mov	r1, r2
 8017ab2:	9201      	str	r2, [sp, #4]
 8017ab4:	f7fe fec2 	bl	801683c <_malloc_r>
 8017ab8:	9a01      	ldr	r2, [sp, #4]
 8017aba:	4605      	mov	r5, r0
 8017abc:	b930      	cbnz	r0, 8017acc <_calloc_r+0x24>
 8017abe:	4628      	mov	r0, r5
 8017ac0:	b003      	add	sp, #12
 8017ac2:	bd30      	pop	{r4, r5, pc}
 8017ac4:	220c      	movs	r2, #12
 8017ac6:	6002      	str	r2, [r0, #0]
 8017ac8:	2500      	movs	r5, #0
 8017aca:	e7f8      	b.n	8017abe <_calloc_r+0x16>
 8017acc:	4621      	mov	r1, r4
 8017ace:	f7fe fa3f 	bl	8015f50 <memset>
 8017ad2:	e7f4      	b.n	8017abe <_calloc_r+0x16>

08017ad4 <malloc>:
 8017ad4:	4b02      	ldr	r3, [pc, #8]	; (8017ae0 <malloc+0xc>)
 8017ad6:	4601      	mov	r1, r0
 8017ad8:	6818      	ldr	r0, [r3, #0]
 8017ada:	f7fe beaf 	b.w	801683c <_malloc_r>
 8017ade:	bf00      	nop
 8017ae0:	2000035c 	.word	0x2000035c

08017ae4 <_realloc_r>:
 8017ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ae8:	4680      	mov	r8, r0
 8017aea:	4614      	mov	r4, r2
 8017aec:	460e      	mov	r6, r1
 8017aee:	b921      	cbnz	r1, 8017afa <_realloc_r+0x16>
 8017af0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017af4:	4611      	mov	r1, r2
 8017af6:	f7fe bea1 	b.w	801683c <_malloc_r>
 8017afa:	b92a      	cbnz	r2, 8017b08 <_realloc_r+0x24>
 8017afc:	f7fe fada 	bl	80160b4 <_free_r>
 8017b00:	4625      	mov	r5, r4
 8017b02:	4628      	mov	r0, r5
 8017b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b08:	f000 f835 	bl	8017b76 <_malloc_usable_size_r>
 8017b0c:	4284      	cmp	r4, r0
 8017b0e:	4607      	mov	r7, r0
 8017b10:	d802      	bhi.n	8017b18 <_realloc_r+0x34>
 8017b12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017b16:	d812      	bhi.n	8017b3e <_realloc_r+0x5a>
 8017b18:	4621      	mov	r1, r4
 8017b1a:	4640      	mov	r0, r8
 8017b1c:	f7fe fe8e 	bl	801683c <_malloc_r>
 8017b20:	4605      	mov	r5, r0
 8017b22:	2800      	cmp	r0, #0
 8017b24:	d0ed      	beq.n	8017b02 <_realloc_r+0x1e>
 8017b26:	42bc      	cmp	r4, r7
 8017b28:	4622      	mov	r2, r4
 8017b2a:	4631      	mov	r1, r6
 8017b2c:	bf28      	it	cs
 8017b2e:	463a      	movcs	r2, r7
 8017b30:	f7fe faa3 	bl	801607a <memcpy>
 8017b34:	4631      	mov	r1, r6
 8017b36:	4640      	mov	r0, r8
 8017b38:	f7fe fabc 	bl	80160b4 <_free_r>
 8017b3c:	e7e1      	b.n	8017b02 <_realloc_r+0x1e>
 8017b3e:	4635      	mov	r5, r6
 8017b40:	e7df      	b.n	8017b02 <_realloc_r+0x1e>
	...

08017b44 <fiprintf>:
 8017b44:	b40e      	push	{r1, r2, r3}
 8017b46:	b503      	push	{r0, r1, lr}
 8017b48:	4601      	mov	r1, r0
 8017b4a:	ab03      	add	r3, sp, #12
 8017b4c:	4805      	ldr	r0, [pc, #20]	; (8017b64 <fiprintf+0x20>)
 8017b4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b52:	6800      	ldr	r0, [r0, #0]
 8017b54:	9301      	str	r3, [sp, #4]
 8017b56:	f000 f83f 	bl	8017bd8 <_vfiprintf_r>
 8017b5a:	b002      	add	sp, #8
 8017b5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017b60:	b003      	add	sp, #12
 8017b62:	4770      	bx	lr
 8017b64:	2000035c 	.word	0x2000035c

08017b68 <abort>:
 8017b68:	b508      	push	{r3, lr}
 8017b6a:	2006      	movs	r0, #6
 8017b6c:	f000 fa0c 	bl	8017f88 <raise>
 8017b70:	2001      	movs	r0, #1
 8017b72:	f7f0 ffa9 	bl	8008ac8 <_exit>

08017b76 <_malloc_usable_size_r>:
 8017b76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017b7a:	1f18      	subs	r0, r3, #4
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	bfbc      	itt	lt
 8017b80:	580b      	ldrlt	r3, [r1, r0]
 8017b82:	18c0      	addlt	r0, r0, r3
 8017b84:	4770      	bx	lr

08017b86 <__sfputc_r>:
 8017b86:	6893      	ldr	r3, [r2, #8]
 8017b88:	3b01      	subs	r3, #1
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	b410      	push	{r4}
 8017b8e:	6093      	str	r3, [r2, #8]
 8017b90:	da08      	bge.n	8017ba4 <__sfputc_r+0x1e>
 8017b92:	6994      	ldr	r4, [r2, #24]
 8017b94:	42a3      	cmp	r3, r4
 8017b96:	db01      	blt.n	8017b9c <__sfputc_r+0x16>
 8017b98:	290a      	cmp	r1, #10
 8017b9a:	d103      	bne.n	8017ba4 <__sfputc_r+0x1e>
 8017b9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ba0:	f000 b934 	b.w	8017e0c <__swbuf_r>
 8017ba4:	6813      	ldr	r3, [r2, #0]
 8017ba6:	1c58      	adds	r0, r3, #1
 8017ba8:	6010      	str	r0, [r2, #0]
 8017baa:	7019      	strb	r1, [r3, #0]
 8017bac:	4608      	mov	r0, r1
 8017bae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017bb2:	4770      	bx	lr

08017bb4 <__sfputs_r>:
 8017bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bb6:	4606      	mov	r6, r0
 8017bb8:	460f      	mov	r7, r1
 8017bba:	4614      	mov	r4, r2
 8017bbc:	18d5      	adds	r5, r2, r3
 8017bbe:	42ac      	cmp	r4, r5
 8017bc0:	d101      	bne.n	8017bc6 <__sfputs_r+0x12>
 8017bc2:	2000      	movs	r0, #0
 8017bc4:	e007      	b.n	8017bd6 <__sfputs_r+0x22>
 8017bc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017bca:	463a      	mov	r2, r7
 8017bcc:	4630      	mov	r0, r6
 8017bce:	f7ff ffda 	bl	8017b86 <__sfputc_r>
 8017bd2:	1c43      	adds	r3, r0, #1
 8017bd4:	d1f3      	bne.n	8017bbe <__sfputs_r+0xa>
 8017bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017bd8 <_vfiprintf_r>:
 8017bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bdc:	460d      	mov	r5, r1
 8017bde:	b09d      	sub	sp, #116	; 0x74
 8017be0:	4614      	mov	r4, r2
 8017be2:	4698      	mov	r8, r3
 8017be4:	4606      	mov	r6, r0
 8017be6:	b118      	cbz	r0, 8017bf0 <_vfiprintf_r+0x18>
 8017be8:	6a03      	ldr	r3, [r0, #32]
 8017bea:	b90b      	cbnz	r3, 8017bf0 <_vfiprintf_r+0x18>
 8017bec:	f7fe f8fe 	bl	8015dec <__sinit>
 8017bf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017bf2:	07d9      	lsls	r1, r3, #31
 8017bf4:	d405      	bmi.n	8017c02 <_vfiprintf_r+0x2a>
 8017bf6:	89ab      	ldrh	r3, [r5, #12]
 8017bf8:	059a      	lsls	r2, r3, #22
 8017bfa:	d402      	bmi.n	8017c02 <_vfiprintf_r+0x2a>
 8017bfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017bfe:	f7fe fa32 	bl	8016066 <__retarget_lock_acquire_recursive>
 8017c02:	89ab      	ldrh	r3, [r5, #12]
 8017c04:	071b      	lsls	r3, r3, #28
 8017c06:	d501      	bpl.n	8017c0c <_vfiprintf_r+0x34>
 8017c08:	692b      	ldr	r3, [r5, #16]
 8017c0a:	b99b      	cbnz	r3, 8017c34 <_vfiprintf_r+0x5c>
 8017c0c:	4629      	mov	r1, r5
 8017c0e:	4630      	mov	r0, r6
 8017c10:	f000 f93a 	bl	8017e88 <__swsetup_r>
 8017c14:	b170      	cbz	r0, 8017c34 <_vfiprintf_r+0x5c>
 8017c16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017c18:	07dc      	lsls	r4, r3, #31
 8017c1a:	d504      	bpl.n	8017c26 <_vfiprintf_r+0x4e>
 8017c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8017c20:	b01d      	add	sp, #116	; 0x74
 8017c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c26:	89ab      	ldrh	r3, [r5, #12]
 8017c28:	0598      	lsls	r0, r3, #22
 8017c2a:	d4f7      	bmi.n	8017c1c <_vfiprintf_r+0x44>
 8017c2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017c2e:	f7fe fa1b 	bl	8016068 <__retarget_lock_release_recursive>
 8017c32:	e7f3      	b.n	8017c1c <_vfiprintf_r+0x44>
 8017c34:	2300      	movs	r3, #0
 8017c36:	9309      	str	r3, [sp, #36]	; 0x24
 8017c38:	2320      	movs	r3, #32
 8017c3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017c3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017c42:	2330      	movs	r3, #48	; 0x30
 8017c44:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8017df8 <_vfiprintf_r+0x220>
 8017c48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017c4c:	f04f 0901 	mov.w	r9, #1
 8017c50:	4623      	mov	r3, r4
 8017c52:	469a      	mov	sl, r3
 8017c54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017c58:	b10a      	cbz	r2, 8017c5e <_vfiprintf_r+0x86>
 8017c5a:	2a25      	cmp	r2, #37	; 0x25
 8017c5c:	d1f9      	bne.n	8017c52 <_vfiprintf_r+0x7a>
 8017c5e:	ebba 0b04 	subs.w	fp, sl, r4
 8017c62:	d00b      	beq.n	8017c7c <_vfiprintf_r+0xa4>
 8017c64:	465b      	mov	r3, fp
 8017c66:	4622      	mov	r2, r4
 8017c68:	4629      	mov	r1, r5
 8017c6a:	4630      	mov	r0, r6
 8017c6c:	f7ff ffa2 	bl	8017bb4 <__sfputs_r>
 8017c70:	3001      	adds	r0, #1
 8017c72:	f000 80a9 	beq.w	8017dc8 <_vfiprintf_r+0x1f0>
 8017c76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017c78:	445a      	add	r2, fp
 8017c7a:	9209      	str	r2, [sp, #36]	; 0x24
 8017c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	f000 80a1 	beq.w	8017dc8 <_vfiprintf_r+0x1f0>
 8017c86:	2300      	movs	r3, #0
 8017c88:	f04f 32ff 	mov.w	r2, #4294967295
 8017c8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017c90:	f10a 0a01 	add.w	sl, sl, #1
 8017c94:	9304      	str	r3, [sp, #16]
 8017c96:	9307      	str	r3, [sp, #28]
 8017c98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017c9c:	931a      	str	r3, [sp, #104]	; 0x68
 8017c9e:	4654      	mov	r4, sl
 8017ca0:	2205      	movs	r2, #5
 8017ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ca6:	4854      	ldr	r0, [pc, #336]	; (8017df8 <_vfiprintf_r+0x220>)
 8017ca8:	f7ef feca 	bl	8007a40 <memchr>
 8017cac:	9a04      	ldr	r2, [sp, #16]
 8017cae:	b9d8      	cbnz	r0, 8017ce8 <_vfiprintf_r+0x110>
 8017cb0:	06d1      	lsls	r1, r2, #27
 8017cb2:	bf44      	itt	mi
 8017cb4:	2320      	movmi	r3, #32
 8017cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017cba:	0713      	lsls	r3, r2, #28
 8017cbc:	bf44      	itt	mi
 8017cbe:	232b      	movmi	r3, #43	; 0x2b
 8017cc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8017cc8:	2b2a      	cmp	r3, #42	; 0x2a
 8017cca:	d015      	beq.n	8017cf8 <_vfiprintf_r+0x120>
 8017ccc:	9a07      	ldr	r2, [sp, #28]
 8017cce:	4654      	mov	r4, sl
 8017cd0:	2000      	movs	r0, #0
 8017cd2:	f04f 0c0a 	mov.w	ip, #10
 8017cd6:	4621      	mov	r1, r4
 8017cd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017cdc:	3b30      	subs	r3, #48	; 0x30
 8017cde:	2b09      	cmp	r3, #9
 8017ce0:	d94d      	bls.n	8017d7e <_vfiprintf_r+0x1a6>
 8017ce2:	b1b0      	cbz	r0, 8017d12 <_vfiprintf_r+0x13a>
 8017ce4:	9207      	str	r2, [sp, #28]
 8017ce6:	e014      	b.n	8017d12 <_vfiprintf_r+0x13a>
 8017ce8:	eba0 0308 	sub.w	r3, r0, r8
 8017cec:	fa09 f303 	lsl.w	r3, r9, r3
 8017cf0:	4313      	orrs	r3, r2
 8017cf2:	9304      	str	r3, [sp, #16]
 8017cf4:	46a2      	mov	sl, r4
 8017cf6:	e7d2      	b.n	8017c9e <_vfiprintf_r+0xc6>
 8017cf8:	9b03      	ldr	r3, [sp, #12]
 8017cfa:	1d19      	adds	r1, r3, #4
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	9103      	str	r1, [sp, #12]
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	bfbb      	ittet	lt
 8017d04:	425b      	neglt	r3, r3
 8017d06:	f042 0202 	orrlt.w	r2, r2, #2
 8017d0a:	9307      	strge	r3, [sp, #28]
 8017d0c:	9307      	strlt	r3, [sp, #28]
 8017d0e:	bfb8      	it	lt
 8017d10:	9204      	strlt	r2, [sp, #16]
 8017d12:	7823      	ldrb	r3, [r4, #0]
 8017d14:	2b2e      	cmp	r3, #46	; 0x2e
 8017d16:	d10c      	bne.n	8017d32 <_vfiprintf_r+0x15a>
 8017d18:	7863      	ldrb	r3, [r4, #1]
 8017d1a:	2b2a      	cmp	r3, #42	; 0x2a
 8017d1c:	d134      	bne.n	8017d88 <_vfiprintf_r+0x1b0>
 8017d1e:	9b03      	ldr	r3, [sp, #12]
 8017d20:	1d1a      	adds	r2, r3, #4
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	9203      	str	r2, [sp, #12]
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	bfb8      	it	lt
 8017d2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8017d2e:	3402      	adds	r4, #2
 8017d30:	9305      	str	r3, [sp, #20]
 8017d32:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8017e08 <_vfiprintf_r+0x230>
 8017d36:	7821      	ldrb	r1, [r4, #0]
 8017d38:	2203      	movs	r2, #3
 8017d3a:	4650      	mov	r0, sl
 8017d3c:	f7ef fe80 	bl	8007a40 <memchr>
 8017d40:	b138      	cbz	r0, 8017d52 <_vfiprintf_r+0x17a>
 8017d42:	9b04      	ldr	r3, [sp, #16]
 8017d44:	eba0 000a 	sub.w	r0, r0, sl
 8017d48:	2240      	movs	r2, #64	; 0x40
 8017d4a:	4082      	lsls	r2, r0
 8017d4c:	4313      	orrs	r3, r2
 8017d4e:	3401      	adds	r4, #1
 8017d50:	9304      	str	r3, [sp, #16]
 8017d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d56:	4829      	ldr	r0, [pc, #164]	; (8017dfc <_vfiprintf_r+0x224>)
 8017d58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017d5c:	2206      	movs	r2, #6
 8017d5e:	f7ef fe6f 	bl	8007a40 <memchr>
 8017d62:	2800      	cmp	r0, #0
 8017d64:	d03f      	beq.n	8017de6 <_vfiprintf_r+0x20e>
 8017d66:	4b26      	ldr	r3, [pc, #152]	; (8017e00 <_vfiprintf_r+0x228>)
 8017d68:	bb1b      	cbnz	r3, 8017db2 <_vfiprintf_r+0x1da>
 8017d6a:	9b03      	ldr	r3, [sp, #12]
 8017d6c:	3307      	adds	r3, #7
 8017d6e:	f023 0307 	bic.w	r3, r3, #7
 8017d72:	3308      	adds	r3, #8
 8017d74:	9303      	str	r3, [sp, #12]
 8017d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d78:	443b      	add	r3, r7
 8017d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8017d7c:	e768      	b.n	8017c50 <_vfiprintf_r+0x78>
 8017d7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8017d82:	460c      	mov	r4, r1
 8017d84:	2001      	movs	r0, #1
 8017d86:	e7a6      	b.n	8017cd6 <_vfiprintf_r+0xfe>
 8017d88:	2300      	movs	r3, #0
 8017d8a:	3401      	adds	r4, #1
 8017d8c:	9305      	str	r3, [sp, #20]
 8017d8e:	4619      	mov	r1, r3
 8017d90:	f04f 0c0a 	mov.w	ip, #10
 8017d94:	4620      	mov	r0, r4
 8017d96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017d9a:	3a30      	subs	r2, #48	; 0x30
 8017d9c:	2a09      	cmp	r2, #9
 8017d9e:	d903      	bls.n	8017da8 <_vfiprintf_r+0x1d0>
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d0c6      	beq.n	8017d32 <_vfiprintf_r+0x15a>
 8017da4:	9105      	str	r1, [sp, #20]
 8017da6:	e7c4      	b.n	8017d32 <_vfiprintf_r+0x15a>
 8017da8:	fb0c 2101 	mla	r1, ip, r1, r2
 8017dac:	4604      	mov	r4, r0
 8017dae:	2301      	movs	r3, #1
 8017db0:	e7f0      	b.n	8017d94 <_vfiprintf_r+0x1bc>
 8017db2:	ab03      	add	r3, sp, #12
 8017db4:	9300      	str	r3, [sp, #0]
 8017db6:	462a      	mov	r2, r5
 8017db8:	4b12      	ldr	r3, [pc, #72]	; (8017e04 <_vfiprintf_r+0x22c>)
 8017dba:	a904      	add	r1, sp, #16
 8017dbc:	4630      	mov	r0, r6
 8017dbe:	f3af 8000 	nop.w
 8017dc2:	4607      	mov	r7, r0
 8017dc4:	1c78      	adds	r0, r7, #1
 8017dc6:	d1d6      	bne.n	8017d76 <_vfiprintf_r+0x19e>
 8017dc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017dca:	07d9      	lsls	r1, r3, #31
 8017dcc:	d405      	bmi.n	8017dda <_vfiprintf_r+0x202>
 8017dce:	89ab      	ldrh	r3, [r5, #12]
 8017dd0:	059a      	lsls	r2, r3, #22
 8017dd2:	d402      	bmi.n	8017dda <_vfiprintf_r+0x202>
 8017dd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017dd6:	f7fe f947 	bl	8016068 <__retarget_lock_release_recursive>
 8017dda:	89ab      	ldrh	r3, [r5, #12]
 8017ddc:	065b      	lsls	r3, r3, #25
 8017dde:	f53f af1d 	bmi.w	8017c1c <_vfiprintf_r+0x44>
 8017de2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017de4:	e71c      	b.n	8017c20 <_vfiprintf_r+0x48>
 8017de6:	ab03      	add	r3, sp, #12
 8017de8:	9300      	str	r3, [sp, #0]
 8017dea:	462a      	mov	r2, r5
 8017dec:	4b05      	ldr	r3, [pc, #20]	; (8017e04 <_vfiprintf_r+0x22c>)
 8017dee:	a904      	add	r1, sp, #16
 8017df0:	4630      	mov	r0, r6
 8017df2:	f7ff fc41 	bl	8017678 <_printf_i>
 8017df6:	e7e4      	b.n	8017dc2 <_vfiprintf_r+0x1ea>
 8017df8:	08018834 	.word	0x08018834
 8017dfc:	0801883e 	.word	0x0801883e
 8017e00:	00000000 	.word	0x00000000
 8017e04:	08017bb5 	.word	0x08017bb5
 8017e08:	0801883a 	.word	0x0801883a

08017e0c <__swbuf_r>:
 8017e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e0e:	460e      	mov	r6, r1
 8017e10:	4614      	mov	r4, r2
 8017e12:	4605      	mov	r5, r0
 8017e14:	b118      	cbz	r0, 8017e1e <__swbuf_r+0x12>
 8017e16:	6a03      	ldr	r3, [r0, #32]
 8017e18:	b90b      	cbnz	r3, 8017e1e <__swbuf_r+0x12>
 8017e1a:	f7fd ffe7 	bl	8015dec <__sinit>
 8017e1e:	69a3      	ldr	r3, [r4, #24]
 8017e20:	60a3      	str	r3, [r4, #8]
 8017e22:	89a3      	ldrh	r3, [r4, #12]
 8017e24:	071a      	lsls	r2, r3, #28
 8017e26:	d525      	bpl.n	8017e74 <__swbuf_r+0x68>
 8017e28:	6923      	ldr	r3, [r4, #16]
 8017e2a:	b31b      	cbz	r3, 8017e74 <__swbuf_r+0x68>
 8017e2c:	6823      	ldr	r3, [r4, #0]
 8017e2e:	6922      	ldr	r2, [r4, #16]
 8017e30:	1a98      	subs	r0, r3, r2
 8017e32:	6963      	ldr	r3, [r4, #20]
 8017e34:	b2f6      	uxtb	r6, r6
 8017e36:	4283      	cmp	r3, r0
 8017e38:	4637      	mov	r7, r6
 8017e3a:	dc04      	bgt.n	8017e46 <__swbuf_r+0x3a>
 8017e3c:	4621      	mov	r1, r4
 8017e3e:	4628      	mov	r0, r5
 8017e40:	f7ff fdc2 	bl	80179c8 <_fflush_r>
 8017e44:	b9e0      	cbnz	r0, 8017e80 <__swbuf_r+0x74>
 8017e46:	68a3      	ldr	r3, [r4, #8]
 8017e48:	3b01      	subs	r3, #1
 8017e4a:	60a3      	str	r3, [r4, #8]
 8017e4c:	6823      	ldr	r3, [r4, #0]
 8017e4e:	1c5a      	adds	r2, r3, #1
 8017e50:	6022      	str	r2, [r4, #0]
 8017e52:	701e      	strb	r6, [r3, #0]
 8017e54:	6962      	ldr	r2, [r4, #20]
 8017e56:	1c43      	adds	r3, r0, #1
 8017e58:	429a      	cmp	r2, r3
 8017e5a:	d004      	beq.n	8017e66 <__swbuf_r+0x5a>
 8017e5c:	89a3      	ldrh	r3, [r4, #12]
 8017e5e:	07db      	lsls	r3, r3, #31
 8017e60:	d506      	bpl.n	8017e70 <__swbuf_r+0x64>
 8017e62:	2e0a      	cmp	r6, #10
 8017e64:	d104      	bne.n	8017e70 <__swbuf_r+0x64>
 8017e66:	4621      	mov	r1, r4
 8017e68:	4628      	mov	r0, r5
 8017e6a:	f7ff fdad 	bl	80179c8 <_fflush_r>
 8017e6e:	b938      	cbnz	r0, 8017e80 <__swbuf_r+0x74>
 8017e70:	4638      	mov	r0, r7
 8017e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e74:	4621      	mov	r1, r4
 8017e76:	4628      	mov	r0, r5
 8017e78:	f000 f806 	bl	8017e88 <__swsetup_r>
 8017e7c:	2800      	cmp	r0, #0
 8017e7e:	d0d5      	beq.n	8017e2c <__swbuf_r+0x20>
 8017e80:	f04f 37ff 	mov.w	r7, #4294967295
 8017e84:	e7f4      	b.n	8017e70 <__swbuf_r+0x64>
	...

08017e88 <__swsetup_r>:
 8017e88:	b538      	push	{r3, r4, r5, lr}
 8017e8a:	4b2a      	ldr	r3, [pc, #168]	; (8017f34 <__swsetup_r+0xac>)
 8017e8c:	4605      	mov	r5, r0
 8017e8e:	6818      	ldr	r0, [r3, #0]
 8017e90:	460c      	mov	r4, r1
 8017e92:	b118      	cbz	r0, 8017e9c <__swsetup_r+0x14>
 8017e94:	6a03      	ldr	r3, [r0, #32]
 8017e96:	b90b      	cbnz	r3, 8017e9c <__swsetup_r+0x14>
 8017e98:	f7fd ffa8 	bl	8015dec <__sinit>
 8017e9c:	89a3      	ldrh	r3, [r4, #12]
 8017e9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017ea2:	0718      	lsls	r0, r3, #28
 8017ea4:	d422      	bmi.n	8017eec <__swsetup_r+0x64>
 8017ea6:	06d9      	lsls	r1, r3, #27
 8017ea8:	d407      	bmi.n	8017eba <__swsetup_r+0x32>
 8017eaa:	2309      	movs	r3, #9
 8017eac:	602b      	str	r3, [r5, #0]
 8017eae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017eb2:	81a3      	strh	r3, [r4, #12]
 8017eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8017eb8:	e034      	b.n	8017f24 <__swsetup_r+0x9c>
 8017eba:	0758      	lsls	r0, r3, #29
 8017ebc:	d512      	bpl.n	8017ee4 <__swsetup_r+0x5c>
 8017ebe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017ec0:	b141      	cbz	r1, 8017ed4 <__swsetup_r+0x4c>
 8017ec2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017ec6:	4299      	cmp	r1, r3
 8017ec8:	d002      	beq.n	8017ed0 <__swsetup_r+0x48>
 8017eca:	4628      	mov	r0, r5
 8017ecc:	f7fe f8f2 	bl	80160b4 <_free_r>
 8017ed0:	2300      	movs	r3, #0
 8017ed2:	6363      	str	r3, [r4, #52]	; 0x34
 8017ed4:	89a3      	ldrh	r3, [r4, #12]
 8017ed6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017eda:	81a3      	strh	r3, [r4, #12]
 8017edc:	2300      	movs	r3, #0
 8017ede:	6063      	str	r3, [r4, #4]
 8017ee0:	6923      	ldr	r3, [r4, #16]
 8017ee2:	6023      	str	r3, [r4, #0]
 8017ee4:	89a3      	ldrh	r3, [r4, #12]
 8017ee6:	f043 0308 	orr.w	r3, r3, #8
 8017eea:	81a3      	strh	r3, [r4, #12]
 8017eec:	6923      	ldr	r3, [r4, #16]
 8017eee:	b94b      	cbnz	r3, 8017f04 <__swsetup_r+0x7c>
 8017ef0:	89a3      	ldrh	r3, [r4, #12]
 8017ef2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017efa:	d003      	beq.n	8017f04 <__swsetup_r+0x7c>
 8017efc:	4621      	mov	r1, r4
 8017efe:	4628      	mov	r0, r5
 8017f00:	f000 f884 	bl	801800c <__smakebuf_r>
 8017f04:	89a0      	ldrh	r0, [r4, #12]
 8017f06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017f0a:	f010 0301 	ands.w	r3, r0, #1
 8017f0e:	d00a      	beq.n	8017f26 <__swsetup_r+0x9e>
 8017f10:	2300      	movs	r3, #0
 8017f12:	60a3      	str	r3, [r4, #8]
 8017f14:	6963      	ldr	r3, [r4, #20]
 8017f16:	425b      	negs	r3, r3
 8017f18:	61a3      	str	r3, [r4, #24]
 8017f1a:	6923      	ldr	r3, [r4, #16]
 8017f1c:	b943      	cbnz	r3, 8017f30 <__swsetup_r+0xa8>
 8017f1e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017f22:	d1c4      	bne.n	8017eae <__swsetup_r+0x26>
 8017f24:	bd38      	pop	{r3, r4, r5, pc}
 8017f26:	0781      	lsls	r1, r0, #30
 8017f28:	bf58      	it	pl
 8017f2a:	6963      	ldrpl	r3, [r4, #20]
 8017f2c:	60a3      	str	r3, [r4, #8]
 8017f2e:	e7f4      	b.n	8017f1a <__swsetup_r+0x92>
 8017f30:	2000      	movs	r0, #0
 8017f32:	e7f7      	b.n	8017f24 <__swsetup_r+0x9c>
 8017f34:	2000035c 	.word	0x2000035c

08017f38 <_raise_r>:
 8017f38:	291f      	cmp	r1, #31
 8017f3a:	b538      	push	{r3, r4, r5, lr}
 8017f3c:	4604      	mov	r4, r0
 8017f3e:	460d      	mov	r5, r1
 8017f40:	d904      	bls.n	8017f4c <_raise_r+0x14>
 8017f42:	2316      	movs	r3, #22
 8017f44:	6003      	str	r3, [r0, #0]
 8017f46:	f04f 30ff 	mov.w	r0, #4294967295
 8017f4a:	bd38      	pop	{r3, r4, r5, pc}
 8017f4c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8017f4e:	b112      	cbz	r2, 8017f56 <_raise_r+0x1e>
 8017f50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017f54:	b94b      	cbnz	r3, 8017f6a <_raise_r+0x32>
 8017f56:	4620      	mov	r0, r4
 8017f58:	f000 f830 	bl	8017fbc <_getpid_r>
 8017f5c:	462a      	mov	r2, r5
 8017f5e:	4601      	mov	r1, r0
 8017f60:	4620      	mov	r0, r4
 8017f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017f66:	f000 b817 	b.w	8017f98 <_kill_r>
 8017f6a:	2b01      	cmp	r3, #1
 8017f6c:	d00a      	beq.n	8017f84 <_raise_r+0x4c>
 8017f6e:	1c59      	adds	r1, r3, #1
 8017f70:	d103      	bne.n	8017f7a <_raise_r+0x42>
 8017f72:	2316      	movs	r3, #22
 8017f74:	6003      	str	r3, [r0, #0]
 8017f76:	2001      	movs	r0, #1
 8017f78:	e7e7      	b.n	8017f4a <_raise_r+0x12>
 8017f7a:	2400      	movs	r4, #0
 8017f7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017f80:	4628      	mov	r0, r5
 8017f82:	4798      	blx	r3
 8017f84:	2000      	movs	r0, #0
 8017f86:	e7e0      	b.n	8017f4a <_raise_r+0x12>

08017f88 <raise>:
 8017f88:	4b02      	ldr	r3, [pc, #8]	; (8017f94 <raise+0xc>)
 8017f8a:	4601      	mov	r1, r0
 8017f8c:	6818      	ldr	r0, [r3, #0]
 8017f8e:	f7ff bfd3 	b.w	8017f38 <_raise_r>
 8017f92:	bf00      	nop
 8017f94:	2000035c 	.word	0x2000035c

08017f98 <_kill_r>:
 8017f98:	b538      	push	{r3, r4, r5, lr}
 8017f9a:	4d07      	ldr	r5, [pc, #28]	; (8017fb8 <_kill_r+0x20>)
 8017f9c:	2300      	movs	r3, #0
 8017f9e:	4604      	mov	r4, r0
 8017fa0:	4608      	mov	r0, r1
 8017fa2:	4611      	mov	r1, r2
 8017fa4:	602b      	str	r3, [r5, #0]
 8017fa6:	f7f0 fd7f 	bl	8008aa8 <_kill>
 8017faa:	1c43      	adds	r3, r0, #1
 8017fac:	d102      	bne.n	8017fb4 <_kill_r+0x1c>
 8017fae:	682b      	ldr	r3, [r5, #0]
 8017fb0:	b103      	cbz	r3, 8017fb4 <_kill_r+0x1c>
 8017fb2:	6023      	str	r3, [r4, #0]
 8017fb4:	bd38      	pop	{r3, r4, r5, pc}
 8017fb6:	bf00      	nop
 8017fb8:	20003690 	.word	0x20003690

08017fbc <_getpid_r>:
 8017fbc:	f7f0 bd6c 	b.w	8008a98 <_getpid>

08017fc0 <__swhatbuf_r>:
 8017fc0:	b570      	push	{r4, r5, r6, lr}
 8017fc2:	460c      	mov	r4, r1
 8017fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017fc8:	2900      	cmp	r1, #0
 8017fca:	b096      	sub	sp, #88	; 0x58
 8017fcc:	4615      	mov	r5, r2
 8017fce:	461e      	mov	r6, r3
 8017fd0:	da0d      	bge.n	8017fee <__swhatbuf_r+0x2e>
 8017fd2:	89a3      	ldrh	r3, [r4, #12]
 8017fd4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8017fd8:	f04f 0100 	mov.w	r1, #0
 8017fdc:	bf0c      	ite	eq
 8017fde:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8017fe2:	2340      	movne	r3, #64	; 0x40
 8017fe4:	2000      	movs	r0, #0
 8017fe6:	6031      	str	r1, [r6, #0]
 8017fe8:	602b      	str	r3, [r5, #0]
 8017fea:	b016      	add	sp, #88	; 0x58
 8017fec:	bd70      	pop	{r4, r5, r6, pc}
 8017fee:	466a      	mov	r2, sp
 8017ff0:	f000 f848 	bl	8018084 <_fstat_r>
 8017ff4:	2800      	cmp	r0, #0
 8017ff6:	dbec      	blt.n	8017fd2 <__swhatbuf_r+0x12>
 8017ff8:	9901      	ldr	r1, [sp, #4]
 8017ffa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8017ffe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8018002:	4259      	negs	r1, r3
 8018004:	4159      	adcs	r1, r3
 8018006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801800a:	e7eb      	b.n	8017fe4 <__swhatbuf_r+0x24>

0801800c <__smakebuf_r>:
 801800c:	898b      	ldrh	r3, [r1, #12]
 801800e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018010:	079d      	lsls	r5, r3, #30
 8018012:	4606      	mov	r6, r0
 8018014:	460c      	mov	r4, r1
 8018016:	d507      	bpl.n	8018028 <__smakebuf_r+0x1c>
 8018018:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801801c:	6023      	str	r3, [r4, #0]
 801801e:	6123      	str	r3, [r4, #16]
 8018020:	2301      	movs	r3, #1
 8018022:	6163      	str	r3, [r4, #20]
 8018024:	b002      	add	sp, #8
 8018026:	bd70      	pop	{r4, r5, r6, pc}
 8018028:	ab01      	add	r3, sp, #4
 801802a:	466a      	mov	r2, sp
 801802c:	f7ff ffc8 	bl	8017fc0 <__swhatbuf_r>
 8018030:	9900      	ldr	r1, [sp, #0]
 8018032:	4605      	mov	r5, r0
 8018034:	4630      	mov	r0, r6
 8018036:	f7fe fc01 	bl	801683c <_malloc_r>
 801803a:	b948      	cbnz	r0, 8018050 <__smakebuf_r+0x44>
 801803c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018040:	059a      	lsls	r2, r3, #22
 8018042:	d4ef      	bmi.n	8018024 <__smakebuf_r+0x18>
 8018044:	f023 0303 	bic.w	r3, r3, #3
 8018048:	f043 0302 	orr.w	r3, r3, #2
 801804c:	81a3      	strh	r3, [r4, #12]
 801804e:	e7e3      	b.n	8018018 <__smakebuf_r+0xc>
 8018050:	89a3      	ldrh	r3, [r4, #12]
 8018052:	6020      	str	r0, [r4, #0]
 8018054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018058:	81a3      	strh	r3, [r4, #12]
 801805a:	9b00      	ldr	r3, [sp, #0]
 801805c:	6163      	str	r3, [r4, #20]
 801805e:	9b01      	ldr	r3, [sp, #4]
 8018060:	6120      	str	r0, [r4, #16]
 8018062:	b15b      	cbz	r3, 801807c <__smakebuf_r+0x70>
 8018064:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018068:	4630      	mov	r0, r6
 801806a:	f000 f81d 	bl	80180a8 <_isatty_r>
 801806e:	b128      	cbz	r0, 801807c <__smakebuf_r+0x70>
 8018070:	89a3      	ldrh	r3, [r4, #12]
 8018072:	f023 0303 	bic.w	r3, r3, #3
 8018076:	f043 0301 	orr.w	r3, r3, #1
 801807a:	81a3      	strh	r3, [r4, #12]
 801807c:	89a3      	ldrh	r3, [r4, #12]
 801807e:	431d      	orrs	r5, r3
 8018080:	81a5      	strh	r5, [r4, #12]
 8018082:	e7cf      	b.n	8018024 <__smakebuf_r+0x18>

08018084 <_fstat_r>:
 8018084:	b538      	push	{r3, r4, r5, lr}
 8018086:	4d07      	ldr	r5, [pc, #28]	; (80180a4 <_fstat_r+0x20>)
 8018088:	2300      	movs	r3, #0
 801808a:	4604      	mov	r4, r0
 801808c:	4608      	mov	r0, r1
 801808e:	4611      	mov	r1, r2
 8018090:	602b      	str	r3, [r5, #0]
 8018092:	f7f0 fd68 	bl	8008b66 <_fstat>
 8018096:	1c43      	adds	r3, r0, #1
 8018098:	d102      	bne.n	80180a0 <_fstat_r+0x1c>
 801809a:	682b      	ldr	r3, [r5, #0]
 801809c:	b103      	cbz	r3, 80180a0 <_fstat_r+0x1c>
 801809e:	6023      	str	r3, [r4, #0]
 80180a0:	bd38      	pop	{r3, r4, r5, pc}
 80180a2:	bf00      	nop
 80180a4:	20003690 	.word	0x20003690

080180a8 <_isatty_r>:
 80180a8:	b538      	push	{r3, r4, r5, lr}
 80180aa:	4d06      	ldr	r5, [pc, #24]	; (80180c4 <_isatty_r+0x1c>)
 80180ac:	2300      	movs	r3, #0
 80180ae:	4604      	mov	r4, r0
 80180b0:	4608      	mov	r0, r1
 80180b2:	602b      	str	r3, [r5, #0]
 80180b4:	f7f0 fd67 	bl	8008b86 <_isatty>
 80180b8:	1c43      	adds	r3, r0, #1
 80180ba:	d102      	bne.n	80180c2 <_isatty_r+0x1a>
 80180bc:	682b      	ldr	r3, [r5, #0]
 80180be:	b103      	cbz	r3, 80180c2 <_isatty_r+0x1a>
 80180c0:	6023      	str	r3, [r4, #0]
 80180c2:	bd38      	pop	{r3, r4, r5, pc}
 80180c4:	20003690 	.word	0x20003690

080180c8 <_init>:
 80180c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180ca:	bf00      	nop
 80180cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80180ce:	bc08      	pop	{r3}
 80180d0:	469e      	mov	lr, r3
 80180d2:	4770      	bx	lr

080180d4 <_fini>:
 80180d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180d6:	bf00      	nop
 80180d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80180da:	bc08      	pop	{r3}
 80180dc:	469e      	mov	lr, r3
 80180de:	4770      	bx	lr
