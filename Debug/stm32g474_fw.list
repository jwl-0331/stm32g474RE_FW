
stm32g474_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c528  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800c708  0800c708  0001c708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c810  0800c810  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c810  0800c810  0001c810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c818  0800c818  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c818  0800c818  0001c818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c81c  0800c81c  0001c81c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800c820  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  000201fc  2**0
                  CONTENTS
 10 .bss          00002d98  200001fc  200001fc  000201fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002f94  20002f94  000201fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d87f  00000000  00000000  0002026f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000055e3  00000000  00000000  0003daee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001800  00000000  00000000  000430d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001203  00000000  00000000  000448d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002bd45  00000000  00000000  00045adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00025e69  00000000  00000000  00071820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f699e  00000000  00000000  00097689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000643c  00000000  00000000  0018e028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  00194464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c6f0 	.word	0x0800c6f0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	0800c6f0 	.word	0x0800c6f0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <apInit>:
static uint32_t g_LEDOffTime = 200;
static uint32_t nextmill = 0;
*/

void apInit(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0

}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
	...

080005cc <apMain>:

void apMain(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
  uint32_t pre_time1 = millis();
 80005d2:	f000 f8b2 	bl	800073a <millis>
 80005d6:	60f8      	str	r0, [r7, #12]
  uint32_t pre_time2 = millis();
 80005d8:	f000 f8af 	bl	800073a <millis>
 80005dc:	60b8      	str	r0, [r7, #8]
  while(1)
  {
    /* LED Non blocking toggle*/
    /* Using Reg to toggle */
    if(millis()-pre_time1 >= 500)
 80005de:	f000 f8ac 	bl	800073a <millis>
 80005e2:	4602      	mov	r2, r0
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	1ad3      	subs	r3, r2, r3
 80005e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005ec:	d307      	bcc.n	80005fe <apMain+0x32>
    {
      pre_time1 = millis();
 80005ee:	f000 f8a4 	bl	800073a <millis>
 80005f2:	60f8      	str	r0, [r7, #12]
      //ledToggle(_DEF_LED1);
      gpio_out_toggle(GPIOA, GPIO_PIN_5);
 80005f4:	2120      	movs	r1, #32
 80005f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fa:	f000 fc83 	bl	8000f04 <gpio_out_toggle>
      uartPrintf(_DEF_UART1, "Rx : 0x%X, %c\n", rx_data, rx_data);
    }
    */

    /* FLASH Test*/
    if(uartAvailable(_DEF_UART1) > 0)
 80005fe:	2000      	movs	r0, #0
 8000600:	f000 fe68 	bl	80012d4 <uartAvailable>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d0e9      	beq.n	80005de <apMain+0x12>
    {
      int8_t rx_data;

      rx_data = uartRead(_DEF_UART1);
 800060a:	2000      	movs	r0, #0
 800060c:	f000 fe80 	bl	8001310 <uartRead>
 8000610:	4603      	mov	r3, r0
 8000612:	71fb      	strb	r3, [r7, #7]
      //erase - flash 특성상 지우면 0xfff
      if(rx_data == '2')
 8000614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000618:	2b32      	cmp	r3, #50	; 0x32
 800061a:	d1e0      	bne.n	80005de <apMain+0x12>
      {
        uartPrintf(_DEF_UART1,"Erase...\n");
 800061c:	490a      	ldr	r1, [pc, #40]	; (8000648 <apMain+0x7c>)
 800061e:	2000      	movs	r0, #0
 8000620:	f000 feb8 	bl	8001394 <uartPrintf>
        //지우고자하는 시작 주소 , length
        if(flashErase(0x0800FFFF, 12) == true)
 8000624:	210c      	movs	r1, #12
 8000626:	4809      	ldr	r0, [pc, #36]	; (800064c <apMain+0x80>)
 8000628:	f000 fb6a 	bl	8000d00 <flashErase>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d004      	beq.n	800063c <apMain+0x70>
        {
          uartPrintf(_DEF_UART1,"Erase OK\n");
 8000632:	4907      	ldr	r1, [pc, #28]	; (8000650 <apMain+0x84>)
 8000634:	2000      	movs	r0, #0
 8000636:	f000 fead 	bl	8001394 <uartPrintf>
 800063a:	e7d0      	b.n	80005de <apMain+0x12>
        }
        else
        {
          uartPrintf(_DEF_UART1,"Erase Fail\n");
 800063c:	4905      	ldr	r1, [pc, #20]	; (8000654 <apMain+0x88>)
 800063e:	2000      	movs	r0, #0
 8000640:	f000 fea8 	bl	8001394 <uartPrintf>
    if(millis()-pre_time1 >= 500)
 8000644:	e7cb      	b.n	80005de <apMain+0x12>
 8000646:	bf00      	nop
 8000648:	0800c708 	.word	0x0800c708
 800064c:	0800ffff 	.word	0x0800ffff
 8000650:	0800c714 	.word	0x0800c714
 8000654:	0800c720 	.word	0x0800c720

08000658 <bspInit>:
#include "usb_device.h"

void SystemClock_Config(void);

bool bspInit(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800065e:	4b30      	ldr	r3, [pc, #192]	; (8000720 <bspInit+0xc8>)
 8000660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000662:	4a2f      	ldr	r2, [pc, #188]	; (8000720 <bspInit+0xc8>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6613      	str	r3, [r2, #96]	; 0x60
 800066a:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <bspInit+0xc8>)
 800066c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]


  HAL_Init();
 8000676:	f001 f833 	bl	80016e0 <HAL_Init>
  SystemClock_Config();
 800067a:	f000 f865 	bl	8000748 <SystemClock_Config>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800067e:	4b28      	ldr	r3, [pc, #160]	; (8000720 <bspInit+0xc8>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000682:	4a27      	ldr	r2, [pc, #156]	; (8000720 <bspInit+0xc8>)
 8000684:	f043 0320 	orr.w	r3, r3, #32
 8000688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <bspInit+0xc8>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068e:	f003 0320 	and.w	r3, r3, #32
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	4b22      	ldr	r3, [pc, #136]	; (8000720 <bspInit+0xc8>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	4a21      	ldr	r2, [pc, #132]	; (8000720 <bspInit+0xc8>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a2:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <bspInit+0xc8>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]

  /* USB - RESET 시 장치관리자 해제 연결 안될 시 */

  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]
  // PA12(USB_DP) 출력 설정
  GPIO_InitStructure.Pin = GPIO_PIN_12;
 80006be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 80006c4:	2311      	movs	r3, #17
 80006c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	4619      	mov	r1, r3
 80006d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006da:	f001 fc3b 	bl	8001f54 <HAL_GPIO_Init>

  //회로에 PULL UP 이 걸려있다면 - 내리고
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e8:	f001 fdb6 	bl	8002258 <HAL_GPIO_WritePin>
  delay(100);
 80006ec:	2064      	movs	r0, #100	; 0x64
 80006ee:	f000 f819 	bl	8000724 <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006fc:	f001 fdac 	bl	8002258 <HAL_GPIO_WritePin>

  // INPUT 으로 다시 변경
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8000700:	2300      	movs	r3, #0
 8000702:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	4619      	mov	r1, r3
 800070a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070e:	f001 fc21 	bl	8001f54 <HAL_GPIO_Init>

  MX_USB_Device_Init();
 8000712:	f00a fd9d 	bl	800b250 <MX_USB_Device_Init>

  return true;
 8000716:	2301      	movs	r3, #1
}
 8000718:	4618      	mov	r0, r3
 800071a:	3720      	adds	r7, #32
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40021000 	.word	0x40021000

08000724 <delay>:

void delay(uint32_t time_ms)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  HAL_Delay(time_ms);
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f001 f847 	bl	80017c0 <HAL_Delay>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}

0800073a <millis>:

uint32_t millis(void)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800073e:	f001 f833 	bl	80017a8 <HAL_GetTick>
 8000742:	4603      	mov	r3, r0
}
 8000744:	4618      	mov	r0, r3
 8000746:	bd80      	pop	{r7, pc}

08000748 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b094      	sub	sp, #80	; 0x50
 800074c:	af00      	add	r7, sp, #0

  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	4b2a      	ldr	r3, [pc, #168]	; (80007f8 <SystemClock_Config+0xb0>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a29      	ldr	r2, [pc, #164]	; (80007f8 <SystemClock_Config+0xb0>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b27      	ldr	r3, [pc, #156]	; (80007f8 <SystemClock_Config+0xb0>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000766:	f107 0318 	add.w	r3, r7, #24
 800076a:	2238      	movs	r2, #56	; 0x38
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f00b fb3a 	bl	800bde8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
 8000780:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000782:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000786:	f003 fab3 	bl	8003cf0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800078a:	2309      	movs	r3, #9
 800078c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800078e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000792:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000794:	2301      	movs	r3, #1
 8000796:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000798:	2302      	movs	r3, #2
 800079a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079c:	2303      	movs	r3, #3
 800079e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 80007a4:	2308      	movs	r3, #8
 80007a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007ac:	2302      	movs	r3, #2
 80007ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b4:	f107 0318 	add.w	r3, r7, #24
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 fbcf 	bl	8003f5c <HAL_RCC_OscConfig>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007c4:	f000 f81a 	bl	80007fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c8:	230f      	movs	r3, #15
 80007ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007cc:	2303      	movs	r3, #3
 80007ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2101      	movs	r1, #1
 80007e0:	4618      	mov	r0, r3
 80007e2:	f003 fecd 	bl	8004580 <HAL_RCC_ClockConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80007ec:	f000 f806 	bl	80007fc <Error_Handler>
  }
}
 80007f0:	bf00      	nop
 80007f2:	3750      	adds	r7, #80	; 0x50
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40021000 	.word	0x40021000

080007fc <Error_Handler>:


void Error_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0

}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <HAL_MspInit+0x44>)
 8000814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000816:	4a0e      	ldr	r2, [pc, #56]	; (8000850 <HAL_MspInit+0x44>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6613      	str	r3, [r2, #96]	; 0x60
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <HAL_MspInit+0x44>)
 8000820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <HAL_MspInit+0x44>)
 800082c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800082e:	4a08      	ldr	r2, [pc, #32]	; (8000850 <HAL_MspInit+0x44>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000834:	6593      	str	r3, [r2, #88]	; 0x58
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_MspInit+0x44>)
 8000838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800083a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000842:	f003 faf9 	bl	8003e38 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000

08000854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000858:	e7fe      	b.n	8000858 <NMI_Handler+0x4>

0800085a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <HardFault_Handler+0x4>

08000860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <MemManage_Handler+0x4>

08000866 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <BusFault_Handler+0x4>

0800086c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <UsageFault_Handler+0x4>

08000872 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr

0800088e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a0:	f000 ff70 	bl	8001784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008ac:	4802      	ldr	r0, [pc, #8]	; (80008b8 <USB_LP_IRQHandler+0x10>)
 80008ae:	f001 fddb 	bl	8002468 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20002950 	.word	0x20002950

080008bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008c0:	4802      	ldr	r0, [pc, #8]	; (80008cc <USART1_IRQHandler+0x10>)
 80008c2:	f004 fd3d 	bl	8005340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200003b4 	.word	0x200003b4

080008d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d8:	4a14      	ldr	r2, [pc, #80]	; (800092c <_sbrk+0x5c>)
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <_sbrk+0x60>)
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008e4:	4b13      	ldr	r3, [pc, #76]	; (8000934 <_sbrk+0x64>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d102      	bne.n	80008f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <_sbrk+0x64>)
 80008ee:	4a12      	ldr	r2, [pc, #72]	; (8000938 <_sbrk+0x68>)
 80008f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <_sbrk+0x64>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4413      	add	r3, r2
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d207      	bcs.n	8000910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000900:	f00b fa7a 	bl	800bdf8 <__errno>
 8000904:	4603      	mov	r3, r0
 8000906:	220c      	movs	r2, #12
 8000908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800090a:	f04f 33ff 	mov.w	r3, #4294967295
 800090e:	e009      	b.n	8000924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <_sbrk+0x64>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000916:	4b07      	ldr	r3, [pc, #28]	; (8000934 <_sbrk+0x64>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	4a05      	ldr	r2, [pc, #20]	; (8000934 <_sbrk+0x64>)
 8000920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000922:	68fb      	ldr	r3, [r7, #12]
}
 8000924:	4618      	mov	r0, r3
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20020000 	.word	0x20020000
 8000930:	00000400 	.word	0x00000400
 8000934:	20000218 	.word	0x20000218
 8000938:	20002f98 	.word	0x20002f98

0800093c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <SystemInit+0x20>)
 8000942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000946:	4a05      	ldr	r2, [pc, #20]	; (800095c <SystemInit+0x20>)
 8000948:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800094c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000960:	480d      	ldr	r0, [pc, #52]	; (8000998 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000962:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000964:	f7ff ffea 	bl	800093c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000968:	480c      	ldr	r0, [pc, #48]	; (800099c <LoopForever+0x6>)
  ldr r1, =_edata
 800096a:	490d      	ldr	r1, [pc, #52]	; (80009a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800096c:	4a0d      	ldr	r2, [pc, #52]	; (80009a4 <LoopForever+0xe>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000970:	e002      	b.n	8000978 <LoopCopyDataInit>

08000972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000976:	3304      	adds	r3, #4

08000978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800097c:	d3f9      	bcc.n	8000972 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000980:	4c0a      	ldr	r4, [pc, #40]	; (80009ac <LoopForever+0x16>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000984:	e001      	b.n	800098a <LoopFillZerobss>

08000986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000988:	3204      	adds	r2, #4

0800098a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800098c:	d3fb      	bcc.n	8000986 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800098e:	f00b fa39 	bl	800be04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000992:	f00b f9e5 	bl	800bd60 <main>

08000996 <LoopForever>:

LoopForever:
  b LoopForever
 8000996:	e7fe      	b.n	8000996 <LoopForever>
  ldr   r0, =_estack
 8000998:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800099c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a0:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80009a4:	0800c820 	.word	0x0800c820
  ldr r2, =_sbss
 80009a8:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80009ac:	20002f94 	.word	0x20002f94

080009b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009b0:	e7fe      	b.n	80009b0 <ADC1_2_IRQHandler>

080009b2 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 80009b2:	b480      	push	{r7}
 80009b4:	b087      	sub	sp, #28
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	60f8      	str	r0, [r7, #12]
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80009be:	2301      	movs	r3, #1
 80009c0:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2200      	movs	r2, #0
 80009cc:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	687a      	ldr	r2, [r7, #4]
 80009d2:	609a      	str	r2, [r3, #8]
  p_node->size  = 1;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	2201      	movs	r2, #1
 80009d8:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	68ba      	ldr	r2, [r7, #8]
 80009de:	611a      	str	r2, [r3, #16]

  return ret;
 80009e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	371c      	adds	r7, #28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <qbufferWrite>:

  return ret;
}

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80009ee:	b480      	push	{r7}
 80009f0:	b08b      	sub	sp, #44	; 0x2c
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	60f8      	str	r0, [r7, #12]
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80009fa:	2301      	movs	r3, #1
 80009fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t next_in;


  for (int i=0; i<length; i++)
 8000a00:	2300      	movs	r3, #0
 8000a02:	623b      	str	r3, [r7, #32]
 8000a04:	e043      	b.n	8000a8e <qbufferWrite+0xa0>
  {
    next_in = (p_node->in + 1) % p_node->len;
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	68fa      	ldr	r2, [r7, #12]
 8000a0e:	6892      	ldr	r2, [r2, #8]
 8000a10:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a14:	fb01 f202 	mul.w	r2, r1, r2
 8000a18:	1a9b      	subs	r3, r3, r2
 8000a1a:	61bb      	str	r3, [r7, #24]

    if (next_in != p_node->out)
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	69ba      	ldr	r2, [r7, #24]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d02c      	beq.n	8000a80 <qbufferWrite+0x92>
    {
      if (p_node->p_buf != NULL && p_data != NULL)
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	691b      	ldr	r3, [r3, #16]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d024      	beq.n	8000a78 <qbufferWrite+0x8a>
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d021      	beq.n	8000a78 <qbufferWrite+0x8a>
      {
        uint8_t *p_buf;

        p_buf = &p_node->p_buf[p_node->in*p_node->size];
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	691a      	ldr	r2, [r3, #16]
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	68f9      	ldr	r1, [r7, #12]
 8000a3e:	68c9      	ldr	r1, [r1, #12]
 8000a40:	fb01 f303 	mul.w	r3, r1, r3
 8000a44:	4413      	add	r3, r2
 8000a46:	617b      	str	r3, [r7, #20]
        for (int i=0; i<p_node->size; i++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
 8000a4c:	e00a      	b.n	8000a64 <qbufferWrite+0x76>
        {
          p_buf[i] = p_data[i];
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	68ba      	ldr	r2, [r7, #8]
 8000a52:	441a      	add	r2, r3
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	6979      	ldr	r1, [r7, #20]
 8000a58:	440b      	add	r3, r1
 8000a5a:	7812      	ldrb	r2, [r2, #0]
 8000a5c:	701a      	strb	r2, [r3, #0]
        for (int i=0; i<p_node->size; i++)
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3301      	adds	r3, #1
 8000a62:	61fb      	str	r3, [r7, #28]
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	68da      	ldr	r2, [r3, #12]
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d8ef      	bhi.n	8000a4e <qbufferWrite+0x60>
        }
        p_data += p_node->size;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	68db      	ldr	r3, [r3, #12]
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	4413      	add	r3, r2
 8000a76:	60bb      	str	r3, [r7, #8]
      }
      p_node->in = next_in;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	69ba      	ldr	r2, [r7, #24]
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	e003      	b.n	8000a88 <qbufferWrite+0x9a>
    }
    else
    {
      ret = false;
 8000a80:	2300      	movs	r3, #0
 8000a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000a86:	e006      	b.n	8000a96 <qbufferWrite+0xa8>
  for (int i=0; i<length; i++)
 8000a88:	6a3b      	ldr	r3, [r7, #32]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	623b      	str	r3, [r7, #32]
 8000a8e:	6a3b      	ldr	r3, [r7, #32]
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d8b7      	bhi.n	8000a06 <qbufferWrite+0x18>
    }
  }

  return ret;
 8000a96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	372c      	adds	r7, #44	; 0x2c
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b089      	sub	sp, #36	; 0x24
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	60f8      	str	r0, [r7, #12]
 8000aae:	60b9      	str	r1, [r7, #8]
 8000ab0:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	77fb      	strb	r3, [r7, #31]


  for (int i=0; i<length; i++)
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61bb      	str	r3, [r7, #24]
 8000aba:	e041      	b.n	8000b40 <qbufferRead+0x9a>
  {
    if (p_node->p_buf != NULL && p_data != NULL)
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	691b      	ldr	r3, [r3, #16]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d024      	beq.n	8000b0e <qbufferRead+0x68>
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d021      	beq.n	8000b0e <qbufferRead+0x68>
    {
      uint8_t *p_buf;

      p_buf = &p_node->p_buf[p_node->out*p_node->size];
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	691a      	ldr	r2, [r3, #16]
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	68f9      	ldr	r1, [r7, #12]
 8000ad4:	68c9      	ldr	r1, [r1, #12]
 8000ad6:	fb01 f303 	mul.w	r3, r1, r3
 8000ada:	4413      	add	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
      for (int i=0; i<p_node->size; i++)
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	e00a      	b.n	8000afa <qbufferRead+0x54>
      {
        p_data[i] = p_buf[i];
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	441a      	add	r2, r3
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	68b9      	ldr	r1, [r7, #8]
 8000aee:	440b      	add	r3, r1
 8000af0:	7812      	ldrb	r2, [r2, #0]
 8000af2:	701a      	strb	r2, [r3, #0]
      for (int i=0; i<p_node->size; i++)
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	3301      	adds	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	68da      	ldr	r2, [r3, #12]
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d8ef      	bhi.n	8000ae4 <qbufferRead+0x3e>
      }

      p_data += p_node->size;
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	68ba      	ldr	r2, [r7, #8]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	60bb      	str	r3, [r7, #8]
    }

    if (p_node->out != p_node->in)
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	685a      	ldr	r2, [r3, #4]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d00c      	beq.n	8000b34 <qbufferRead+0x8e>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	68fa      	ldr	r2, [r7, #12]
 8000b22:	6892      	ldr	r2, [r2, #8]
 8000b24:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b28:	fb01 f202 	mul.w	r2, r1, r2
 8000b2c:	1a9a      	subs	r2, r3, r2
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	e002      	b.n	8000b3a <qbufferRead+0x94>
    }
    else
    {
      ret = false;
 8000b34:	2300      	movs	r3, #0
 8000b36:	77fb      	strb	r3, [r7, #31]
      break;
 8000b38:	e006      	b.n	8000b48 <qbufferRead+0xa2>
  for (int i=0; i<length; i++)
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	61bb      	str	r3, [r7, #24]
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d8b9      	bhi.n	8000abc <qbufferRead+0x16>
    }
  }

  return ret;
 8000b48:	7ffb      	ldrb	r3, [r7, #31]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3724      	adds	r7, #36	; 0x24
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <qbufferAvailable>:
  return &p_node->p_buf[p_node->out*p_node->size];
}


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b085      	sub	sp, #20
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	1ad3      	subs	r3, r2, r3
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	6892      	ldr	r2, [r2, #8]
 8000b6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b70:	fb01 f202 	mul.w	r2, r1, r2
 8000b74:	1a9b      	subs	r3, r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]

  return ret;
 8000b78:	68fb      	ldr	r3, [r7, #12]
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
	...

08000b88 <buttonInit>:
extern void buttonISR(void *arg);
extern bool buttonGetPin(uint8_t ch);


bool buttonInit(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
  bool ret = true;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	76fb      	strb	r3, [r7, #27]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba0:	4b40      	ldr	r3, [pc, #256]	; (8000ca4 <buttonInit+0x11c>)
 8000ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba4:	4a3f      	ldr	r2, [pc, #252]	; (8000ca4 <buttonInit+0x11c>)
 8000ba6:	f043 0304 	orr.w	r3, r3, #4
 8000baa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bac:	4b3d      	ldr	r3, [pc, #244]	; (8000ca4 <buttonInit+0x11c>)
 8000bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb0:	f003 0304 	and.w	r3, r3, #4
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	683b      	ldr	r3, [r7, #0]


  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]

  for(int i=0; i < BTN_MAX_CH; i++)
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8000bc4:	e011      	b.n	8000bea <buttonInit+0x62>
  {
    GPIO_InitStruct.Pin = button_pin[i].pin;
 8000bc6:	4938      	ldr	r1, [pc, #224]	; (8000ca8 <buttonInit+0x120>)
 8000bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bca:	4613      	mov	r3, r2
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	4413      	add	r3, r2
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	440b      	add	r3, r1
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(PC13_BLU_SW_GPIO_Port, &GPIO_InitStruct);
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4833      	ldr	r0, [pc, #204]	; (8000cac <buttonInit+0x124>)
 8000be0:	f001 f9b8 	bl	8001f54 <HAL_GPIO_Init>
  for(int i=0; i < BTN_MAX_CH; i++)
 8000be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be6:	3301      	adds	r3, #1
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
 8000bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	ddea      	ble.n	8000bc6 <buttonInit+0x3e>
  }

  for(int i=0; i < BTN_MAX_CH; i++)
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
 8000bf4:	e040      	b.n	8000c78 <buttonInit+0xf0>
  {
    button_tbl[i].pressed = 0;
 8000bf6:	4a2e      	ldr	r2, [pc, #184]	; (8000cb0 <buttonInit+0x128>)
 8000bf8:	6a3b      	ldr	r3, [r7, #32]
 8000bfa:	212c      	movs	r1, #44	; 0x2c
 8000bfc:	fb01 f303 	mul.w	r3, r1, r3
 8000c00:	4413      	add	r3, r2
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
    button_tbl[i].pressed_cnt = 0;
 8000c06:	4a2a      	ldr	r2, [pc, #168]	; (8000cb0 <buttonInit+0x128>)
 8000c08:	6a3b      	ldr	r3, [r7, #32]
 8000c0a:	212c      	movs	r1, #44	; 0x2c
 8000c0c:	fb01 f303 	mul.w	r3, r1, r3
 8000c10:	4413      	add	r3, r2
 8000c12:	3302      	adds	r3, #2
 8000c14:	2200      	movs	r2, #0
 8000c16:	801a      	strh	r2, [r3, #0]
    button_tbl[i].pressed_event = 0;
 8000c18:	4a25      	ldr	r2, [pc, #148]	; (8000cb0 <buttonInit+0x128>)
 8000c1a:	6a3b      	ldr	r3, [r7, #32]
 8000c1c:	212c      	movs	r1, #44	; 0x2c
 8000c1e:	fb01 f303 	mul.w	r3, r1, r3
 8000c22:	4413      	add	r3, r2
 8000c24:	3301      	adds	r3, #1
 8000c26:	2200      	movs	r2, #0
 8000c28:	701a      	strb	r2, [r3, #0]

    button_tbl[i].released = 0;
 8000c2a:	4a21      	ldr	r2, [pc, #132]	; (8000cb0 <buttonInit+0x128>)
 8000c2c:	6a3b      	ldr	r3, [r7, #32]
 8000c2e:	212c      	movs	r1, #44	; 0x2c
 8000c30:	fb01 f303 	mul.w	r3, r1, r3
 8000c34:	4413      	add	r3, r2
 8000c36:	330c      	adds	r3, #12
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
    button_tbl[i].released_event = 0;
 8000c3c:	4a1c      	ldr	r2, [pc, #112]	; (8000cb0 <buttonInit+0x128>)
 8000c3e:	6a3b      	ldr	r3, [r7, #32]
 8000c40:	212c      	movs	r1, #44	; 0x2c
 8000c42:	fb01 f303 	mul.w	r3, r1, r3
 8000c46:	4413      	add	r3, r2
 8000c48:	330d      	adds	r3, #13
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]

    button_tbl[i].repeat_cnt = 0;
 8000c4e:	4a18      	ldr	r2, [pc, #96]	; (8000cb0 <buttonInit+0x128>)
 8000c50:	6a3b      	ldr	r3, [r7, #32]
 8000c52:	212c      	movs	r1, #44	; 0x2c
 8000c54:	fb01 f303 	mul.w	r3, r1, r3
 8000c58:	4413      	add	r3, r2
 8000c5a:	331c      	adds	r3, #28
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
    button_tbl[i].repeat_update = 0;
 8000c60:	4a13      	ldr	r2, [pc, #76]	; (8000cb0 <buttonInit+0x128>)
 8000c62:	6a3b      	ldr	r3, [r7, #32]
 8000c64:	212c      	movs	r1, #44	; 0x2c
 8000c66:	fb01 f303 	mul.w	r3, r1, r3
 8000c6a:	4413      	add	r3, r2
 8000c6c:	3318      	adds	r3, #24
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]
  for(int i=0; i < BTN_MAX_CH; i++)
 8000c72:	6a3b      	ldr	r3, [r7, #32]
 8000c74:	3301      	adds	r3, #1
 8000c76:	623b      	str	r3, [r7, #32]
 8000c78:	6a3b      	ldr	r3, [r7, #32]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	ddbb      	ble.n	8000bf6 <buttonInit+0x6e>
  }

  for (int i=0; i<BTN_EVENT_MAX; i++)
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
 8000c82:	e007      	b.n	8000c94 <buttonInit+0x10c>
  {
   event_tbl[i] = NULL;
 8000c84:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <buttonInit+0x12c>)
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int i=0; i<BTN_EVENT_MAX; i++)
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3301      	adds	r3, #1
 8000c92:	61fb      	str	r3, [r7, #28]
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	2b07      	cmp	r3, #7
 8000c98:	ddf4      	ble.n	8000c84 <buttonInit+0xfc>
  }
  return ret;
 8000c9a:	7efb      	ldrb	r3, [r7, #27]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3728      	adds	r7, #40	; 0x28
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	0800c7a0 	.word	0x0800c7a0
 8000cac:	48000800 	.word	0x48000800
 8000cb0:	2000021c 	.word	0x2000021c
 8000cb4:	20000248 	.word	0x20000248

08000cb8 <cdcInit>:


static bool is_init = false;

bool cdcInit(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
  bool ret = true;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	71fb      	strb	r3, [r7, #7]


  ret = cdcIfInit();
 8000cc2:	f00a fc1b 	bl	800b4fc <cdcIfInit>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	bf14      	ite	ne
 8000ccc:	2301      	movne	r3, #1
 8000cce:	2300      	moveq	r3, #0
 8000cd0:	71fb      	strb	r3, [r7, #7]

  is_init = ret;
 8000cd2:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <cdcInit+0x2c>)
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	7013      	strb	r3, [r2, #0]

  return ret;
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000268 	.word	0x20000268

08000ce8 <flashInit>:


static bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length);

bool flashInit(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
  bool ret = true;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	71fb      	strb	r3, [r7, #7]

  return true;
 8000cf2:	2301      	movs	r3, #1
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	; 0x30
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  bool ret = false;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  int32_t start_sector = -1;
 8000d10:	f04f 33ff 	mov.w	r3, #4294967295
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
  int32_t end_sector = -1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 8000d1c:	f000 ff42 	bl	8001ba4 <HAL_FLASH_Unlock>

  /* Clear OPTVERR bit set on virgin samples */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000d20:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <flashErase+0xa4>)
 8000d22:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d26:	611a      	str	r2, [r3, #16]

  for(int i=0; i< FLASH_MAX_SECTOR; i++)
 8000d28:	2300      	movs	r3, #0
 8000d2a:	623b      	str	r3, [r7, #32]
 8000d2c:	e013      	b.n	8000d56 <flashErase+0x56>
  {
    if(flashInSector(i, addr, length) == true)
 8000d2e:	6a3b      	ldr	r3, [r7, #32]
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	683a      	ldr	r2, [r7, #0]
 8000d34:	6879      	ldr	r1, [r7, #4]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f000 f836 	bl	8000da8 <flashInSector>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d006      	beq.n	8000d50 <flashErase+0x50>
    {
      // - 일때 처음 초기화 하고 이후 초기화 안시킴
      if(start_sector < 0)
 8000d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	da01      	bge.n	8000d4c <flashErase+0x4c>
      {
        start_sector = i;
 8000d48:	6a3b      	ldr	r3, [r7, #32]
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      //  계속 for 문 돌면서 초기화 end_sector
      end_sector = i;
 8000d4c:	6a3b      	ldr	r3, [r7, #32]
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  for(int i=0; i< FLASH_MAX_SECTOR; i++)
 8000d50:	6a3b      	ldr	r3, [r7, #32]
 8000d52:	3301      	adds	r3, #1
 8000d54:	623b      	str	r3, [r7, #32]
 8000d56:	6a3b      	ldr	r3, [r7, #32]
 8000d58:	2bff      	cmp	r3, #255	; 0xff
 8000d5a:	dde8      	ble.n	8000d2e <flashErase+0x2e>
    }
  }

  if(start_sector >= 0)
 8000d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	db1a      	blt.n	8000d98 <flashErase+0x98>
    HAL_StatusTypeDef status;
    // TypeErase : Mass or Page Erase ,Banks :   Page/PageAddress:  Nbpages:
    FLASH_EraseInitTypeDef EraseInit;
    uint32_t SectorError;
    //@ref FLASH_Type_Erase
    EraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
    //@ref FLASH_Banks  - FLASH_BANK_BOTH  , 1
    EraseInit.Banks = FLASH_BANK_BOTH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	613b      	str	r3, [r7, #16]
    EraseInit.Page = start_sector;    // sector 번호 OR sector address , 확인해야댐 (페이지 번호를 주거나, 지우는 주소를 주거나)
 8000d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d6c:	617b      	str	r3, [r7, #20]
    EraseInit.NbPages = (end_sector - start_sector) + 1;     // 페이지 개수 (시작 페이지 부터 몇개의 페이지를 지울 것인가)
 8000d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	3301      	adds	r3, #1
 8000d76:	61bb      	str	r3, [r7, #24]

    status = HAL_FLASHEx_Erase(&EraseInit, &SectorError);
 8000d78:	f107 0208 	add.w	r2, r7, #8
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	4611      	mov	r1, r2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 ff84 	bl	8001c90 <HAL_FLASHEx_Erase>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	77fb      	strb	r3, [r7, #31]
    if(status == HAL_OK)
 8000d8c:	7ffb      	ldrb	r3, [r7, #31]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d102      	bne.n	8000d98 <flashErase+0x98>
    {
     ret = true;
 8000d92:	2301      	movs	r3, #1
 8000d94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  return ret;
 8000d98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3730      	adds	r7, #48	; 0x30
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40022000 	.word	0x40022000

08000da8 <flashInSector>:

  return ret;
}

bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b08b      	sub	sp, #44	; 0x2c
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	81fb      	strh	r3, [r7, #14]
  bool ret = false;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t flash_start;
  uint32_t flash_end;

  //#define FLASH_BASE            (0x08000000UL) /*!< FLASH (up to 512 kB) base address */

  sector_start = FLASH_BASE + (sector_num * FLASH_SECTOR_SIZE);
 8000dbc:	89fb      	ldrh	r3, [r7, #14]
 8000dbe:	02db      	lsls	r3, r3, #11
 8000dc0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000dc4:	623b      	str	r3, [r7, #32]
  sector_end   = sector_start + FLASH_SECTOR_SIZE - 1;
 8000dc6:	6a3b      	ldr	r3, [r7, #32]
 8000dc8:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8000dcc:	61fb      	str	r3, [r7, #28]
  flash_start  = addr;
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	61bb      	str	r3, [r7, #24]
  flash_end    = addr + length - 1;
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	617b      	str	r3, [r7, #20]


  if (sector_start >= flash_start && sector_start <= flash_end)
 8000ddc:	6a3a      	ldr	r2, [r7, #32]
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d306      	bcc.n	8000df2 <flashInSector+0x4a>
 8000de4:	6a3a      	ldr	r2, [r7, #32]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d802      	bhi.n	8000df2 <flashInSector+0x4a>
  {
    ret = true;
 8000dec:	2301      	movs	r3, #1
 8000dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 8000df2:	69fa      	ldr	r2, [r7, #28]
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d306      	bcc.n	8000e08 <flashInSector+0x60>
 8000dfa:	69fa      	ldr	r2, [r7, #28]
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d802      	bhi.n	8000e08 <flashInSector+0x60>
  {
    ret = true;
 8000e02:	2301      	movs	r3, #1
 8000e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	6a3b      	ldr	r3, [r7, #32]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d306      	bcc.n	8000e1e <flashInSector+0x76>
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d802      	bhi.n	8000e1e <flashInSector+0x76>
  {
    ret = true;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	6a3b      	ldr	r3, [r7, #32]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d306      	bcc.n	8000e34 <flashInSector+0x8c>
 8000e26:	697a      	ldr	r2, [r7, #20]
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d802      	bhi.n	8000e34 <flashInSector+0x8c>
  {
    ret = true;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ret;
 8000e34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	372c      	adds	r7, #44	; 0x2c
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <ledInit>:




bool ledInit(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 8000e4a:	f107 0308 	add.w	r3, r7, #8
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
 8000e58:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <ledInit+0x80>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5e:	4a19      	ldr	r2, [pc, #100]	; (8000ec4 <ledInit+0x80>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e66:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <ledInit+0x80>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000e72:	2301      	movs	r3, #1
 8000e74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]

  for (int i=0; i<LED_MAX_CH; i++)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
 8000e82:	e017      	b.n	8000eb4 <ledInit+0x70>
  {
    GPIO_InitStructure.Pin = led_tbl[i].pin;
 8000e84:	4a10      	ldr	r2, [pc, #64]	; (8000ec8 <ledInit+0x84>)
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	4413      	add	r3, r2
 8000e8c:	889b      	ldrh	r3, [r3, #4]
 8000e8e:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStructure);
 8000e90:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <ledInit+0x84>)
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000e98:	f107 0208 	add.w	r2, r7, #8
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f001 f858 	bl	8001f54 <HAL_GPIO_Init>

    ledOff(i);
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f80f 	bl	8000ecc <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	61fb      	str	r3, [r7, #28]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	dde4      	ble.n	8000e84 <ledInit+0x40>
  }
  return true;
 8000eba:	2301      	movs	r3, #1
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3720      	adds	r7, #32
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	0800c7ac 	.word	0x0800c7ac

08000ecc <ledOff>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d10d      	bne.n	8000ef8 <ledOff+0x2c>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	4a08      	ldr	r2, [pc, #32]	; (8000f00 <ledOff+0x34>)
 8000ee0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	4a06      	ldr	r2, [pc, #24]	; (8000f00 <ledOff+0x34>)
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	4413      	add	r3, r2
 8000eec:	889b      	ldrh	r3, [r3, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f001 f9b1 	bl	8002258 <HAL_GPIO_WritePin>
 8000ef6:	e000      	b.n	8000efa <ledOff+0x2e>
  if (ch >= LED_MAX_CH) return;
 8000ef8:	bf00      	nop
}
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	0800c7ac 	.word	0x0800c7ac

08000f04 <gpio_out_toggle>:
  gpio->ODR &= ~(GPIO_Pin);
}

//
void gpio_out_toggle(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	807b      	strh	r3, [r7, #2]
  GPIO_TypeDef *gpio = (void*)GPIOA_BASE;
 8000f10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000f14:	60fb      	str	r3, [r7, #12]
  gpio->ODR ^= GPIO_Pin;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	695a      	ldr	r2, [r3, #20]
 8000f1a:	887b      	ldrh	r3, [r7, #2]
 8000f1c:	405a      	eors	r2, r3
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	615a      	str	r2, [r3, #20]
}
 8000f22:	bf00      	nop
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <resetInit>:
  }
}


bool resetInit(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
  bool ret = true;
 8000f36:	2301      	movs	r3, #1
 8000f38:	71bb      	strb	r3, [r7, #6]
  bool is_debug = false;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	71fb      	strb	r3, [r7, #7]


  // 만약 디버거가 연결된 경우

  if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk)
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <resetInit+0x80>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <resetInit+0x1e>
  {
    is_debug = true;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	71fb      	strb	r3, [r7, #7]
  }

  // 만약 Reset 핀이 눌렸다면
  // 리셋 상태 레지스터 자기자신 + 1 을 준다.
  // 500ms 안에 여러번 누른경우 reset_count 값에 저장된다.
  if (RCC->CSR & (1<<26) && is_debug != true)
 8000f4e:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <resetInit+0x84>)
 8000f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d01f      	beq.n	8000f9c <resetInit+0x6c>
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	f083 0301 	eor.w	r3, r3, #1
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d019      	beq.n	8000f9c <resetInit+0x6c>
  if(RCC->CSR & (1<<26))
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <resetInit+0x84>)
 8000f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d012      	beq.n	8000f9c <resetInit+0x6c>
  {
    rtcBackupRegWrite(RESET_REG_COUNT, rtcBackupRegRead(RESET_REG_COUNT) + 1);
 8000f76:	2001      	movs	r0, #1
 8000f78:	f000 f8a2 	bl	80010c0 <rtcBackupRegRead>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	3301      	adds	r3, #1
 8000f80:	4619      	mov	r1, r3
 8000f82:	2001      	movs	r0, #1
 8000f84:	f000 f8ac 	bl	80010e0 <rtcBackupRegWrite>
    delay(500);
 8000f88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f8c:	f7ff fbca 	bl	8000724 <delay>
    reset_count = rtcBackupRegRead(RESET_REG_COUNT);
 8000f90:	2001      	movs	r0, #1
 8000f92:	f000 f895 	bl	80010c0 <rtcBackupRegRead>
 8000f96:	4603      	mov	r3, r0
 8000f98:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <resetInit+0x88>)
 8000f9a:	6013      	str	r3, [r2, #0]
  }
  //clear 다시 0으로
  rtcBackupRegWrite(RESET_REG_COUNT, 0);
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f000 f89e 	bl	80010e0 <rtcBackupRegWrite>

  return ret;
 8000fa4:	79bb      	ldrb	r3, [r7, #6]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	e000edf0 	.word	0xe000edf0
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	2000026c 	.word	0x2000026c

08000fbc <resetGetCount>:

uint32_t resetGetCount(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return reset_count;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <resetGetCount+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	2000026c 	.word	0x2000026c

08000fd4 <resetToSystemBoot>:
    run_timeout_count = timeout;
  }
}

void resetToSystemBoot(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
  void (*SysMemBootJump)(void);
  volatile uint32_t addr = 0x1FFF0000; // System Boot Loader 주소
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <resetToSystemBoot+0x7c>)
 8000fdc:	603b      	str	r3, [r7, #0]


  HAL_RCC_DeInit();
 8000fde:	f002 ff3b 	bl	8003e58 <HAL_RCC_DeInit>

  SysTick->CTRL = 0;
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <resetToSystemBoot+0x80>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <resetToSystemBoot+0x80>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	605a      	str	r2, [r3, #4]
  SysTick->VAL  = 0;
 8000fee:	4b19      	ldr	r3, [pc, #100]	; (8001054 <resetToSystemBoot+0x80>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]

  // 인터럽트
  for (int i=0;i<8;i++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	e016      	b.n	8001028 <resetToSystemBoot+0x54>
  {
    NVIC->ICER[i]=0xFFFFFFFF;
 8000ffa:	4a17      	ldr	r2, [pc, #92]	; (8001058 <resetToSystemBoot+0x84>)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	3320      	adds	r3, #32
 8001000:	f04f 31ff 	mov.w	r1, #4294967295
 8001004:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NVIC->ICPR[i]=0xFFFFFFFF;
 8001008:	4a13      	ldr	r2, [pc, #76]	; (8001058 <resetToSystemBoot+0x84>)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	3360      	adds	r3, #96	; 0x60
 800100e:	f04f 31ff 	mov.w	r1, #4294967295
 8001012:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001016:	f3bf 8f4f 	dsb	sy
}
 800101a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800101c:	f3bf 8f6f 	isb	sy
}
 8001020:	bf00      	nop
  for (int i=0;i<8;i++)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	3301      	adds	r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2b07      	cmp	r3, #7
 800102c:	dde5      	ble.n	8000ffa <resetToSystemBoot+0x26>
    __DSB();
    __ISB();
  }

  SysMemBootJump = (void (*)(void)) (*((uint32_t *)(addr + 4)));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	3304      	adds	r3, #4
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	60bb      	str	r3, [r7, #8]

  // Main Stack 주소 셋팅
  __set_MSP(*(uint32_t *)addr);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f383 8808 	msr	MSP, r3
}
 8001042:	bf00      	nop
  // Jump
  SysMemBootJump();
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	4798      	blx	r3
}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	1fff0000 	.word	0x1fff0000
 8001054:	e000e010 	.word	0xe000e010
 8001058:	e000e100 	.word	0xe000e100

0800105c <rtcInit>:
static RTC_HandleTypeDef hrtc;



bool rtcInit(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
  bool ret = true;
 8001062:	2301      	movs	r3, #1
 8001064:	71fb      	strb	r3, [r7, #7]


  hrtc.Instance = RTC;
 8001066:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <rtcInit+0x5c>)
 8001068:	4a14      	ldr	r2, [pc, #80]	; (80010bc <rtcInit+0x60>)
 800106a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800106c:	4b12      	ldr	r3, [pc, #72]	; (80010b8 <rtcInit+0x5c>)
 800106e:	2200      	movs	r2, #0
 8001070:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <rtcInit+0x5c>)
 8001074:	227f      	movs	r2, #127	; 0x7f
 8001076:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001078:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <rtcInit+0x5c>)
 800107a:	22ff      	movs	r2, #255	; 0xff
 800107c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <rtcInit+0x5c>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <rtcInit+0x5c>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <rtcInit+0x5c>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001090:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <rtcInit+0x5c>)
 8001092:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001096:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <rtcInit+0x5c>)
 800109a:	2200      	movs	r2, #0
 800109c:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800109e:	4806      	ldr	r0, [pc, #24]	; (80010b8 <rtcInit+0x5c>)
 80010a0:	f003 fed8 	bl	8004e54 <HAL_RTC_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <rtcInit+0x52>
  {
    return false;
 80010aa:	2300      	movs	r3, #0
 80010ac:	e000      	b.n	80010b0 <rtcInit+0x54>
  }

  return ret;
 80010ae:	79fb      	ldrb	r3, [r7, #7]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000270 	.word	0x20000270
 80010bc:	40002800 	.word	0x40002800

080010c0 <rtcBackupRegRead>:

uint32_t rtcBackupRegRead(uint32_t index)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  return HAL_RTCEx_BKUPRead(&hrtc, index);
 80010c8:	6879      	ldr	r1, [r7, #4]
 80010ca:	4804      	ldr	r0, [pc, #16]	; (80010dc <rtcBackupRegRead+0x1c>)
 80010cc:	f003 fff8 	bl	80050c0 <HAL_RTCEx_BKUPRead>
 80010d0:	4603      	mov	r3, r0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000270 	.word	0x20000270

080010e0 <rtcBackupRegWrite>:

void rtcBackupRegWrite(uint32_t index, uint32_t data)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&hrtc, index, data);
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	6879      	ldr	r1, [r7, #4]
 80010ee:	4803      	ldr	r0, [pc, #12]	; (80010fc <rtcBackupRegWrite+0x1c>)
 80010f0:	f003 ffce 	bl	8005090 <HAL_RTCEx_BKUPWrite>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	20000270 	.word	0x20000270

08001100 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b098      	sub	sp, #96	; 0x60
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2254      	movs	r2, #84	; 0x54
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f00a fe69 	bl	800bde8 <memset>
  if(rtcHandle->Instance==RTC)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a15      	ldr	r2, [pc, #84]	; (8001170 <HAL_RTC_MspInit+0x70>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d123      	bne.n	8001168 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001120:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001124:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001126:	f44f 7300 	mov.w	r3, #512	; 0x200
 800112a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	4618      	mov	r0, r3
 8001132:	f003 fc41 	bl	80049b8 <HAL_RCCEx_PeriphCLKConfig>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800113c:	f7ff fb5e 	bl	80007fc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <HAL_RTC_MspInit+0x74>)
 8001142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001146:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <HAL_RTC_MspInit+0x74>)
 8001148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800114c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <HAL_RTC_MspInit+0x74>)
 8001152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001154:	4a07      	ldr	r2, [pc, #28]	; (8001174 <HAL_RTC_MspInit+0x74>)
 8001156:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800115a:	6593      	str	r3, [r2, #88]	; 0x58
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <HAL_RTC_MspInit+0x74>)
 800115e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001168:	bf00      	nop
 800116a:	3760      	adds	r7, #96	; 0x60
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40002800 	.word	0x40002800
 8001174:	40021000 	.word	0x40021000

08001178 <uartInit>:
UART_HandleTypeDef huart1;



bool uartInit(void)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
  for(int i = 0; i <UART_MAX_CH; i++)
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	e007      	b.n	8001194 <uartInit+0x1c>
  {
    is_open[i] = false;
 8001184:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <uartInit+0x30>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i <UART_MAX_CH; i++)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3301      	adds	r3, #1
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	ddf4      	ble.n	8001184 <uartInit+0xc>
  }

  return true;
 800119a:	2301      	movs	r3, #1
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	20000298 	.word	0x20000298

080011ac <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	6039      	str	r1, [r7, #0]
 80011b6:	71fb      	strb	r3, [r7, #7]
  bool ret =false;
 80011b8:	2300      	movs	r3, #0
 80011ba:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d176      	bne.n	80012b0 <uartOpen+0x104>
  {
    case _DEF_UART1:
      huart1.Instance = USART1;
 80011c2:	4b3e      	ldr	r3, [pc, #248]	; (80012bc <uartOpen+0x110>)
 80011c4:	4a3e      	ldr	r2, [pc, #248]	; (80012c0 <uartOpen+0x114>)
 80011c6:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate = baud;
 80011c8:	4a3c      	ldr	r2, [pc, #240]	; (80012bc <uartOpen+0x110>)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	6053      	str	r3, [r2, #4]
      huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011ce:	4b3b      	ldr	r3, [pc, #236]	; (80012bc <uartOpen+0x110>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24
      huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d4:	4b39      	ldr	r3, [pc, #228]	; (80012bc <uartOpen+0x110>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
      huart1.Init.Mode = UART_MODE_TX_RX;
 80011da:	4b38      	ldr	r3, [pc, #224]	; (80012bc <uartOpen+0x110>)
 80011dc:	220c      	movs	r2, #12
 80011de:	615a      	str	r2, [r3, #20]
      huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e0:	4b36      	ldr	r3, [pc, #216]	; (80012bc <uartOpen+0x110>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]
      huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011e6:	4b35      	ldr	r3, [pc, #212]	; (80012bc <uartOpen+0x110>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
      huart1.Init.Parity = UART_PARITY_NONE;
 80011ec:	4b33      	ldr	r3, [pc, #204]	; (80012bc <uartOpen+0x110>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
      huart1.Init.StopBits = UART_STOPBITS_1;
 80011f2:	4b32      	ldr	r3, [pc, #200]	; (80012bc <uartOpen+0x110>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
      huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011f8:	4b30      	ldr	r3, [pc, #192]	; (80012bc <uartOpen+0x110>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
      huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011fe:	4b2f      	ldr	r3, [pc, #188]	; (80012bc <uartOpen+0x110>)
 8001200:	2200      	movs	r2, #0
 8001202:	629a      	str	r2, [r3, #40]	; 0x28
      qbufferCreate(&qbuffer[ch],&rx_buf[ch], 256); // 수신 버퍼 생성
 8001204:	79fa      	ldrb	r2, [r7, #7]
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4a2d      	ldr	r2, [pc, #180]	; (80012c4 <uartOpen+0x118>)
 8001210:	1898      	adds	r0, r3, r2
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	4a2c      	ldr	r2, [pc, #176]	; (80012c8 <uartOpen+0x11c>)
 8001216:	4413      	add	r3, r2
 8001218:	f44f 7280 	mov.w	r2, #256	; 0x100
 800121c:	4619      	mov	r1, r3
 800121e:	f7ff fbc8 	bl	80009b2 <qbufferCreate>
      if (HAL_UART_Init(&huart1) != HAL_OK)
 8001222:	4826      	ldr	r0, [pc, #152]	; (80012bc <uartOpen+0x110>)
 8001224:	f003 ff62 	bl	80050ec <HAL_UART_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d002      	beq.n	8001234 <uartOpen+0x88>
      {
        ret = false;
 800122e:	2300      	movs	r3, #0
 8001230:	73fb      	strb	r3, [r7, #15]
 8001232:	e016      	b.n	8001262 <uartOpen+0xb6>
      }
      else
      {
        ret = true;
 8001234:	2301      	movs	r3, #1
 8001236:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 8001238:	79fb      	ldrb	r3, [r7, #7]
 800123a:	4a24      	ldr	r2, [pc, #144]	; (80012cc <uartOpen+0x120>)
 800123c:	2101      	movs	r1, #1
 800123e:	54d1      	strb	r1, [r2, r3]
        // 수신용 데이터 버퍼 (rx_data)에 size 만큼 받아서 HAL_UART_RxCpltCallback 함수 호출
        if(HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data[ch], 1) != HAL_OK)
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	4a23      	ldr	r2, [pc, #140]	; (80012d0 <uartOpen+0x124>)
 8001244:	4413      	add	r3, r2
 8001246:	2201      	movs	r2, #1
 8001248:	4619      	mov	r1, r3
 800124a:	481c      	ldr	r0, [pc, #112]	; (80012bc <uartOpen+0x110>)
 800124c:	f004 f82c 	bl	80052a8 <HAL_UART_Receive_IT>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d005      	beq.n	8001262 <uartOpen+0xb6>
        {
         ret = false;
 8001256:	2300      	movs	r3, #0
 8001258:	73fb      	strb	r3, [r7, #15]
         is_open[ch] = false;
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	4a1b      	ldr	r2, [pc, #108]	; (80012cc <uartOpen+0x120>)
 800125e:	2100      	movs	r1, #0
 8001260:	54d1      	strb	r1, [r2, r3]
        }
      }
      if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001262:	2100      	movs	r1, #0
 8001264:	4815      	ldr	r0, [pc, #84]	; (80012bc <uartOpen+0x110>)
 8001266:	f005 ff98 	bl	800719a <HAL_UARTEx_SetTxFifoThreshold>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d005      	beq.n	800127c <uartOpen+0xd0>
      {
        ret = false;
 8001270:	2300      	movs	r3, #0
 8001272:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = false;
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	4a15      	ldr	r2, [pc, #84]	; (80012cc <uartOpen+0x120>)
 8001278:	2100      	movs	r1, #0
 800127a:	54d1      	strb	r1, [r2, r3]
      }
      if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800127c:	2100      	movs	r1, #0
 800127e:	480f      	ldr	r0, [pc, #60]	; (80012bc <uartOpen+0x110>)
 8001280:	f005 ffc9 	bl	8007216 <HAL_UARTEx_SetRxFifoThreshold>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d005      	beq.n	8001296 <uartOpen+0xea>
      {
        ret = false;
 800128a:	2300      	movs	r3, #0
 800128c:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = false;
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <uartOpen+0x120>)
 8001292:	2100      	movs	r1, #0
 8001294:	54d1      	strb	r1, [r2, r3]
      }
      if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001296:	4809      	ldr	r0, [pc, #36]	; (80012bc <uartOpen+0x110>)
 8001298:	f005 ff46 	bl	8007128 <HAL_UARTEx_DisableFifoMode>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d005      	beq.n	80012ae <uartOpen+0x102>
      {
        ret = false;
 80012a2:	2300      	movs	r3, #0
 80012a4:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = false;
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	4a08      	ldr	r2, [pc, #32]	; (80012cc <uartOpen+0x120>)
 80012aa:	2100      	movs	r1, #0
 80012ac:	54d1      	strb	r1, [r2, r3]
      }
      break;
 80012ae:	bf00      	nop
  }


  return ret;
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200003b4 	.word	0x200003b4
 80012c0:	40013800 	.word	0x40013800
 80012c4:	2000029c 	.word	0x2000029c
 80012c8:	200002b0 	.word	0x200002b0
 80012cc:	20000298 	.word	0x20000298
 80012d0:	200003b0 	.word	0x200003b0

080012d4 <uartAvailable>:
{
  return true;
}

uint32_t uartAvailable(uint8_t ch)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]

  switch(ch)
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d10b      	bne.n	8001300 <uartAvailable+0x2c>
  {
    case _DEF_UART1:
      ret = qbufferAvailable(&qbuffer[ch]);
 80012e8:	79fa      	ldrb	r2, [r7, #7]
 80012ea:	4613      	mov	r3, r2
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4a06      	ldr	r2, [pc, #24]	; (800130c <uartAvailable+0x38>)
 80012f4:	4413      	add	r3, r2
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fc2d 	bl	8000b56 <qbufferAvailable>
 80012fc:	60f8      	str	r0, [r7, #12]
      break;
 80012fe:	bf00      	nop
  }

  return ret;
 8001300:	68fb      	ldr	r3, [r7, #12]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2000029c 	.word	0x2000029c

08001310 <uartRead>:

  return true;
}

uint8_t uartRead(uint8_t ch)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	73fb      	strb	r3, [r7, #15]
  switch(ch)
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d10d      	bne.n	8001340 <uartRead+0x30>
  {
    case _DEF_UART1:
      qbufferRead(&qbuffer[ch],&ret,1);
 8001324:	79fa      	ldrb	r2, [r7, #7]
 8001326:	4613      	mov	r3, r2
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	4413      	add	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4a07      	ldr	r2, [pc, #28]	; (800134c <uartRead+0x3c>)
 8001330:	4413      	add	r3, r2
 8001332:	f107 010f 	add.w	r1, r7, #15
 8001336:	2201      	movs	r2, #1
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fbb4 	bl	8000aa6 <qbufferRead>
      break;
 800133e:	bf00      	nop
  }

  return ret;
 8001340:	7bfb      	ldrb	r3, [r7, #15]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	2000029c 	.word	0x2000029c

08001350 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
 800135c:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;
  switch(ch)
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d10e      	bne.n	8001386 <uartWrite+0x36>
  {
    case _DEF_UART1:
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	b29a      	uxth	r2, r3
 800136c:	2364      	movs	r3, #100	; 0x64
 800136e:	68b9      	ldr	r1, [r7, #8]
 8001370:	4807      	ldr	r0, [pc, #28]	; (8001390 <uartWrite+0x40>)
 8001372:	f003 ff0b 	bl	800518c <HAL_UART_Transmit>
 8001376:	4603      	mov	r3, r0
 8001378:	74fb      	strb	r3, [r7, #19]
      if(status == HAL_OK)
 800137a:	7cfb      	ldrb	r3, [r7, #19]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <uartWrite+0x34>
      {
        ret = length;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	617b      	str	r3, [r7, #20]
      }
      break;
 8001384:	bf00      	nop
  }

  return ret;
 8001386:	697b      	ldr	r3, [r7, #20]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	200003b4 	.word	0x200003b4

08001394 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 8001394:	b40e      	push	{r1, r2, r3}
 8001396:	b580      	push	{r7, lr}
 8001398:	b0c7      	sub	sp, #284	; 0x11c
 800139a:	af00      	add	r7, sp, #0
 800139c:	4602      	mov	r2, r0
 800139e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80013a2:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80013a6:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 80013a8:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80013ac:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80013b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013b4:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 80013b6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80013ba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013be:	f107 0010 	add.w	r0, r7, #16
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80013c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013cc:	f00a fcfe 	bl	800bdcc <vsniprintf>
 80013d0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 80013d4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80013d8:	f107 0110 	add.w	r1, r7, #16
 80013dc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80013e0:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ffb2 	bl	8001350 <uartWrite>
 80013ec:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 80013f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80013fa:	46bd      	mov	sp, r7
 80013fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001400:	b003      	add	sp, #12
 8001402:	4770      	bx	lr

08001404 <HAL_UART_ErrorCallback>:

  return ret;
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef* huart)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
  {

  }
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a08      	ldr	r2, [pc, #32]	; (8001448 <HAL_UART_RxCpltCallback+0x30>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d109      	bne.n	800143e <HAL_UART_RxCpltCallback+0x26>
  {
    // 빠르게 송신시 1 바이트 사용시 인터럽트가 많이 걸려서 처리가 늦어져 overrun (덮어쓰기 에러) , 데이터 손실 에러 발생 가능
    // 고속의 송수신 - DMA 방식을 사용
    qbufferWrite(&qbuffer[_DEF_UART1], &rx_data[_DEF_UART1], 1);
 800142a:	2201      	movs	r2, #1
 800142c:	4907      	ldr	r1, [pc, #28]	; (800144c <HAL_UART_RxCpltCallback+0x34>)
 800142e:	4808      	ldr	r0, [pc, #32]	; (8001450 <HAL_UART_RxCpltCallback+0x38>)
 8001430:	f7ff fadd 	bl	80009ee <qbufferWrite>

    HAL_UART_Receive_IT(&huart1, (uint8_t*)&rx_data[_DEF_UART1], 1);
 8001434:	2201      	movs	r2, #1
 8001436:	4905      	ldr	r1, [pc, #20]	; (800144c <HAL_UART_RxCpltCallback+0x34>)
 8001438:	4806      	ldr	r0, [pc, #24]	; (8001454 <HAL_UART_RxCpltCallback+0x3c>)
 800143a:	f003 ff35 	bl	80052a8 <HAL_UART_Receive_IT>
  }
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40013800 	.word	0x40013800
 800144c:	200003b0 	.word	0x200003b0
 8001450:	2000029c 	.word	0x2000029c
 8001454:	200003b4 	.word	0x200003b4

08001458 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b09e      	sub	sp, #120	; 0x78
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001470:	f107 0310 	add.w	r3, r7, #16
 8001474:	2254      	movs	r2, #84	; 0x54
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f00a fcb5 	bl	800bde8 <memset>
  if(uartHandle->Instance==USART1)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a22      	ldr	r2, [pc, #136]	; (800150c <HAL_UART_MspInit+0xb4>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d13d      	bne.n	8001504 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001488:	2301      	movs	r3, #1
 800148a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001490:	f107 0310 	add.w	r3, r7, #16
 8001494:	4618      	mov	r0, r3
 8001496:	f003 fa8f 	bl	80049b8 <HAL_RCCEx_PeriphCLKConfig>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014a0:	f7ff f9ac 	bl	80007fc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014a4:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <HAL_UART_MspInit+0xb8>)
 80014a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a8:	4a19      	ldr	r2, [pc, #100]	; (8001510 <HAL_UART_MspInit+0xb8>)
 80014aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ae:	6613      	str	r3, [r2, #96]	; 0x60
 80014b0:	4b17      	ldr	r3, [pc, #92]	; (8001510 <HAL_UART_MspInit+0xb8>)
 80014b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <HAL_UART_MspInit+0xb8>)
 80014be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c0:	4a13      	ldr	r2, [pc, #76]	; (8001510 <HAL_UART_MspInit+0xb8>)
 80014c2:	f043 0304 	orr.w	r3, r3, #4
 80014c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <HAL_UART_MspInit+0xb8>)
 80014ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = PC4_USART1_TX_Pin|PC5_USART1_RX_Pin;
 80014d4:	2330      	movs	r3, #48	; 0x30
 80014d6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014e4:	2307      	movs	r3, #7
 80014e6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014ec:	4619      	mov	r1, r3
 80014ee:	4809      	ldr	r0, [pc, #36]	; (8001514 <HAL_UART_MspInit+0xbc>)
 80014f0:	f000 fd30 	bl	8001f54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80014f4:	2200      	movs	r2, #0
 80014f6:	2100      	movs	r1, #0
 80014f8:	2025      	movs	r0, #37	; 0x25
 80014fa:	f000 fa5e 	bl	80019ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014fe:	2025      	movs	r0, #37	; 0x25
 8001500:	f000 fa75 	bl	80019ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001504:	bf00      	nop
 8001506:	3778      	adds	r7, #120	; 0x78
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40013800 	.word	0x40013800
 8001510:	40021000 	.word	0x40021000
 8001514:	48000800 	.word	0x48000800

08001518 <usbInit>:
#endif



bool usbInit(void)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
  bool ret = true;
 800151e:	2301      	movs	r3, #1
 8001520:	71fb      	strb	r3, [r7, #7]


#ifdef _USE_HW_CLI
  cliAdd("usb", cliCmd);
#endif
  return ret;
 8001522:	79fb      	ldrb	r3, [r7, #7]
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <usbBegin>:
{
  return is_usb_mode;
}

bool usbBegin(UsbMode usb_mode)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800153a:	2300      	movs	r3, #0
 800153c:	73fb      	strb	r3, [r7, #15]


#if HW_USE_CDC == 1

  if (usb_mode == USB_CDC_MODE)
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d12a      	bne.n	800159a <usbBegin+0x6a>
  {
    if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK)
 8001544:	2200      	movs	r2, #0
 8001546:	4919      	ldr	r1, [pc, #100]	; (80015ac <usbBegin+0x7c>)
 8001548:	4819      	ldr	r0, [pc, #100]	; (80015b0 <usbBegin+0x80>)
 800154a:	f008 fd61 	bl	800a010 <USBD_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <usbBegin+0x28>
    {
      return false;
 8001554:	2300      	movs	r3, #0
 8001556:	e024      	b.n	80015a2 <usbBegin+0x72>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8001558:	4916      	ldr	r1, [pc, #88]	; (80015b4 <usbBegin+0x84>)
 800155a:	4815      	ldr	r0, [pc, #84]	; (80015b0 <usbBegin+0x80>)
 800155c:	f008 fd88 	bl	800a070 <USBD_RegisterClass>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <usbBegin+0x3a>
    {
      return false;
 8001566:	2300      	movs	r3, #0
 8001568:	e01b      	b.n	80015a2 <usbBegin+0x72>
    }
    if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800156a:	4913      	ldr	r1, [pc, #76]	; (80015b8 <usbBegin+0x88>)
 800156c:	4810      	ldr	r0, [pc, #64]	; (80015b0 <usbBegin+0x80>)
 800156e:	f008 fcd9 	bl	8009f24 <USBD_CDC_RegisterInterface>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <usbBegin+0x4c>
    {
      return false;
 8001578:	2300      	movs	r3, #0
 800157a:	e012      	b.n	80015a2 <usbBegin+0x72>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800157c:	480c      	ldr	r0, [pc, #48]	; (80015b0 <usbBegin+0x80>)
 800157e:	f008 fd9e 	bl	800a0be <USBD_Start>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <usbBegin+0x5c>
    {
      return false;
 8001588:	2300      	movs	r3, #0
 800158a:	e00a      	b.n	80015a2 <usbBegin+0x72>
    }


    cdcInit();
 800158c:	f7ff fb94 	bl	8000cb8 <cdcInit>

    is_usb_mode = USB_CDC_MODE;
 8001590:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <usbBegin+0x8c>)
 8001592:	2201      	movs	r2, #1
 8001594:	701a      	strb	r2, [r3, #0]
    ret = true;
 8001596:	2301      	movs	r3, #1
 8001598:	73fb      	strb	r3, [r7, #15]
    ret = true;
  }
#endif


  is_init = ret;
 800159a:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <usbBegin+0x90>)
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	7013      	strb	r3, [r2, #0]

  return ret;
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	20000158 	.word	0x20000158
 80015b0:	20000454 	.word	0x20000454
 80015b4:	20000038 	.word	0x20000038
 80015b8:	20000144 	.word	0x20000144
 80015bc:	20000449 	.word	0x20000449
 80015c0:	20000448 	.word	0x20000448

080015c4 <hwInit>:
 *      Author: mm940
 */
#include "hw.h"

bool hwInit(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
  bool ret = true;
 80015ca:	2301      	movs	r3, #1
 80015cc:	71fb      	strb	r3, [r7, #7]

  ret &= bspInit();
 80015ce:	f7ff f843 	bl	8000658 <bspInit>
 80015d2:	4603      	mov	r3, r0
 80015d4:	461a      	mov	r2, r3
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	4013      	ands	r3, r2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	bf14      	ite	ne
 80015de:	2301      	movne	r3, #1
 80015e0:	2300      	moveq	r3, #0
 80015e2:	71fb      	strb	r3, [r7, #7]
  ret &= rtcInit();
 80015e4:	f7ff fd3a 	bl	800105c <rtcInit>
 80015e8:	4603      	mov	r3, r0
 80015ea:	461a      	mov	r2, r3
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	4013      	ands	r3, r2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	bf14      	ite	ne
 80015f4:	2301      	movne	r3, #1
 80015f6:	2300      	moveq	r3, #0
 80015f8:	71fb      	strb	r3, [r7, #7]
#ifdef _USE_HW_RESET
  ret &= resetInit();
 80015fa:	f7ff fc99 	bl	8000f30 <resetInit>
 80015fe:	4603      	mov	r3, r0
 8001600:	461a      	mov	r2, r3
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	4013      	ands	r3, r2
 8001606:	2b00      	cmp	r3, #0
 8001608:	bf14      	ite	ne
 800160a:	2301      	movne	r3, #1
 800160c:	2300      	moveq	r3, #0
 800160e:	71fb      	strb	r3, [r7, #7]
#endif
#ifdef _USE_HW_RESET
  if (resetGetCount() == 2)
 8001610:	f7ff fcd4 	bl	8000fbc <resetGetCount>
 8001614:	4603      	mov	r3, r0
 8001616:	2b02      	cmp	r3, #2
 8001618:	d101      	bne.n	800161e <hwInit+0x5a>
  {
    // Jump To SystemBootloader
    resetToSystemBoot();
 800161a:	f7ff fcdb 	bl	8000fd4 <resetToSystemBoot>
  }
#endif
  ret &= flashInit();
 800161e:	f7ff fb63 	bl	8000ce8 <flashInit>
 8001622:	4603      	mov	r3, r0
 8001624:	461a      	mov	r2, r3
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	4013      	ands	r3, r2
 800162a:	2b00      	cmp	r3, #0
 800162c:	bf14      	ite	ne
 800162e:	2301      	movne	r3, #1
 8001630:	2300      	moveq	r3, #0
 8001632:	71fb      	strb	r3, [r7, #7]
  ret &= buttonInit();
 8001634:	f7ff faa8 	bl	8000b88 <buttonInit>
 8001638:	4603      	mov	r3, r0
 800163a:	461a      	mov	r2, r3
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	4013      	ands	r3, r2
 8001640:	2b00      	cmp	r3, #0
 8001642:	bf14      	ite	ne
 8001644:	2301      	movne	r3, #1
 8001646:	2300      	moveq	r3, #0
 8001648:	71fb      	strb	r3, [r7, #7]
  ret &= ledInit();
 800164a:	f7ff fbfb 	bl	8000e44 <ledInit>
 800164e:	4603      	mov	r3, r0
 8001650:	461a      	mov	r2, r3
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	4013      	ands	r3, r2
 8001656:	2b00      	cmp	r3, #0
 8001658:	bf14      	ite	ne
 800165a:	2301      	movne	r3, #1
 800165c:	2300      	moveq	r3, #0
 800165e:	71fb      	strb	r3, [r7, #7]
  ret &= usbInit();
 8001660:	f7ff ff5a 	bl	8001518 <usbInit>
 8001664:	4603      	mov	r3, r0
 8001666:	461a      	mov	r2, r3
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	4013      	ands	r3, r2
 800166c:	2b00      	cmp	r3, #0
 800166e:	bf14      	ite	ne
 8001670:	2301      	movne	r3, #1
 8001672:	2300      	moveq	r3, #0
 8001674:	71fb      	strb	r3, [r7, #7]
  ret &= usbBegin(USB_CDC_MODE);
 8001676:	2001      	movs	r0, #1
 8001678:	f7ff ff5a 	bl	8001530 <usbBegin>
 800167c:	4603      	mov	r3, r0
 800167e:	461a      	mov	r2, r3
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	4013      	ands	r3, r2
 8001684:	2b00      	cmp	r3, #0
 8001686:	bf14      	ite	ne
 8001688:	2301      	movne	r3, #1
 800168a:	2300      	moveq	r3, #0
 800168c:	71fb      	strb	r3, [r7, #7]
  ret &= uartInit();
 800168e:	f7ff fd73 	bl	8001178 <uartInit>
 8001692:	4603      	mov	r3, r0
 8001694:	461a      	mov	r2, r3
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	4013      	ands	r3, r2
 800169a:	2b00      	cmp	r3, #0
 800169c:	bf14      	ite	ne
 800169e:	2301      	movne	r3, #1
 80016a0:	2300      	moveq	r3, #0
 80016a2:	71fb      	strb	r3, [r7, #7]
  ret &= uartOpen(_DEF_UART1, 115200);
 80016a4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80016a8:	2000      	movs	r0, #0
 80016aa:	f7ff fd7f 	bl	80011ac <uartOpen>
 80016ae:	4603      	mov	r3, r0
 80016b0:	461a      	mov	r2, r3
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	4013      	ands	r3, r2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	bf14      	ite	ne
 80016ba:	2301      	movne	r3, #1
 80016bc:	2300      	moveq	r3, #0
 80016be:	71fb      	strb	r3, [r7, #7]

  /* Reset Test */
  uartPrintf(_DEF_UART1, "Reset Count : %d\n", resetGetCount());
 80016c0:	f7ff fc7c 	bl	8000fbc <resetGetCount>
 80016c4:	4603      	mov	r3, r0
 80016c6:	461a      	mov	r2, r3
 80016c8:	4904      	ldr	r1, [pc, #16]	; (80016dc <hwInit+0x118>)
 80016ca:	2000      	movs	r0, #0
 80016cc:	f7ff fe62 	bl	8001394 <uartPrintf>
  return ret;
 80016d0:	79fb      	ldrb	r3, [r7, #7]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	0800c72c 	.word	0x0800c72c

080016e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ea:	2003      	movs	r0, #3
 80016ec:	f000 f95a 	bl	80019a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016f0:	200f      	movs	r0, #15
 80016f2:	f000 f80d 	bl	8001710 <HAL_InitTick>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d002      	beq.n	8001702 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	71fb      	strb	r3, [r7, #7]
 8001700:	e001      	b.n	8001706 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001702:	f7ff f883 	bl	800080c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001706:	79fb      	ldrb	r3, [r7, #7]

}
 8001708:	4618      	mov	r0, r3
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001718:	2300      	movs	r3, #0
 800171a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800171c:	4b16      	ldr	r3, [pc, #88]	; (8001778 <HAL_InitTick+0x68>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d022      	beq.n	800176a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_InitTick+0x6c>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <HAL_InitTick+0x68>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001730:	fbb1 f3f3 	udiv	r3, r1, r3
 8001734:	fbb2 f3f3 	udiv	r3, r2, r3
 8001738:	4618      	mov	r0, r3
 800173a:	f000 f966 	bl	8001a0a <HAL_SYSTICK_Config>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d10f      	bne.n	8001764 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b0f      	cmp	r3, #15
 8001748:	d809      	bhi.n	800175e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800174a:	2200      	movs	r2, #0
 800174c:	6879      	ldr	r1, [r7, #4]
 800174e:	f04f 30ff 	mov.w	r0, #4294967295
 8001752:	f000 f932 	bl	80019ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001756:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <HAL_InitTick+0x70>)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	e007      	b.n	800176e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	73fb      	strb	r3, [r7, #15]
 8001762:	e004      	b.n	800176e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	73fb      	strb	r3, [r7, #15]
 8001768:	e001      	b.n	800176e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800176e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000008 	.word	0x20000008
 800177c:	20000000 	.word	0x20000000
 8001780:	20000004 	.word	0x20000004

08001784 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <HAL_IncTick+0x1c>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_IncTick+0x20>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4413      	add	r3, r2
 8001792:	4a03      	ldr	r2, [pc, #12]	; (80017a0 <HAL_IncTick+0x1c>)
 8001794:	6013      	str	r3, [r2, #0]
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	2000044c 	.word	0x2000044c
 80017a4:	20000008 	.word	0x20000008

080017a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return uwTick;
 80017ac:	4b03      	ldr	r3, [pc, #12]	; (80017bc <HAL_GetTick+0x14>)
 80017ae:	681b      	ldr	r3, [r3, #0]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	2000044c 	.word	0x2000044c

080017c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c8:	f7ff ffee 	bl	80017a8 <HAL_GetTick>
 80017cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d8:	d004      	beq.n	80017e4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_Delay+0x40>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	4413      	add	r3, r2
 80017e2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017e4:	bf00      	nop
 80017e6:	f7ff ffdf 	bl	80017a8 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d8f7      	bhi.n	80017e6 <HAL_Delay+0x26>
  {
  }
}
 80017f6:	bf00      	nop
 80017f8:	bf00      	nop
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000008 	.word	0x20000008

08001804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001820:	4013      	ands	r3, r2
 8001822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800182c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001836:	4a04      	ldr	r2, [pc, #16]	; (8001848 <__NVIC_SetPriorityGrouping+0x44>)
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	60d3      	str	r3, [r2, #12]
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <__NVIC_GetPriorityGrouping+0x18>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	0a1b      	lsrs	r3, r3, #8
 8001856:	f003 0307 	and.w	r3, r3, #7
}
 800185a:	4618      	mov	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001876:	2b00      	cmp	r3, #0
 8001878:	db0b      	blt.n	8001892 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	f003 021f 	and.w	r2, r3, #31
 8001880:	4907      	ldr	r1, [pc, #28]	; (80018a0 <__NVIC_EnableIRQ+0x38>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	095b      	lsrs	r3, r3, #5
 8001888:	2001      	movs	r0, #1
 800188a:	fa00 f202 	lsl.w	r2, r0, r2
 800188e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000e100 	.word	0xe000e100

080018a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	6039      	str	r1, [r7, #0]
 80018ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	db0a      	blt.n	80018ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	490c      	ldr	r1, [pc, #48]	; (80018f0 <__NVIC_SetPriority+0x4c>)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	0112      	lsls	r2, r2, #4
 80018c4:	b2d2      	uxtb	r2, r2
 80018c6:	440b      	add	r3, r1
 80018c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018cc:	e00a      	b.n	80018e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	4908      	ldr	r1, [pc, #32]	; (80018f4 <__NVIC_SetPriority+0x50>)
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	3b04      	subs	r3, #4
 80018dc:	0112      	lsls	r2, r2, #4
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	440b      	add	r3, r1
 80018e2:	761a      	strb	r2, [r3, #24]
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	e000e100 	.word	0xe000e100
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b089      	sub	sp, #36	; 0x24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f1c3 0307 	rsb	r3, r3, #7
 8001912:	2b04      	cmp	r3, #4
 8001914:	bf28      	it	cs
 8001916:	2304      	movcs	r3, #4
 8001918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3304      	adds	r3, #4
 800191e:	2b06      	cmp	r3, #6
 8001920:	d902      	bls.n	8001928 <NVIC_EncodePriority+0x30>
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	3b03      	subs	r3, #3
 8001926:	e000      	b.n	800192a <NVIC_EncodePriority+0x32>
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800192c:	f04f 32ff 	mov.w	r2, #4294967295
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43da      	mvns	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	401a      	ands	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001940:	f04f 31ff 	mov.w	r1, #4294967295
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	fa01 f303 	lsl.w	r3, r1, r3
 800194a:	43d9      	mvns	r1, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001950:	4313      	orrs	r3, r2
         );
}
 8001952:	4618      	mov	r0, r3
 8001954:	3724      	adds	r7, #36	; 0x24
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
	...

08001960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	3b01      	subs	r3, #1
 800196c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001970:	d301      	bcc.n	8001976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001972:	2301      	movs	r3, #1
 8001974:	e00f      	b.n	8001996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001976:	4a0a      	ldr	r2, [pc, #40]	; (80019a0 <SysTick_Config+0x40>)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800197e:	210f      	movs	r1, #15
 8001980:	f04f 30ff 	mov.w	r0, #4294967295
 8001984:	f7ff ff8e 	bl	80018a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <SysTick_Config+0x40>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800198e:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <SysTick_Config+0x40>)
 8001990:	2207      	movs	r2, #7
 8001992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	e000e010 	.word	0xe000e010

080019a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff ff29 	bl	8001804 <__NVIC_SetPriorityGrouping>
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b086      	sub	sp, #24
 80019be:	af00      	add	r7, sp, #0
 80019c0:	4603      	mov	r3, r0
 80019c2:	60b9      	str	r1, [r7, #8]
 80019c4:	607a      	str	r2, [r7, #4]
 80019c6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019c8:	f7ff ff40 	bl	800184c <__NVIC_GetPriorityGrouping>
 80019cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	68b9      	ldr	r1, [r7, #8]
 80019d2:	6978      	ldr	r0, [r7, #20]
 80019d4:	f7ff ff90 	bl	80018f8 <NVIC_EncodePriority>
 80019d8:	4602      	mov	r2, r0
 80019da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019de:	4611      	mov	r1, r2
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff5f 	bl	80018a4 <__NVIC_SetPriority>
}
 80019e6:	bf00      	nop
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff33 	bl	8001868 <__NVIC_EnableIRQ>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ffa4 	bl	8001960 <SysTick_Config>
 8001a18:	4603      	mov	r3, r0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b085      	sub	sp, #20
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d005      	beq.n	8001a46 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2204      	movs	r2, #4
 8001a3e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
 8001a44:	e037      	b.n	8001ab6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 020e 	bic.w	r2, r2, #14
 8001a54:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a64:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0201 	bic.w	r2, r2, #1
 8001a74:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	f003 021f 	and.w	r2, r3, #31
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	2101      	movs	r1, #1
 8001a84:	fa01 f202 	lsl.w	r2, r1, r2
 8001a88:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a92:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d00c      	beq.n	8001ab6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001aaa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ab4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d00d      	beq.n	8001b08 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2204      	movs	r2, #4
 8001af0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	73fb      	strb	r3, [r7, #15]
 8001b06:	e047      	b.n	8001b98 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 020e 	bic.w	r2, r2, #14
 8001b16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0201 	bic.w	r2, r2, #1
 8001b26:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3c:	f003 021f 	and.w	r2, r3, #31
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	2101      	movs	r1, #1
 8001b46:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b54:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00c      	beq.n	8001b78 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b6c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b76:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	4798      	blx	r3
    }
  }
  return status;
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001baa:	2300      	movs	r3, #0
 8001bac:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <HAL_FLASH_Unlock+0x38>)
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	da0b      	bge.n	8001bce <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_FLASH_Unlock+0x38>)
 8001bb8:	4a09      	ldr	r2, [pc, #36]	; (8001be0 <HAL_FLASH_Unlock+0x3c>)
 8001bba:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001bbc:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <HAL_FLASH_Unlock+0x38>)
 8001bbe:	4a09      	ldr	r2, [pc, #36]	; (8001be4 <HAL_FLASH_Unlock+0x40>)
 8001bc0:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_FLASH_Unlock+0x38>)
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	da01      	bge.n	8001bce <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001bce:	79fb      	ldrb	r3, [r7, #7]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	40022000 	.word	0x40022000
 8001be0:	45670123 	.word	0x45670123
 8001be4:	cdef89ab 	.word	0xcdef89ab

08001be8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8001bf0:	f7ff fdda 	bl	80017a8 <HAL_GetTick>
 8001bf4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001bf6:	e009      	b.n	8001c0c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8001bf8:	f7ff fdd6 	bl	80017a8 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d201      	bcs.n	8001c0c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e038      	b.n	8001c7e <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001c0c:	4b1e      	ldr	r3, [pc, #120]	; (8001c88 <FLASH_WaitForLastOperation+0xa0>)
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c18:	d0ee      	beq.n	8001bf8 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001c1a:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <FLASH_WaitForLastOperation+0xa0>)
 8001c1c:	691a      	ldr	r2, [r3, #16]
 8001c1e:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8001c22:	4013      	ands	r3, r2
 8001c24:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d01e      	beq.n	8001c6a <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8001c2c:	4b17      	ldr	r3, [pc, #92]	; (8001c8c <FLASH_WaitForLastOperation+0xa4>)
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	4a15      	ldr	r2, [pc, #84]	; (8001c8c <FLASH_WaitForLastOperation+0xa4>)
 8001c36:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d007      	beq.n	8001c52 <FLASH_WaitForLastOperation+0x6a>
 8001c42:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <FLASH_WaitForLastOperation+0xa0>)
 8001c44:	699a      	ldr	r2, [r3, #24]
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001c4c:	490e      	ldr	r1, [pc, #56]	; (8001c88 <FLASH_WaitForLastOperation+0xa0>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	618b      	str	r3, [r1, #24]
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d004      	beq.n	8001c66 <FLASH_WaitForLastOperation+0x7e>
 8001c5c:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <FLASH_WaitForLastOperation+0xa0>)
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001c64:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e009      	b.n	8001c7e <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001c6a:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <FLASH_WaitForLastOperation+0xa0>)
 8001c6c:	691b      	ldr	r3, [r3, #16]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d102      	bne.n	8001c7c <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001c76:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <FLASH_WaitForLastOperation+0xa0>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40022000 	.word	0x40022000
 8001c8c:	2000000c 	.word	0x2000000c

08001c90 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001c9a:	4b49      	ldr	r3, [pc, #292]	; (8001dc0 <HAL_FLASHEx_Erase+0x130>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d101      	bne.n	8001ca6 <HAL_FLASHEx_Erase+0x16>
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	e087      	b.n	8001db6 <HAL_FLASHEx_Erase+0x126>
 8001ca6:	4b46      	ldr	r3, [pc, #280]	; (8001dc0 <HAL_FLASHEx_Erase+0x130>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001cac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cb0:	f7ff ff9a 	bl	8001be8 <FLASH_WaitForLastOperation>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d177      	bne.n	8001dae <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001cbe:	4b40      	ldr	r3, [pc, #256]	; (8001dc0 <HAL_FLASHEx_Erase+0x130>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8001cc4:	4b3f      	ldr	r3, [pc, #252]	; (8001dc4 <HAL_FLASHEx_Erase+0x134>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d013      	beq.n	8001cf8 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001cd0:	4b3c      	ldr	r3, [pc, #240]	; (8001dc4 <HAL_FLASHEx_Erase+0x134>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d009      	beq.n	8001cf0 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8001cdc:	4b39      	ldr	r3, [pc, #228]	; (8001dc4 <HAL_FLASHEx_Erase+0x134>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a38      	ldr	r2, [pc, #224]	; (8001dc4 <HAL_FLASHEx_Erase+0x134>)
 8001ce2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ce6:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8001ce8:	4b35      	ldr	r3, [pc, #212]	; (8001dc0 <HAL_FLASHEx_Erase+0x130>)
 8001cea:	2203      	movs	r2, #3
 8001cec:	771a      	strb	r2, [r3, #28]
 8001cee:	e016      	b.n	8001d1e <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8001cf0:	4b33      	ldr	r3, [pc, #204]	; (8001dc0 <HAL_FLASHEx_Erase+0x130>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	771a      	strb	r2, [r3, #28]
 8001cf6:	e012      	b.n	8001d1e <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001cf8:	4b32      	ldr	r3, [pc, #200]	; (8001dc4 <HAL_FLASHEx_Erase+0x134>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d009      	beq.n	8001d18 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001d04:	4b2f      	ldr	r3, [pc, #188]	; (8001dc4 <HAL_FLASHEx_Erase+0x134>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a2e      	ldr	r2, [pc, #184]	; (8001dc4 <HAL_FLASHEx_Erase+0x134>)
 8001d0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d0e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001d10:	4b2b      	ldr	r3, [pc, #172]	; (8001dc0 <HAL_FLASHEx_Erase+0x130>)
 8001d12:	2202      	movs	r2, #2
 8001d14:	771a      	strb	r2, [r3, #28]
 8001d16:	e002      	b.n	8001d1e <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001d18:	4b29      	ldr	r3, [pc, #164]	; (8001dc0 <HAL_FLASHEx_Erase+0x130>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d113      	bne.n	8001d4e <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 f84c 	bl	8001dc8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d34:	f7ff ff58 	bl	8001be8 <FLASH_WaitForLastOperation>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	73fb      	strb	r3, [r7, #15]

#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8001d3c:	4b21      	ldr	r3, [pc, #132]	; (8001dc4 <HAL_FLASHEx_Erase+0x134>)
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	4a20      	ldr	r2, [pc, #128]	; (8001dc4 <HAL_FLASHEx_Erase+0x134>)
 8001d42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001d46:	f023 0304 	bic.w	r3, r3, #4
 8001d4a:	6153      	str	r3, [r2, #20]
 8001d4c:	e02d      	b.n	8001daa <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	f04f 32ff 	mov.w	r2, #4294967295
 8001d54:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	e01d      	b.n	8001d9a <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	4619      	mov	r1, r3
 8001d64:	68b8      	ldr	r0, [r7, #8]
 8001d66:	f000 f867 	bl	8001e38 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d6e:	f7ff ff3b 	bl	8001be8 <FLASH_WaitForLastOperation>
 8001d72:	4603      	mov	r3, r0
 8001d74:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001d76:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <HAL_FLASHEx_Erase+0x134>)
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <HAL_FLASHEx_Erase+0x134>)
 8001d7c:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8001d80:	f023 0302 	bic.w	r3, r3, #2
 8001d84:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	601a      	str	r2, [r3, #0]
          break;
 8001d92:	e00a      	b.n	8001daa <HAL_FLASHEx_Erase+0x11a>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	3301      	adds	r3, #1
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	4413      	add	r3, r2
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d3d9      	bcc.n	8001d5e <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001daa:	f000 f889 	bl	8001ec0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001dae:	4b04      	ldr	r3, [pc, #16]	; (8001dc0 <HAL_FLASHEx_Erase+0x130>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]

  return status;
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	2000000c 	.word	0x2000000c
 8001dc4:	40022000 	.word	0x40022000

08001dc8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8001dd0:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <FLASH_MassErase+0x6c>)
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d016      	beq.n	8001e0a <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d005      	beq.n	8001df2 <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8001de6:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <FLASH_MassErase+0x6c>)
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	4a12      	ldr	r2, [pc, #72]	; (8001e34 <FLASH_MassErase+0x6c>)
 8001dec:	f043 0304 	orr.w	r3, r3, #4
 8001df0:	6153      	str	r3, [r2, #20]
    }

#if defined (FLASH_OPTR_DBANK)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if ((Banks & FLASH_BANK_2) != 0U)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00e      	beq.n	8001e1a <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8001dfc:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <FLASH_MassErase+0x6c>)
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	4a0c      	ldr	r2, [pc, #48]	; (8001e34 <FLASH_MassErase+0x6c>)
 8001e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e06:	6153      	str	r3, [r2, #20]
 8001e08:	e007      	b.n	8001e1a <FLASH_MassErase+0x52>
#endif
  }
#if defined (FLASH_OPTR_DBANK)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <FLASH_MassErase+0x6c>)
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	4a09      	ldr	r2, [pc, #36]	; (8001e34 <FLASH_MassErase+0x6c>)
 8001e10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e14:	f043 0304 	orr.w	r3, r3, #4
 8001e18:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <FLASH_MassErase+0x6c>)
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	4a05      	ldr	r2, [pc, #20]	; (8001e34 <FLASH_MassErase+0x6c>)
 8001e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e24:	6153      	str	r3, [r2, #20]
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40022000 	.word	0x40022000

08001e38 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8001e42:	4b1e      	ldr	r3, [pc, #120]	; (8001ebc <FLASH_PageErase+0x84>)
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d106      	bne.n	8001e5c <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8001e4e:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <FLASH_PageErase+0x84>)
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	4a1a      	ldr	r2, [pc, #104]	; (8001ebc <FLASH_PageErase+0x84>)
 8001e54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e58:	6153      	str	r3, [r2, #20]
 8001e5a:	e011      	b.n	8001e80 <FLASH_PageErase+0x48>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if ((Banks & FLASH_BANK_1) != 0U)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d006      	beq.n	8001e74 <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8001e66:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <FLASH_PageErase+0x84>)
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	4a14      	ldr	r2, [pc, #80]	; (8001ebc <FLASH_PageErase+0x84>)
 8001e6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e70:	6153      	str	r3, [r2, #20]
 8001e72:	e005      	b.n	8001e80 <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8001e74:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <FLASH_PageErase+0x84>)
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	4a10      	ldr	r2, [pc, #64]	; (8001ebc <FLASH_PageErase+0x84>)
 8001e7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e7e:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8001e80:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <FLASH_PageErase+0x84>)
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8001e90:	490a      	ldr	r1, [pc, #40]	; (8001ebc <FLASH_PageErase+0x84>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001e96:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <FLASH_PageErase+0x84>)
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	4a08      	ldr	r2, [pc, #32]	; (8001ebc <FLASH_PageErase+0x84>)
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001ea2:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <FLASH_PageErase+0x84>)
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	4a05      	ldr	r2, [pc, #20]	; (8001ebc <FLASH_PageErase+0x84>)
 8001ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eac:	6153      	str	r3, [r2, #20]
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	40022000 	.word	0x40022000

08001ec0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8001ec6:	4b21      	ldr	r3, [pc, #132]	; (8001f4c <FLASH_FlushCaches+0x8c>)
 8001ec8:	7f1b      	ldrb	r3, [r3, #28]
 8001eca:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d002      	beq.n	8001ed8 <FLASH_FlushCaches+0x18>
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	2b03      	cmp	r3, #3
 8001ed6:	d117      	bne.n	8001f08 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001ed8:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <FLASH_FlushCaches+0x90>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a1c      	ldr	r2, [pc, #112]	; (8001f50 <FLASH_FlushCaches+0x90>)
 8001ede:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ee2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001ee4:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <FLASH_FlushCaches+0x90>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a19      	ldr	r2, [pc, #100]	; (8001f50 <FLASH_FlushCaches+0x90>)
 8001eea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <FLASH_FlushCaches+0x90>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a16      	ldr	r2, [pc, #88]	; (8001f50 <FLASH_FlushCaches+0x90>)
 8001ef6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001efa:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001efc:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <FLASH_FlushCaches+0x90>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a13      	ldr	r2, [pc, #76]	; (8001f50 <FLASH_FlushCaches+0x90>)
 8001f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f06:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d002      	beq.n	8001f14 <FLASH_FlushCaches+0x54>
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d111      	bne.n	8001f38 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001f14:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <FLASH_FlushCaches+0x90>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a0d      	ldr	r2, [pc, #52]	; (8001f50 <FLASH_FlushCaches+0x90>)
 8001f1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <FLASH_FlushCaches+0x90>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0a      	ldr	r2, [pc, #40]	; (8001f50 <FLASH_FlushCaches+0x90>)
 8001f26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f2a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f2c:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <FLASH_FlushCaches+0x90>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a07      	ldr	r2, [pc, #28]	; (8001f50 <FLASH_FlushCaches+0x90>)
 8001f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f36:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <FLASH_FlushCaches+0x8c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	771a      	strb	r2, [r3, #28]
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	2000000c 	.word	0x2000000c
 8001f50:	40022000 	.word	0x40022000

08001f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b087      	sub	sp, #28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f62:	e15a      	b.n	800221a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	2101      	movs	r1, #1
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f70:	4013      	ands	r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 814c 	beq.w	8002214 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 0303 	and.w	r3, r3, #3
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d005      	beq.n	8001f94 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d130      	bne.n	8001ff6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fca:	2201      	movs	r2, #1
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	693a      	ldr	r2, [r7, #16]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	091b      	lsrs	r3, r3, #4
 8001fe0:	f003 0201 	and.w	r2, r3, #1
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d017      	beq.n	8002032 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	2203      	movs	r2, #3
 800200e:	fa02 f303 	lsl.w	r3, r2, r3
 8002012:	43db      	mvns	r3, r3
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	4013      	ands	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d123      	bne.n	8002086 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	08da      	lsrs	r2, r3, #3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3208      	adds	r2, #8
 8002046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800204a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	220f      	movs	r2, #15
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4013      	ands	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	691a      	ldr	r2, [r3, #16]
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	08da      	lsrs	r2, r3, #3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3208      	adds	r2, #8
 8002080:	6939      	ldr	r1, [r7, #16]
 8002082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	2203      	movs	r2, #3
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	4013      	ands	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 0203 	and.w	r2, r3, #3
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 80a6 	beq.w	8002214 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c8:	4b5b      	ldr	r3, [pc, #364]	; (8002238 <HAL_GPIO_Init+0x2e4>)
 80020ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020cc:	4a5a      	ldr	r2, [pc, #360]	; (8002238 <HAL_GPIO_Init+0x2e4>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	6613      	str	r3, [r2, #96]	; 0x60
 80020d4:	4b58      	ldr	r3, [pc, #352]	; (8002238 <HAL_GPIO_Init+0x2e4>)
 80020d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020e0:	4a56      	ldr	r2, [pc, #344]	; (800223c <HAL_GPIO_Init+0x2e8>)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	089b      	lsrs	r3, r3, #2
 80020e6:	3302      	adds	r3, #2
 80020e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	220f      	movs	r2, #15
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4013      	ands	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800210a:	d01f      	beq.n	800214c <HAL_GPIO_Init+0x1f8>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a4c      	ldr	r2, [pc, #304]	; (8002240 <HAL_GPIO_Init+0x2ec>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d019      	beq.n	8002148 <HAL_GPIO_Init+0x1f4>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a4b      	ldr	r2, [pc, #300]	; (8002244 <HAL_GPIO_Init+0x2f0>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d013      	beq.n	8002144 <HAL_GPIO_Init+0x1f0>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a4a      	ldr	r2, [pc, #296]	; (8002248 <HAL_GPIO_Init+0x2f4>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d00d      	beq.n	8002140 <HAL_GPIO_Init+0x1ec>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a49      	ldr	r2, [pc, #292]	; (800224c <HAL_GPIO_Init+0x2f8>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d007      	beq.n	800213c <HAL_GPIO_Init+0x1e8>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a48      	ldr	r2, [pc, #288]	; (8002250 <HAL_GPIO_Init+0x2fc>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d101      	bne.n	8002138 <HAL_GPIO_Init+0x1e4>
 8002134:	2305      	movs	r3, #5
 8002136:	e00a      	b.n	800214e <HAL_GPIO_Init+0x1fa>
 8002138:	2306      	movs	r3, #6
 800213a:	e008      	b.n	800214e <HAL_GPIO_Init+0x1fa>
 800213c:	2304      	movs	r3, #4
 800213e:	e006      	b.n	800214e <HAL_GPIO_Init+0x1fa>
 8002140:	2303      	movs	r3, #3
 8002142:	e004      	b.n	800214e <HAL_GPIO_Init+0x1fa>
 8002144:	2302      	movs	r3, #2
 8002146:	e002      	b.n	800214e <HAL_GPIO_Init+0x1fa>
 8002148:	2301      	movs	r3, #1
 800214a:	e000      	b.n	800214e <HAL_GPIO_Init+0x1fa>
 800214c:	2300      	movs	r3, #0
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	f002 0203 	and.w	r2, r2, #3
 8002154:	0092      	lsls	r2, r2, #2
 8002156:	4093      	lsls	r3, r2
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800215e:	4937      	ldr	r1, [pc, #220]	; (800223c <HAL_GPIO_Init+0x2e8>)
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	089b      	lsrs	r3, r3, #2
 8002164:	3302      	adds	r3, #2
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800216c:	4b39      	ldr	r3, [pc, #228]	; (8002254 <HAL_GPIO_Init+0x300>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	43db      	mvns	r3, r3
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4013      	ands	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	4313      	orrs	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002190:	4a30      	ldr	r2, [pc, #192]	; (8002254 <HAL_GPIO_Init+0x300>)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002196:	4b2f      	ldr	r3, [pc, #188]	; (8002254 <HAL_GPIO_Init+0x300>)
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	43db      	mvns	r3, r3
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	4013      	ands	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021ba:	4a26      	ldr	r2, [pc, #152]	; (8002254 <HAL_GPIO_Init+0x300>)
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80021c0:	4b24      	ldr	r3, [pc, #144]	; (8002254 <HAL_GPIO_Init+0x300>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021e4:	4a1b      	ldr	r2, [pc, #108]	; (8002254 <HAL_GPIO_Init+0x300>)
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80021ea:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <HAL_GPIO_Init+0x300>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4013      	ands	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4313      	orrs	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800220e:	4a11      	ldr	r2, [pc, #68]	; (8002254 <HAL_GPIO_Init+0x300>)
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	3301      	adds	r3, #1
 8002218:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	fa22 f303 	lsr.w	r3, r2, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	f47f ae9d 	bne.w	8001f64 <HAL_GPIO_Init+0x10>
  }
}
 800222a:	bf00      	nop
 800222c:	bf00      	nop
 800222e:	371c      	adds	r7, #28
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	40021000 	.word	0x40021000
 800223c:	40010000 	.word	0x40010000
 8002240:	48000400 	.word	0x48000400
 8002244:	48000800 	.word	0x48000800
 8002248:	48000c00 	.word	0x48000c00
 800224c:	48001000 	.word	0x48001000
 8002250:	48001400 	.word	0x48001400
 8002254:	40010400 	.word	0x40010400

08002258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	807b      	strh	r3, [r7, #2]
 8002264:	4613      	mov	r3, r2
 8002266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002268:	787b      	ldrb	r3, [r7, #1]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800226e:	887a      	ldrh	r2, [r7, #2]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002274:	e002      	b.n	800227c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002276:	887a      	ldrh	r2, [r7, #2]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e0c0      	b.n	800241c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d106      	bne.n	80022b4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f009 fa52 	bl	800b758 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2203      	movs	r2, #3
 80022b8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f005 f84c 	bl	800735e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022c6:	2300      	movs	r3, #0
 80022c8:	73fb      	strb	r3, [r7, #15]
 80022ca:	e03e      	b.n	800234a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022cc:	7bfa      	ldrb	r2, [r7, #15]
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	440b      	add	r3, r1
 80022da:	3311      	adds	r3, #17
 80022dc:	2201      	movs	r2, #1
 80022de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4413      	add	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	440b      	add	r3, r1
 80022ee:	3310      	adds	r3, #16
 80022f0:	7bfa      	ldrb	r2, [r7, #15]
 80022f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022f4:	7bfa      	ldrb	r2, [r7, #15]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	440b      	add	r3, r1
 8002302:	3313      	adds	r3, #19
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	440b      	add	r3, r1
 8002316:	3320      	adds	r3, #32
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800231c:	7bfa      	ldrb	r2, [r7, #15]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	4413      	add	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	440b      	add	r3, r1
 800232a:	3324      	adds	r3, #36	; 0x24
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002330:	7bfb      	ldrb	r3, [r7, #15]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	1c5a      	adds	r2, r3, #1
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	440b      	add	r3, r1
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	3301      	adds	r3, #1
 8002348:	73fb      	strb	r3, [r7, #15]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	791b      	ldrb	r3, [r3, #4]
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	429a      	cmp	r2, r3
 8002352:	d3bb      	bcc.n	80022cc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002354:	2300      	movs	r3, #0
 8002356:	73fb      	strb	r3, [r7, #15]
 8002358:	e044      	b.n	80023e4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800235a:	7bfa      	ldrb	r2, [r7, #15]
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	440b      	add	r3, r1
 8002368:	f203 1351 	addw	r3, r3, #337	; 0x151
 800236c:	2200      	movs	r2, #0
 800236e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002370:	7bfa      	ldrb	r2, [r7, #15]
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	440b      	add	r3, r1
 800237e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002382:	7bfa      	ldrb	r2, [r7, #15]
 8002384:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002386:	7bfa      	ldrb	r2, [r7, #15]
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	440b      	add	r3, r1
 8002394:	f203 1353 	addw	r3, r3, #339	; 0x153
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800239c:	7bfa      	ldrb	r2, [r7, #15]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	440b      	add	r3, r1
 80023aa:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023b2:	7bfa      	ldrb	r2, [r7, #15]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	440b      	add	r3, r1
 80023c0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023c8:	7bfa      	ldrb	r2, [r7, #15]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	440b      	add	r3, r1
 80023d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	3301      	adds	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	791b      	ldrb	r3, [r3, #4]
 80023e8:	7bfa      	ldrb	r2, [r7, #15]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d3b5      	bcc.n	800235a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3304      	adds	r3, #4
 80023f6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80023fa:	f004 ffcb 	bl	8007394 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	7a9b      	ldrb	r3, [r3, #10]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d102      	bne.n	800241a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f001 fc41 	bl	8003c9c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002432:	2b01      	cmp	r3, #1
 8002434:	d101      	bne.n	800243a <HAL_PCD_Start+0x16>
 8002436:	2302      	movs	r3, #2
 8002438:	e012      	b.n	8002460 <HAL_PCD_Start+0x3c>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f004 ff72 	bl	8007330 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f007 fa32 	bl	80098ba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f007 fa37 	bl	80098e8 <USB_ReadInterrupts>
 800247a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 fb04 	bl	8002a94 <PCD_EP_ISR_Handler>

    return;
 800248c:	e110      	b.n	80026b0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002494:	2b00      	cmp	r3, #0
 8002496:	d013      	beq.n	80024c0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024aa:	b292      	uxth	r2, r2
 80024ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f009 f9e2 	bl	800b87a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80024b6:	2100      	movs	r1, #0
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f8fc 	bl	80026b6 <HAL_PCD_SetAddress>

    return;
 80024be:	e0f7      	b.n	80026b0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00c      	beq.n	80024e4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80024dc:	b292      	uxth	r2, r2
 80024de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80024e2:	e0e5      	b.n	80026b0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00c      	beq.n	8002508 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002500:	b292      	uxth	r2, r2
 8002502:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002506:	e0d3      	b.n	80026b0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d034      	beq.n	800257c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800251a:	b29a      	uxth	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0204 	bic.w	r2, r2, #4
 8002524:	b292      	uxth	r2, r2
 8002526:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002532:	b29a      	uxth	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0208 	bic.w	r2, r2, #8
 800253c:	b292      	uxth	r2, r2
 800253e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8002548:	2b01      	cmp	r3, #1
 800254a:	d107      	bne.n	800255c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002554:	2100      	movs	r1, #0
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f009 fb82 	bl	800bc60 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f009 f9c5 	bl	800b8ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800256a:	b29a      	uxth	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002574:	b292      	uxth	r2, r2
 8002576:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800257a:	e099      	b.n	80026b0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002582:	2b00      	cmp	r3, #0
 8002584:	d027      	beq.n	80025d6 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800258e:	b29a      	uxth	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f042 0208 	orr.w	r2, r2, #8
 8002598:	b292      	uxth	r2, r2
 800259a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025b0:	b292      	uxth	r2, r2
 80025b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80025be:	b29a      	uxth	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f042 0204 	orr.w	r2, r2, #4
 80025c8:	b292      	uxth	r2, r2
 80025ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f009 f972 	bl	800b8b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80025d4:	e06c      	b.n	80026b0 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d040      	beq.n	8002662 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025f2:	b292      	uxth	r2, r2
 80025f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d12b      	bne.n	800265a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800260a:	b29a      	uxth	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f042 0204 	orr.w	r2, r2, #4
 8002614:	b292      	uxth	r2, r2
 8002616:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002622:	b29a      	uxth	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f042 0208 	orr.w	r2, r2, #8
 800262c:	b292      	uxth	r2, r2
 800262e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002642:	b29b      	uxth	r3, r3
 8002644:	089b      	lsrs	r3, r3, #2
 8002646:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002650:	2101      	movs	r1, #1
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f009 fb04 	bl	800bc60 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002658:	e02a      	b.n	80026b0 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f009 f92c 	bl	800b8b8 <HAL_PCD_SuspendCallback>
    return;
 8002660:	e026      	b.n	80026b0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00f      	beq.n	800268c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002674:	b29a      	uxth	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800267e:	b292      	uxth	r2, r2
 8002680:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f009 f8ea 	bl	800b85e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800268a:	e011      	b.n	80026b0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00c      	beq.n	80026b0 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800269e:	b29a      	uxth	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026a8:	b292      	uxth	r2, r2
 80026aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80026ae:	bf00      	nop
  }
}
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
 80026be:	460b      	mov	r3, r1
 80026c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d101      	bne.n	80026d0 <HAL_PCD_SetAddress+0x1a>
 80026cc:	2302      	movs	r3, #2
 80026ce:	e012      	b.n	80026f6 <HAL_PCD_SetAddress+0x40>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	78fa      	ldrb	r2, [r7, #3]
 80026dc:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	78fa      	ldrb	r2, [r7, #3]
 80026e4:	4611      	mov	r1, r2
 80026e6:	4618      	mov	r0, r3
 80026e8:	f007 f8d3 	bl	8009892 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	4608      	mov	r0, r1
 8002708:	4611      	mov	r1, r2
 800270a:	461a      	mov	r2, r3
 800270c:	4603      	mov	r3, r0
 800270e:	70fb      	strb	r3, [r7, #3]
 8002710:	460b      	mov	r3, r1
 8002712:	803b      	strh	r3, [r7, #0]
 8002714:	4613      	mov	r3, r2
 8002716:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800271c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002720:	2b00      	cmp	r3, #0
 8002722:	da0e      	bge.n	8002742 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	f003 0207 	and.w	r2, r3, #7
 800272a:	4613      	mov	r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	3310      	adds	r3, #16
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	4413      	add	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2201      	movs	r2, #1
 800273e:	705a      	strb	r2, [r3, #1]
 8002740:	e00e      	b.n	8002760 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002742:	78fb      	ldrb	r3, [r7, #3]
 8002744:	f003 0207 	and.w	r2, r3, #7
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	4413      	add	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	b2da      	uxtb	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800276c:	883a      	ldrh	r2, [r7, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	78ba      	ldrb	r2, [r7, #2]
 8002776:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002778:	78bb      	ldrb	r3, [r7, #2]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d102      	bne.n	8002784 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800278a:	2b01      	cmp	r3, #1
 800278c:	d101      	bne.n	8002792 <HAL_PCD_EP_Open+0x94>
 800278e:	2302      	movs	r3, #2
 8002790:	e00e      	b.n	80027b0 <HAL_PCD_EP_Open+0xb2>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68f9      	ldr	r1, [r7, #12]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f004 fe15 	bl	80073d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 80027ae:	7afb      	ldrb	r3, [r7, #11]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	da0e      	bge.n	80027ea <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	f003 0207 	and.w	r2, r3, #7
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	3310      	adds	r3, #16
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	4413      	add	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2201      	movs	r2, #1
 80027e6:	705a      	strb	r2, [r3, #1]
 80027e8:	e00e      	b.n	8002808 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027ea:	78fb      	ldrb	r3, [r7, #3]
 80027ec:	f003 0207 	and.w	r2, r3, #7
 80027f0:	4613      	mov	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	4413      	add	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002808:	78fb      	ldrb	r3, [r7, #3]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	b2da      	uxtb	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800281a:	2b01      	cmp	r3, #1
 800281c:	d101      	bne.n	8002822 <HAL_PCD_EP_Close+0x6a>
 800281e:	2302      	movs	r3, #2
 8002820:	e00e      	b.n	8002840 <HAL_PCD_EP_Close+0x88>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68f9      	ldr	r1, [r7, #12]
 8002830:	4618      	mov	r0, r3
 8002832:	f005 f991 	bl	8007b58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	460b      	mov	r3, r1
 8002856:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002858:	7afb      	ldrb	r3, [r7, #11]
 800285a:	f003 0207 	and.w	r2, r3, #7
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4413      	add	r3, r2
 800286e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2200      	movs	r2, #0
 8002880:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2200      	movs	r2, #0
 8002886:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002888:	7afb      	ldrb	r3, [r7, #11]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	b2da      	uxtb	r2, r3
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6979      	ldr	r1, [r7, #20]
 800289a:	4618      	mov	r0, r3
 800289c:	f005 fb49 	bl	8007f32 <USB_EPStartXfer>

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	460b      	mov	r3, r1
 80028b4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80028b6:	78fb      	ldrb	r3, [r7, #3]
 80028b8:	f003 0207 	and.w	r2, r3, #7
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	440b      	add	r3, r1
 80028c8:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80028cc:	681b      	ldr	r3, [r3, #0]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b086      	sub	sp, #24
 80028de:	af00      	add	r7, sp, #0
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	607a      	str	r2, [r7, #4]
 80028e4:	603b      	str	r3, [r7, #0]
 80028e6:	460b      	mov	r3, r1
 80028e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028ea:	7afb      	ldrb	r3, [r7, #11]
 80028ec:	f003 0207 	and.w	r2, r3, #7
 80028f0:	4613      	mov	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	3310      	adds	r3, #16
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	4413      	add	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	2200      	movs	r2, #0
 800291e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	2201      	movs	r2, #1
 8002924:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002926:	7afb      	ldrb	r3, [r7, #11]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	b2da      	uxtb	r2, r3
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6979      	ldr	r1, [r7, #20]
 8002938:	4618      	mov	r0, r3
 800293a:	f005 fafa 	bl	8007f32 <USB_EPStartXfer>

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002954:	78fb      	ldrb	r3, [r7, #3]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	7912      	ldrb	r2, [r2, #4]
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e03e      	b.n	80029e4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002966:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800296a:	2b00      	cmp	r3, #0
 800296c:	da0e      	bge.n	800298c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800296e:	78fb      	ldrb	r3, [r7, #3]
 8002970:	f003 0207 	and.w	r2, r3, #7
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	3310      	adds	r3, #16
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	4413      	add	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2201      	movs	r2, #1
 8002988:	705a      	strb	r2, [r3, #1]
 800298a:	e00c      	b.n	80029a6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	4413      	add	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2201      	movs	r2, #1
 80029aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_PCD_EP_SetStall+0x7e>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e00e      	b.n	80029e4 <HAL_PCD_EP_SetStall+0x9c>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68f9      	ldr	r1, [r7, #12]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f006 fe5d 	bl	8009694 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80029f8:	78fb      	ldrb	r3, [r7, #3]
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	7912      	ldrb	r2, [r2, #4]
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d901      	bls.n	8002a0a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e040      	b.n	8002a8c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	da0e      	bge.n	8002a30 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a12:	78fb      	ldrb	r3, [r7, #3]
 8002a14:	f003 0207 	and.w	r2, r3, #7
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	3310      	adds	r3, #16
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	4413      	add	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	705a      	strb	r2, [r3, #1]
 8002a2e:	e00e      	b.n	8002a4e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a30:	78fb      	ldrb	r3, [r7, #3]
 8002a32:	f003 0207 	and.w	r2, r3, #7
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	4413      	add	r3, r2
 8002a46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	b2da      	uxtb	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_PCD_EP_ClrStall+0x82>
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	e00e      	b.n	8002a8c <HAL_PCD_EP_ClrStall+0xa0>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68f9      	ldr	r1, [r7, #12]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f006 fe5a 	bl	8009736 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b096      	sub	sp, #88	; 0x58
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a9c:	e3ae      	b.n	80031fc <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002aa6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002aaa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	f003 030f 	and.w	r3, r3, #15
 8002ab4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002ab8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f040 8170 	bne.w	8002da2 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002ac2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ac6:	f003 0310 	and.w	r3, r3, #16
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d14d      	bne.n	8002b6a <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ade:	81fb      	strh	r3, [r7, #14]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	89fb      	ldrh	r3, [r7, #14]
 8002ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3310      	adds	r3, #16
 8002af6:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	461a      	mov	r2, r3
 8002b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6812      	ldr	r2, [r2, #0]
 8002b10:	4413      	add	r3, r2
 8002b12:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b1e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b22:	695a      	ldr	r2, [r3, #20]
 8002b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	441a      	add	r2, r3
 8002b2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b2c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002b2e:	2100      	movs	r1, #0
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f008 fe7a 	bl	800b82a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	7b1b      	ldrb	r3, [r3, #12]
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 835d 	beq.w	80031fc <PCD_EP_ISR_Handler+0x768>
 8002b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f040 8358 	bne.w	80031fc <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	7b1b      	ldrb	r3, [r3, #12]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	b292      	uxth	r2, r2
 8002b5e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	731a      	strb	r2, [r3, #12]
 8002b68:	e348      	b.n	80031fc <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002b70:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002b7c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d032      	beq.n	8002bee <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	461a      	mov	r2, r3
 8002b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6812      	ldr	r2, [r2, #0]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bae:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6818      	ldr	r0, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8002bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bbc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bc0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	f006 fee2 	bl	800998c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	823b      	strh	r3, [r7, #16]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	8a3a      	ldrh	r2, [r7, #16]
 8002bde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002be2:	b292      	uxth	r2, r2
 8002be4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f008 fdf2 	bl	800b7d0 <HAL_PCD_SetupStageCallback>
 8002bec:	e306      	b.n	80031fc <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002bee:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f280 8302 	bge.w	80031fc <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002c04:	4013      	ands	r3, r2
 8002c06:	83fb      	strh	r3, [r7, #30]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	8bfa      	ldrh	r2, [r7, #30]
 8002c0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c12:	b292      	uxth	r2, r2
 8002c14:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	461a      	mov	r2, r3
 8002c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	4413      	add	r3, r2
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6812      	ldr	r2, [r2, #0]
 8002c2e:	4413      	add	r3, r2
 8002c30:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c3c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d019      	beq.n	8002c7a <PCD_EP_ISR_Handler+0x1e6>
 8002c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d015      	beq.n	8002c7a <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c54:	6959      	ldr	r1, [r3, #20]
 8002c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c58:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c5c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	f006 fe94 	bl	800998c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c66:	695a      	ldr	r2, [r3, #20]
 8002c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	441a      	add	r2, r3
 8002c6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c70:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002c72:	2100      	movs	r1, #0
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f008 fdbd 	bl	800b7f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002c84:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f040 82b5 	bne.w	80031fc <PCD_EP_ISR_Handler+0x768>
 8002c92:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c96:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002c9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002c9e:	f000 82ad 	beq.w	80031fc <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	61bb      	str	r3, [r7, #24]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	801a      	strh	r2, [r3, #0]
 8002cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	2b3e      	cmp	r3, #62	; 0x3e
 8002cd8:	d91d      	bls.n	8002d16 <PCD_EP_ISR_Handler+0x282>
 8002cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f003 031f 	and.w	r3, r3, #31
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d102      	bne.n	8002cf4 <PCD_EP_ISR_Handler+0x260>
 8002cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	647b      	str	r3, [r7, #68]	; 0x44
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	029b      	lsls	r3, r3, #10
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	4313      	orrs	r3, r2
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	801a      	strh	r2, [r3, #0]
 8002d14:	e026      	b.n	8002d64 <PCD_EP_ISR_Handler+0x2d0>
 8002d16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10a      	bne.n	8002d34 <PCD_EP_ISR_Handler+0x2a0>
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	801a      	strh	r2, [r3, #0]
 8002d32:	e017      	b.n	8002d64 <PCD_EP_ISR_Handler+0x2d0>
 8002d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	085b      	lsrs	r3, r3, #1
 8002d3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <PCD_EP_ISR_Handler+0x2ba>
 8002d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	029b      	lsls	r3, r3, #10
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d74:	827b      	strh	r3, [r7, #18]
 8002d76:	8a7b      	ldrh	r3, [r7, #18]
 8002d78:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002d7c:	827b      	strh	r3, [r7, #18]
 8002d7e:	8a7b      	ldrh	r3, [r7, #18]
 8002d80:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002d84:	827b      	strh	r3, [r7, #18]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	8a7b      	ldrh	r3, [r7, #18]
 8002d8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	8013      	strh	r3, [r2, #0]
 8002da0:	e22c      	b.n	80031fc <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	461a      	mov	r2, r3
 8002da8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	881b      	ldrh	r3, [r3, #0]
 8002db2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002db6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f280 80f6 	bge.w	8002fac <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	461a      	mov	r2, r3
 8002de2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002dee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002df2:	b292      	uxth	r2, r2
 8002df4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002df6:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002e0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e0e:	7b1b      	ldrb	r3, [r3, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d123      	bne.n	8002e5c <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	461a      	mov	r2, r3
 8002e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	4413      	add	r3, r2
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6812      	ldr	r2, [r2, #0]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e38:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002e3c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 808e 	beq.w	8002f62 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e4c:	6959      	ldr	r1, [r3, #20]
 8002e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e50:	88da      	ldrh	r2, [r3, #6]
 8002e52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002e56:	f006 fd99 	bl	800998c <USB_ReadPMA>
 8002e5a:	e082      	b.n	8002f62 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e5e:	78db      	ldrb	r3, [r3, #3]
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d10a      	bne.n	8002e7a <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002e64:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002e68:	461a      	mov	r2, r3
 8002e6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f9d3 	bl	8003218 <HAL_PCD_EP_DB_Receive>
 8002e72:	4603      	mov	r3, r0
 8002e74:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002e78:	e073      	b.n	8002f62 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e94:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	441a      	add	r2, r3
 8002ea6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002eae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d022      	beq.n	8002f1e <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	4413      	add	r3, r2
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002efc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002f00:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d02c      	beq.n	8002f62 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6818      	ldr	r0, [r3, #0]
 8002f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f0e:	6959      	ldr	r1, [r3, #20]
 8002f10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f12:	891a      	ldrh	r2, [r3, #8]
 8002f14:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002f18:	f006 fd38 	bl	800998c <USB_ReadPMA>
 8002f1c:	e021      	b.n	8002f62 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	4413      	add	r3, r2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	4413      	add	r3, r2
 8002f38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f42:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002f46:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d009      	beq.n	8002f62 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6818      	ldr	r0, [r3, #0]
 8002f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f54:	6959      	ldr	r1, [r3, #20]
 8002f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f58:	895a      	ldrh	r2, [r3, #10]
 8002f5a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002f5e:	f006 fd15 	bl	800998c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f64:	69da      	ldr	r2, [r3, #28]
 8002f66:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002f6a:	441a      	add	r2, r3
 8002f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f6e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f72:	695a      	ldr	r2, [r3, #20]
 8002f74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002f78:	441a      	add	r2, r3
 8002f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f7c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d005      	beq.n	8002f92 <PCD_EP_ISR_Handler+0x4fe>
 8002f86:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d206      	bcs.n	8002fa0 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	4619      	mov	r1, r3
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f008 fc2b 	bl	800b7f4 <HAL_PCD_DataOutStageCallback>
 8002f9e:	e005      	b.n	8002fac <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f004 ffc3 	bl	8007f32 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002fac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 8121 	beq.w	80031fc <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8002fba:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	3310      	adds	r3, #16
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	4413      	add	r3, r2
 8002fcc:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	881b      	ldrh	r3, [r3, #0]
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	441a      	add	r2, r3
 8002ffa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002ffe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003002:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003006:	b29b      	uxth	r3, r3
 8003008:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800300a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800300c:	78db      	ldrb	r3, [r3, #3]
 800300e:	2b01      	cmp	r3, #1
 8003010:	f040 80a2 	bne.w	8003158 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8003014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003016:	2200      	movs	r2, #0
 8003018:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800301a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800301c:	7b1b      	ldrb	r3, [r3, #12]
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 8093 	beq.w	800314a <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003024:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302c:	2b00      	cmp	r3, #0
 800302e:	d046      	beq.n	80030be <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003030:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003032:	785b      	ldrb	r3, [r3, #1]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d126      	bne.n	8003086 <PCD_EP_ISR_Handler+0x5f2>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003046:	b29b      	uxth	r3, r3
 8003048:	461a      	mov	r2, r3
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	4413      	add	r3, r2
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
 8003050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	00da      	lsls	r2, r3, #3
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	4413      	add	r3, r2
 800305a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800305e:	623b      	str	r3, [r7, #32]
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	b29b      	uxth	r3, r3
 8003066:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800306a:	b29a      	uxth	r2, r3
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	801a      	strh	r2, [r3, #0]
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	b29b      	uxth	r3, r3
 8003076:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800307a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800307e:	b29a      	uxth	r2, r3
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	801a      	strh	r2, [r3, #0]
 8003084:	e061      	b.n	800314a <PCD_EP_ISR_Handler+0x6b6>
 8003086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003088:	785b      	ldrb	r3, [r3, #1]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d15d      	bne.n	800314a <PCD_EP_ISR_Handler+0x6b6>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800309c:	b29b      	uxth	r3, r3
 800309e:	461a      	mov	r2, r3
 80030a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a2:	4413      	add	r3, r2
 80030a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	00da      	lsls	r2, r3, #3
 80030ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ae:	4413      	add	r3, r2
 80030b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80030b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b8:	2200      	movs	r2, #0
 80030ba:	801a      	strh	r2, [r3, #0]
 80030bc:	e045      	b.n	800314a <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030c6:	785b      	ldrb	r3, [r3, #1]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d126      	bne.n	800311a <PCD_EP_ISR_Handler+0x686>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	637b      	str	r3, [r7, #52]	; 0x34
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030da:	b29b      	uxth	r3, r3
 80030dc:	461a      	mov	r2, r3
 80030de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e0:	4413      	add	r3, r2
 80030e2:	637b      	str	r3, [r7, #52]	; 0x34
 80030e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	00da      	lsls	r2, r3, #3
 80030ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ec:	4413      	add	r3, r2
 80030ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030f2:	633b      	str	r3, [r7, #48]	; 0x30
 80030f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f6:	881b      	ldrh	r3, [r3, #0]
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030fe:	b29a      	uxth	r2, r3
 8003100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003102:	801a      	strh	r2, [r3, #0]
 8003104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	b29b      	uxth	r3, r3
 800310a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800310e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003112:	b29a      	uxth	r2, r3
 8003114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003116:	801a      	strh	r2, [r3, #0]
 8003118:	e017      	b.n	800314a <PCD_EP_ISR_Handler+0x6b6>
 800311a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800311c:	785b      	ldrb	r3, [r3, #1]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d113      	bne.n	800314a <PCD_EP_ISR_Handler+0x6b6>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800312a:	b29b      	uxth	r3, r3
 800312c:	461a      	mov	r2, r3
 800312e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003130:	4413      	add	r3, r2
 8003132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003134:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	00da      	lsls	r2, r3, #3
 800313a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800313c:	4413      	add	r3, r2
 800313e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003142:	63bb      	str	r3, [r7, #56]	; 0x38
 8003144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003146:	2200      	movs	r2, #0
 8003148:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800314a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	4619      	mov	r1, r3
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f008 fb6a 	bl	800b82a <HAL_PCD_DataInStageCallback>
 8003156:	e051      	b.n	80031fc <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003158:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800315c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003160:	2b00      	cmp	r3, #0
 8003162:	d144      	bne.n	80031ee <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800316c:	b29b      	uxth	r3, r3
 800316e:	461a      	mov	r2, r3
 8003170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4413      	add	r3, r2
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	4413      	add	r3, r2
 800317e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003182:	881b      	ldrh	r3, [r3, #0]
 8003184:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003188:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800318c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800318e:	699a      	ldr	r2, [r3, #24]
 8003190:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003194:	429a      	cmp	r2, r3
 8003196:	d907      	bls.n	80031a8 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8003198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800319a:	699a      	ldr	r2, [r3, #24]
 800319c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80031a0:	1ad2      	subs	r2, r2, r3
 80031a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031a4:	619a      	str	r2, [r3, #24]
 80031a6:	e002      	b.n	80031ae <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 80031a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031aa:	2200      	movs	r2, #0
 80031ac:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80031ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	4619      	mov	r1, r3
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f008 fb34 	bl	800b82a <HAL_PCD_DataInStageCallback>
 80031c2:	e01b      	b.n	80031fc <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80031c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031c6:	695a      	ldr	r2, [r3, #20]
 80031c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80031cc:	441a      	add	r2, r3
 80031ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031d0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80031d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031d4:	69da      	ldr	r2, [r3, #28]
 80031d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80031da:	441a      	add	r2, r3
 80031dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031de:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031e6:	4618      	mov	r0, r3
 80031e8:	f004 fea3 	bl	8007f32 <USB_EPStartXfer>
 80031ec:	e006      	b.n	80031fc <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80031ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80031f2:	461a      	mov	r2, r3
 80031f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f917 	bl	800342a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003204:	b29b      	uxth	r3, r3
 8003206:	b21b      	sxth	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	f6ff ac48 	blt.w	8002a9e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3758      	adds	r7, #88	; 0x58
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b088      	sub	sp, #32
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	4613      	mov	r3, r2
 8003224:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003226:	88fb      	ldrh	r3, [r7, #6]
 8003228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d07c      	beq.n	800332a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003238:	b29b      	uxth	r3, r3
 800323a:	461a      	mov	r2, r3
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	4413      	add	r3, r2
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	4413      	add	r3, r2
 800324a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003254:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	699a      	ldr	r2, [r3, #24]
 800325a:	8b7b      	ldrh	r3, [r7, #26]
 800325c:	429a      	cmp	r2, r3
 800325e:	d306      	bcc.n	800326e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	699a      	ldr	r2, [r3, #24]
 8003264:	8b7b      	ldrh	r3, [r7, #26]
 8003266:	1ad2      	subs	r2, r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	619a      	str	r2, [r3, #24]
 800326c:	e002      	b.n	8003274 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2200      	movs	r2, #0
 8003272:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d123      	bne.n	80032c4 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	461a      	mov	r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	4413      	add	r3, r2
 800328a:	881b      	ldrh	r3, [r3, #0]
 800328c:	b29b      	uxth	r3, r3
 800328e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003296:	833b      	strh	r3, [r7, #24]
 8003298:	8b3b      	ldrh	r3, [r7, #24]
 800329a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800329e:	833b      	strh	r3, [r7, #24]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	461a      	mov	r2, r3
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	441a      	add	r2, r3
 80032ae:	8b3b      	ldrh	r3, [r7, #24]
 80032b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80032c4:	88fb      	ldrh	r3, [r7, #6]
 80032c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d01f      	beq.n	800330e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	461a      	mov	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e8:	82fb      	strh	r3, [r7, #22]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	441a      	add	r2, r3
 80032f8:	8afb      	ldrh	r3, [r7, #22]
 80032fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003306:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800330a:	b29b      	uxth	r3, r3
 800330c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800330e:	8b7b      	ldrh	r3, [r7, #26]
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 8085 	beq.w	8003420 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6818      	ldr	r0, [r3, #0]
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	6959      	ldr	r1, [r3, #20]
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	891a      	ldrh	r2, [r3, #8]
 8003322:	8b7b      	ldrh	r3, [r7, #26]
 8003324:	f006 fb32 	bl	800998c <USB_ReadPMA>
 8003328:	e07a      	b.n	8003420 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003332:	b29b      	uxth	r3, r3
 8003334:	461a      	mov	r2, r3
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	4413      	add	r3, r2
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	6812      	ldr	r2, [r2, #0]
 8003342:	4413      	add	r3, r2
 8003344:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003348:	881b      	ldrh	r3, [r3, #0]
 800334a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800334e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	699a      	ldr	r2, [r3, #24]
 8003354:	8b7b      	ldrh	r3, [r7, #26]
 8003356:	429a      	cmp	r2, r3
 8003358:	d306      	bcc.n	8003368 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	699a      	ldr	r2, [r3, #24]
 800335e:	8b7b      	ldrh	r3, [r7, #26]
 8003360:	1ad2      	subs	r2, r2, r3
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	619a      	str	r2, [r3, #24]
 8003366:	e002      	b.n	800336e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2200      	movs	r2, #0
 800336c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d123      	bne.n	80033be <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	b29b      	uxth	r3, r3
 8003388:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800338c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003390:	83fb      	strh	r3, [r7, #30]
 8003392:	8bfb      	ldrh	r3, [r7, #30]
 8003394:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003398:	83fb      	strh	r3, [r7, #30]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	441a      	add	r2, r3
 80033a8:	8bfb      	ldrh	r3, [r7, #30]
 80033aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80033be:	88fb      	ldrh	r3, [r7, #6]
 80033c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d11f      	bne.n	8003408 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	b29b      	uxth	r3, r3
 80033da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e2:	83bb      	strh	r3, [r7, #28]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	461a      	mov	r2, r3
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	441a      	add	r2, r3
 80033f2:	8bbb      	ldrh	r3, [r7, #28]
 80033f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003400:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003404:	b29b      	uxth	r3, r3
 8003406:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003408:	8b7b      	ldrh	r3, [r7, #26]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d008      	beq.n	8003420 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6818      	ldr	r0, [r3, #0]
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	6959      	ldr	r1, [r3, #20]
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	895a      	ldrh	r2, [r3, #10]
 800341a:	8b7b      	ldrh	r3, [r7, #26]
 800341c:	f006 fab6 	bl	800998c <USB_ReadPMA>
    }
  }

  return count;
 8003420:	8b7b      	ldrh	r3, [r7, #26]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3720      	adds	r7, #32
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b0a4      	sub	sp, #144	; 0x90
 800342e:	af00      	add	r7, sp, #0
 8003430:	60f8      	str	r0, [r7, #12]
 8003432:	60b9      	str	r1, [r7, #8]
 8003434:	4613      	mov	r3, r2
 8003436:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003438:	88fb      	ldrh	r3, [r7, #6]
 800343a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 81db 	beq.w	80037fa <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800344c:	b29b      	uxth	r3, r3
 800344e:	461a      	mov	r2, r3
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	4413      	add	r3, r2
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	6812      	ldr	r2, [r2, #0]
 800345c:	4413      	add	r3, r2
 800345e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003468:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	699a      	ldr	r2, [r3, #24]
 8003470:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003474:	429a      	cmp	r2, r3
 8003476:	d907      	bls.n	8003488 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	699a      	ldr	r2, [r3, #24]
 800347c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003480:	1ad2      	subs	r2, r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	619a      	str	r2, [r3, #24]
 8003486:	e002      	b.n	800348e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2200      	movs	r2, #0
 800348c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	2b00      	cmp	r3, #0
 8003494:	f040 80b9 	bne.w	800360a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	785b      	ldrb	r3, [r3, #1]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d126      	bne.n	80034ee <HAL_PCD_EP_DB_Transmit+0xc4>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	461a      	mov	r2, r3
 80034b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b4:	4413      	add	r3, r2
 80034b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	00da      	lsls	r2, r3, #3
 80034be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c0:	4413      	add	r3, r2
 80034c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80034c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80034c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d6:	801a      	strh	r2, [r3, #0]
 80034d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ea:	801a      	strh	r2, [r3, #0]
 80034ec:	e01a      	b.n	8003524 <HAL_PCD_EP_DB_Transmit+0xfa>
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	785b      	ldrb	r3, [r3, #1]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d116      	bne.n	8003524 <HAL_PCD_EP_DB_Transmit+0xfa>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	637b      	str	r3, [r7, #52]	; 0x34
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003504:	b29b      	uxth	r3, r3
 8003506:	461a      	mov	r2, r3
 8003508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800350a:	4413      	add	r3, r2
 800350c:	637b      	str	r3, [r7, #52]	; 0x34
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	00da      	lsls	r2, r3, #3
 8003514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003516:	4413      	add	r3, r2
 8003518:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800351c:	633b      	str	r3, [r7, #48]	; 0x30
 800351e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003520:	2200      	movs	r2, #0
 8003522:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	785b      	ldrb	r3, [r3, #1]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d126      	bne.n	8003580 <HAL_PCD_EP_DB_Transmit+0x156>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	61fb      	str	r3, [r7, #28]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003540:	b29b      	uxth	r3, r3
 8003542:	461a      	mov	r2, r3
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	4413      	add	r3, r2
 8003548:	61fb      	str	r3, [r7, #28]
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	00da      	lsls	r2, r3, #3
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	4413      	add	r3, r2
 8003554:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003558:	61bb      	str	r3, [r7, #24]
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	881b      	ldrh	r3, [r3, #0]
 800355e:	b29b      	uxth	r3, r3
 8003560:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003564:	b29a      	uxth	r2, r3
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	801a      	strh	r2, [r3, #0]
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	b29b      	uxth	r3, r3
 8003570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003578:	b29a      	uxth	r2, r3
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	801a      	strh	r2, [r3, #0]
 800357e:	e017      	b.n	80035b0 <HAL_PCD_EP_DB_Transmit+0x186>
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	785b      	ldrb	r3, [r3, #1]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d113      	bne.n	80035b0 <HAL_PCD_EP_DB_Transmit+0x186>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003590:	b29b      	uxth	r3, r3
 8003592:	461a      	mov	r2, r3
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	4413      	add	r3, r2
 8003598:	627b      	str	r3, [r7, #36]	; 0x24
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	00da      	lsls	r2, r3, #3
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	4413      	add	r3, r2
 80035a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035a8:	623b      	str	r3, [r7, #32]
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	2200      	movs	r2, #0
 80035ae:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	4619      	mov	r1, r3
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f008 f937 	bl	800b82a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80035bc:	88fb      	ldrh	r3, [r7, #6]
 80035be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 82fa 	beq.w	8003bbc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	461a      	mov	r2, r3
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	881b      	ldrh	r3, [r3, #0]
 80035d8:	b29b      	uxth	r3, r3
 80035da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035e2:	82fb      	strh	r3, [r7, #22]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	461a      	mov	r2, r3
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	441a      	add	r2, r3
 80035f2:	8afb      	ldrh	r3, [r7, #22]
 80035f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003604:	b29b      	uxth	r3, r3
 8003606:	8013      	strh	r3, [r2, #0]
 8003608:	e2d8      	b.n	8003bbc <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800360a:	88fb      	ldrh	r3, [r7, #6]
 800360c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d021      	beq.n	8003658 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	461a      	mov	r2, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	881b      	ldrh	r3, [r3, #0]
 8003624:	b29b      	uxth	r3, r3
 8003626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800362a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800362e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	461a      	mov	r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	441a      	add	r2, r3
 8003640:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003648:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800364c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003654:	b29b      	uxth	r3, r3
 8003656:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800365e:	2b01      	cmp	r3, #1
 8003660:	f040 82ac 	bne.w	8003bbc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	695a      	ldr	r2, [r3, #20]
 8003668:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800366c:	441a      	add	r2, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	69da      	ldr	r2, [r3, #28]
 8003676:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800367a:	441a      	add	r2, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	6a1a      	ldr	r2, [r3, #32]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	429a      	cmp	r2, r3
 800368a:	d30b      	bcc.n	80036a4 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	6a1a      	ldr	r2, [r3, #32]
 8003698:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800369c:	1ad2      	subs	r2, r2, r3
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	621a      	str	r2, [r3, #32]
 80036a2:	e017      	b.n	80036d4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d108      	bne.n	80036be <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80036ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80036b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80036bc:	e00a      	b.n	80036d4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	6a1b      	ldr	r3, [r3, #32]
 80036ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2200      	movs	r2, #0
 80036d2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	785b      	ldrb	r3, [r3, #1]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d165      	bne.n	80037a8 <HAL_PCD_EP_DB_Transmit+0x37e>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	461a      	mov	r2, r3
 80036ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036f0:	4413      	add	r3, r2
 80036f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	00da      	lsls	r2, r3, #3
 80036fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036fc:	4413      	add	r3, r2
 80036fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003702:	63bb      	str	r3, [r7, #56]	; 0x38
 8003704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003706:	881b      	ldrh	r3, [r3, #0]
 8003708:	b29b      	uxth	r3, r3
 800370a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800370e:	b29a      	uxth	r2, r3
 8003710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003712:	801a      	strh	r2, [r3, #0]
 8003714:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003718:	2b3e      	cmp	r3, #62	; 0x3e
 800371a:	d91d      	bls.n	8003758 <HAL_PCD_EP_DB_Transmit+0x32e>
 800371c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003720:	095b      	lsrs	r3, r3, #5
 8003722:	64bb      	str	r3, [r7, #72]	; 0x48
 8003724:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003728:	f003 031f 	and.w	r3, r3, #31
 800372c:	2b00      	cmp	r3, #0
 800372e:	d102      	bne.n	8003736 <HAL_PCD_EP_DB_Transmit+0x30c>
 8003730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003732:	3b01      	subs	r3, #1
 8003734:	64bb      	str	r3, [r7, #72]	; 0x48
 8003736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	b29a      	uxth	r2, r3
 800373c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800373e:	b29b      	uxth	r3, r3
 8003740:	029b      	lsls	r3, r3, #10
 8003742:	b29b      	uxth	r3, r3
 8003744:	4313      	orrs	r3, r2
 8003746:	b29b      	uxth	r3, r3
 8003748:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800374c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003750:	b29a      	uxth	r2, r3
 8003752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003754:	801a      	strh	r2, [r3, #0]
 8003756:	e044      	b.n	80037e2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003758:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10a      	bne.n	8003776 <HAL_PCD_EP_DB_Transmit+0x34c>
 8003760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	b29b      	uxth	r3, r3
 8003766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800376a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800376e:	b29a      	uxth	r2, r3
 8003770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003772:	801a      	strh	r2, [r3, #0]
 8003774:	e035      	b.n	80037e2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8003776:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800377a:	085b      	lsrs	r3, r3, #1
 800377c:	64bb      	str	r3, [r7, #72]	; 0x48
 800377e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d002      	beq.n	8003790 <HAL_PCD_EP_DB_Transmit+0x366>
 800378a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800378c:	3301      	adds	r3, #1
 800378e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	b29a      	uxth	r2, r3
 8003796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003798:	b29b      	uxth	r3, r3
 800379a:	029b      	lsls	r3, r3, #10
 800379c:	b29b      	uxth	r3, r3
 800379e:	4313      	orrs	r3, r2
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a4:	801a      	strh	r2, [r3, #0]
 80037a6:	e01c      	b.n	80037e2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	785b      	ldrb	r3, [r3, #1]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d118      	bne.n	80037e2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	647b      	str	r3, [r7, #68]	; 0x44
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037be:	b29b      	uxth	r3, r3
 80037c0:	461a      	mov	r2, r3
 80037c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037c4:	4413      	add	r3, r2
 80037c6:	647b      	str	r3, [r7, #68]	; 0x44
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	00da      	lsls	r2, r3, #3
 80037ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037d0:	4413      	add	r3, r2
 80037d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80037d6:	643b      	str	r3, [r7, #64]	; 0x40
 80037d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037dc:	b29a      	uxth	r2, r3
 80037de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037e0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6818      	ldr	r0, [r3, #0]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	6959      	ldr	r1, [r3, #20]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	891a      	ldrh	r2, [r3, #8]
 80037ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	f006 f888 	bl	8009908 <USB_WritePMA>
 80037f8:	e1e0      	b.n	8003bbc <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003802:	b29b      	uxth	r3, r3
 8003804:	461a      	mov	r2, r3
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	4413      	add	r3, r2
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	6812      	ldr	r2, [r2, #0]
 8003812:	4413      	add	r3, r2
 8003814:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800381e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	699a      	ldr	r2, [r3, #24]
 8003826:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800382a:	429a      	cmp	r2, r3
 800382c:	d307      	bcc.n	800383e <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	699a      	ldr	r2, [r3, #24]
 8003832:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003836:	1ad2      	subs	r2, r2, r3
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	619a      	str	r2, [r3, #24]
 800383c:	e002      	b.n	8003844 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2200      	movs	r2, #0
 8003842:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	2b00      	cmp	r3, #0
 800384a:	f040 80c0 	bne.w	80039ce <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	785b      	ldrb	r3, [r3, #1]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d126      	bne.n	80038a4 <HAL_PCD_EP_DB_Transmit+0x47a>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003864:	b29b      	uxth	r3, r3
 8003866:	461a      	mov	r2, r3
 8003868:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800386a:	4413      	add	r3, r2
 800386c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	00da      	lsls	r2, r3, #3
 8003874:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003876:	4413      	add	r3, r2
 8003878:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800387c:	67bb      	str	r3, [r7, #120]	; 0x78
 800387e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003880:	881b      	ldrh	r3, [r3, #0]
 8003882:	b29b      	uxth	r3, r3
 8003884:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003888:	b29a      	uxth	r2, r3
 800388a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800388c:	801a      	strh	r2, [r3, #0]
 800388e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	b29b      	uxth	r3, r3
 8003894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800389c:	b29a      	uxth	r2, r3
 800389e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038a0:	801a      	strh	r2, [r3, #0]
 80038a2:	e01a      	b.n	80038da <HAL_PCD_EP_DB_Transmit+0x4b0>
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	785b      	ldrb	r3, [r3, #1]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d116      	bne.n	80038da <HAL_PCD_EP_DB_Transmit+0x4b0>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	667b      	str	r3, [r7, #100]	; 0x64
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	461a      	mov	r2, r3
 80038be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038c0:	4413      	add	r3, r2
 80038c2:	667b      	str	r3, [r7, #100]	; 0x64
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	00da      	lsls	r2, r3, #3
 80038ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038cc:	4413      	add	r3, r2
 80038ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80038d2:	663b      	str	r3, [r7, #96]	; 0x60
 80038d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038d6:	2200      	movs	r2, #0
 80038d8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	677b      	str	r3, [r7, #116]	; 0x74
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	785b      	ldrb	r3, [r3, #1]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d12b      	bne.n	8003940 <HAL_PCD_EP_DB_Transmit+0x516>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	461a      	mov	r2, r3
 80038fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038fc:	4413      	add	r3, r2
 80038fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	00da      	lsls	r2, r3, #3
 8003906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003908:	4413      	add	r3, r2
 800390a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800390e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003912:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	b29b      	uxth	r3, r3
 800391a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800391e:	b29a      	uxth	r2, r3
 8003920:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003924:	801a      	strh	r2, [r3, #0]
 8003926:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	b29b      	uxth	r3, r3
 800392e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003936:	b29a      	uxth	r2, r3
 8003938:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800393c:	801a      	strh	r2, [r3, #0]
 800393e:	e017      	b.n	8003970 <HAL_PCD_EP_DB_Transmit+0x546>
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	785b      	ldrb	r3, [r3, #1]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d113      	bne.n	8003970 <HAL_PCD_EP_DB_Transmit+0x546>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003950:	b29b      	uxth	r3, r3
 8003952:	461a      	mov	r2, r3
 8003954:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003956:	4413      	add	r3, r2
 8003958:	677b      	str	r3, [r7, #116]	; 0x74
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	00da      	lsls	r2, r3, #3
 8003960:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003962:	4413      	add	r3, r2
 8003964:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003968:	673b      	str	r3, [r7, #112]	; 0x70
 800396a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800396c:	2200      	movs	r2, #0
 800396e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	4619      	mov	r1, r3
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f007 ff57 	bl	800b82a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800397c:	88fb      	ldrh	r3, [r7, #6]
 800397e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003982:	2b00      	cmp	r3, #0
 8003984:	f040 811a 	bne.w	8003bbc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	461a      	mov	r2, r3
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	881b      	ldrh	r3, [r3, #0]
 8003998:	b29b      	uxth	r3, r3
 800399a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800399e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	461a      	mov	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	441a      	add	r2, r3
 80039b4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80039b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	8013      	strh	r3, [r2, #0]
 80039cc:	e0f6      	b.n	8003bbc <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80039ce:	88fb      	ldrh	r3, [r7, #6]
 80039d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d121      	bne.n	8003a1c <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	461a      	mov	r2, r3
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	461a      	mov	r2, r3
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	441a      	add	r2, r3
 8003a04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	f040 80ca 	bne.w	8003bbc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	695a      	ldr	r2, [r3, #20]
 8003a2c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003a30:	441a      	add	r2, r3
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	69da      	ldr	r2, [r3, #28]
 8003a3a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003a3e:	441a      	add	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	6a1a      	ldr	r2, [r3, #32]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d30b      	bcc.n	8003a68 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	6a1a      	ldr	r2, [r3, #32]
 8003a5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a60:	1ad2      	subs	r2, r2, r3
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	621a      	str	r2, [r3, #32]
 8003a66:	e017      	b.n	8003a98 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d108      	bne.n	8003a82 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8003a70:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003a74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003a80:	e00a      	b.n	8003a98 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	657b      	str	r3, [r7, #84]	; 0x54
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	785b      	ldrb	r3, [r3, #1]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d165      	bne.n	8003b72 <HAL_PCD_EP_DB_Transmit+0x748>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aba:	4413      	add	r3, r2
 8003abc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	00da      	lsls	r2, r3, #3
 8003ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003acc:	65bb      	str	r3, [r7, #88]	; 0x58
 8003ace:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ad0:	881b      	ldrh	r3, [r3, #0]
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003adc:	801a      	strh	r2, [r3, #0]
 8003ade:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ae2:	2b3e      	cmp	r3, #62	; 0x3e
 8003ae4:	d91d      	bls.n	8003b22 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8003ae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	66bb      	str	r3, [r7, #104]	; 0x68
 8003aee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003af2:	f003 031f 	and.w	r3, r3, #31
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d102      	bne.n	8003b00 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003afa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003afc:	3b01      	subs	r3, #1
 8003afe:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b02:	881b      	ldrh	r3, [r3, #0]
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	029b      	lsls	r3, r3, #10
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b1e:	801a      	strh	r2, [r3, #0]
 8003b20:	e041      	b.n	8003ba6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003b22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10a      	bne.n	8003b40 <HAL_PCD_EP_DB_Transmit+0x716>
 8003b2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b3c:	801a      	strh	r2, [r3, #0]
 8003b3e:	e032      	b.n	8003ba6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003b40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b44:	085b      	lsrs	r3, r3, #1
 8003b46:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d002      	beq.n	8003b5a <HAL_PCD_EP_DB_Transmit+0x730>
 8003b54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b56:	3301      	adds	r3, #1
 8003b58:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	029b      	lsls	r3, r3, #10
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b6e:	801a      	strh	r2, [r3, #0]
 8003b70:	e019      	b.n	8003ba6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	785b      	ldrb	r3, [r3, #1]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d115      	bne.n	8003ba6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	461a      	mov	r2, r3
 8003b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b88:	4413      	add	r3, r2
 8003b8a:	657b      	str	r3, [r7, #84]	; 0x54
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	00da      	lsls	r2, r3, #3
 8003b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b94:	4413      	add	r3, r2
 8003b96:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003b9a:	653b      	str	r3, [r7, #80]	; 0x50
 8003b9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ba4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6818      	ldr	r0, [r3, #0]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	6959      	ldr	r1, [r3, #20]
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	895a      	ldrh	r2, [r3, #10]
 8003bb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	f005 fea6 	bl	8009908 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	881b      	ldrh	r3, [r3, #0]
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bd6:	82bb      	strh	r3, [r7, #20]
 8003bd8:	8abb      	ldrh	r3, [r7, #20]
 8003bda:	f083 0310 	eor.w	r3, r3, #16
 8003bde:	82bb      	strh	r3, [r7, #20]
 8003be0:	8abb      	ldrh	r3, [r7, #20]
 8003be2:	f083 0320 	eor.w	r3, r3, #32
 8003be6:	82bb      	strh	r3, [r7, #20]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	461a      	mov	r2, r3
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	441a      	add	r2, r3
 8003bf6:	8abb      	ldrh	r3, [r7, #20]
 8003bf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3790      	adds	r7, #144	; 0x90
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b087      	sub	sp, #28
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	60f8      	str	r0, [r7, #12]
 8003c1e:	607b      	str	r3, [r7, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	817b      	strh	r3, [r7, #10]
 8003c24:	4613      	mov	r3, r2
 8003c26:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003c28:	897b      	ldrh	r3, [r7, #10]
 8003c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00b      	beq.n	8003c4c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c34:	897b      	ldrh	r3, [r7, #10]
 8003c36:	f003 0207 	and.w	r2, r3, #7
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	3310      	adds	r3, #16
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	4413      	add	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]
 8003c4a:	e009      	b.n	8003c60 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c4c:	897a      	ldrh	r2, [r7, #10]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003c60:	893b      	ldrh	r3, [r7, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d107      	bne.n	8003c76 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	80da      	strh	r2, [r3, #6]
 8003c74:	e00b      	b.n	8003c8e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	0c1b      	lsrs	r3, r3, #16
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	371c      	adds	r7, #28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	f043 0301 	orr.w	r3, r3, #1
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	f043 0302 	orr.w	r3, r3, #2
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d141      	bne.n	8003d82 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cfe:	4b4b      	ldr	r3, [pc, #300]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d0a:	d131      	bne.n	8003d70 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d0c:	4b47      	ldr	r3, [pc, #284]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d12:	4a46      	ldr	r2, [pc, #280]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d1c:	4b43      	ldr	r3, [pc, #268]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d24:	4a41      	ldr	r2, [pc, #260]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d2c:	4b40      	ldr	r3, [pc, #256]	; (8003e30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2232      	movs	r2, #50	; 0x32
 8003d32:	fb02 f303 	mul.w	r3, r2, r3
 8003d36:	4a3f      	ldr	r2, [pc, #252]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003d38:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3c:	0c9b      	lsrs	r3, r3, #18
 8003d3e:	3301      	adds	r3, #1
 8003d40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d42:	e002      	b.n	8003d4a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d4a:	4b38      	ldr	r3, [pc, #224]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d56:	d102      	bne.n	8003d5e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1f2      	bne.n	8003d44 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d5e:	4b33      	ldr	r3, [pc, #204]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d6a:	d158      	bne.n	8003e1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e057      	b.n	8003e20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d70:	4b2e      	ldr	r3, [pc, #184]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d76:	4a2d      	ldr	r2, [pc, #180]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003d80:	e04d      	b.n	8003e1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d88:	d141      	bne.n	8003e0e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d8a:	4b28      	ldr	r3, [pc, #160]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d96:	d131      	bne.n	8003dfc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d98:	4b24      	ldr	r3, [pc, #144]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d9e:	4a23      	ldr	r2, [pc, #140]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003da8:	4b20      	ldr	r3, [pc, #128]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003db0:	4a1e      	ldr	r2, [pc, #120]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003db2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003db6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003db8:	4b1d      	ldr	r3, [pc, #116]	; (8003e30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2232      	movs	r2, #50	; 0x32
 8003dbe:	fb02 f303 	mul.w	r3, r2, r3
 8003dc2:	4a1c      	ldr	r2, [pc, #112]	; (8003e34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc8:	0c9b      	lsrs	r3, r3, #18
 8003dca:	3301      	adds	r3, #1
 8003dcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dce:	e002      	b.n	8003dd6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dd6:	4b15      	ldr	r3, [pc, #84]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de2:	d102      	bne.n	8003dea <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f2      	bne.n	8003dd0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dea:	4b10      	ldr	r3, [pc, #64]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df6:	d112      	bne.n	8003e1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e011      	b.n	8003e20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e02:	4a0a      	ldr	r2, [pc, #40]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e0c:	e007      	b.n	8003e1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e0e:	4b07      	ldr	r3, [pc, #28]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e16:	4a05      	ldr	r2, [pc, #20]	; (8003e2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e1c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	40007000 	.word	0x40007000
 8003e30:	20000000 	.word	0x20000000
 8003e34:	431bde83 	.word	0x431bde83

08003e38 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003e3c:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	4a04      	ldr	r2, [pc, #16]	; (8003e54 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003e42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e46:	6093      	str	r3, [r2, #8]
}
 8003e48:	bf00      	nop
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40007000 	.word	0x40007000

08003e58 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003e5e:	f7fd fca3 	bl	80017a8 <HAL_GetTick>
 8003e62:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003e64:	4b39      	ldr	r3, [pc, #228]	; (8003f4c <HAL_RCC_DeInit+0xf4>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a38      	ldr	r2, [pc, #224]	; (8003f4c <HAL_RCC_DeInit+0xf4>)
 8003e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e6e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e70:	e008      	b.n	8003e84 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e72:	f7fd fc99 	bl	80017a8 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e05f      	b.n	8003f44 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e84:	4b31      	ldr	r3, [pc, #196]	; (8003f4c <HAL_RCC_DeInit+0xf4>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0f0      	beq.n	8003e72 <HAL_RCC_DeInit+0x1a>
    }
  }

 /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->ICSCR, RCC_HSICALIBRATION_DEFAULT << RCC_ICSCR_HSITRIM_Pos);
 8003e90:	4b2e      	ldr	r3, [pc, #184]	; (8003f4c <HAL_RCC_DeInit+0xf4>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	4a2d      	ldr	r2, [pc, #180]	; (8003f4c <HAL_RCC_DeInit+0xf4>)
 8003e96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e9a:	6053      	str	r3, [r2, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003e9c:	f7fd fc84 	bl	80017a8 <HAL_GetTick>
 8003ea0:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000001u;
 8003ea2:	4b2a      	ldr	r3, [pc, #168]	; (8003f4c <HAL_RCC_DeInit+0xf4>)
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	609a      	str	r2, [r3, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003ea8:	e00a      	b.n	8003ec0 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eaa:	f7fd fc7d 	bl	80017a8 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e041      	b.n	8003f44 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003ec0:	4b22      	ldr	r3, [pc, #136]	; (8003f4c <HAL_RCC_DeInit+0xf4>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 030c 	and.w	r3, r3, #12
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d1ee      	bne.n	8003eaa <HAL_RCC_DeInit+0x52>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003ecc:	4b20      	ldr	r3, [pc, #128]	; (8003f50 <HAL_RCC_DeInit+0xf8>)
 8003ece:	4a21      	ldr	r2, [pc, #132]	; (8003f54 <HAL_RCC_DeInit+0xfc>)
 8003ed0:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ed2:	4b21      	ldr	r3, [pc, #132]	; (8003f58 <HAL_RCC_DeInit+0x100>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fd fc1a 	bl	8001710 <HAL_InitTick>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <HAL_RCC_DeInit+0x8e>
  {
    return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e02e      	b.n	8003f44 <HAL_RCC_DeInit+0xec>
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8003ee6:	4b19      	ldr	r3, [pc, #100]	; (8003f4c <HAL_RCC_DeInit+0xf4>)
 8003ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003eec:	601a      	str	r2, [r3, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8003eee:	4b17      	ldr	r3, [pc, #92]	; (8003f4c <HAL_RCC_DeInit+0xf4>)
 8003ef0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ef4:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003ef6:	f7fd fc57 	bl	80017a8 <HAL_GetTick>
 8003efa:	6078      	str	r0, [r7, #4]

  /* Wait till PLL is OFF */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003efc:	e008      	b.n	8003f10 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003efe:	f7fd fc53 	bl	80017a8 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e019      	b.n	8003f44 <HAL_RCC_DeInit+0xec>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f10:	4b0e      	ldr	r3, [pc, #56]	; (8003f4c <HAL_RCC_DeInit+0xf4>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1f0      	bne.n	8003efe <HAL_RCC_DeInit+0xa6>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 8003f1c:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <HAL_RCC_DeInit+0xf4>)
 8003f1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f22:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8003f24:	4b09      	ldr	r3, [pc, #36]	; (8003f4c <HAL_RCC_DeInit+0xf4>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8003f2a:	4b08      	ldr	r3, [pc, #32]	; (8003f4c <HAL_RCC_DeInit+0xf4>)
 8003f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f30:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003f32:	4b06      	ldr	r3, [pc, #24]	; (8003f4c <HAL_RCC_DeInit+0xf4>)
 8003f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f38:	4a04      	ldr	r2, [pc, #16]	; (8003f4c <HAL_RCC_DeInit+0xf4>)
 8003f3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3708      	adds	r7, #8
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	20000000 	.word	0x20000000
 8003f54:	00f42400 	.word	0x00f42400
 8003f58:	20000004 	.word	0x20000004

08003f5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b088      	sub	sp, #32
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e2fe      	b.n	800456c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d075      	beq.n	8004066 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f7a:	4b97      	ldr	r3, [pc, #604]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
 8003f82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f84:	4b94      	ldr	r3, [pc, #592]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f003 0303 	and.w	r3, r3, #3
 8003f8c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	2b0c      	cmp	r3, #12
 8003f92:	d102      	bne.n	8003f9a <HAL_RCC_OscConfig+0x3e>
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2b03      	cmp	r3, #3
 8003f98:	d002      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x44>
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	d10b      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fa0:	4b8d      	ldr	r3, [pc, #564]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d05b      	beq.n	8004064 <HAL_RCC_OscConfig+0x108>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d157      	bne.n	8004064 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e2d9      	b.n	800456c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc0:	d106      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x74>
 8003fc2:	4b85      	ldr	r3, [pc, #532]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a84      	ldr	r2, [pc, #528]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8003fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	e01d      	b.n	800400c <HAL_RCC_OscConfig+0xb0>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fd8:	d10c      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x98>
 8003fda:	4b7f      	ldr	r3, [pc, #508]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a7e      	ldr	r2, [pc, #504]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8003fe0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	4b7c      	ldr	r3, [pc, #496]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a7b      	ldr	r2, [pc, #492]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8003fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	e00b      	b.n	800400c <HAL_RCC_OscConfig+0xb0>
 8003ff4:	4b78      	ldr	r3, [pc, #480]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a77      	ldr	r2, [pc, #476]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8003ffa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ffe:	6013      	str	r3, [r2, #0]
 8004000:	4b75      	ldr	r3, [pc, #468]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a74      	ldr	r2, [pc, #464]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8004006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800400a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d013      	beq.n	800403c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004014:	f7fd fbc8 	bl	80017a8 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800401c:	f7fd fbc4 	bl	80017a8 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b64      	cmp	r3, #100	; 0x64
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e29e      	b.n	800456c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800402e:	4b6a      	ldr	r3, [pc, #424]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d0f0      	beq.n	800401c <HAL_RCC_OscConfig+0xc0>
 800403a:	e014      	b.n	8004066 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7fd fbb4 	bl	80017a8 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004044:	f7fd fbb0 	bl	80017a8 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b64      	cmp	r3, #100	; 0x64
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e28a      	b.n	800456c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004056:	4b60      	ldr	r3, [pc, #384]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0xe8>
 8004062:	e000      	b.n	8004066 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d075      	beq.n	800415e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004072:	4b59      	ldr	r3, [pc, #356]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 030c 	and.w	r3, r3, #12
 800407a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800407c:	4b56      	ldr	r3, [pc, #344]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f003 0303 	and.w	r3, r3, #3
 8004084:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	2b0c      	cmp	r3, #12
 800408a:	d102      	bne.n	8004092 <HAL_RCC_OscConfig+0x136>
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	2b02      	cmp	r3, #2
 8004090:	d002      	beq.n	8004098 <HAL_RCC_OscConfig+0x13c>
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	2b04      	cmp	r3, #4
 8004096:	d11f      	bne.n	80040d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004098:	4b4f      	ldr	r3, [pc, #316]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d005      	beq.n	80040b0 <HAL_RCC_OscConfig+0x154>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e25d      	b.n	800456c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b0:	4b49      	ldr	r3, [pc, #292]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	061b      	lsls	r3, r3, #24
 80040be:	4946      	ldr	r1, [pc, #280]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80040c4:	4b45      	ldr	r3, [pc, #276]	; (80041dc <HAL_RCC_OscConfig+0x280>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fd fb21 	bl	8001710 <HAL_InitTick>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d043      	beq.n	800415c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e249      	b.n	800456c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d023      	beq.n	8004128 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040e0:	4b3d      	ldr	r3, [pc, #244]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a3c      	ldr	r2, [pc, #240]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 80040e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ec:	f7fd fb5c 	bl	80017a8 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f4:	f7fd fb58 	bl	80017a8 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e232      	b.n	800456c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004106:	4b34      	ldr	r3, [pc, #208]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0f0      	beq.n	80040f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004112:	4b31      	ldr	r3, [pc, #196]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	061b      	lsls	r3, r3, #24
 8004120:	492d      	ldr	r1, [pc, #180]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8004122:	4313      	orrs	r3, r2
 8004124:	604b      	str	r3, [r1, #4]
 8004126:	e01a      	b.n	800415e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004128:	4b2b      	ldr	r3, [pc, #172]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a2a      	ldr	r2, [pc, #168]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 800412e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004132:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004134:	f7fd fb38 	bl	80017a8 <HAL_GetTick>
 8004138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800413a:	e008      	b.n	800414e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800413c:	f7fd fb34 	bl	80017a8 <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	2b02      	cmp	r3, #2
 8004148:	d901      	bls.n	800414e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e20e      	b.n	800456c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800414e:	4b22      	ldr	r3, [pc, #136]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f0      	bne.n	800413c <HAL_RCC_OscConfig+0x1e0>
 800415a:	e000      	b.n	800415e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800415c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0308 	and.w	r3, r3, #8
 8004166:	2b00      	cmp	r3, #0
 8004168:	d041      	beq.n	80041ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d01c      	beq.n	80041ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004172:	4b19      	ldr	r3, [pc, #100]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 8004174:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004178:	4a17      	ldr	r2, [pc, #92]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 800417a:	f043 0301 	orr.w	r3, r3, #1
 800417e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004182:	f7fd fb11 	bl	80017a8 <HAL_GetTick>
 8004186:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004188:	e008      	b.n	800419c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800418a:	f7fd fb0d 	bl	80017a8 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e1e7      	b.n	800456c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800419c:	4b0e      	ldr	r3, [pc, #56]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 800419e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0ef      	beq.n	800418a <HAL_RCC_OscConfig+0x22e>
 80041aa:	e020      	b.n	80041ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041ac:	4b0a      	ldr	r3, [pc, #40]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 80041ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b2:	4a09      	ldr	r2, [pc, #36]	; (80041d8 <HAL_RCC_OscConfig+0x27c>)
 80041b4:	f023 0301 	bic.w	r3, r3, #1
 80041b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041bc:	f7fd faf4 	bl	80017a8 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041c2:	e00d      	b.n	80041e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041c4:	f7fd faf0 	bl	80017a8 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d906      	bls.n	80041e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e1ca      	b.n	800456c <HAL_RCC_OscConfig+0x610>
 80041d6:	bf00      	nop
 80041d8:	40021000 	.word	0x40021000
 80041dc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041e0:	4b8c      	ldr	r3, [pc, #560]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 80041e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1ea      	bne.n	80041c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0304 	and.w	r3, r3, #4
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 80a6 	beq.w	8004348 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041fc:	2300      	movs	r3, #0
 80041fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004200:	4b84      	ldr	r3, [pc, #528]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 8004202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d101      	bne.n	8004210 <HAL_RCC_OscConfig+0x2b4>
 800420c:	2301      	movs	r3, #1
 800420e:	e000      	b.n	8004212 <HAL_RCC_OscConfig+0x2b6>
 8004210:	2300      	movs	r3, #0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00d      	beq.n	8004232 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004216:	4b7f      	ldr	r3, [pc, #508]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 8004218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421a:	4a7e      	ldr	r2, [pc, #504]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 800421c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004220:	6593      	str	r3, [r2, #88]	; 0x58
 8004222:	4b7c      	ldr	r3, [pc, #496]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 8004224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800422e:	2301      	movs	r3, #1
 8004230:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004232:	4b79      	ldr	r3, [pc, #484]	; (8004418 <HAL_RCC_OscConfig+0x4bc>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423a:	2b00      	cmp	r3, #0
 800423c:	d118      	bne.n	8004270 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800423e:	4b76      	ldr	r3, [pc, #472]	; (8004418 <HAL_RCC_OscConfig+0x4bc>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a75      	ldr	r2, [pc, #468]	; (8004418 <HAL_RCC_OscConfig+0x4bc>)
 8004244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800424a:	f7fd faad 	bl	80017a8 <HAL_GetTick>
 800424e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004250:	e008      	b.n	8004264 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004252:	f7fd faa9 	bl	80017a8 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d901      	bls.n	8004264 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e183      	b.n	800456c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004264:	4b6c      	ldr	r3, [pc, #432]	; (8004418 <HAL_RCC_OscConfig+0x4bc>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0f0      	beq.n	8004252 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d108      	bne.n	800428a <HAL_RCC_OscConfig+0x32e>
 8004278:	4b66      	ldr	r3, [pc, #408]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 800427a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427e:	4a65      	ldr	r2, [pc, #404]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 8004280:	f043 0301 	orr.w	r3, r3, #1
 8004284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004288:	e024      	b.n	80042d4 <HAL_RCC_OscConfig+0x378>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	2b05      	cmp	r3, #5
 8004290:	d110      	bne.n	80042b4 <HAL_RCC_OscConfig+0x358>
 8004292:	4b60      	ldr	r3, [pc, #384]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 8004294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004298:	4a5e      	ldr	r2, [pc, #376]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 800429a:	f043 0304 	orr.w	r3, r3, #4
 800429e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042a2:	4b5c      	ldr	r3, [pc, #368]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 80042a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a8:	4a5a      	ldr	r2, [pc, #360]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 80042aa:	f043 0301 	orr.w	r3, r3, #1
 80042ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042b2:	e00f      	b.n	80042d4 <HAL_RCC_OscConfig+0x378>
 80042b4:	4b57      	ldr	r3, [pc, #348]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 80042b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ba:	4a56      	ldr	r2, [pc, #344]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 80042bc:	f023 0301 	bic.w	r3, r3, #1
 80042c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042c4:	4b53      	ldr	r3, [pc, #332]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 80042c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ca:	4a52      	ldr	r2, [pc, #328]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 80042cc:	f023 0304 	bic.w	r3, r3, #4
 80042d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d016      	beq.n	800430a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042dc:	f7fd fa64 	bl	80017a8 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042e2:	e00a      	b.n	80042fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e4:	f7fd fa60 	bl	80017a8 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e138      	b.n	800456c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042fa:	4b46      	ldr	r3, [pc, #280]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 80042fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0ed      	beq.n	80042e4 <HAL_RCC_OscConfig+0x388>
 8004308:	e015      	b.n	8004336 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800430a:	f7fd fa4d 	bl	80017a8 <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004310:	e00a      	b.n	8004328 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004312:	f7fd fa49 	bl	80017a8 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004320:	4293      	cmp	r3, r2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e121      	b.n	800456c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004328:	4b3a      	ldr	r3, [pc, #232]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 800432a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1ed      	bne.n	8004312 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004336:	7ffb      	ldrb	r3, [r7, #31]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d105      	bne.n	8004348 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800433c:	4b35      	ldr	r3, [pc, #212]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 800433e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004340:	4a34      	ldr	r2, [pc, #208]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 8004342:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004346:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0320 	and.w	r3, r3, #32
 8004350:	2b00      	cmp	r3, #0
 8004352:	d03c      	beq.n	80043ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d01c      	beq.n	8004396 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800435c:	4b2d      	ldr	r3, [pc, #180]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 800435e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004362:	4a2c      	ldr	r2, [pc, #176]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 8004364:	f043 0301 	orr.w	r3, r3, #1
 8004368:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800436c:	f7fd fa1c 	bl	80017a8 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004374:	f7fd fa18 	bl	80017a8 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e0f2      	b.n	800456c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004386:	4b23      	ldr	r3, [pc, #140]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 8004388:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d0ef      	beq.n	8004374 <HAL_RCC_OscConfig+0x418>
 8004394:	e01b      	b.n	80043ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004396:	4b1f      	ldr	r3, [pc, #124]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 8004398:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800439c:	4a1d      	ldr	r2, [pc, #116]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 800439e:	f023 0301 	bic.w	r3, r3, #1
 80043a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a6:	f7fd f9ff 	bl	80017a8 <HAL_GetTick>
 80043aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043ac:	e008      	b.n	80043c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043ae:	f7fd f9fb 	bl	80017a8 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e0d5      	b.n	800456c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043c0:	4b14      	ldr	r3, [pc, #80]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 80043c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1ef      	bne.n	80043ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 80c9 	beq.w	800456a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043d8:	4b0e      	ldr	r3, [pc, #56]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 030c 	and.w	r3, r3, #12
 80043e0:	2b0c      	cmp	r3, #12
 80043e2:	f000 8083 	beq.w	80044ec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d15e      	bne.n	80044ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ee:	4b09      	ldr	r3, [pc, #36]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a08      	ldr	r2, [pc, #32]	; (8004414 <HAL_RCC_OscConfig+0x4b8>)
 80043f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fa:	f7fd f9d5 	bl	80017a8 <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004400:	e00c      	b.n	800441c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004402:	f7fd f9d1 	bl	80017a8 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d905      	bls.n	800441c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e0ab      	b.n	800456c <HAL_RCC_OscConfig+0x610>
 8004414:	40021000 	.word	0x40021000
 8004418:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800441c:	4b55      	ldr	r3, [pc, #340]	; (8004574 <HAL_RCC_OscConfig+0x618>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1ec      	bne.n	8004402 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004428:	4b52      	ldr	r3, [pc, #328]	; (8004574 <HAL_RCC_OscConfig+0x618>)
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	4b52      	ldr	r3, [pc, #328]	; (8004578 <HAL_RCC_OscConfig+0x61c>)
 800442e:	4013      	ands	r3, r2
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6a11      	ldr	r1, [r2, #32]
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004438:	3a01      	subs	r2, #1
 800443a:	0112      	lsls	r2, r2, #4
 800443c:	4311      	orrs	r1, r2
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004442:	0212      	lsls	r2, r2, #8
 8004444:	4311      	orrs	r1, r2
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800444a:	0852      	lsrs	r2, r2, #1
 800444c:	3a01      	subs	r2, #1
 800444e:	0552      	lsls	r2, r2, #21
 8004450:	4311      	orrs	r1, r2
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004456:	0852      	lsrs	r2, r2, #1
 8004458:	3a01      	subs	r2, #1
 800445a:	0652      	lsls	r2, r2, #25
 800445c:	4311      	orrs	r1, r2
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004462:	06d2      	lsls	r2, r2, #27
 8004464:	430a      	orrs	r2, r1
 8004466:	4943      	ldr	r1, [pc, #268]	; (8004574 <HAL_RCC_OscConfig+0x618>)
 8004468:	4313      	orrs	r3, r2
 800446a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800446c:	4b41      	ldr	r3, [pc, #260]	; (8004574 <HAL_RCC_OscConfig+0x618>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a40      	ldr	r2, [pc, #256]	; (8004574 <HAL_RCC_OscConfig+0x618>)
 8004472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004476:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004478:	4b3e      	ldr	r3, [pc, #248]	; (8004574 <HAL_RCC_OscConfig+0x618>)
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	4a3d      	ldr	r2, [pc, #244]	; (8004574 <HAL_RCC_OscConfig+0x618>)
 800447e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004482:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004484:	f7fd f990 	bl	80017a8 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800448c:	f7fd f98c 	bl	80017a8 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e066      	b.n	800456c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800449e:	4b35      	ldr	r3, [pc, #212]	; (8004574 <HAL_RCC_OscConfig+0x618>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0f0      	beq.n	800448c <HAL_RCC_OscConfig+0x530>
 80044aa:	e05e      	b.n	800456a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ac:	4b31      	ldr	r3, [pc, #196]	; (8004574 <HAL_RCC_OscConfig+0x618>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a30      	ldr	r2, [pc, #192]	; (8004574 <HAL_RCC_OscConfig+0x618>)
 80044b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b8:	f7fd f976 	bl	80017a8 <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c0:	f7fd f972 	bl	80017a8 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e04c      	b.n	800456c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044d2:	4b28      	ldr	r3, [pc, #160]	; (8004574 <HAL_RCC_OscConfig+0x618>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1f0      	bne.n	80044c0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80044de:	4b25      	ldr	r3, [pc, #148]	; (8004574 <HAL_RCC_OscConfig+0x618>)
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	4924      	ldr	r1, [pc, #144]	; (8004574 <HAL_RCC_OscConfig+0x618>)
 80044e4:	4b25      	ldr	r3, [pc, #148]	; (800457c <HAL_RCC_OscConfig+0x620>)
 80044e6:	4013      	ands	r3, r2
 80044e8:	60cb      	str	r3, [r1, #12]
 80044ea:	e03e      	b.n	800456a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d101      	bne.n	80044f8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e039      	b.n	800456c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80044f8:	4b1e      	ldr	r3, [pc, #120]	; (8004574 <HAL_RCC_OscConfig+0x618>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f003 0203 	and.w	r2, r3, #3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	429a      	cmp	r2, r3
 800450a:	d12c      	bne.n	8004566 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004516:	3b01      	subs	r3, #1
 8004518:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800451a:	429a      	cmp	r2, r3
 800451c:	d123      	bne.n	8004566 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004528:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800452a:	429a      	cmp	r2, r3
 800452c:	d11b      	bne.n	8004566 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004538:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800453a:	429a      	cmp	r2, r3
 800453c:	d113      	bne.n	8004566 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004548:	085b      	lsrs	r3, r3, #1
 800454a:	3b01      	subs	r3, #1
 800454c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800454e:	429a      	cmp	r2, r3
 8004550:	d109      	bne.n	8004566 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800455c:	085b      	lsrs	r3, r3, #1
 800455e:	3b01      	subs	r3, #1
 8004560:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004562:	429a      	cmp	r2, r3
 8004564:	d001      	beq.n	800456a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e000      	b.n	800456c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3720      	adds	r7, #32
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40021000 	.word	0x40021000
 8004578:	019f800c 	.word	0x019f800c
 800457c:	feeefffc 	.word	0xfeeefffc

08004580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800458a:	2300      	movs	r3, #0
 800458c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d101      	bne.n	8004598 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e11e      	b.n	80047d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004598:	4b91      	ldr	r3, [pc, #580]	; (80047e0 <HAL_RCC_ClockConfig+0x260>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 030f 	and.w	r3, r3, #15
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d910      	bls.n	80045c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a6:	4b8e      	ldr	r3, [pc, #568]	; (80047e0 <HAL_RCC_ClockConfig+0x260>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f023 020f 	bic.w	r2, r3, #15
 80045ae:	498c      	ldr	r1, [pc, #560]	; (80047e0 <HAL_RCC_ClockConfig+0x260>)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b6:	4b8a      	ldr	r3, [pc, #552]	; (80047e0 <HAL_RCC_ClockConfig+0x260>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 030f 	and.w	r3, r3, #15
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d001      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e106      	b.n	80047d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d073      	beq.n	80046bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	2b03      	cmp	r3, #3
 80045da:	d129      	bne.n	8004630 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045dc:	4b81      	ldr	r3, [pc, #516]	; (80047e4 <HAL_RCC_ClockConfig+0x264>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d101      	bne.n	80045ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e0f4      	b.n	80047d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80045ec:	f000 f99e 	bl	800492c <RCC_GetSysClockFreqFromPLLSource>
 80045f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	4a7c      	ldr	r2, [pc, #496]	; (80047e8 <HAL_RCC_ClockConfig+0x268>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d93f      	bls.n	800467a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80045fa:	4b7a      	ldr	r3, [pc, #488]	; (80047e4 <HAL_RCC_ClockConfig+0x264>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d009      	beq.n	800461a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800460e:	2b00      	cmp	r3, #0
 8004610:	d033      	beq.n	800467a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004616:	2b00      	cmp	r3, #0
 8004618:	d12f      	bne.n	800467a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800461a:	4b72      	ldr	r3, [pc, #456]	; (80047e4 <HAL_RCC_ClockConfig+0x264>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004622:	4a70      	ldr	r2, [pc, #448]	; (80047e4 <HAL_RCC_ClockConfig+0x264>)
 8004624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004628:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800462a:	2380      	movs	r3, #128	; 0x80
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	e024      	b.n	800467a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d107      	bne.n	8004648 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004638:	4b6a      	ldr	r3, [pc, #424]	; (80047e4 <HAL_RCC_ClockConfig+0x264>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d109      	bne.n	8004658 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e0c6      	b.n	80047d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004648:	4b66      	ldr	r3, [pc, #408]	; (80047e4 <HAL_RCC_ClockConfig+0x264>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e0be      	b.n	80047d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004658:	f000 f8ce 	bl	80047f8 <HAL_RCC_GetSysClockFreq>
 800465c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	4a61      	ldr	r2, [pc, #388]	; (80047e8 <HAL_RCC_ClockConfig+0x268>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d909      	bls.n	800467a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004666:	4b5f      	ldr	r3, [pc, #380]	; (80047e4 <HAL_RCC_ClockConfig+0x264>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800466e:	4a5d      	ldr	r2, [pc, #372]	; (80047e4 <HAL_RCC_ClockConfig+0x264>)
 8004670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004674:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004676:	2380      	movs	r3, #128	; 0x80
 8004678:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800467a:	4b5a      	ldr	r3, [pc, #360]	; (80047e4 <HAL_RCC_ClockConfig+0x264>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f023 0203 	bic.w	r2, r3, #3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	4957      	ldr	r1, [pc, #348]	; (80047e4 <HAL_RCC_ClockConfig+0x264>)
 8004688:	4313      	orrs	r3, r2
 800468a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800468c:	f7fd f88c 	bl	80017a8 <HAL_GetTick>
 8004690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004692:	e00a      	b.n	80046aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004694:	f7fd f888 	bl	80017a8 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e095      	b.n	80047d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046aa:	4b4e      	ldr	r3, [pc, #312]	; (80047e4 <HAL_RCC_ClockConfig+0x264>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f003 020c 	and.w	r2, r3, #12
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d1eb      	bne.n	8004694 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d023      	beq.n	8004710 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d005      	beq.n	80046e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046d4:	4b43      	ldr	r3, [pc, #268]	; (80047e4 <HAL_RCC_ClockConfig+0x264>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	4a42      	ldr	r2, [pc, #264]	; (80047e4 <HAL_RCC_ClockConfig+0x264>)
 80046da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0308 	and.w	r3, r3, #8
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d007      	beq.n	80046fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80046ec:	4b3d      	ldr	r3, [pc, #244]	; (80047e4 <HAL_RCC_ClockConfig+0x264>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80046f4:	4a3b      	ldr	r2, [pc, #236]	; (80047e4 <HAL_RCC_ClockConfig+0x264>)
 80046f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046fc:	4b39      	ldr	r3, [pc, #228]	; (80047e4 <HAL_RCC_ClockConfig+0x264>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	4936      	ldr	r1, [pc, #216]	; (80047e4 <HAL_RCC_ClockConfig+0x264>)
 800470a:	4313      	orrs	r3, r2
 800470c:	608b      	str	r3, [r1, #8]
 800470e:	e008      	b.n	8004722 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2b80      	cmp	r3, #128	; 0x80
 8004714:	d105      	bne.n	8004722 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004716:	4b33      	ldr	r3, [pc, #204]	; (80047e4 <HAL_RCC_ClockConfig+0x264>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	4a32      	ldr	r2, [pc, #200]	; (80047e4 <HAL_RCC_ClockConfig+0x264>)
 800471c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004720:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004722:	4b2f      	ldr	r3, [pc, #188]	; (80047e0 <HAL_RCC_ClockConfig+0x260>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d21d      	bcs.n	800476c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004730:	4b2b      	ldr	r3, [pc, #172]	; (80047e0 <HAL_RCC_ClockConfig+0x260>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f023 020f 	bic.w	r2, r3, #15
 8004738:	4929      	ldr	r1, [pc, #164]	; (80047e0 <HAL_RCC_ClockConfig+0x260>)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	4313      	orrs	r3, r2
 800473e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004740:	f7fd f832 	bl	80017a8 <HAL_GetTick>
 8004744:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004746:	e00a      	b.n	800475e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004748:	f7fd f82e 	bl	80017a8 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	f241 3288 	movw	r2, #5000	; 0x1388
 8004756:	4293      	cmp	r3, r2
 8004758:	d901      	bls.n	800475e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e03b      	b.n	80047d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800475e:	4b20      	ldr	r3, [pc, #128]	; (80047e0 <HAL_RCC_ClockConfig+0x260>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d1ed      	bne.n	8004748 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d008      	beq.n	800478a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004778:	4b1a      	ldr	r3, [pc, #104]	; (80047e4 <HAL_RCC_ClockConfig+0x264>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	4917      	ldr	r1, [pc, #92]	; (80047e4 <HAL_RCC_ClockConfig+0x264>)
 8004786:	4313      	orrs	r3, r2
 8004788:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0308 	and.w	r3, r3, #8
 8004792:	2b00      	cmp	r3, #0
 8004794:	d009      	beq.n	80047aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004796:	4b13      	ldr	r3, [pc, #76]	; (80047e4 <HAL_RCC_ClockConfig+0x264>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	490f      	ldr	r1, [pc, #60]	; (80047e4 <HAL_RCC_ClockConfig+0x264>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047aa:	f000 f825 	bl	80047f8 <HAL_RCC_GetSysClockFreq>
 80047ae:	4602      	mov	r2, r0
 80047b0:	4b0c      	ldr	r3, [pc, #48]	; (80047e4 <HAL_RCC_ClockConfig+0x264>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	091b      	lsrs	r3, r3, #4
 80047b6:	f003 030f 	and.w	r3, r3, #15
 80047ba:	490c      	ldr	r1, [pc, #48]	; (80047ec <HAL_RCC_ClockConfig+0x26c>)
 80047bc:	5ccb      	ldrb	r3, [r1, r3]
 80047be:	f003 031f 	and.w	r3, r3, #31
 80047c2:	fa22 f303 	lsr.w	r3, r2, r3
 80047c6:	4a0a      	ldr	r2, [pc, #40]	; (80047f0 <HAL_RCC_ClockConfig+0x270>)
 80047c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80047ca:	4b0a      	ldr	r3, [pc, #40]	; (80047f4 <HAL_RCC_ClockConfig+0x274>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fc ff9e 	bl	8001710 <HAL_InitTick>
 80047d4:	4603      	mov	r3, r0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	40022000 	.word	0x40022000
 80047e4:	40021000 	.word	0x40021000
 80047e8:	04c4b400 	.word	0x04c4b400
 80047ec:	0800c788 	.word	0x0800c788
 80047f0:	20000000 	.word	0x20000000
 80047f4:	20000004 	.word	0x20000004

080047f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b087      	sub	sp, #28
 80047fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80047fe:	4b2c      	ldr	r3, [pc, #176]	; (80048b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f003 030c 	and.w	r3, r3, #12
 8004806:	2b04      	cmp	r3, #4
 8004808:	d102      	bne.n	8004810 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800480a:	4b2a      	ldr	r3, [pc, #168]	; (80048b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800480c:	613b      	str	r3, [r7, #16]
 800480e:	e047      	b.n	80048a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004810:	4b27      	ldr	r3, [pc, #156]	; (80048b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f003 030c 	and.w	r3, r3, #12
 8004818:	2b08      	cmp	r3, #8
 800481a:	d102      	bne.n	8004822 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800481c:	4b26      	ldr	r3, [pc, #152]	; (80048b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800481e:	613b      	str	r3, [r7, #16]
 8004820:	e03e      	b.n	80048a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004822:	4b23      	ldr	r3, [pc, #140]	; (80048b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 030c 	and.w	r3, r3, #12
 800482a:	2b0c      	cmp	r3, #12
 800482c:	d136      	bne.n	800489c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800482e:	4b20      	ldr	r3, [pc, #128]	; (80048b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004838:	4b1d      	ldr	r3, [pc, #116]	; (80048b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	091b      	lsrs	r3, r3, #4
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	3301      	adds	r3, #1
 8004844:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2b03      	cmp	r3, #3
 800484a:	d10c      	bne.n	8004866 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800484c:	4a1a      	ldr	r2, [pc, #104]	; (80048b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	fbb2 f3f3 	udiv	r3, r2, r3
 8004854:	4a16      	ldr	r2, [pc, #88]	; (80048b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004856:	68d2      	ldr	r2, [r2, #12]
 8004858:	0a12      	lsrs	r2, r2, #8
 800485a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800485e:	fb02 f303 	mul.w	r3, r2, r3
 8004862:	617b      	str	r3, [r7, #20]
      break;
 8004864:	e00c      	b.n	8004880 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004866:	4a13      	ldr	r2, [pc, #76]	; (80048b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	fbb2 f3f3 	udiv	r3, r2, r3
 800486e:	4a10      	ldr	r2, [pc, #64]	; (80048b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004870:	68d2      	ldr	r2, [r2, #12]
 8004872:	0a12      	lsrs	r2, r2, #8
 8004874:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004878:	fb02 f303 	mul.w	r3, r2, r3
 800487c:	617b      	str	r3, [r7, #20]
      break;
 800487e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004880:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	0e5b      	lsrs	r3, r3, #25
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	3301      	adds	r3, #1
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	fbb2 f3f3 	udiv	r3, r2, r3
 8004898:	613b      	str	r3, [r7, #16]
 800489a:	e001      	b.n	80048a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80048a0:	693b      	ldr	r3, [r7, #16]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	371c      	adds	r7, #28
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	40021000 	.word	0x40021000
 80048b4:	00f42400 	.word	0x00f42400
 80048b8:	016e3600 	.word	0x016e3600

080048bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048c0:	4b03      	ldr	r3, [pc, #12]	; (80048d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80048c2:	681b      	ldr	r3, [r3, #0]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	20000000 	.word	0x20000000

080048d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048d8:	f7ff fff0 	bl	80048bc <HAL_RCC_GetHCLKFreq>
 80048dc:	4602      	mov	r2, r0
 80048de:	4b06      	ldr	r3, [pc, #24]	; (80048f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	0a1b      	lsrs	r3, r3, #8
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	4904      	ldr	r1, [pc, #16]	; (80048fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80048ea:	5ccb      	ldrb	r3, [r1, r3]
 80048ec:	f003 031f 	and.w	r3, r3, #31
 80048f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	40021000 	.word	0x40021000
 80048fc:	0800c798 	.word	0x0800c798

08004900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004904:	f7ff ffda 	bl	80048bc <HAL_RCC_GetHCLKFreq>
 8004908:	4602      	mov	r2, r0
 800490a:	4b06      	ldr	r3, [pc, #24]	; (8004924 <HAL_RCC_GetPCLK2Freq+0x24>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	0adb      	lsrs	r3, r3, #11
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	4904      	ldr	r1, [pc, #16]	; (8004928 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004916:	5ccb      	ldrb	r3, [r1, r3]
 8004918:	f003 031f 	and.w	r3, r3, #31
 800491c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004920:	4618      	mov	r0, r3
 8004922:	bd80      	pop	{r7, pc}
 8004924:	40021000 	.word	0x40021000
 8004928:	0800c798 	.word	0x0800c798

0800492c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800492c:	b480      	push	{r7}
 800492e:	b087      	sub	sp, #28
 8004930:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004932:	4b1e      	ldr	r3, [pc, #120]	; (80049ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800493c:	4b1b      	ldr	r3, [pc, #108]	; (80049ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	091b      	lsrs	r3, r3, #4
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	3301      	adds	r3, #1
 8004948:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	2b03      	cmp	r3, #3
 800494e:	d10c      	bne.n	800496a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004950:	4a17      	ldr	r2, [pc, #92]	; (80049b0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	fbb2 f3f3 	udiv	r3, r2, r3
 8004958:	4a14      	ldr	r2, [pc, #80]	; (80049ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800495a:	68d2      	ldr	r2, [r2, #12]
 800495c:	0a12      	lsrs	r2, r2, #8
 800495e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004962:	fb02 f303 	mul.w	r3, r2, r3
 8004966:	617b      	str	r3, [r7, #20]
    break;
 8004968:	e00c      	b.n	8004984 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800496a:	4a12      	ldr	r2, [pc, #72]	; (80049b4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004972:	4a0e      	ldr	r2, [pc, #56]	; (80049ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004974:	68d2      	ldr	r2, [r2, #12]
 8004976:	0a12      	lsrs	r2, r2, #8
 8004978:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800497c:	fb02 f303 	mul.w	r3, r2, r3
 8004980:	617b      	str	r3, [r7, #20]
    break;
 8004982:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004984:	4b09      	ldr	r3, [pc, #36]	; (80049ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	0e5b      	lsrs	r3, r3, #25
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	3301      	adds	r3, #1
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	fbb2 f3f3 	udiv	r3, r2, r3
 800499c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800499e:	687b      	ldr	r3, [r7, #4]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	371c      	adds	r7, #28
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	40021000 	.word	0x40021000
 80049b0:	016e3600 	.word	0x016e3600
 80049b4:	00f42400 	.word	0x00f42400

080049b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049c0:	2300      	movs	r3, #0
 80049c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049c4:	2300      	movs	r3, #0
 80049c6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 8098 	beq.w	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049d6:	2300      	movs	r3, #0
 80049d8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049da:	4b43      	ldr	r3, [pc, #268]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10d      	bne.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049e6:	4b40      	ldr	r3, [pc, #256]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ea:	4a3f      	ldr	r2, [pc, #252]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f0:	6593      	str	r3, [r2, #88]	; 0x58
 80049f2:	4b3d      	ldr	r3, [pc, #244]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fa:	60bb      	str	r3, [r7, #8]
 80049fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049fe:	2301      	movs	r3, #1
 8004a00:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a02:	4b3a      	ldr	r3, [pc, #232]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a39      	ldr	r2, [pc, #228]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a0e:	f7fc fecb 	bl	80017a8 <HAL_GetTick>
 8004a12:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a14:	e009      	b.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a16:	f7fc fec7 	bl	80017a8 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d902      	bls.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	74fb      	strb	r3, [r7, #19]
        break;
 8004a28:	e005      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a2a:	4b30      	ldr	r3, [pc, #192]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0ef      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004a36:	7cfb      	ldrb	r3, [r7, #19]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d159      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a3c:	4b2a      	ldr	r3, [pc, #168]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a46:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d01e      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d019      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a58:	4b23      	ldr	r3, [pc, #140]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a64:	4b20      	ldr	r3, [pc, #128]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6a:	4a1f      	ldr	r2, [pc, #124]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a74:	4b1c      	ldr	r3, [pc, #112]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7a:	4a1b      	ldr	r2, [pc, #108]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a84:	4a18      	ldr	r2, [pc, #96]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d016      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a96:	f7fc fe87 	bl	80017a8 <HAL_GetTick>
 8004a9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a9c:	e00b      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a9e:	f7fc fe83 	bl	80017a8 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d902      	bls.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	74fb      	strb	r3, [r7, #19]
            break;
 8004ab4:	e006      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ab6:	4b0c      	ldr	r3, [pc, #48]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0ec      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004ac4:	7cfb      	ldrb	r3, [r7, #19]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10b      	bne.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004aca:	4b07      	ldr	r3, [pc, #28]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad8:	4903      	ldr	r1, [pc, #12]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ae0:	e008      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ae2:	7cfb      	ldrb	r3, [r7, #19]
 8004ae4:	74bb      	strb	r3, [r7, #18]
 8004ae6:	e005      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af0:	7cfb      	ldrb	r3, [r7, #19]
 8004af2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004af4:	7c7b      	ldrb	r3, [r7, #17]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d105      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004afa:	4ba7      	ldr	r3, [pc, #668]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afe:	4aa6      	ldr	r2, [pc, #664]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00a      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b12:	4ba1      	ldr	r3, [pc, #644]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b18:	f023 0203 	bic.w	r2, r3, #3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	499d      	ldr	r1, [pc, #628]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00a      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b34:	4b98      	ldr	r3, [pc, #608]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3a:	f023 020c 	bic.w	r2, r3, #12
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	4995      	ldr	r1, [pc, #596]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0304 	and.w	r3, r3, #4
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00a      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b56:	4b90      	ldr	r3, [pc, #576]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	498c      	ldr	r1, [pc, #560]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0308 	and.w	r3, r3, #8
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00a      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b78:	4b87      	ldr	r3, [pc, #540]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	4984      	ldr	r1, [pc, #528]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0310 	and.w	r3, r3, #16
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00a      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b9a:	4b7f      	ldr	r3, [pc, #508]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	497b      	ldr	r1, [pc, #492]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0320 	and.w	r3, r3, #32
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00a      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bbc:	4b76      	ldr	r3, [pc, #472]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	4973      	ldr	r1, [pc, #460]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00a      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bde:	4b6e      	ldr	r3, [pc, #440]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	69db      	ldr	r3, [r3, #28]
 8004bec:	496a      	ldr	r1, [pc, #424]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00a      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c00:	4b65      	ldr	r3, [pc, #404]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c06:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	4962      	ldr	r1, [pc, #392]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c22:	4b5d      	ldr	r3, [pc, #372]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	4959      	ldr	r1, [pc, #356]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00a      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c44:	4b54      	ldr	r3, [pc, #336]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c4a:	f023 0203 	bic.w	r2, r3, #3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c52:	4951      	ldr	r1, [pc, #324]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00a      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c66:	4b4c      	ldr	r3, [pc, #304]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c74:	4948      	ldr	r1, [pc, #288]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d015      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c88:	4b43      	ldr	r3, [pc, #268]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c96:	4940      	ldr	r1, [pc, #256]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ca6:	d105      	bne.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ca8:	4b3b      	ldr	r3, [pc, #236]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	4a3a      	ldr	r2, [pc, #232]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cb2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d015      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004cc0:	4b35      	ldr	r3, [pc, #212]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cce:	4932      	ldr	r1, [pc, #200]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cde:	d105      	bne.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ce0:	4b2d      	ldr	r3, [pc, #180]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	4a2c      	ldr	r2, [pc, #176]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d015      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004cf8:	4b27      	ldr	r3, [pc, #156]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d06:	4924      	ldr	r1, [pc, #144]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d16:	d105      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d18:	4b1f      	ldr	r3, [pc, #124]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	4a1e      	ldr	r2, [pc, #120]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d22:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d015      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d30:	4b19      	ldr	r3, [pc, #100]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3e:	4916      	ldr	r1, [pc, #88]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d4e:	d105      	bne.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d50:	4b11      	ldr	r3, [pc, #68]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	4a10      	ldr	r2, [pc, #64]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d5a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d019      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d68:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	4908      	ldr	r1, [pc, #32]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d86:	d109      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d88:	4b03      	ldr	r3, [pc, #12]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	4a02      	ldr	r2, [pc, #8]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d92:	60d3      	str	r3, [r2, #12]
 8004d94:	e002      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004d96:	bf00      	nop
 8004d98:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d015      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004da8:	4b29      	ldr	r3, [pc, #164]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db6:	4926      	ldr	r1, [pc, #152]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dc6:	d105      	bne.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004dc8:	4b21      	ldr	r3, [pc, #132]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	4a20      	ldr	r2, [pc, #128]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dd2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d015      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004de0:	4b1b      	ldr	r3, [pc, #108]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dee:	4918      	ldr	r1, [pc, #96]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dfe:	d105      	bne.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004e00:	4b13      	ldr	r3, [pc, #76]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	4a12      	ldr	r2, [pc, #72]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e0a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d015      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004e18:	4b0d      	ldr	r3, [pc, #52]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e26:	490a      	ldr	r1, [pc, #40]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e36:	d105      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e38:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	4a04      	ldr	r2, [pc, #16]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e42:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004e44:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3718      	adds	r7, #24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	40021000 	.word	0x40021000

08004e54 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d070      	beq.n	8004f48 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d106      	bne.n	8004e80 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7fc f940 	bl	8001100 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f003 0310 	and.w	r3, r3, #16
 8004e92:	2b10      	cmp	r3, #16
 8004e94:	d04f      	beq.n	8004f36 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	22ca      	movs	r2, #202	; 0xca
 8004e9c:	625a      	str	r2, [r3, #36]	; 0x24
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2253      	movs	r2, #83	; 0x53
 8004ea4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f878 	bl	8004f9c <RTC_EnterInitMode>
 8004eac:	4603      	mov	r3, r0
 8004eae:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d126      	bne.n	8004f04 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6812      	ldr	r2, [r2, #0]
 8004ec0:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8004ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ec8:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6999      	ldr	r1, [r3, #24]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68d9      	ldr	r1, [r3, #12]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	041a      	lsls	r2, r3, #16
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f884 	bl	8005008 <RTC_ExitInitMode>
 8004f00:	4603      	mov	r3, r0
 8004f02:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d110      	bne.n	8004f2c <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a1a      	ldr	r2, [r3, #32]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	69db      	ldr	r3, [r3, #28]
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	431a      	orrs	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	22ff      	movs	r2, #255	; 0xff
 8004f32:	625a      	str	r2, [r3, #36]	; 0x24
 8004f34:	e001      	b.n	8004f3a <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d103      	bne.n	8004f48 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8004f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
	...

08004f54 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a0d      	ldr	r2, [pc, #52]	; (8004f98 <HAL_RTC_WaitForSynchro+0x44>)
 8004f62:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004f64:	f7fc fc20 	bl	80017a8 <HAL_GetTick>
 8004f68:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8004f6a:	e009      	b.n	8004f80 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f6c:	f7fc fc1c 	bl	80017a8 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f7a:	d901      	bls.n	8004f80 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e007      	b.n	8004f90 <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f003 0320 	and.w	r3, r3, #32
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0ee      	beq.n	8004f6c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	0001005f 	.word	0x0001005f

08004f9c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d123      	bne.n	8004ffe <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68da      	ldr	r2, [r3, #12]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fc4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004fc6:	f7fc fbef 	bl	80017a8 <HAL_GetTick>
 8004fca:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004fcc:	e00d      	b.n	8004fea <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004fce:	f7fc fbeb 	bl	80017a8 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fdc:	d905      	bls.n	8004fea <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2203      	movs	r2, #3
 8004fe6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d102      	bne.n	8004ffe <RTC_EnterInitMode+0x62>
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
 8004ffa:	2b03      	cmp	r3, #3
 8004ffc:	d1e7      	bne.n	8004fce <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005022:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	f003 0320 	and.w	r3, r3, #32
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10c      	bne.n	800504c <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7ff ff8e 	bl	8004f54 <HAL_RTC_WaitForSynchro>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d022      	beq.n	8005084 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2203      	movs	r2, #3
 8005042:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	73fb      	strb	r3, [r7, #15]
 800504a:	e01b      	b.n	8005084 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699a      	ldr	r2, [r3, #24]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0220 	bic.w	r2, r2, #32
 800505a:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f7ff ff79 	bl	8004f54 <HAL_RTC_WaitForSynchro>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d005      	beq.n	8005074 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2203      	movs	r2, #3
 800506c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	699a      	ldr	r2, [r3, #24]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f042 0220 	orr.w	r2, r2, #32
 8005082:	619a      	str	r2, [r3, #24]
  }

  return status;
 8005084:	7bfb      	ldrb	r3, [r7, #15]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
	...

08005090 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified TAMP Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
 800509c:	4b07      	ldr	r3, [pc, #28]	; (80050bc <HAL_RTCEx_BKUPWrite+0x2c>)
 800509e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	4413      	add	r3, r2
 80050a8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	601a      	str	r2, [r3, #0]
}
 80050b0:	bf00      	nop
 80050b2:	371c      	adds	r7, #28
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	40002500 	.word	0x40002500

080050c0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB to
  *          specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(TAMP->BKP0R);
 80050ca:	4b07      	ldr	r3, [pc, #28]	; (80050e8 <HAL_RTCEx_BKUPRead+0x28>)
 80050cc:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4413      	add	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3714      	adds	r7, #20
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	40002500 	.word	0x40002500

080050ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e042      	b.n	8005184 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005104:	2b00      	cmp	r3, #0
 8005106:	d106      	bne.n	8005116 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7fc f9a1 	bl	8001458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2224      	movs	r2, #36	; 0x24
 800511a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0201 	bic.w	r2, r2, #1
 800512c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005132:	2b00      	cmp	r3, #0
 8005134:	d002      	beq.n	800513c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 ff38 	bl	8005fac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 fc39 	bl	80059b4 <UART_SetConfig>
 8005142:	4603      	mov	r3, r0
 8005144:	2b01      	cmp	r3, #1
 8005146:	d101      	bne.n	800514c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e01b      	b.n	8005184 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800515a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689a      	ldr	r2, [r3, #8]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800516a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f042 0201 	orr.w	r2, r2, #1
 800517a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 ffb7 	bl	80060f0 <UART_CheckIdleState>
 8005182:	4603      	mov	r3, r0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b08a      	sub	sp, #40	; 0x28
 8005190:	af02      	add	r7, sp, #8
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	603b      	str	r3, [r7, #0]
 8005198:	4613      	mov	r3, r2
 800519a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a2:	2b20      	cmp	r3, #32
 80051a4:	d17b      	bne.n	800529e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <HAL_UART_Transmit+0x26>
 80051ac:	88fb      	ldrh	r3, [r7, #6]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e074      	b.n	80052a0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2221      	movs	r2, #33	; 0x21
 80051c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051c6:	f7fc faef 	bl	80017a8 <HAL_GetTick>
 80051ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	88fa      	ldrh	r2, [r7, #6]
 80051d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	88fa      	ldrh	r2, [r7, #6]
 80051d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e4:	d108      	bne.n	80051f8 <HAL_UART_Transmit+0x6c>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d104      	bne.n	80051f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80051ee:	2300      	movs	r3, #0
 80051f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	61bb      	str	r3, [r7, #24]
 80051f6:	e003      	b.n	8005200 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051fc:	2300      	movs	r3, #0
 80051fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005200:	e030      	b.n	8005264 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2200      	movs	r2, #0
 800520a:	2180      	movs	r1, #128	; 0x80
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f001 f819 	bl	8006244 <UART_WaitOnFlagUntilTimeout>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d005      	beq.n	8005224 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2220      	movs	r2, #32
 800521c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e03d      	b.n	80052a0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10b      	bne.n	8005242 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	881b      	ldrh	r3, [r3, #0]
 800522e:	461a      	mov	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005238:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	3302      	adds	r3, #2
 800523e:	61bb      	str	r3, [r7, #24]
 8005240:	e007      	b.n	8005252 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	781a      	ldrb	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	3301      	adds	r3, #1
 8005250:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005258:	b29b      	uxth	r3, r3
 800525a:	3b01      	subs	r3, #1
 800525c:	b29a      	uxth	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800526a:	b29b      	uxth	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1c8      	bne.n	8005202 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	2200      	movs	r2, #0
 8005278:	2140      	movs	r1, #64	; 0x40
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 ffe2 	bl	8006244 <UART_WaitOnFlagUntilTimeout>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d005      	beq.n	8005292 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2220      	movs	r2, #32
 800528a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e006      	b.n	80052a0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2220      	movs	r2, #32
 8005296:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800529a:	2300      	movs	r3, #0
 800529c:	e000      	b.n	80052a0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800529e:	2302      	movs	r3, #2
  }
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3720      	adds	r7, #32
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b08a      	sub	sp, #40	; 0x28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	4613      	mov	r3, r2
 80052b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052bc:	2b20      	cmp	r3, #32
 80052be:	d137      	bne.n	8005330 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <HAL_UART_Receive_IT+0x24>
 80052c6:	88fb      	ldrh	r3, [r7, #6]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e030      	b.n	8005332 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a18      	ldr	r2, [pc, #96]	; (800533c <HAL_UART_Receive_IT+0x94>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d01f      	beq.n	8005320 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d018      	beq.n	8005320 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	e853 3f00 	ldrex	r3, [r3]
 80052fa:	613b      	str	r3, [r7, #16]
   return(result);
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005302:	627b      	str	r3, [r7, #36]	; 0x24
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	461a      	mov	r2, r3
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	623b      	str	r3, [r7, #32]
 800530e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005310:	69f9      	ldr	r1, [r7, #28]
 8005312:	6a3a      	ldr	r2, [r7, #32]
 8005314:	e841 2300 	strex	r3, r2, [r1]
 8005318:	61bb      	str	r3, [r7, #24]
   return(result);
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1e6      	bne.n	80052ee <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005320:	88fb      	ldrh	r3, [r7, #6]
 8005322:	461a      	mov	r2, r3
 8005324:	68b9      	ldr	r1, [r7, #8]
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 fffa 	bl	8006320 <UART_Start_Receive_IT>
 800532c:	4603      	mov	r3, r0
 800532e:	e000      	b.n	8005332 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005330:	2302      	movs	r3, #2
  }
}
 8005332:	4618      	mov	r0, r3
 8005334:	3728      	adds	r7, #40	; 0x28
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	40008000 	.word	0x40008000

08005340 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b0ba      	sub	sp, #232	; 0xe8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005366:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800536a:	f640 030f 	movw	r3, #2063	; 0x80f
 800536e:	4013      	ands	r3, r2
 8005370:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005374:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005378:	2b00      	cmp	r3, #0
 800537a:	d11b      	bne.n	80053b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800537c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005380:	f003 0320 	and.w	r3, r3, #32
 8005384:	2b00      	cmp	r3, #0
 8005386:	d015      	beq.n	80053b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800538c:	f003 0320 	and.w	r3, r3, #32
 8005390:	2b00      	cmp	r3, #0
 8005392:	d105      	bne.n	80053a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d009      	beq.n	80053b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 82e3 	beq.w	8005970 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	4798      	blx	r3
      }
      return;
 80053b2:	e2dd      	b.n	8005970 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80053b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 8123 	beq.w	8005604 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80053be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80053c2:	4b8d      	ldr	r3, [pc, #564]	; (80055f8 <HAL_UART_IRQHandler+0x2b8>)
 80053c4:	4013      	ands	r3, r2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d106      	bne.n	80053d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80053ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80053ce:	4b8b      	ldr	r3, [pc, #556]	; (80055fc <HAL_UART_IRQHandler+0x2bc>)
 80053d0:	4013      	ands	r3, r2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 8116 	beq.w	8005604 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d011      	beq.n	8005408 <HAL_UART_IRQHandler+0xc8>
 80053e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00b      	beq.n	8005408 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2201      	movs	r2, #1
 80053f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053fe:	f043 0201 	orr.w	r2, r3, #1
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d011      	beq.n	8005438 <HAL_UART_IRQHandler+0xf8>
 8005414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00b      	beq.n	8005438 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2202      	movs	r2, #2
 8005426:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542e:	f043 0204 	orr.w	r2, r3, #4
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b00      	cmp	r3, #0
 8005442:	d011      	beq.n	8005468 <HAL_UART_IRQHandler+0x128>
 8005444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00b      	beq.n	8005468 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2204      	movs	r2, #4
 8005456:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545e:	f043 0202 	orr.w	r2, r3, #2
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800546c:	f003 0308 	and.w	r3, r3, #8
 8005470:	2b00      	cmp	r3, #0
 8005472:	d017      	beq.n	80054a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005478:	f003 0320 	and.w	r3, r3, #32
 800547c:	2b00      	cmp	r3, #0
 800547e:	d105      	bne.n	800548c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005480:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005484:	4b5c      	ldr	r3, [pc, #368]	; (80055f8 <HAL_UART_IRQHandler+0x2b8>)
 8005486:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00b      	beq.n	80054a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2208      	movs	r2, #8
 8005492:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800549a:	f043 0208 	orr.w	r2, r3, #8
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80054a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d012      	beq.n	80054d6 <HAL_UART_IRQHandler+0x196>
 80054b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00c      	beq.n	80054d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054cc:	f043 0220 	orr.w	r2, r3, #32
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 8249 	beq.w	8005974 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80054e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054e6:	f003 0320 	and.w	r3, r3, #32
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d013      	beq.n	8005516 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80054ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054f2:	f003 0320 	and.w	r3, r3, #32
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d105      	bne.n	8005506 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80054fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d007      	beq.n	8005516 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800551c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552a:	2b40      	cmp	r3, #64	; 0x40
 800552c:	d005      	beq.n	800553a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800552e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005532:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005536:	2b00      	cmp	r3, #0
 8005538:	d054      	beq.n	80055e4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f001 f812 	bl	8006564 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554a:	2b40      	cmp	r3, #64	; 0x40
 800554c:	d146      	bne.n	80055dc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	3308      	adds	r3, #8
 8005554:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005558:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800555c:	e853 3f00 	ldrex	r3, [r3]
 8005560:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005564:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005568:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800556c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	3308      	adds	r3, #8
 8005576:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800557a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800557e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005582:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005586:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800558a:	e841 2300 	strex	r3, r2, [r1]
 800558e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005592:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1d9      	bne.n	800554e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d017      	beq.n	80055d4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055aa:	4a15      	ldr	r2, [pc, #84]	; (8005600 <HAL_UART_IRQHandler+0x2c0>)
 80055ac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7fc fa8d 	bl	8001ad4 <HAL_DMA_Abort_IT>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d019      	beq.n	80055f4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80055ce:	4610      	mov	r0, r2
 80055d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d2:	e00f      	b.n	80055f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f7fb ff15 	bl	8001404 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055da:	e00b      	b.n	80055f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f7fb ff11 	bl	8001404 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e2:	e007      	b.n	80055f4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7fb ff0d 	bl	8001404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80055f2:	e1bf      	b.n	8005974 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f4:	bf00      	nop
    return;
 80055f6:	e1bd      	b.n	8005974 <HAL_UART_IRQHandler+0x634>
 80055f8:	10000001 	.word	0x10000001
 80055fc:	04000120 	.word	0x04000120
 8005600:	08006631 	.word	0x08006631

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005608:	2b01      	cmp	r3, #1
 800560a:	f040 8153 	bne.w	80058b4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800560e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005612:	f003 0310 	and.w	r3, r3, #16
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 814c 	beq.w	80058b4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800561c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005620:	f003 0310 	and.w	r3, r3, #16
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 8145 	beq.w	80058b4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2210      	movs	r2, #16
 8005630:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800563c:	2b40      	cmp	r3, #64	; 0x40
 800563e:	f040 80bb 	bne.w	80057b8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005650:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 818f 	beq.w	8005978 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005660:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005664:	429a      	cmp	r2, r3
 8005666:	f080 8187 	bcs.w	8005978 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005670:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0320 	and.w	r3, r3, #32
 8005682:	2b00      	cmp	r3, #0
 8005684:	f040 8087 	bne.w	8005796 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005690:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005694:	e853 3f00 	ldrex	r3, [r3]
 8005698:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800569c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	461a      	mov	r2, r3
 80056ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80056b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80056b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80056be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80056c2:	e841 2300 	strex	r3, r2, [r1]
 80056c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80056ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1da      	bne.n	8005688 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3308      	adds	r3, #8
 80056d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056dc:	e853 3f00 	ldrex	r3, [r3]
 80056e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80056e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056e4:	f023 0301 	bic.w	r3, r3, #1
 80056e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3308      	adds	r3, #8
 80056f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80056f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80056fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80056fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005702:	e841 2300 	strex	r3, r2, [r1]
 8005706:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005708:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1e1      	bne.n	80056d2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3308      	adds	r3, #8
 8005714:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005716:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005718:	e853 3f00 	ldrex	r3, [r3]
 800571c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800571e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005724:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	3308      	adds	r3, #8
 800572e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005732:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005734:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005736:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005738:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800573a:	e841 2300 	strex	r3, r2, [r1]
 800573e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005740:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005742:	2b00      	cmp	r3, #0
 8005744:	d1e3      	bne.n	800570e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2220      	movs	r2, #32
 800574a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800575c:	e853 3f00 	ldrex	r3, [r3]
 8005760:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005764:	f023 0310 	bic.w	r3, r3, #16
 8005768:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	461a      	mov	r2, r3
 8005772:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005776:	65bb      	str	r3, [r7, #88]	; 0x58
 8005778:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800577c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800577e:	e841 2300 	strex	r3, r2, [r1]
 8005782:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1e4      	bne.n	8005754 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005790:	4618      	mov	r0, r3
 8005792:	f7fc f946 	bl	8001a22 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2202      	movs	r2, #2
 800579a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	4619      	mov	r1, r3
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f8f3 	bl	800599c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057b6:	e0df      	b.n	8005978 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 80d1 	beq.w	800597c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80057da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 80cc 	beq.w	800597c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ec:	e853 3f00 	ldrex	r3, [r3]
 80057f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	461a      	mov	r2, r3
 8005802:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005806:	647b      	str	r3, [r7, #68]	; 0x44
 8005808:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800580c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800580e:	e841 2300 	strex	r3, r2, [r1]
 8005812:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1e4      	bne.n	80057e4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	3308      	adds	r3, #8
 8005820:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	e853 3f00 	ldrex	r3, [r3]
 8005828:	623b      	str	r3, [r7, #32]
   return(result);
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005830:	f023 0301 	bic.w	r3, r3, #1
 8005834:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	3308      	adds	r3, #8
 800583e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005842:	633a      	str	r2, [r7, #48]	; 0x30
 8005844:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005846:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800584a:	e841 2300 	strex	r3, r2, [r1]
 800584e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1e1      	bne.n	800581a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2220      	movs	r2, #32
 800585a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	e853 3f00 	ldrex	r3, [r3]
 8005876:	60fb      	str	r3, [r7, #12]
   return(result);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f023 0310 	bic.w	r3, r3, #16
 800587e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	461a      	mov	r2, r3
 8005888:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800588c:	61fb      	str	r3, [r7, #28]
 800588e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005890:	69b9      	ldr	r1, [r7, #24]
 8005892:	69fa      	ldr	r2, [r7, #28]
 8005894:	e841 2300 	strex	r3, r2, [r1]
 8005898:	617b      	str	r3, [r7, #20]
   return(result);
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1e4      	bne.n	800586a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058aa:	4619      	mov	r1, r3
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f875 	bl	800599c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058b2:	e063      	b.n	800597c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80058b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d00e      	beq.n	80058de <HAL_UART_IRQHandler+0x59e>
 80058c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d008      	beq.n	80058de <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80058d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f001 fc08 	bl	80070ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058dc:	e051      	b.n	8005982 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80058de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d014      	beq.n	8005914 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80058ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d105      	bne.n	8005902 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80058f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d008      	beq.n	8005914 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005906:	2b00      	cmp	r3, #0
 8005908:	d03a      	beq.n	8005980 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	4798      	blx	r3
    }
    return;
 8005912:	e035      	b.n	8005980 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591c:	2b00      	cmp	r3, #0
 800591e:	d009      	beq.n	8005934 <HAL_UART_IRQHandler+0x5f4>
 8005920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005928:	2b00      	cmp	r3, #0
 800592a:	d003      	beq.n	8005934 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 fe95 	bl	800665c <UART_EndTransmit_IT>
    return;
 8005932:	e026      	b.n	8005982 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005938:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d009      	beq.n	8005954 <HAL_UART_IRQHandler+0x614>
 8005940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005944:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f001 fbe1 	bl	8007114 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005952:	e016      	b.n	8005982 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005958:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800595c:	2b00      	cmp	r3, #0
 800595e:	d010      	beq.n	8005982 <HAL_UART_IRQHandler+0x642>
 8005960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005964:	2b00      	cmp	r3, #0
 8005966:	da0c      	bge.n	8005982 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f001 fbc9 	bl	8007100 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800596e:	e008      	b.n	8005982 <HAL_UART_IRQHandler+0x642>
      return;
 8005970:	bf00      	nop
 8005972:	e006      	b.n	8005982 <HAL_UART_IRQHandler+0x642>
    return;
 8005974:	bf00      	nop
 8005976:	e004      	b.n	8005982 <HAL_UART_IRQHandler+0x642>
      return;
 8005978:	bf00      	nop
 800597a:	e002      	b.n	8005982 <HAL_UART_IRQHandler+0x642>
      return;
 800597c:	bf00      	nop
 800597e:	e000      	b.n	8005982 <HAL_UART_IRQHandler+0x642>
    return;
 8005980:	bf00      	nop
  }
}
 8005982:	37e8      	adds	r7, #232	; 0xe8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	460b      	mov	r3, r1
 80059a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059b8:	b08c      	sub	sp, #48	; 0x30
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059be:	2300      	movs	r3, #0
 80059c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	689a      	ldr	r2, [r3, #8]
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	431a      	orrs	r2, r3
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	69db      	ldr	r3, [r3, #28]
 80059d8:	4313      	orrs	r3, r2
 80059da:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	4baa      	ldr	r3, [pc, #680]	; (8005c8c <UART_SetConfig+0x2d8>)
 80059e4:	4013      	ands	r3, r2
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	6812      	ldr	r2, [r2, #0]
 80059ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059ec:	430b      	orrs	r3, r1
 80059ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	68da      	ldr	r2, [r3, #12]
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a9f      	ldr	r2, [pc, #636]	; (8005c90 <UART_SetConfig+0x2dc>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d004      	beq.n	8005a20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005a2a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	6812      	ldr	r2, [r2, #0]
 8005a32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a34:	430b      	orrs	r3, r1
 8005a36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3e:	f023 010f 	bic.w	r1, r3, #15
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a90      	ldr	r2, [pc, #576]	; (8005c94 <UART_SetConfig+0x2e0>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d125      	bne.n	8005aa4 <UART_SetConfig+0xf0>
 8005a58:	4b8f      	ldr	r3, [pc, #572]	; (8005c98 <UART_SetConfig+0x2e4>)
 8005a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5e:	f003 0303 	and.w	r3, r3, #3
 8005a62:	2b03      	cmp	r3, #3
 8005a64:	d81a      	bhi.n	8005a9c <UART_SetConfig+0xe8>
 8005a66:	a201      	add	r2, pc, #4	; (adr r2, 8005a6c <UART_SetConfig+0xb8>)
 8005a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6c:	08005a7d 	.word	0x08005a7d
 8005a70:	08005a8d 	.word	0x08005a8d
 8005a74:	08005a85 	.word	0x08005a85
 8005a78:	08005a95 	.word	0x08005a95
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a82:	e116      	b.n	8005cb2 <UART_SetConfig+0x2fe>
 8005a84:	2302      	movs	r3, #2
 8005a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a8a:	e112      	b.n	8005cb2 <UART_SetConfig+0x2fe>
 8005a8c:	2304      	movs	r3, #4
 8005a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a92:	e10e      	b.n	8005cb2 <UART_SetConfig+0x2fe>
 8005a94:	2308      	movs	r3, #8
 8005a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a9a:	e10a      	b.n	8005cb2 <UART_SetConfig+0x2fe>
 8005a9c:	2310      	movs	r3, #16
 8005a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aa2:	e106      	b.n	8005cb2 <UART_SetConfig+0x2fe>
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a7c      	ldr	r2, [pc, #496]	; (8005c9c <UART_SetConfig+0x2e8>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d138      	bne.n	8005b20 <UART_SetConfig+0x16c>
 8005aae:	4b7a      	ldr	r3, [pc, #488]	; (8005c98 <UART_SetConfig+0x2e4>)
 8005ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab4:	f003 030c 	and.w	r3, r3, #12
 8005ab8:	2b0c      	cmp	r3, #12
 8005aba:	d82d      	bhi.n	8005b18 <UART_SetConfig+0x164>
 8005abc:	a201      	add	r2, pc, #4	; (adr r2, 8005ac4 <UART_SetConfig+0x110>)
 8005abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac2:	bf00      	nop
 8005ac4:	08005af9 	.word	0x08005af9
 8005ac8:	08005b19 	.word	0x08005b19
 8005acc:	08005b19 	.word	0x08005b19
 8005ad0:	08005b19 	.word	0x08005b19
 8005ad4:	08005b09 	.word	0x08005b09
 8005ad8:	08005b19 	.word	0x08005b19
 8005adc:	08005b19 	.word	0x08005b19
 8005ae0:	08005b19 	.word	0x08005b19
 8005ae4:	08005b01 	.word	0x08005b01
 8005ae8:	08005b19 	.word	0x08005b19
 8005aec:	08005b19 	.word	0x08005b19
 8005af0:	08005b19 	.word	0x08005b19
 8005af4:	08005b11 	.word	0x08005b11
 8005af8:	2300      	movs	r3, #0
 8005afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005afe:	e0d8      	b.n	8005cb2 <UART_SetConfig+0x2fe>
 8005b00:	2302      	movs	r3, #2
 8005b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b06:	e0d4      	b.n	8005cb2 <UART_SetConfig+0x2fe>
 8005b08:	2304      	movs	r3, #4
 8005b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b0e:	e0d0      	b.n	8005cb2 <UART_SetConfig+0x2fe>
 8005b10:	2308      	movs	r3, #8
 8005b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b16:	e0cc      	b.n	8005cb2 <UART_SetConfig+0x2fe>
 8005b18:	2310      	movs	r3, #16
 8005b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b1e:	e0c8      	b.n	8005cb2 <UART_SetConfig+0x2fe>
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a5e      	ldr	r2, [pc, #376]	; (8005ca0 <UART_SetConfig+0x2ec>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d125      	bne.n	8005b76 <UART_SetConfig+0x1c2>
 8005b2a:	4b5b      	ldr	r3, [pc, #364]	; (8005c98 <UART_SetConfig+0x2e4>)
 8005b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b34:	2b30      	cmp	r3, #48	; 0x30
 8005b36:	d016      	beq.n	8005b66 <UART_SetConfig+0x1b2>
 8005b38:	2b30      	cmp	r3, #48	; 0x30
 8005b3a:	d818      	bhi.n	8005b6e <UART_SetConfig+0x1ba>
 8005b3c:	2b20      	cmp	r3, #32
 8005b3e:	d00a      	beq.n	8005b56 <UART_SetConfig+0x1a2>
 8005b40:	2b20      	cmp	r3, #32
 8005b42:	d814      	bhi.n	8005b6e <UART_SetConfig+0x1ba>
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d002      	beq.n	8005b4e <UART_SetConfig+0x19a>
 8005b48:	2b10      	cmp	r3, #16
 8005b4a:	d008      	beq.n	8005b5e <UART_SetConfig+0x1aa>
 8005b4c:	e00f      	b.n	8005b6e <UART_SetConfig+0x1ba>
 8005b4e:	2300      	movs	r3, #0
 8005b50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b54:	e0ad      	b.n	8005cb2 <UART_SetConfig+0x2fe>
 8005b56:	2302      	movs	r3, #2
 8005b58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b5c:	e0a9      	b.n	8005cb2 <UART_SetConfig+0x2fe>
 8005b5e:	2304      	movs	r3, #4
 8005b60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b64:	e0a5      	b.n	8005cb2 <UART_SetConfig+0x2fe>
 8005b66:	2308      	movs	r3, #8
 8005b68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b6c:	e0a1      	b.n	8005cb2 <UART_SetConfig+0x2fe>
 8005b6e:	2310      	movs	r3, #16
 8005b70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b74:	e09d      	b.n	8005cb2 <UART_SetConfig+0x2fe>
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a4a      	ldr	r2, [pc, #296]	; (8005ca4 <UART_SetConfig+0x2f0>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d125      	bne.n	8005bcc <UART_SetConfig+0x218>
 8005b80:	4b45      	ldr	r3, [pc, #276]	; (8005c98 <UART_SetConfig+0x2e4>)
 8005b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b8a:	2bc0      	cmp	r3, #192	; 0xc0
 8005b8c:	d016      	beq.n	8005bbc <UART_SetConfig+0x208>
 8005b8e:	2bc0      	cmp	r3, #192	; 0xc0
 8005b90:	d818      	bhi.n	8005bc4 <UART_SetConfig+0x210>
 8005b92:	2b80      	cmp	r3, #128	; 0x80
 8005b94:	d00a      	beq.n	8005bac <UART_SetConfig+0x1f8>
 8005b96:	2b80      	cmp	r3, #128	; 0x80
 8005b98:	d814      	bhi.n	8005bc4 <UART_SetConfig+0x210>
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d002      	beq.n	8005ba4 <UART_SetConfig+0x1f0>
 8005b9e:	2b40      	cmp	r3, #64	; 0x40
 8005ba0:	d008      	beq.n	8005bb4 <UART_SetConfig+0x200>
 8005ba2:	e00f      	b.n	8005bc4 <UART_SetConfig+0x210>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005baa:	e082      	b.n	8005cb2 <UART_SetConfig+0x2fe>
 8005bac:	2302      	movs	r3, #2
 8005bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bb2:	e07e      	b.n	8005cb2 <UART_SetConfig+0x2fe>
 8005bb4:	2304      	movs	r3, #4
 8005bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bba:	e07a      	b.n	8005cb2 <UART_SetConfig+0x2fe>
 8005bbc:	2308      	movs	r3, #8
 8005bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bc2:	e076      	b.n	8005cb2 <UART_SetConfig+0x2fe>
 8005bc4:	2310      	movs	r3, #16
 8005bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005bca:	e072      	b.n	8005cb2 <UART_SetConfig+0x2fe>
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a35      	ldr	r2, [pc, #212]	; (8005ca8 <UART_SetConfig+0x2f4>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d12a      	bne.n	8005c2c <UART_SetConfig+0x278>
 8005bd6:	4b30      	ldr	r3, [pc, #192]	; (8005c98 <UART_SetConfig+0x2e4>)
 8005bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005be0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005be4:	d01a      	beq.n	8005c1c <UART_SetConfig+0x268>
 8005be6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bea:	d81b      	bhi.n	8005c24 <UART_SetConfig+0x270>
 8005bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bf0:	d00c      	beq.n	8005c0c <UART_SetConfig+0x258>
 8005bf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bf6:	d815      	bhi.n	8005c24 <UART_SetConfig+0x270>
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d003      	beq.n	8005c04 <UART_SetConfig+0x250>
 8005bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c00:	d008      	beq.n	8005c14 <UART_SetConfig+0x260>
 8005c02:	e00f      	b.n	8005c24 <UART_SetConfig+0x270>
 8005c04:	2300      	movs	r3, #0
 8005c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c0a:	e052      	b.n	8005cb2 <UART_SetConfig+0x2fe>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c12:	e04e      	b.n	8005cb2 <UART_SetConfig+0x2fe>
 8005c14:	2304      	movs	r3, #4
 8005c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c1a:	e04a      	b.n	8005cb2 <UART_SetConfig+0x2fe>
 8005c1c:	2308      	movs	r3, #8
 8005c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c22:	e046      	b.n	8005cb2 <UART_SetConfig+0x2fe>
 8005c24:	2310      	movs	r3, #16
 8005c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c2a:	e042      	b.n	8005cb2 <UART_SetConfig+0x2fe>
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a17      	ldr	r2, [pc, #92]	; (8005c90 <UART_SetConfig+0x2dc>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d13a      	bne.n	8005cac <UART_SetConfig+0x2f8>
 8005c36:	4b18      	ldr	r3, [pc, #96]	; (8005c98 <UART_SetConfig+0x2e4>)
 8005c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c44:	d01a      	beq.n	8005c7c <UART_SetConfig+0x2c8>
 8005c46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c4a:	d81b      	bhi.n	8005c84 <UART_SetConfig+0x2d0>
 8005c4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c50:	d00c      	beq.n	8005c6c <UART_SetConfig+0x2b8>
 8005c52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c56:	d815      	bhi.n	8005c84 <UART_SetConfig+0x2d0>
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <UART_SetConfig+0x2b0>
 8005c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c60:	d008      	beq.n	8005c74 <UART_SetConfig+0x2c0>
 8005c62:	e00f      	b.n	8005c84 <UART_SetConfig+0x2d0>
 8005c64:	2300      	movs	r3, #0
 8005c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c6a:	e022      	b.n	8005cb2 <UART_SetConfig+0x2fe>
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c72:	e01e      	b.n	8005cb2 <UART_SetConfig+0x2fe>
 8005c74:	2304      	movs	r3, #4
 8005c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c7a:	e01a      	b.n	8005cb2 <UART_SetConfig+0x2fe>
 8005c7c:	2308      	movs	r3, #8
 8005c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c82:	e016      	b.n	8005cb2 <UART_SetConfig+0x2fe>
 8005c84:	2310      	movs	r3, #16
 8005c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c8a:	e012      	b.n	8005cb2 <UART_SetConfig+0x2fe>
 8005c8c:	cfff69f3 	.word	0xcfff69f3
 8005c90:	40008000 	.word	0x40008000
 8005c94:	40013800 	.word	0x40013800
 8005c98:	40021000 	.word	0x40021000
 8005c9c:	40004400 	.word	0x40004400
 8005ca0:	40004800 	.word	0x40004800
 8005ca4:	40004c00 	.word	0x40004c00
 8005ca8:	40005000 	.word	0x40005000
 8005cac:	2310      	movs	r3, #16
 8005cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4aae      	ldr	r2, [pc, #696]	; (8005f70 <UART_SetConfig+0x5bc>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	f040 8097 	bne.w	8005dec <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005cbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005cc2:	2b08      	cmp	r3, #8
 8005cc4:	d823      	bhi.n	8005d0e <UART_SetConfig+0x35a>
 8005cc6:	a201      	add	r2, pc, #4	; (adr r2, 8005ccc <UART_SetConfig+0x318>)
 8005cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ccc:	08005cf1 	.word	0x08005cf1
 8005cd0:	08005d0f 	.word	0x08005d0f
 8005cd4:	08005cf9 	.word	0x08005cf9
 8005cd8:	08005d0f 	.word	0x08005d0f
 8005cdc:	08005cff 	.word	0x08005cff
 8005ce0:	08005d0f 	.word	0x08005d0f
 8005ce4:	08005d0f 	.word	0x08005d0f
 8005ce8:	08005d0f 	.word	0x08005d0f
 8005cec:	08005d07 	.word	0x08005d07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cf0:	f7fe fdf0 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 8005cf4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cf6:	e010      	b.n	8005d1a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cf8:	4b9e      	ldr	r3, [pc, #632]	; (8005f74 <UART_SetConfig+0x5c0>)
 8005cfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005cfc:	e00d      	b.n	8005d1a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cfe:	f7fe fd7b 	bl	80047f8 <HAL_RCC_GetSysClockFreq>
 8005d02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d04:	e009      	b.n	8005d1a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d0c:	e005      	b.n	8005d1a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005d18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 8130 	beq.w	8005f82 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d26:	4a94      	ldr	r2, [pc, #592]	; (8005f78 <UART_SetConfig+0x5c4>)
 8005d28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d34:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	005b      	lsls	r3, r3, #1
 8005d3e:	4413      	add	r3, r2
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d305      	bcc.n	8005d52 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d903      	bls.n	8005d5a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005d58:	e113      	b.n	8005f82 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	60bb      	str	r3, [r7, #8]
 8005d60:	60fa      	str	r2, [r7, #12]
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d66:	4a84      	ldr	r2, [pc, #528]	; (8005f78 <UART_SetConfig+0x5c4>)
 8005d68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	2200      	movs	r2, #0
 8005d70:	603b      	str	r3, [r7, #0]
 8005d72:	607a      	str	r2, [r7, #4]
 8005d74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005d7c:	f7fa faa0 	bl	80002c0 <__aeabi_uldivmod>
 8005d80:	4602      	mov	r2, r0
 8005d82:	460b      	mov	r3, r1
 8005d84:	4610      	mov	r0, r2
 8005d86:	4619      	mov	r1, r3
 8005d88:	f04f 0200 	mov.w	r2, #0
 8005d8c:	f04f 0300 	mov.w	r3, #0
 8005d90:	020b      	lsls	r3, r1, #8
 8005d92:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d96:	0202      	lsls	r2, r0, #8
 8005d98:	6979      	ldr	r1, [r7, #20]
 8005d9a:	6849      	ldr	r1, [r1, #4]
 8005d9c:	0849      	lsrs	r1, r1, #1
 8005d9e:	2000      	movs	r0, #0
 8005da0:	460c      	mov	r4, r1
 8005da2:	4605      	mov	r5, r0
 8005da4:	eb12 0804 	adds.w	r8, r2, r4
 8005da8:	eb43 0905 	adc.w	r9, r3, r5
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	469a      	mov	sl, r3
 8005db4:	4693      	mov	fp, r2
 8005db6:	4652      	mov	r2, sl
 8005db8:	465b      	mov	r3, fp
 8005dba:	4640      	mov	r0, r8
 8005dbc:	4649      	mov	r1, r9
 8005dbe:	f7fa fa7f 	bl	80002c0 <__aeabi_uldivmod>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dd0:	d308      	bcc.n	8005de4 <UART_SetConfig+0x430>
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dd8:	d204      	bcs.n	8005de4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6a3a      	ldr	r2, [r7, #32]
 8005de0:	60da      	str	r2, [r3, #12]
 8005de2:	e0ce      	b.n	8005f82 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005dea:	e0ca      	b.n	8005f82 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	69db      	ldr	r3, [r3, #28]
 8005df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005df4:	d166      	bne.n	8005ec4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005df6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005dfa:	2b08      	cmp	r3, #8
 8005dfc:	d827      	bhi.n	8005e4e <UART_SetConfig+0x49a>
 8005dfe:	a201      	add	r2, pc, #4	; (adr r2, 8005e04 <UART_SetConfig+0x450>)
 8005e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e04:	08005e29 	.word	0x08005e29
 8005e08:	08005e31 	.word	0x08005e31
 8005e0c:	08005e39 	.word	0x08005e39
 8005e10:	08005e4f 	.word	0x08005e4f
 8005e14:	08005e3f 	.word	0x08005e3f
 8005e18:	08005e4f 	.word	0x08005e4f
 8005e1c:	08005e4f 	.word	0x08005e4f
 8005e20:	08005e4f 	.word	0x08005e4f
 8005e24:	08005e47 	.word	0x08005e47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e28:	f7fe fd54 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 8005e2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e2e:	e014      	b.n	8005e5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e30:	f7fe fd66 	bl	8004900 <HAL_RCC_GetPCLK2Freq>
 8005e34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e36:	e010      	b.n	8005e5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e38:	4b4e      	ldr	r3, [pc, #312]	; (8005f74 <UART_SetConfig+0x5c0>)
 8005e3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e3c:	e00d      	b.n	8005e5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e3e:	f7fe fcdb 	bl	80047f8 <HAL_RCC_GetSysClockFreq>
 8005e42:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e44:	e009      	b.n	8005e5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005e4c:	e005      	b.n	8005e5a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005e58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 8090 	beq.w	8005f82 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	4a44      	ldr	r2, [pc, #272]	; (8005f78 <UART_SetConfig+0x5c4>)
 8005e68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e70:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e74:	005a      	lsls	r2, r3, #1
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	085b      	lsrs	r3, r3, #1
 8005e7c:	441a      	add	r2, r3
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	2b0f      	cmp	r3, #15
 8005e8c:	d916      	bls.n	8005ebc <UART_SetConfig+0x508>
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e94:	d212      	bcs.n	8005ebc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	f023 030f 	bic.w	r3, r3, #15
 8005e9e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ea0:	6a3b      	ldr	r3, [r7, #32]
 8005ea2:	085b      	lsrs	r3, r3, #1
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	f003 0307 	and.w	r3, r3, #7
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	8bfb      	ldrh	r3, [r7, #30]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	8bfa      	ldrh	r2, [r7, #30]
 8005eb8:	60da      	str	r2, [r3, #12]
 8005eba:	e062      	b.n	8005f82 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005ec2:	e05e      	b.n	8005f82 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ec4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ec8:	2b08      	cmp	r3, #8
 8005eca:	d828      	bhi.n	8005f1e <UART_SetConfig+0x56a>
 8005ecc:	a201      	add	r2, pc, #4	; (adr r2, 8005ed4 <UART_SetConfig+0x520>)
 8005ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed2:	bf00      	nop
 8005ed4:	08005ef9 	.word	0x08005ef9
 8005ed8:	08005f01 	.word	0x08005f01
 8005edc:	08005f09 	.word	0x08005f09
 8005ee0:	08005f1f 	.word	0x08005f1f
 8005ee4:	08005f0f 	.word	0x08005f0f
 8005ee8:	08005f1f 	.word	0x08005f1f
 8005eec:	08005f1f 	.word	0x08005f1f
 8005ef0:	08005f1f 	.word	0x08005f1f
 8005ef4:	08005f17 	.word	0x08005f17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ef8:	f7fe fcec 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 8005efc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005efe:	e014      	b.n	8005f2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f00:	f7fe fcfe 	bl	8004900 <HAL_RCC_GetPCLK2Freq>
 8005f04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f06:	e010      	b.n	8005f2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f08:	4b1a      	ldr	r3, [pc, #104]	; (8005f74 <UART_SetConfig+0x5c0>)
 8005f0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f0c:	e00d      	b.n	8005f2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f0e:	f7fe fc73 	bl	80047f8 <HAL_RCC_GetSysClockFreq>
 8005f12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005f14:	e009      	b.n	8005f2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005f1c:	e005      	b.n	8005f2a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005f28:	bf00      	nop
    }

    if (pclk != 0U)
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d028      	beq.n	8005f82 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f34:	4a10      	ldr	r2, [pc, #64]	; (8005f78 <UART_SetConfig+0x5c4>)
 8005f36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	085b      	lsrs	r3, r3, #1
 8005f48:	441a      	add	r2, r3
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	2b0f      	cmp	r3, #15
 8005f58:	d910      	bls.n	8005f7c <UART_SetConfig+0x5c8>
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f60:	d20c      	bcs.n	8005f7c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f62:	6a3b      	ldr	r3, [r7, #32]
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	60da      	str	r2, [r3, #12]
 8005f6c:	e009      	b.n	8005f82 <UART_SetConfig+0x5ce>
 8005f6e:	bf00      	nop
 8005f70:	40008000 	.word	0x40008000
 8005f74:	00f42400 	.word	0x00f42400
 8005f78:	0800c7b4 	.word	0x0800c7b4
      }
      else
      {
        ret = HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	2200      	movs	r2, #0
 8005f96:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005f9e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3730      	adds	r7, #48	; 0x30
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005fac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb8:	f003 0308 	and.w	r3, r3, #8
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00a      	beq.n	8005fd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00a      	beq.n	8005ff8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00a      	beq.n	800601a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601e:	f003 0304 	and.w	r3, r3, #4
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00a      	beq.n	800603c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	430a      	orrs	r2, r1
 800603a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006040:	f003 0310 	and.w	r3, r3, #16
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00a      	beq.n	800605e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	430a      	orrs	r2, r1
 800605c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006062:	f003 0320 	and.w	r3, r3, #32
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00a      	beq.n	8006080 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	430a      	orrs	r2, r1
 800607e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006088:	2b00      	cmp	r3, #0
 800608a:	d01a      	beq.n	80060c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060aa:	d10a      	bne.n	80060c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00a      	beq.n	80060e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	430a      	orrs	r2, r1
 80060e2:	605a      	str	r2, [r3, #4]
  }
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b098      	sub	sp, #96	; 0x60
 80060f4:	af02      	add	r7, sp, #8
 80060f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006100:	f7fb fb52 	bl	80017a8 <HAL_GetTick>
 8006104:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0308 	and.w	r3, r3, #8
 8006110:	2b08      	cmp	r3, #8
 8006112:	d12f      	bne.n	8006174 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006114:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006118:	9300      	str	r3, [sp, #0]
 800611a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800611c:	2200      	movs	r2, #0
 800611e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f88e 	bl	8006244 <UART_WaitOnFlagUntilTimeout>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d022      	beq.n	8006174 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006136:	e853 3f00 	ldrex	r3, [r3]
 800613a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800613c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800613e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006142:	653b      	str	r3, [r7, #80]	; 0x50
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	461a      	mov	r2, r3
 800614a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800614c:	647b      	str	r3, [r7, #68]	; 0x44
 800614e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006150:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006152:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006154:	e841 2300 	strex	r3, r2, [r1]
 8006158:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800615a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1e6      	bne.n	800612e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2220      	movs	r2, #32
 8006164:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e063      	b.n	800623c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0304 	and.w	r3, r3, #4
 800617e:	2b04      	cmp	r3, #4
 8006180:	d149      	bne.n	8006216 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006182:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006186:	9300      	str	r3, [sp, #0]
 8006188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800618a:	2200      	movs	r2, #0
 800618c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f857 	bl	8006244 <UART_WaitOnFlagUntilTimeout>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d03c      	beq.n	8006216 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a4:	e853 3f00 	ldrex	r3, [r3]
 80061a8:	623b      	str	r3, [r7, #32]
   return(result);
 80061aa:	6a3b      	ldr	r3, [r7, #32]
 80061ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	461a      	mov	r2, r3
 80061b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ba:	633b      	str	r3, [r7, #48]	; 0x30
 80061bc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061c2:	e841 2300 	strex	r3, r2, [r1]
 80061c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1e6      	bne.n	800619c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	3308      	adds	r3, #8
 80061d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	e853 3f00 	ldrex	r3, [r3]
 80061dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f023 0301 	bic.w	r3, r3, #1
 80061e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3308      	adds	r3, #8
 80061ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061ee:	61fa      	str	r2, [r7, #28]
 80061f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f2:	69b9      	ldr	r1, [r7, #24]
 80061f4:	69fa      	ldr	r2, [r7, #28]
 80061f6:	e841 2300 	strex	r3, r2, [r1]
 80061fa:	617b      	str	r3, [r7, #20]
   return(result);
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1e5      	bne.n	80061ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2220      	movs	r2, #32
 8006206:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e012      	b.n	800623c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2220      	movs	r2, #32
 800621a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2220      	movs	r2, #32
 8006222:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3758      	adds	r7, #88	; 0x58
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	603b      	str	r3, [r7, #0]
 8006250:	4613      	mov	r3, r2
 8006252:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006254:	e04f      	b.n	80062f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800625c:	d04b      	beq.n	80062f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800625e:	f7fb faa3 	bl	80017a8 <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	429a      	cmp	r2, r3
 800626c:	d302      	bcc.n	8006274 <UART_WaitOnFlagUntilTimeout+0x30>
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	e04e      	b.n	8006316 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0304 	and.w	r3, r3, #4
 8006282:	2b00      	cmp	r3, #0
 8006284:	d037      	beq.n	80062f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2b80      	cmp	r3, #128	; 0x80
 800628a:	d034      	beq.n	80062f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	2b40      	cmp	r3, #64	; 0x40
 8006290:	d031      	beq.n	80062f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	69db      	ldr	r3, [r3, #28]
 8006298:	f003 0308 	and.w	r3, r3, #8
 800629c:	2b08      	cmp	r3, #8
 800629e:	d110      	bne.n	80062c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2208      	movs	r2, #8
 80062a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 f95b 	bl	8006564 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2208      	movs	r2, #8
 80062b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e029      	b.n	8006316 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062d0:	d111      	bne.n	80062f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f000 f941 	bl	8006564 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2220      	movs	r2, #32
 80062e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e00f      	b.n	8006316 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	69da      	ldr	r2, [r3, #28]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	4013      	ands	r3, r2
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	429a      	cmp	r2, r3
 8006304:	bf0c      	ite	eq
 8006306:	2301      	moveq	r3, #1
 8006308:	2300      	movne	r3, #0
 800630a:	b2db      	uxtb	r3, r3
 800630c:	461a      	mov	r2, r3
 800630e:	79fb      	ldrb	r3, [r7, #7]
 8006310:	429a      	cmp	r2, r3
 8006312:	d0a0      	beq.n	8006256 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
	...

08006320 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006320:	b480      	push	{r7}
 8006322:	b0a3      	sub	sp, #140	; 0x8c
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	4613      	mov	r3, r2
 800632c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	88fa      	ldrh	r2, [r7, #6]
 8006338:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	88fa      	ldrh	r2, [r7, #6]
 8006340:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006352:	d10e      	bne.n	8006372 <UART_Start_Receive_IT+0x52>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d105      	bne.n	8006368 <UART_Start_Receive_IT+0x48>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006362:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006366:	e02d      	b.n	80063c4 <UART_Start_Receive_IT+0xa4>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	22ff      	movs	r2, #255	; 0xff
 800636c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006370:	e028      	b.n	80063c4 <UART_Start_Receive_IT+0xa4>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10d      	bne.n	8006396 <UART_Start_Receive_IT+0x76>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d104      	bne.n	800638c <UART_Start_Receive_IT+0x6c>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	22ff      	movs	r2, #255	; 0xff
 8006386:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800638a:	e01b      	b.n	80063c4 <UART_Start_Receive_IT+0xa4>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	227f      	movs	r2, #127	; 0x7f
 8006390:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006394:	e016      	b.n	80063c4 <UART_Start_Receive_IT+0xa4>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800639e:	d10d      	bne.n	80063bc <UART_Start_Receive_IT+0x9c>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d104      	bne.n	80063b2 <UART_Start_Receive_IT+0x92>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	227f      	movs	r2, #127	; 0x7f
 80063ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063b0:	e008      	b.n	80063c4 <UART_Start_Receive_IT+0xa4>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	223f      	movs	r2, #63	; 0x3f
 80063b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80063ba:	e003      	b.n	80063c4 <UART_Start_Receive_IT+0xa4>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2222      	movs	r2, #34	; 0x22
 80063d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	3308      	adds	r3, #8
 80063da:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063de:	e853 3f00 	ldrex	r3, [r3]
 80063e2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80063e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063e6:	f043 0301 	orr.w	r3, r3, #1
 80063ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	3308      	adds	r3, #8
 80063f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80063f8:	673a      	str	r2, [r7, #112]	; 0x70
 80063fa:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80063fe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006400:	e841 2300 	strex	r3, r2, [r1]
 8006404:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006406:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1e3      	bne.n	80063d4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006410:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006414:	d14f      	bne.n	80064b6 <UART_Start_Receive_IT+0x196>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800641c:	88fa      	ldrh	r2, [r7, #6]
 800641e:	429a      	cmp	r2, r3
 8006420:	d349      	bcc.n	80064b6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800642a:	d107      	bne.n	800643c <UART_Start_Receive_IT+0x11c>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d103      	bne.n	800643c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	4a47      	ldr	r2, [pc, #284]	; (8006554 <UART_Start_Receive_IT+0x234>)
 8006438:	675a      	str	r2, [r3, #116]	; 0x74
 800643a:	e002      	b.n	8006442 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	4a46      	ldr	r2, [pc, #280]	; (8006558 <UART_Start_Receive_IT+0x238>)
 8006440:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d01a      	beq.n	8006480 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006450:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006452:	e853 3f00 	ldrex	r3, [r3]
 8006456:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800645a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800645e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	461a      	mov	r2, r3
 8006468:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800646c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800646e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006470:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006472:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006474:	e841 2300 	strex	r3, r2, [r1]
 8006478:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800647a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1e4      	bne.n	800644a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3308      	adds	r3, #8
 8006486:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800648a:	e853 3f00 	ldrex	r3, [r3]
 800648e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006492:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006496:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	3308      	adds	r3, #8
 800649e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80064a0:	64ba      	str	r2, [r7, #72]	; 0x48
 80064a2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80064a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064a8:	e841 2300 	strex	r3, r2, [r1]
 80064ac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80064ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1e5      	bne.n	8006480 <UART_Start_Receive_IT+0x160>
 80064b4:	e046      	b.n	8006544 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064be:	d107      	bne.n	80064d0 <UART_Start_Receive_IT+0x1b0>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d103      	bne.n	80064d0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	4a24      	ldr	r2, [pc, #144]	; (800655c <UART_Start_Receive_IT+0x23c>)
 80064cc:	675a      	str	r2, [r3, #116]	; 0x74
 80064ce:	e002      	b.n	80064d6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4a23      	ldr	r2, [pc, #140]	; (8006560 <UART_Start_Receive_IT+0x240>)
 80064d4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d019      	beq.n	8006512 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e6:	e853 3f00 	ldrex	r3, [r3]
 80064ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ee:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80064f2:	677b      	str	r3, [r7, #116]	; 0x74
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	461a      	mov	r2, r3
 80064fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064fc:	637b      	str	r3, [r7, #52]	; 0x34
 80064fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006500:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006502:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006504:	e841 2300 	strex	r3, r2, [r1]
 8006508:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800650a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1e6      	bne.n	80064de <UART_Start_Receive_IT+0x1be>
 8006510:	e018      	b.n	8006544 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	e853 3f00 	ldrex	r3, [r3]
 800651e:	613b      	str	r3, [r7, #16]
   return(result);
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	f043 0320 	orr.w	r3, r3, #32
 8006526:	67bb      	str	r3, [r7, #120]	; 0x78
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	461a      	mov	r2, r3
 800652e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006530:	623b      	str	r3, [r7, #32]
 8006532:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006534:	69f9      	ldr	r1, [r7, #28]
 8006536:	6a3a      	ldr	r2, [r7, #32]
 8006538:	e841 2300 	strex	r3, r2, [r1]
 800653c:	61bb      	str	r3, [r7, #24]
   return(result);
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1e6      	bne.n	8006512 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	378c      	adds	r7, #140	; 0x8c
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	08006d85 	.word	0x08006d85
 8006558:	08006a25 	.word	0x08006a25
 800655c:	0800686d 	.word	0x0800686d
 8006560:	080066b5 	.word	0x080066b5

08006564 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006564:	b480      	push	{r7}
 8006566:	b095      	sub	sp, #84	; 0x54
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006574:	e853 3f00 	ldrex	r3, [r3]
 8006578:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800657a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006580:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	461a      	mov	r2, r3
 8006588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800658a:	643b      	str	r3, [r7, #64]	; 0x40
 800658c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006590:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006592:	e841 2300 	strex	r3, r2, [r1]
 8006596:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1e6      	bne.n	800656c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	3308      	adds	r3, #8
 80065a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a6:	6a3b      	ldr	r3, [r7, #32]
 80065a8:	e853 3f00 	ldrex	r3, [r3]
 80065ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065b4:	f023 0301 	bic.w	r3, r3, #1
 80065b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3308      	adds	r3, #8
 80065c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065ca:	e841 2300 	strex	r3, r2, [r1]
 80065ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1e3      	bne.n	800659e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d118      	bne.n	8006610 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	e853 3f00 	ldrex	r3, [r3]
 80065ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	f023 0310 	bic.w	r3, r3, #16
 80065f2:	647b      	str	r3, [r7, #68]	; 0x44
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	461a      	mov	r2, r3
 80065fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065fc:	61bb      	str	r3, [r7, #24]
 80065fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006600:	6979      	ldr	r1, [r7, #20]
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	e841 2300 	strex	r3, r2, [r1]
 8006608:	613b      	str	r3, [r7, #16]
   return(result);
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1e6      	bne.n	80065de <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2220      	movs	r2, #32
 8006614:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006624:	bf00      	nop
 8006626:	3754      	adds	r7, #84	; 0x54
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f7fa fed8 	bl	8001404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006654:	bf00      	nop
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b088      	sub	sp, #32
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	e853 3f00 	ldrex	r3, [r3]
 8006670:	60bb      	str	r3, [r7, #8]
   return(result);
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006678:	61fb      	str	r3, [r7, #28]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	61bb      	str	r3, [r7, #24]
 8006684:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006686:	6979      	ldr	r1, [r7, #20]
 8006688:	69ba      	ldr	r2, [r7, #24]
 800668a:	e841 2300 	strex	r3, r2, [r1]
 800668e:	613b      	str	r3, [r7, #16]
   return(result);
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1e6      	bne.n	8006664 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2220      	movs	r2, #32
 800669a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f7ff f96f 	bl	8005988 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066aa:	bf00      	nop
 80066ac:	3720      	adds	r7, #32
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
	...

080066b4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b09c      	sub	sp, #112	; 0x70
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80066c2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066cc:	2b22      	cmp	r3, #34	; 0x22
 80066ce:	f040 80be 	bne.w	800684e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80066dc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80066e0:	b2d9      	uxtb	r1, r3
 80066e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ec:	400a      	ands	r2, r1
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f6:	1c5a      	adds	r2, r3, #1
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006702:	b29b      	uxth	r3, r3
 8006704:	3b01      	subs	r3, #1
 8006706:	b29a      	uxth	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006714:	b29b      	uxth	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	f040 80a1 	bne.w	800685e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006724:	e853 3f00 	ldrex	r3, [r3]
 8006728:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800672a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800672c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006730:	66bb      	str	r3, [r7, #104]	; 0x68
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	461a      	mov	r2, r3
 8006738:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800673a:	65bb      	str	r3, [r7, #88]	; 0x58
 800673c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006740:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006742:	e841 2300 	strex	r3, r2, [r1]
 8006746:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1e6      	bne.n	800671c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3308      	adds	r3, #8
 8006754:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006758:	e853 3f00 	ldrex	r3, [r3]
 800675c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800675e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006760:	f023 0301 	bic.w	r3, r3, #1
 8006764:	667b      	str	r3, [r7, #100]	; 0x64
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	3308      	adds	r3, #8
 800676c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800676e:	647a      	str	r2, [r7, #68]	; 0x44
 8006770:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006772:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006774:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006776:	e841 2300 	strex	r3, r2, [r1]
 800677a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800677c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1e5      	bne.n	800674e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2220      	movs	r2, #32
 8006786:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a33      	ldr	r2, [pc, #204]	; (8006868 <UART_RxISR_8BIT+0x1b4>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d01f      	beq.n	80067e0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d018      	beq.n	80067e0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b6:	e853 3f00 	ldrex	r3, [r3]
 80067ba:	623b      	str	r3, [r7, #32]
   return(result);
 80067bc:	6a3b      	ldr	r3, [r7, #32]
 80067be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80067c2:	663b      	str	r3, [r7, #96]	; 0x60
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	461a      	mov	r2, r3
 80067ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067cc:	633b      	str	r3, [r7, #48]	; 0x30
 80067ce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067d4:	e841 2300 	strex	r3, r2, [r1]
 80067d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1e6      	bne.n	80067ae <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d12e      	bne.n	8006846 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	e853 3f00 	ldrex	r3, [r3]
 80067fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f023 0310 	bic.w	r3, r3, #16
 8006802:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	461a      	mov	r2, r3
 800680a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800680c:	61fb      	str	r3, [r7, #28]
 800680e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006810:	69b9      	ldr	r1, [r7, #24]
 8006812:	69fa      	ldr	r2, [r7, #28]
 8006814:	e841 2300 	strex	r3, r2, [r1]
 8006818:	617b      	str	r3, [r7, #20]
   return(result);
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1e6      	bne.n	80067ee <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	f003 0310 	and.w	r3, r3, #16
 800682a:	2b10      	cmp	r3, #16
 800682c:	d103      	bne.n	8006836 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2210      	movs	r2, #16
 8006834:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800683c:	4619      	mov	r1, r3
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7ff f8ac 	bl	800599c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006844:	e00b      	b.n	800685e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7fa fde6 	bl	8001418 <HAL_UART_RxCpltCallback>
}
 800684c:	e007      	b.n	800685e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	699a      	ldr	r2, [r3, #24]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f042 0208 	orr.w	r2, r2, #8
 800685c:	619a      	str	r2, [r3, #24]
}
 800685e:	bf00      	nop
 8006860:	3770      	adds	r7, #112	; 0x70
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	40008000 	.word	0x40008000

0800686c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b09c      	sub	sp, #112	; 0x70
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800687a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006884:	2b22      	cmp	r3, #34	; 0x22
 8006886:	f040 80be 	bne.w	8006a06 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006890:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006898:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800689a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800689e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80068a2:	4013      	ands	r3, r2
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ae:	1c9a      	adds	r2, r3, #2
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	3b01      	subs	r3, #1
 80068be:	b29a      	uxth	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f040 80a1 	bne.w	8006a16 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068dc:	e853 3f00 	ldrex	r3, [r3]
 80068e0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80068e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068e8:	667b      	str	r3, [r7, #100]	; 0x64
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	461a      	mov	r2, r3
 80068f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068f2:	657b      	str	r3, [r7, #84]	; 0x54
 80068f4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80068f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80068fa:	e841 2300 	strex	r3, r2, [r1]
 80068fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1e6      	bne.n	80068d4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	3308      	adds	r3, #8
 800690c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006910:	e853 3f00 	ldrex	r3, [r3]
 8006914:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006918:	f023 0301 	bic.w	r3, r3, #1
 800691c:	663b      	str	r3, [r7, #96]	; 0x60
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	3308      	adds	r3, #8
 8006924:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006926:	643a      	str	r2, [r7, #64]	; 0x40
 8006928:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800692c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800692e:	e841 2300 	strex	r3, r2, [r1]
 8006932:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1e5      	bne.n	8006906 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2220      	movs	r2, #32
 800693e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a33      	ldr	r2, [pc, #204]	; (8006a20 <UART_RxISR_16BIT+0x1b4>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d01f      	beq.n	8006998 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d018      	beq.n	8006998 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	e853 3f00 	ldrex	r3, [r3]
 8006972:	61fb      	str	r3, [r7, #28]
   return(result);
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800697a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	461a      	mov	r2, r3
 8006982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006984:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006986:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006988:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800698a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800698c:	e841 2300 	strex	r3, r2, [r1]
 8006990:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1e6      	bne.n	8006966 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800699c:	2b01      	cmp	r3, #1
 800699e:	d12e      	bne.n	80069fe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	e853 3f00 	ldrex	r3, [r3]
 80069b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	f023 0310 	bic.w	r3, r3, #16
 80069ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	461a      	mov	r2, r3
 80069c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069c4:	61bb      	str	r3, [r7, #24]
 80069c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c8:	6979      	ldr	r1, [r7, #20]
 80069ca:	69ba      	ldr	r2, [r7, #24]
 80069cc:	e841 2300 	strex	r3, r2, [r1]
 80069d0:	613b      	str	r3, [r7, #16]
   return(result);
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1e6      	bne.n	80069a6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	f003 0310 	and.w	r3, r3, #16
 80069e2:	2b10      	cmp	r3, #16
 80069e4:	d103      	bne.n	80069ee <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2210      	movs	r2, #16
 80069ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80069f4:	4619      	mov	r1, r3
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7fe ffd0 	bl	800599c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80069fc:	e00b      	b.n	8006a16 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7fa fd0a 	bl	8001418 <HAL_UART_RxCpltCallback>
}
 8006a04:	e007      	b.n	8006a16 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	699a      	ldr	r2, [r3, #24]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f042 0208 	orr.w	r2, r2, #8
 8006a14:	619a      	str	r2, [r3, #24]
}
 8006a16:	bf00      	nop
 8006a18:	3770      	adds	r7, #112	; 0x70
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	40008000 	.word	0x40008000

08006a24 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b0ac      	sub	sp, #176	; 0xb0
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006a32:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	69db      	ldr	r3, [r3, #28]
 8006a3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a5a:	2b22      	cmp	r3, #34	; 0x22
 8006a5c:	f040 8182 	bne.w	8006d64 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006a66:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006a6a:	e125      	b.n	8006cb8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a72:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006a76:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006a7a:	b2d9      	uxtb	r1, r3
 8006a7c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a86:	400a      	ands	r2, r1
 8006a88:	b2d2      	uxtb	r2, r2
 8006a8a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a90:	1c5a      	adds	r2, r3, #1
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006ab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ab6:	f003 0307 	and.w	r3, r3, #7
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d053      	beq.n	8006b66 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006abe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d011      	beq.n	8006aee <UART_RxISR_8BIT_FIFOEN+0xca>
 8006aca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00b      	beq.n	8006aee <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2201      	movs	r2, #1
 8006adc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ae4:	f043 0201 	orr.w	r2, r3, #1
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006aee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d011      	beq.n	8006b1e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006afa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00b      	beq.n	8006b1e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b14:	f043 0204 	orr.w	r2, r3, #4
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b22:	f003 0304 	and.w	r3, r3, #4
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d011      	beq.n	8006b4e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006b2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00b      	beq.n	8006b4e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2204      	movs	r2, #4
 8006b3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b44:	f043 0202 	orr.w	r2, r3, #2
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d006      	beq.n	8006b66 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f7fa fc53 	bl	8001404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f040 80a2 	bne.w	8006cb8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b7c:	e853 3f00 	ldrex	r3, [r3]
 8006b80:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8006b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	461a      	mov	r2, r3
 8006b92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b96:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006b98:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006b9c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006b9e:	e841 2300 	strex	r3, r2, [r1]
 8006ba2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8006ba4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1e4      	bne.n	8006b74 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	3308      	adds	r3, #8
 8006bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bb4:	e853 3f00 	ldrex	r3, [r3]
 8006bb8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006bba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bc0:	f023 0301 	bic.w	r3, r3, #1
 8006bc4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	3308      	adds	r3, #8
 8006bce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006bd2:	66ba      	str	r2, [r7, #104]	; 0x68
 8006bd4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006bd8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006bda:	e841 2300 	strex	r3, r2, [r1]
 8006bde:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006be0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1e1      	bne.n	8006baa <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2220      	movs	r2, #32
 8006bea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a5f      	ldr	r2, [pc, #380]	; (8006d7c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d021      	beq.n	8006c48 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d01a      	beq.n	8006c48 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c1a:	e853 3f00 	ldrex	r3, [r3]
 8006c1e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c34:	657b      	str	r3, [r7, #84]	; 0x54
 8006c36:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c38:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006c3a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c3c:	e841 2300 	strex	r3, r2, [r1]
 8006c40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1e4      	bne.n	8006c12 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d130      	bne.n	8006cb2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c5e:	e853 3f00 	ldrex	r3, [r3]
 8006c62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c66:	f023 0310 	bic.w	r3, r3, #16
 8006c6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006c78:	643b      	str	r3, [r7, #64]	; 0x40
 8006c7a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c80:	e841 2300 	strex	r3, r2, [r1]
 8006c84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1e4      	bne.n	8006c56 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	69db      	ldr	r3, [r3, #28]
 8006c92:	f003 0310 	and.w	r3, r3, #16
 8006c96:	2b10      	cmp	r3, #16
 8006c98:	d103      	bne.n	8006ca2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2210      	movs	r2, #16
 8006ca0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ca8:	4619      	mov	r1, r3
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f7fe fe76 	bl	800599c <HAL_UARTEx_RxEventCallback>
 8006cb0:	e002      	b.n	8006cb8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f7fa fbb0 	bl	8001418 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006cb8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d006      	beq.n	8006cce <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006cc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cc4:	f003 0320 	and.w	r3, r3, #32
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f47f aecf 	bne.w	8006a6c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006cd4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006cd8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d049      	beq.n	8006d74 <UART_RxISR_8BIT_FIFOEN+0x350>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006ce6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d242      	bcs.n	8006d74 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3308      	adds	r3, #8
 8006cf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf6:	6a3b      	ldr	r3, [r7, #32]
 8006cf8:	e853 3f00 	ldrex	r3, [r3]
 8006cfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	3308      	adds	r3, #8
 8006d0e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006d12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d14:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d1a:	e841 2300 	strex	r3, r2, [r1]
 8006d1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1e3      	bne.n	8006cee <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a15      	ldr	r2, [pc, #84]	; (8006d80 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006d2a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	e853 3f00 	ldrex	r3, [r3]
 8006d38:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	f043 0320 	orr.w	r3, r3, #32
 8006d40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	461a      	mov	r2, r3
 8006d4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006d4e:	61bb      	str	r3, [r7, #24]
 8006d50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d52:	6979      	ldr	r1, [r7, #20]
 8006d54:	69ba      	ldr	r2, [r7, #24]
 8006d56:	e841 2300 	strex	r3, r2, [r1]
 8006d5a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1e4      	bne.n	8006d2c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d62:	e007      	b.n	8006d74 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	699a      	ldr	r2, [r3, #24]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f042 0208 	orr.w	r2, r2, #8
 8006d72:	619a      	str	r2, [r3, #24]
}
 8006d74:	bf00      	nop
 8006d76:	37b0      	adds	r7, #176	; 0xb0
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	40008000 	.word	0x40008000
 8006d80:	080066b5 	.word	0x080066b5

08006d84 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b0ae      	sub	sp, #184	; 0xb8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006d92:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	69db      	ldr	r3, [r3, #28]
 8006d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dba:	2b22      	cmp	r3, #34	; 0x22
 8006dbc:	f040 8186 	bne.w	80070cc <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006dc6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006dca:	e129      	b.n	8007020 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006dde:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006de2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006de6:	4013      	ands	r3, r2
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006dee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df4:	1c9a      	adds	r2, r3, #2
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	3b01      	subs	r3, #1
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006e16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e1a:	f003 0307 	and.w	r3, r3, #7
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d053      	beq.n	8006eca <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d011      	beq.n	8006e52 <UART_RxISR_16BIT_FIFOEN+0xce>
 8006e2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00b      	beq.n	8006e52 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e48:	f043 0201 	orr.w	r2, r3, #1
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e56:	f003 0302 	and.w	r3, r3, #2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d011      	beq.n	8006e82 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006e5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00b      	beq.n	8006e82 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e78:	f043 0204 	orr.w	r2, r3, #4
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e86:	f003 0304 	and.w	r3, r3, #4
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d011      	beq.n	8006eb2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006e8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00b      	beq.n	8006eb2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2204      	movs	r2, #4
 8006ea0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ea8:	f043 0202 	orr.w	r2, r3, #2
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d006      	beq.n	8006eca <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f7fa faa1 	bl	8001404 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f040 80a4 	bne.w	8007020 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ede:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ee0:	e853 3f00 	ldrex	r3, [r3]
 8006ee4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ee6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006eec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006efa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006efe:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f06:	e841 2300 	strex	r3, r2, [r1]
 8006f0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1e2      	bne.n	8006ed8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	3308      	adds	r3, #8
 8006f18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f1c:	e853 3f00 	ldrex	r3, [r3]
 8006f20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f28:	f023 0301 	bic.w	r3, r3, #1
 8006f2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3308      	adds	r3, #8
 8006f36:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006f3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f42:	e841 2300 	strex	r3, r2, [r1]
 8006f46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1e1      	bne.n	8006f12 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2220      	movs	r2, #32
 8006f52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a5f      	ldr	r2, [pc, #380]	; (80070e4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d021      	beq.n	8006fb0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d01a      	beq.n	8006fb0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f82:	e853 3f00 	ldrex	r3, [r3]
 8006f86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	461a      	mov	r2, r3
 8006f98:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006f9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f9e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006fa2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fa4:	e841 2300 	strex	r3, r2, [r1]
 8006fa8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006faa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1e4      	bne.n	8006f7a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d130      	bne.n	800701a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc6:	e853 3f00 	ldrex	r3, [r3]
 8006fca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fce:	f023 0310 	bic.w	r3, r3, #16
 8006fd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fe0:	647b      	str	r3, [r7, #68]	; 0x44
 8006fe2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fe6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fe8:	e841 2300 	strex	r3, r2, [r1]
 8006fec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1e4      	bne.n	8006fbe <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	69db      	ldr	r3, [r3, #28]
 8006ffa:	f003 0310 	and.w	r3, r3, #16
 8006ffe:	2b10      	cmp	r3, #16
 8007000:	d103      	bne.n	800700a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2210      	movs	r2, #16
 8007008:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007010:	4619      	mov	r1, r3
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f7fe fcc2 	bl	800599c <HAL_UARTEx_RxEventCallback>
 8007018:	e002      	b.n	8007020 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7fa f9fc 	bl	8001418 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007020:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8007024:	2b00      	cmp	r3, #0
 8007026:	d006      	beq.n	8007036 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8007028:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800702c:	f003 0320 	and.w	r3, r3, #32
 8007030:	2b00      	cmp	r3, #0
 8007032:	f47f aecb 	bne.w	8006dcc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800703c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007040:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007044:	2b00      	cmp	r3, #0
 8007046:	d049      	beq.n	80070dc <UART_RxISR_16BIT_FIFOEN+0x358>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800704e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8007052:	429a      	cmp	r2, r3
 8007054:	d242      	bcs.n	80070dc <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	3308      	adds	r3, #8
 800705c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007060:	e853 3f00 	ldrex	r3, [r3]
 8007064:	623b      	str	r3, [r7, #32]
   return(result);
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800706c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	3308      	adds	r3, #8
 8007076:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800707a:	633a      	str	r2, [r7, #48]	; 0x30
 800707c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007080:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007082:	e841 2300 	strex	r3, r2, [r1]
 8007086:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1e3      	bne.n	8007056 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a15      	ldr	r2, [pc, #84]	; (80070e8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007092:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	e853 3f00 	ldrex	r3, [r3]
 80070a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f043 0320 	orr.w	r3, r3, #32
 80070a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	461a      	mov	r2, r3
 80070b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070b6:	61fb      	str	r3, [r7, #28]
 80070b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ba:	69b9      	ldr	r1, [r7, #24]
 80070bc:	69fa      	ldr	r2, [r7, #28]
 80070be:	e841 2300 	strex	r3, r2, [r1]
 80070c2:	617b      	str	r3, [r7, #20]
   return(result);
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1e4      	bne.n	8007094 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070ca:	e007      	b.n	80070dc <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	699a      	ldr	r2, [r3, #24]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f042 0208 	orr.w	r2, r2, #8
 80070da:	619a      	str	r2, [r3, #24]
}
 80070dc:	bf00      	nop
 80070de:	37b8      	adds	r7, #184	; 0xb8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	40008000 	.word	0x40008000
 80070e8:	0800686d 	.word	0x0800686d

080070ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80070f4:	bf00      	nop
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007108:	bf00      	nop
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800711c:	bf00      	nop
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007136:	2b01      	cmp	r3, #1
 8007138:	d101      	bne.n	800713e <HAL_UARTEx_DisableFifoMode+0x16>
 800713a:	2302      	movs	r3, #2
 800713c:	e027      	b.n	800718e <HAL_UARTEx_DisableFifoMode+0x66>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2224      	movs	r2, #36	; 0x24
 800714a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f022 0201 	bic.w	r2, r2, #1
 8007164:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800716c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2220      	movs	r2, #32
 8007180:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800718c:	2300      	movs	r3, #0
}
 800718e:	4618      	mov	r0, r3
 8007190:	3714      	adds	r7, #20
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b084      	sub	sp, #16
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d101      	bne.n	80071b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80071ae:	2302      	movs	r3, #2
 80071b0:	e02d      	b.n	800720e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2224      	movs	r2, #36	; 0x24
 80071be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f022 0201 	bic.w	r2, r2, #1
 80071d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	683a      	ldr	r2, [r7, #0]
 80071ea:	430a      	orrs	r2, r1
 80071ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f850 	bl	8007294 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2220      	movs	r2, #32
 8007200:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b084      	sub	sp, #16
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
 800721e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007226:	2b01      	cmp	r3, #1
 8007228:	d101      	bne.n	800722e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800722a:	2302      	movs	r3, #2
 800722c:	e02d      	b.n	800728a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2224      	movs	r2, #36	; 0x24
 800723a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f022 0201 	bic.w	r2, r2, #1
 8007254:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	683a      	ldr	r2, [r7, #0]
 8007266:	430a      	orrs	r2, r1
 8007268:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f812 	bl	8007294 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2220      	movs	r2, #32
 800727c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
	...

08007294 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d108      	bne.n	80072b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80072b4:	e031      	b.n	800731a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80072b6:	2308      	movs	r3, #8
 80072b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80072ba:	2308      	movs	r3, #8
 80072bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	0e5b      	lsrs	r3, r3, #25
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	f003 0307 	and.w	r3, r3, #7
 80072cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	0f5b      	lsrs	r3, r3, #29
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	f003 0307 	and.w	r3, r3, #7
 80072dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072de:	7bbb      	ldrb	r3, [r7, #14]
 80072e0:	7b3a      	ldrb	r2, [r7, #12]
 80072e2:	4911      	ldr	r1, [pc, #68]	; (8007328 <UARTEx_SetNbDataToProcess+0x94>)
 80072e4:	5c8a      	ldrb	r2, [r1, r2]
 80072e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80072ea:	7b3a      	ldrb	r2, [r7, #12]
 80072ec:	490f      	ldr	r1, [pc, #60]	; (800732c <UARTEx_SetNbDataToProcess+0x98>)
 80072ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072fc:	7bfb      	ldrb	r3, [r7, #15]
 80072fe:	7b7a      	ldrb	r2, [r7, #13]
 8007300:	4909      	ldr	r1, [pc, #36]	; (8007328 <UARTEx_SetNbDataToProcess+0x94>)
 8007302:	5c8a      	ldrb	r2, [r1, r2]
 8007304:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007308:	7b7a      	ldrb	r2, [r7, #13]
 800730a:	4908      	ldr	r1, [pc, #32]	; (800732c <UARTEx_SetNbDataToProcess+0x98>)
 800730c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800730e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007312:	b29a      	uxth	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800731a:	bf00      	nop
 800731c:	3714      	adds	r7, #20
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	0800c7cc 	.word	0x0800c7cc
 800732c:	0800c7d4 	.word	0x0800c7d4

08007330 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007340:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007344:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	b29a      	uxth	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr

0800735e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800735e:	b480      	push	{r7}
 8007360:	b085      	sub	sp, #20
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007366:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800736a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007372:	b29a      	uxth	r2, r3
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	b29b      	uxth	r3, r3
 8007378:	43db      	mvns	r3, r3
 800737a:	b29b      	uxth	r3, r3
 800737c:	4013      	ands	r3, r2
 800737e:	b29a      	uxth	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3714      	adds	r7, #20
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	1d3b      	adds	r3, r7, #4
 800739e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3714      	adds	r7, #20
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b09d      	sub	sp, #116	; 0x74
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	4413      	add	r3, r2
 80073ea:	881b      	ldrh	r3, [r3, #0]
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80073f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	78db      	ldrb	r3, [r3, #3]
 80073fe:	2b03      	cmp	r3, #3
 8007400:	d81f      	bhi.n	8007442 <USB_ActivateEndpoint+0x72>
 8007402:	a201      	add	r2, pc, #4	; (adr r2, 8007408 <USB_ActivateEndpoint+0x38>)
 8007404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007408:	08007419 	.word	0x08007419
 800740c:	08007435 	.word	0x08007435
 8007410:	0800744b 	.word	0x0800744b
 8007414:	08007427 	.word	0x08007427
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007418:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800741c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007420:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007424:	e012      	b.n	800744c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007426:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800742a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800742e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007432:	e00b      	b.n	800744c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007434:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007438:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800743c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007440:	e004      	b.n	800744c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007448:	e000      	b.n	800744c <USB_ActivateEndpoint+0x7c>
      break;
 800744a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	009b      	lsls	r3, r3, #2
 8007454:	441a      	add	r2, r3
 8007456:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800745a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800745e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800746a:	b29b      	uxth	r3, r3
 800746c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	4413      	add	r3, r2
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	b29b      	uxth	r3, r3
 800747c:	b21b      	sxth	r3, r3
 800747e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007486:	b21a      	sxth	r2, r3
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	b21b      	sxth	r3, r3
 800748e:	4313      	orrs	r3, r2
 8007490:	b21b      	sxth	r3, r3
 8007492:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	441a      	add	r2, r3
 80074a0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80074a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	7b1b      	ldrb	r3, [r3, #12]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	f040 8178 	bne.w	80077b2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	785b      	ldrb	r3, [r3, #1]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f000 8084 	beq.w	80075d4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	61bb      	str	r3, [r7, #24]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	461a      	mov	r2, r3
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	4413      	add	r3, r2
 80074de:	61bb      	str	r3, [r7, #24]
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	00da      	lsls	r2, r3, #3
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	4413      	add	r3, r2
 80074ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074ee:	617b      	str	r3, [r7, #20]
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	88db      	ldrh	r3, [r3, #6]
 80074f4:	085b      	lsrs	r3, r3, #1
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	005b      	lsls	r3, r3, #1
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4413      	add	r3, r2
 800750a:	881b      	ldrh	r3, [r3, #0]
 800750c:	827b      	strh	r3, [r7, #18]
 800750e:	8a7b      	ldrh	r3, [r7, #18]
 8007510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007514:	2b00      	cmp	r3, #0
 8007516:	d01b      	beq.n	8007550 <USB_ActivateEndpoint+0x180>
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	881b      	ldrh	r3, [r3, #0]
 8007524:	b29b      	uxth	r3, r3
 8007526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800752a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800752e:	823b      	strh	r3, [r7, #16]
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	441a      	add	r2, r3
 800753a:	8a3b      	ldrh	r3, [r7, #16]
 800753c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007548:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800754c:	b29b      	uxth	r3, r3
 800754e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	78db      	ldrb	r3, [r3, #3]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d020      	beq.n	800759a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	881b      	ldrh	r3, [r3, #0]
 8007564:	b29b      	uxth	r3, r3
 8007566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800756a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800756e:	81bb      	strh	r3, [r7, #12]
 8007570:	89bb      	ldrh	r3, [r7, #12]
 8007572:	f083 0320 	eor.w	r3, r3, #32
 8007576:	81bb      	strh	r3, [r7, #12]
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	441a      	add	r2, r3
 8007582:	89bb      	ldrh	r3, [r7, #12]
 8007584:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007588:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800758c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007594:	b29b      	uxth	r3, r3
 8007596:	8013      	strh	r3, [r2, #0]
 8007598:	e2d5      	b.n	8007b46 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	4413      	add	r3, r2
 80075a4:	881b      	ldrh	r3, [r3, #0]
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075b0:	81fb      	strh	r3, [r7, #14]
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	441a      	add	r2, r3
 80075bc:	89fb      	ldrh	r3, [r7, #14]
 80075be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	8013      	strh	r3, [r2, #0]
 80075d2:	e2b8      	b.n	8007b46 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	633b      	str	r3, [r7, #48]	; 0x30
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075de:	b29b      	uxth	r3, r3
 80075e0:	461a      	mov	r2, r3
 80075e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e4:	4413      	add	r3, r2
 80075e6:	633b      	str	r3, [r7, #48]	; 0x30
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	00da      	lsls	r2, r3, #3
 80075ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f0:	4413      	add	r3, r2
 80075f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	88db      	ldrh	r3, [r3, #6]
 80075fc:	085b      	lsrs	r3, r3, #1
 80075fe:	b29b      	uxth	r3, r3
 8007600:	005b      	lsls	r3, r3, #1
 8007602:	b29a      	uxth	r2, r3
 8007604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007606:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	62bb      	str	r3, [r7, #40]	; 0x28
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007612:	b29b      	uxth	r3, r3
 8007614:	461a      	mov	r2, r3
 8007616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007618:	4413      	add	r3, r2
 800761a:	62bb      	str	r3, [r7, #40]	; 0x28
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	00da      	lsls	r2, r3, #3
 8007622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007624:	4413      	add	r3, r2
 8007626:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800762a:	627b      	str	r3, [r7, #36]	; 0x24
 800762c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762e:	881b      	ldrh	r3, [r3, #0]
 8007630:	b29b      	uxth	r3, r3
 8007632:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007636:	b29a      	uxth	r2, r3
 8007638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763a:	801a      	strh	r2, [r3, #0]
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	2b3e      	cmp	r3, #62	; 0x3e
 8007642:	d91d      	bls.n	8007680 <USB_ActivateEndpoint+0x2b0>
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	095b      	lsrs	r3, r3, #5
 800764a:	66bb      	str	r3, [r7, #104]	; 0x68
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	f003 031f 	and.w	r3, r3, #31
 8007654:	2b00      	cmp	r3, #0
 8007656:	d102      	bne.n	800765e <USB_ActivateEndpoint+0x28e>
 8007658:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800765a:	3b01      	subs	r3, #1
 800765c:	66bb      	str	r3, [r7, #104]	; 0x68
 800765e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007660:	881b      	ldrh	r3, [r3, #0]
 8007662:	b29a      	uxth	r2, r3
 8007664:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007666:	b29b      	uxth	r3, r3
 8007668:	029b      	lsls	r3, r3, #10
 800766a:	b29b      	uxth	r3, r3
 800766c:	4313      	orrs	r3, r2
 800766e:	b29b      	uxth	r3, r3
 8007670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007678:	b29a      	uxth	r2, r3
 800767a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767c:	801a      	strh	r2, [r3, #0]
 800767e:	e026      	b.n	80076ce <USB_ActivateEndpoint+0x2fe>
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d10a      	bne.n	800769e <USB_ActivateEndpoint+0x2ce>
 8007688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768a:	881b      	ldrh	r3, [r3, #0]
 800768c:	b29b      	uxth	r3, r3
 800768e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007696:	b29a      	uxth	r2, r3
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	801a      	strh	r2, [r3, #0]
 800769c:	e017      	b.n	80076ce <USB_ActivateEndpoint+0x2fe>
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	085b      	lsrs	r3, r3, #1
 80076a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	f003 0301 	and.w	r3, r3, #1
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d002      	beq.n	80076b8 <USB_ActivateEndpoint+0x2e8>
 80076b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076b4:	3301      	adds	r3, #1
 80076b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80076b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ba:	881b      	ldrh	r3, [r3, #0]
 80076bc:	b29a      	uxth	r2, r3
 80076be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	029b      	lsls	r3, r3, #10
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	4313      	orrs	r3, r2
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	4413      	add	r3, r2
 80076d8:	881b      	ldrh	r3, [r3, #0]
 80076da:	847b      	strh	r3, [r7, #34]	; 0x22
 80076dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80076de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d01b      	beq.n	800771e <USB_ActivateEndpoint+0x34e>
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	4413      	add	r3, r2
 80076f0:	881b      	ldrh	r3, [r3, #0]
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076fc:	843b      	strh	r3, [r7, #32]
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	441a      	add	r2, r3
 8007708:	8c3b      	ldrh	r3, [r7, #32]
 800770a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800770e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007712:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800771a:	b29b      	uxth	r3, r3
 800771c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d124      	bne.n	8007770 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	4413      	add	r3, r2
 8007730:	881b      	ldrh	r3, [r3, #0]
 8007732:	b29b      	uxth	r3, r3
 8007734:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800773c:	83bb      	strh	r3, [r7, #28]
 800773e:	8bbb      	ldrh	r3, [r7, #28]
 8007740:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007744:	83bb      	strh	r3, [r7, #28]
 8007746:	8bbb      	ldrh	r3, [r7, #28]
 8007748:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800774c:	83bb      	strh	r3, [r7, #28]
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	441a      	add	r2, r3
 8007758:	8bbb      	ldrh	r3, [r7, #28]
 800775a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800775e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800776a:	b29b      	uxth	r3, r3
 800776c:	8013      	strh	r3, [r2, #0]
 800776e:	e1ea      	b.n	8007b46 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	4413      	add	r3, r2
 800777a:	881b      	ldrh	r3, [r3, #0]
 800777c:	b29b      	uxth	r3, r3
 800777e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007782:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007786:	83fb      	strh	r3, [r7, #30]
 8007788:	8bfb      	ldrh	r3, [r7, #30]
 800778a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800778e:	83fb      	strh	r3, [r7, #30]
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	441a      	add	r2, r3
 800779a:	8bfb      	ldrh	r3, [r7, #30]
 800779c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	8013      	strh	r3, [r2, #0]
 80077b0:	e1c9      	b.n	8007b46 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	78db      	ldrb	r3, [r3, #3]
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d11e      	bne.n	80077f8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	881b      	ldrh	r3, [r3, #0]
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077d0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	441a      	add	r2, r3
 80077de:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80077e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077ea:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80077ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	8013      	strh	r3, [r2, #0]
 80077f6:	e01d      	b.n	8007834 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	4413      	add	r3, r2
 8007802:	881b      	ldrh	r3, [r3, #0]
 8007804:	b29b      	uxth	r3, r3
 8007806:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800780a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800780e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	441a      	add	r2, r3
 800781c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007820:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007824:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800782c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007830:	b29b      	uxth	r3, r3
 8007832:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800783e:	b29b      	uxth	r3, r3
 8007840:	461a      	mov	r2, r3
 8007842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007844:	4413      	add	r3, r2
 8007846:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	00da      	lsls	r2, r3, #3
 800784e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007850:	4413      	add	r3, r2
 8007852:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007856:	65bb      	str	r3, [r7, #88]	; 0x58
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	891b      	ldrh	r3, [r3, #8]
 800785c:	085b      	lsrs	r3, r3, #1
 800785e:	b29b      	uxth	r3, r3
 8007860:	005b      	lsls	r3, r3, #1
 8007862:	b29a      	uxth	r2, r3
 8007864:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007866:	801a      	strh	r2, [r3, #0]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	657b      	str	r3, [r7, #84]	; 0x54
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007872:	b29b      	uxth	r3, r3
 8007874:	461a      	mov	r2, r3
 8007876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007878:	4413      	add	r3, r2
 800787a:	657b      	str	r3, [r7, #84]	; 0x54
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	00da      	lsls	r2, r3, #3
 8007882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007884:	4413      	add	r3, r2
 8007886:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800788a:	653b      	str	r3, [r7, #80]	; 0x50
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	895b      	ldrh	r3, [r3, #10]
 8007890:	085b      	lsrs	r3, r3, #1
 8007892:	b29b      	uxth	r3, r3
 8007894:	005b      	lsls	r3, r3, #1
 8007896:	b29a      	uxth	r2, r3
 8007898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800789a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	785b      	ldrb	r3, [r3, #1]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f040 8093 	bne.w	80079cc <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	4413      	add	r3, r2
 80078b0:	881b      	ldrh	r3, [r3, #0]
 80078b2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80078b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80078ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d01b      	beq.n	80078fa <USB_ActivateEndpoint+0x52a>
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	4413      	add	r3, r2
 80078cc:	881b      	ldrh	r3, [r3, #0]
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	441a      	add	r2, r3
 80078e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80078e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80078f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4413      	add	r3, r2
 8007904:	881b      	ldrh	r3, [r3, #0]
 8007906:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007908:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800790a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790e:	2b00      	cmp	r3, #0
 8007910:	d01b      	beq.n	800794a <USB_ActivateEndpoint+0x57a>
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4413      	add	r3, r2
 800791c:	881b      	ldrh	r3, [r3, #0]
 800791e:	b29b      	uxth	r3, r3
 8007920:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007928:	877b      	strh	r3, [r7, #58]	; 0x3a
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	441a      	add	r2, r3
 8007934:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007936:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800793a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800793e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007942:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007946:	b29b      	uxth	r3, r3
 8007948:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	4413      	add	r3, r2
 8007954:	881b      	ldrh	r3, [r3, #0]
 8007956:	b29b      	uxth	r3, r3
 8007958:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800795c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007960:	873b      	strh	r3, [r7, #56]	; 0x38
 8007962:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007964:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007968:	873b      	strh	r3, [r7, #56]	; 0x38
 800796a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800796c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007970:	873b      	strh	r3, [r7, #56]	; 0x38
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	441a      	add	r2, r3
 800797c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800797e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800798a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800798e:	b29b      	uxth	r3, r3
 8007990:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	881b      	ldrh	r3, [r3, #0]
 800799e:	b29b      	uxth	r3, r3
 80079a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079a8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	441a      	add	r2, r3
 80079b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80079b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	8013      	strh	r3, [r2, #0]
 80079ca:	e0bc      	b.n	8007b46 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4413      	add	r3, r2
 80079d6:	881b      	ldrh	r3, [r3, #0]
 80079d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80079dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80079e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d01d      	beq.n	8007a24 <USB_ActivateEndpoint+0x654>
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	881b      	ldrh	r3, [r3, #0]
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079fe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	441a      	add	r2, r3
 8007a0c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4413      	add	r3, r2
 8007a2e:	881b      	ldrh	r3, [r3, #0]
 8007a30:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007a34:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d01d      	beq.n	8007a7c <USB_ActivateEndpoint+0x6ac>
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4413      	add	r3, r2
 8007a4a:	881b      	ldrh	r3, [r3, #0]
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a56:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	441a      	add	r2, r3
 8007a64:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007a68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	78db      	ldrb	r3, [r3, #3]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d024      	beq.n	8007ace <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4413      	add	r3, r2
 8007a8e:	881b      	ldrh	r3, [r3, #0]
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a9a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007a9e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007aa2:	f083 0320 	eor.w	r3, r3, #32
 8007aa6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	441a      	add	r2, r3
 8007ab4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007ab8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007abc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ac0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	8013      	strh	r3, [r2, #0]
 8007acc:	e01d      	b.n	8007b0a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4413      	add	r3, r2
 8007ad8:	881b      	ldrh	r3, [r3, #0]
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ae4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	441a      	add	r2, r3
 8007af2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007af6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007afa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007afe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	881b      	ldrh	r3, [r3, #0]
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b20:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	441a      	add	r2, r3
 8007b2e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007b32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007b46:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3774      	adds	r7, #116	; 0x74
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop

08007b58 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b08d      	sub	sp, #52	; 0x34
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	7b1b      	ldrb	r3, [r3, #12]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	f040 808e 	bne.w	8007c88 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	785b      	ldrb	r3, [r3, #1]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d044      	beq.n	8007bfe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	881b      	ldrh	r3, [r3, #0]
 8007b80:	81bb      	strh	r3, [r7, #12]
 8007b82:	89bb      	ldrh	r3, [r7, #12]
 8007b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d01b      	beq.n	8007bc4 <USB_DeactivateEndpoint+0x6c>
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4413      	add	r3, r2
 8007b96:	881b      	ldrh	r3, [r3, #0]
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba2:	817b      	strh	r3, [r7, #10]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	441a      	add	r2, r3
 8007bae:	897b      	ldrh	r3, [r7, #10]
 8007bb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bbc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	4413      	add	r3, r2
 8007bce:	881b      	ldrh	r3, [r3, #0]
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bda:	813b      	strh	r3, [r7, #8]
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	441a      	add	r2, r3
 8007be6:	893b      	ldrh	r3, [r7, #8]
 8007be8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	8013      	strh	r3, [r2, #0]
 8007bfc:	e192      	b.n	8007f24 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4413      	add	r3, r2
 8007c08:	881b      	ldrh	r3, [r3, #0]
 8007c0a:	827b      	strh	r3, [r7, #18]
 8007c0c:	8a7b      	ldrh	r3, [r7, #18]
 8007c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d01b      	beq.n	8007c4e <USB_DeactivateEndpoint+0xf6>
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	4413      	add	r3, r2
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c2c:	823b      	strh	r3, [r7, #16]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	441a      	add	r2, r3
 8007c38:	8a3b      	ldrh	r3, [r7, #16]
 8007c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4413      	add	r3, r2
 8007c58:	881b      	ldrh	r3, [r3, #0]
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c64:	81fb      	strh	r3, [r7, #14]
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	441a      	add	r2, r3
 8007c70:	89fb      	ldrh	r3, [r7, #14]
 8007c72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	8013      	strh	r3, [r2, #0]
 8007c86:	e14d      	b.n	8007f24 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	785b      	ldrb	r3, [r3, #1]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f040 80a5 	bne.w	8007ddc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	4413      	add	r3, r2
 8007c9c:	881b      	ldrh	r3, [r3, #0]
 8007c9e:	843b      	strh	r3, [r7, #32]
 8007ca0:	8c3b      	ldrh	r3, [r7, #32]
 8007ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d01b      	beq.n	8007ce2 <USB_DeactivateEndpoint+0x18a>
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	4413      	add	r3, r2
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cc0:	83fb      	strh	r3, [r7, #30]
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	441a      	add	r2, r3
 8007ccc:	8bfb      	ldrh	r3, [r7, #30]
 8007cce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4413      	add	r3, r2
 8007cec:	881b      	ldrh	r3, [r3, #0]
 8007cee:	83bb      	strh	r3, [r7, #28]
 8007cf0:	8bbb      	ldrh	r3, [r7, #28]
 8007cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d01b      	beq.n	8007d32 <USB_DeactivateEndpoint+0x1da>
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4413      	add	r3, r2
 8007d04:	881b      	ldrh	r3, [r3, #0]
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d10:	837b      	strh	r3, [r7, #26]
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	441a      	add	r2, r3
 8007d1c:	8b7b      	ldrh	r3, [r7, #26]
 8007d1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	4413      	add	r3, r2
 8007d3c:	881b      	ldrh	r3, [r3, #0]
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d48:	833b      	strh	r3, [r7, #24]
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	441a      	add	r2, r3
 8007d54:	8b3b      	ldrh	r3, [r7, #24]
 8007d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4413      	add	r3, r2
 8007d74:	881b      	ldrh	r3, [r3, #0]
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d80:	82fb      	strh	r3, [r7, #22]
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	441a      	add	r2, r3
 8007d8c:	8afb      	ldrh	r3, [r7, #22]
 8007d8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	4413      	add	r3, r2
 8007dac:	881b      	ldrh	r3, [r3, #0]
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007db4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007db8:	82bb      	strh	r3, [r7, #20]
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	441a      	add	r2, r3
 8007dc4:	8abb      	ldrh	r3, [r7, #20]
 8007dc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	8013      	strh	r3, [r2, #0]
 8007dda:	e0a3      	b.n	8007f24 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	4413      	add	r3, r2
 8007de6:	881b      	ldrh	r3, [r3, #0]
 8007de8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007dea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d01b      	beq.n	8007e2c <USB_DeactivateEndpoint+0x2d4>
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	009b      	lsls	r3, r3, #2
 8007dfc:	4413      	add	r3, r2
 8007dfe:	881b      	ldrh	r3, [r3, #0]
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e0a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	441a      	add	r2, r3
 8007e16:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007e18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	4413      	add	r3, r2
 8007e36:	881b      	ldrh	r3, [r3, #0]
 8007e38:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007e3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d01b      	beq.n	8007e7c <USB_DeactivateEndpoint+0x324>
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4413      	add	r3, r2
 8007e4e:	881b      	ldrh	r3, [r3, #0]
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e5a:	853b      	strh	r3, [r7, #40]	; 0x28
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	441a      	add	r2, r3
 8007e66:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007e68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	4413      	add	r3, r2
 8007e86:	881b      	ldrh	r3, [r3, #0]
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e92:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	441a      	add	r2, r3
 8007e9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007ea0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ea4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ea8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	4413      	add	r3, r2
 8007ebe:	881b      	ldrh	r3, [r3, #0]
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eca:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	441a      	add	r2, r3
 8007ed6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ed8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007edc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	4413      	add	r3, r2
 8007ef6:	881b      	ldrh	r3, [r3, #0]
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f02:	847b      	strh	r3, [r7, #34]	; 0x22
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	441a      	add	r2, r3
 8007f0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007f10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3734      	adds	r7, #52	; 0x34
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b0c2      	sub	sp, #264	; 0x108
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f40:	6018      	str	r0, [r3, #0]
 8007f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f4a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	785b      	ldrb	r3, [r3, #1]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	f040 86b7 	bne.w	8008ccc <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	699a      	ldr	r2, [r3, #24]
 8007f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d908      	bls.n	8007f8c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007f8a:	e007      	b.n	8007f9c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007f8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007f9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	7b1b      	ldrb	r3, [r3, #12]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d13a      	bne.n	8008022 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	6959      	ldr	r1, [r3, #20]
 8007fb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	88da      	ldrh	r2, [r3, #6]
 8007fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007fce:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007fd2:	6800      	ldr	r0, [r0, #0]
 8007fd4:	f001 fc98 	bl	8009908 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	613b      	str	r3, [r7, #16]
 8007fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fe8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	613b      	str	r3, [r7, #16]
 8007ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	00da      	lsls	r2, r3, #3
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	4413      	add	r3, r2
 800800e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008012:	60fb      	str	r3, [r7, #12]
 8008014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008018:	b29a      	uxth	r2, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	801a      	strh	r2, [r3, #0]
 800801e:	f000 be1f 	b.w	8008c60 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	78db      	ldrb	r3, [r3, #3]
 800802e:	2b02      	cmp	r3, #2
 8008030:	f040 8462 	bne.w	80088f8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008038:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	6a1a      	ldr	r2, [r3, #32]
 8008040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	429a      	cmp	r2, r3
 800804e:	f240 83df 	bls.w	8008810 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008056:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	4413      	add	r3, r2
 800806c:	881b      	ldrh	r3, [r3, #0]
 800806e:	b29b      	uxth	r3, r3
 8008070:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008078:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800807c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008080:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800808a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	441a      	add	r2, r3
 8008096:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800809a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800809e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080a2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80080a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80080ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	6a1a      	ldr	r2, [r3, #32]
 80080ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080be:	1ad2      	subs	r2, r2, r3
 80080c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80080cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	4413      	add	r3, r2
 80080e6:	881b      	ldrh	r3, [r3, #0]
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f000 81c7 	beq.w	8008482 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80080f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	633b      	str	r3, [r7, #48]	; 0x30
 8008100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	785b      	ldrb	r3, [r3, #1]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d177      	bne.n	8008200 <USB_EPStartXfer+0x2ce>
 8008110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008114:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	62bb      	str	r3, [r7, #40]	; 0x28
 800811c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008120:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800812a:	b29b      	uxth	r3, r3
 800812c:	461a      	mov	r2, r3
 800812e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008130:	4413      	add	r3, r2
 8008132:	62bb      	str	r3, [r7, #40]	; 0x28
 8008134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	00da      	lsls	r2, r3, #3
 8008142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008144:	4413      	add	r3, r2
 8008146:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800814a:	627b      	str	r3, [r7, #36]	; 0x24
 800814c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814e:	881b      	ldrh	r3, [r3, #0]
 8008150:	b29b      	uxth	r3, r3
 8008152:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008156:	b29a      	uxth	r2, r3
 8008158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815a:	801a      	strh	r2, [r3, #0]
 800815c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008160:	2b3e      	cmp	r3, #62	; 0x3e
 8008162:	d921      	bls.n	80081a8 <USB_EPStartXfer+0x276>
 8008164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008168:	095b      	lsrs	r3, r3, #5
 800816a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800816e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008172:	f003 031f 	and.w	r3, r3, #31
 8008176:	2b00      	cmp	r3, #0
 8008178:	d104      	bne.n	8008184 <USB_EPStartXfer+0x252>
 800817a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800817e:	3b01      	subs	r3, #1
 8008180:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008186:	881b      	ldrh	r3, [r3, #0]
 8008188:	b29a      	uxth	r2, r3
 800818a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800818e:	b29b      	uxth	r3, r3
 8008190:	029b      	lsls	r3, r3, #10
 8008192:	b29b      	uxth	r3, r3
 8008194:	4313      	orrs	r3, r2
 8008196:	b29b      	uxth	r3, r3
 8008198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800819c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081a0:	b29a      	uxth	r2, r3
 80081a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a4:	801a      	strh	r2, [r3, #0]
 80081a6:	e050      	b.n	800824a <USB_EPStartXfer+0x318>
 80081a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d10a      	bne.n	80081c6 <USB_EPStartXfer+0x294>
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	881b      	ldrh	r3, [r3, #0]
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081be:	b29a      	uxth	r2, r3
 80081c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c2:	801a      	strh	r2, [r3, #0]
 80081c4:	e041      	b.n	800824a <USB_EPStartXfer+0x318>
 80081c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081ca:	085b      	lsrs	r3, r3, #1
 80081cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80081d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081d4:	f003 0301 	and.w	r3, r3, #1
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d004      	beq.n	80081e6 <USB_EPStartXfer+0x2b4>
 80081dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80081e0:	3301      	adds	r3, #1
 80081e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80081e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e8:	881b      	ldrh	r3, [r3, #0]
 80081ea:	b29a      	uxth	r2, r3
 80081ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	029b      	lsls	r3, r3, #10
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	4313      	orrs	r3, r2
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	801a      	strh	r2, [r3, #0]
 80081fe:	e024      	b.n	800824a <USB_EPStartXfer+0x318>
 8008200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008204:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	785b      	ldrb	r3, [r3, #1]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d11c      	bne.n	800824a <USB_EPStartXfer+0x318>
 8008210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008214:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800821e:	b29b      	uxth	r3, r3
 8008220:	461a      	mov	r2, r3
 8008222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008224:	4413      	add	r3, r2
 8008226:	633b      	str	r3, [r7, #48]	; 0x30
 8008228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800822c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	00da      	lsls	r2, r3, #3
 8008236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008238:	4413      	add	r3, r2
 800823a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800823e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008244:	b29a      	uxth	r2, r3
 8008246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008248:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800824a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800824e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	895b      	ldrh	r3, [r3, #10]
 8008256:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800825a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800825e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6959      	ldr	r1, [r3, #20]
 8008266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800826a:	b29b      	uxth	r3, r3
 800826c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008270:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008274:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008278:	6800      	ldr	r0, [r0, #0]
 800827a:	f001 fb45 	bl	8009908 <USB_WritePMA>
            ep->xfer_buff += len;
 800827e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	695a      	ldr	r2, [r3, #20]
 800828a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800828e:	441a      	add	r2, r3
 8008290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800829c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	6a1a      	ldr	r2, [r3, #32]
 80082a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	691b      	ldr	r3, [r3, #16]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d90f      	bls.n	80082d8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80082b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6a1a      	ldr	r2, [r3, #32]
 80082c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082c8:	1ad2      	subs	r2, r2, r3
 80082ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	621a      	str	r2, [r3, #32]
 80082d6:	e00e      	b.n	80082f6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80082d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	6a1b      	ldr	r3, [r3, #32]
 80082e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80082e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2200      	movs	r2, #0
 80082f4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80082f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	785b      	ldrb	r3, [r3, #1]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d177      	bne.n	80083f6 <USB_EPStartXfer+0x4c4>
 8008306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800830a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	61bb      	str	r3, [r7, #24]
 8008312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008316:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008320:	b29b      	uxth	r3, r3
 8008322:	461a      	mov	r2, r3
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	4413      	add	r3, r2
 8008328:	61bb      	str	r3, [r7, #24]
 800832a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800832e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	00da      	lsls	r2, r3, #3
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	4413      	add	r3, r2
 800833c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008340:	617b      	str	r3, [r7, #20]
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	881b      	ldrh	r3, [r3, #0]
 8008346:	b29b      	uxth	r3, r3
 8008348:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800834c:	b29a      	uxth	r2, r3
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	801a      	strh	r2, [r3, #0]
 8008352:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008356:	2b3e      	cmp	r3, #62	; 0x3e
 8008358:	d921      	bls.n	800839e <USB_EPStartXfer+0x46c>
 800835a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800835e:	095b      	lsrs	r3, r3, #5
 8008360:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008368:	f003 031f 	and.w	r3, r3, #31
 800836c:	2b00      	cmp	r3, #0
 800836e:	d104      	bne.n	800837a <USB_EPStartXfer+0x448>
 8008370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008374:	3b01      	subs	r3, #1
 8008376:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	881b      	ldrh	r3, [r3, #0]
 800837e:	b29a      	uxth	r2, r3
 8008380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008384:	b29b      	uxth	r3, r3
 8008386:	029b      	lsls	r3, r3, #10
 8008388:	b29b      	uxth	r3, r3
 800838a:	4313      	orrs	r3, r2
 800838c:	b29b      	uxth	r3, r3
 800838e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008396:	b29a      	uxth	r2, r3
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	801a      	strh	r2, [r3, #0]
 800839c:	e056      	b.n	800844c <USB_EPStartXfer+0x51a>
 800839e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d10a      	bne.n	80083bc <USB_EPStartXfer+0x48a>
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	881b      	ldrh	r3, [r3, #0]
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	801a      	strh	r2, [r3, #0]
 80083ba:	e047      	b.n	800844c <USB_EPStartXfer+0x51a>
 80083bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083c0:	085b      	lsrs	r3, r3, #1
 80083c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80083c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d004      	beq.n	80083dc <USB_EPStartXfer+0x4aa>
 80083d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083d6:	3301      	adds	r3, #1
 80083d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	881b      	ldrh	r3, [r3, #0]
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	029b      	lsls	r3, r3, #10
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	4313      	orrs	r3, r2
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	801a      	strh	r2, [r3, #0]
 80083f4:	e02a      	b.n	800844c <USB_EPStartXfer+0x51a>
 80083f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	785b      	ldrb	r3, [r3, #1]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d122      	bne.n	800844c <USB_EPStartXfer+0x51a>
 8008406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800840a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	623b      	str	r3, [r7, #32]
 8008412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008416:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008420:	b29b      	uxth	r3, r3
 8008422:	461a      	mov	r2, r3
 8008424:	6a3b      	ldr	r3, [r7, #32]
 8008426:	4413      	add	r3, r2
 8008428:	623b      	str	r3, [r7, #32]
 800842a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800842e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	00da      	lsls	r2, r3, #3
 8008438:	6a3b      	ldr	r3, [r7, #32]
 800843a:	4413      	add	r3, r2
 800843c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008440:	61fb      	str	r3, [r7, #28]
 8008442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008446:	b29a      	uxth	r2, r3
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800844c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	891b      	ldrh	r3, [r3, #8]
 8008458:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800845c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	6959      	ldr	r1, [r3, #20]
 8008468:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800846c:	b29b      	uxth	r3, r3
 800846e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008472:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008476:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800847a:	6800      	ldr	r0, [r0, #0]
 800847c:	f001 fa44 	bl	8009908 <USB_WritePMA>
 8008480:	e3ee      	b.n	8008c60 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	785b      	ldrb	r3, [r3, #1]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d177      	bne.n	8008582 <USB_EPStartXfer+0x650>
 8008492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008496:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	64bb      	str	r3, [r7, #72]	; 0x48
 800849e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	461a      	mov	r2, r3
 80084b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084b2:	4413      	add	r3, r2
 80084b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80084b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	00da      	lsls	r2, r3, #3
 80084c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084c6:	4413      	add	r3, r2
 80084c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80084cc:	647b      	str	r3, [r7, #68]	; 0x44
 80084ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084d0:	881b      	ldrh	r3, [r3, #0]
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084d8:	b29a      	uxth	r2, r3
 80084da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084dc:	801a      	strh	r2, [r3, #0]
 80084de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084e2:	2b3e      	cmp	r3, #62	; 0x3e
 80084e4:	d921      	bls.n	800852a <USB_EPStartXfer+0x5f8>
 80084e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084ea:	095b      	lsrs	r3, r3, #5
 80084ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80084f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084f4:	f003 031f 	and.w	r3, r3, #31
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d104      	bne.n	8008506 <USB_EPStartXfer+0x5d4>
 80084fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008500:	3b01      	subs	r3, #1
 8008502:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008508:	881b      	ldrh	r3, [r3, #0]
 800850a:	b29a      	uxth	r2, r3
 800850c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008510:	b29b      	uxth	r3, r3
 8008512:	029b      	lsls	r3, r3, #10
 8008514:	b29b      	uxth	r3, r3
 8008516:	4313      	orrs	r3, r2
 8008518:	b29b      	uxth	r3, r3
 800851a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800851e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008522:	b29a      	uxth	r2, r3
 8008524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008526:	801a      	strh	r2, [r3, #0]
 8008528:	e056      	b.n	80085d8 <USB_EPStartXfer+0x6a6>
 800852a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10a      	bne.n	8008548 <USB_EPStartXfer+0x616>
 8008532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008534:	881b      	ldrh	r3, [r3, #0]
 8008536:	b29b      	uxth	r3, r3
 8008538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800853c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008540:	b29a      	uxth	r2, r3
 8008542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008544:	801a      	strh	r2, [r3, #0]
 8008546:	e047      	b.n	80085d8 <USB_EPStartXfer+0x6a6>
 8008548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800854c:	085b      	lsrs	r3, r3, #1
 800854e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008552:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	2b00      	cmp	r3, #0
 800855c:	d004      	beq.n	8008568 <USB_EPStartXfer+0x636>
 800855e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008562:	3301      	adds	r3, #1
 8008564:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800856a:	881b      	ldrh	r3, [r3, #0]
 800856c:	b29a      	uxth	r2, r3
 800856e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008572:	b29b      	uxth	r3, r3
 8008574:	029b      	lsls	r3, r3, #10
 8008576:	b29b      	uxth	r3, r3
 8008578:	4313      	orrs	r3, r2
 800857a:	b29a      	uxth	r2, r3
 800857c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800857e:	801a      	strh	r2, [r3, #0]
 8008580:	e02a      	b.n	80085d8 <USB_EPStartXfer+0x6a6>
 8008582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	785b      	ldrb	r3, [r3, #1]
 800858e:	2b01      	cmp	r3, #1
 8008590:	d122      	bne.n	80085d8 <USB_EPStartXfer+0x6a6>
 8008592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008596:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	653b      	str	r3, [r7, #80]	; 0x50
 800859e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	461a      	mov	r2, r3
 80085b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085b2:	4413      	add	r3, r2
 80085b4:	653b      	str	r3, [r7, #80]	; 0x50
 80085b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	00da      	lsls	r2, r3, #3
 80085c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085c6:	4413      	add	r3, r2
 80085c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80085cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085d2:	b29a      	uxth	r2, r3
 80085d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085d6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80085d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	891b      	ldrh	r3, [r3, #8]
 80085e4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	6959      	ldr	r1, [r3, #20]
 80085f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80085fe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008602:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008606:	6800      	ldr	r0, [r0, #0]
 8008608:	f001 f97e 	bl	8009908 <USB_WritePMA>
            ep->xfer_buff += len;
 800860c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	695a      	ldr	r2, [r3, #20]
 8008618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800861c:	441a      	add	r2, r3
 800861e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800862a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800862e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	6a1a      	ldr	r2, [r3, #32]
 8008636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800863a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	429a      	cmp	r2, r3
 8008644:	d90f      	bls.n	8008666 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800864a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	6a1a      	ldr	r2, [r3, #32]
 8008652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008656:	1ad2      	subs	r2, r2, r3
 8008658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800865c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	621a      	str	r2, [r3, #32]
 8008664:	e00e      	b.n	8008684 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800866a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	6a1b      	ldr	r3, [r3, #32]
 8008672:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800867a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2200      	movs	r2, #0
 8008682:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008688:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	643b      	str	r3, [r7, #64]	; 0x40
 8008690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	785b      	ldrb	r3, [r3, #1]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d177      	bne.n	8008790 <USB_EPStartXfer+0x85e>
 80086a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80086ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	461a      	mov	r2, r3
 80086be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c0:	4413      	add	r3, r2
 80086c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80086c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	00da      	lsls	r2, r3, #3
 80086d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d4:	4413      	add	r3, r2
 80086d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80086da:	637b      	str	r3, [r7, #52]	; 0x34
 80086dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086de:	881b      	ldrh	r3, [r3, #0]
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ea:	801a      	strh	r2, [r3, #0]
 80086ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086f0:	2b3e      	cmp	r3, #62	; 0x3e
 80086f2:	d921      	bls.n	8008738 <USB_EPStartXfer+0x806>
 80086f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086f8:	095b      	lsrs	r3, r3, #5
 80086fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80086fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008702:	f003 031f 	and.w	r3, r3, #31
 8008706:	2b00      	cmp	r3, #0
 8008708:	d104      	bne.n	8008714 <USB_EPStartXfer+0x7e2>
 800870a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800870e:	3b01      	subs	r3, #1
 8008710:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008716:	881b      	ldrh	r3, [r3, #0]
 8008718:	b29a      	uxth	r2, r3
 800871a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800871e:	b29b      	uxth	r3, r3
 8008720:	029b      	lsls	r3, r3, #10
 8008722:	b29b      	uxth	r3, r3
 8008724:	4313      	orrs	r3, r2
 8008726:	b29b      	uxth	r3, r3
 8008728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800872c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008730:	b29a      	uxth	r2, r3
 8008732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008734:	801a      	strh	r2, [r3, #0]
 8008736:	e050      	b.n	80087da <USB_EPStartXfer+0x8a8>
 8008738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800873c:	2b00      	cmp	r3, #0
 800873e:	d10a      	bne.n	8008756 <USB_EPStartXfer+0x824>
 8008740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008742:	881b      	ldrh	r3, [r3, #0]
 8008744:	b29b      	uxth	r3, r3
 8008746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800874a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800874e:	b29a      	uxth	r2, r3
 8008750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008752:	801a      	strh	r2, [r3, #0]
 8008754:	e041      	b.n	80087da <USB_EPStartXfer+0x8a8>
 8008756:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800875a:	085b      	lsrs	r3, r3, #1
 800875c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008760:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008764:	f003 0301 	and.w	r3, r3, #1
 8008768:	2b00      	cmp	r3, #0
 800876a:	d004      	beq.n	8008776 <USB_EPStartXfer+0x844>
 800876c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008770:	3301      	adds	r3, #1
 8008772:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008778:	881b      	ldrh	r3, [r3, #0]
 800877a:	b29a      	uxth	r2, r3
 800877c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008780:	b29b      	uxth	r3, r3
 8008782:	029b      	lsls	r3, r3, #10
 8008784:	b29b      	uxth	r3, r3
 8008786:	4313      	orrs	r3, r2
 8008788:	b29a      	uxth	r2, r3
 800878a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800878c:	801a      	strh	r2, [r3, #0]
 800878e:	e024      	b.n	80087da <USB_EPStartXfer+0x8a8>
 8008790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	785b      	ldrb	r3, [r3, #1]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d11c      	bne.n	80087da <USB_EPStartXfer+0x8a8>
 80087a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	461a      	mov	r2, r3
 80087b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087b4:	4413      	add	r3, r2
 80087b6:	643b      	str	r3, [r7, #64]	; 0x40
 80087b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	00da      	lsls	r2, r3, #3
 80087c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087c8:	4413      	add	r3, r2
 80087ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80087ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80087da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	895b      	ldrh	r3, [r3, #10]
 80087e6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80087ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	6959      	ldr	r1, [r3, #20]
 80087f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008800:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008804:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008808:	6800      	ldr	r0, [r0, #0]
 800880a:	f001 f87d 	bl	8009908 <USB_WritePMA>
 800880e:	e227      	b.n	8008c60 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	6a1b      	ldr	r3, [r3, #32]
 800881c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008824:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800882e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	4413      	add	r3, r2
 800883a:	881b      	ldrh	r3, [r3, #0]
 800883c:	b29b      	uxth	r3, r3
 800883e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008846:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800884a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800884e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	441a      	add	r2, r3
 8008864:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008868:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800886c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008878:	b29b      	uxth	r3, r3
 800887a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800887c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008880:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800888c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008896:	b29b      	uxth	r3, r3
 8008898:	461a      	mov	r2, r3
 800889a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800889c:	4413      	add	r3, r2
 800889e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	00da      	lsls	r2, r3, #3
 80088ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088b0:	4413      	add	r3, r2
 80088b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80088b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80088b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088bc:	b29a      	uxth	r2, r3
 80088be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088c0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80088c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	891b      	ldrh	r3, [r3, #8]
 80088ce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	6959      	ldr	r1, [r3, #20]
 80088de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80088e8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80088ec:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80088f0:	6800      	ldr	r0, [r0, #0]
 80088f2:	f001 f809 	bl	8009908 <USB_WritePMA>
 80088f6:	e1b3      	b.n	8008c60 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80088f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	6a1a      	ldr	r2, [r3, #32]
 8008904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008908:	1ad2      	subs	r2, r2, r3
 800890a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800890e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800891a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	4413      	add	r3, r2
 8008930:	881b      	ldrh	r3, [r3, #0]
 8008932:	b29b      	uxth	r3, r3
 8008934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008938:	2b00      	cmp	r3, #0
 800893a:	f000 80c6 	beq.w	8008aca <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800893e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008942:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	673b      	str	r3, [r7, #112]	; 0x70
 800894a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800894e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	785b      	ldrb	r3, [r3, #1]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d177      	bne.n	8008a4a <USB_EPStartXfer+0xb18>
 800895a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800895e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	66bb      	str	r3, [r7, #104]	; 0x68
 8008966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800896a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008974:	b29b      	uxth	r3, r3
 8008976:	461a      	mov	r2, r3
 8008978:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800897a:	4413      	add	r3, r2
 800897c:	66bb      	str	r3, [r7, #104]	; 0x68
 800897e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	00da      	lsls	r2, r3, #3
 800898c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800898e:	4413      	add	r3, r2
 8008990:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008994:	667b      	str	r3, [r7, #100]	; 0x64
 8008996:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008998:	881b      	ldrh	r3, [r3, #0]
 800899a:	b29b      	uxth	r3, r3
 800899c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089a4:	801a      	strh	r2, [r3, #0]
 80089a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089aa:	2b3e      	cmp	r3, #62	; 0x3e
 80089ac:	d921      	bls.n	80089f2 <USB_EPStartXfer+0xac0>
 80089ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089b2:	095b      	lsrs	r3, r3, #5
 80089b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80089b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089bc:	f003 031f 	and.w	r3, r3, #31
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d104      	bne.n	80089ce <USB_EPStartXfer+0xa9c>
 80089c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80089c8:	3b01      	subs	r3, #1
 80089ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80089ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089d0:	881b      	ldrh	r3, [r3, #0]
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80089d8:	b29b      	uxth	r3, r3
 80089da:	029b      	lsls	r3, r3, #10
 80089dc:	b29b      	uxth	r3, r3
 80089de:	4313      	orrs	r3, r2
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089ee:	801a      	strh	r2, [r3, #0]
 80089f0:	e050      	b.n	8008a94 <USB_EPStartXfer+0xb62>
 80089f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10a      	bne.n	8008a10 <USB_EPStartXfer+0xade>
 80089fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089fc:	881b      	ldrh	r3, [r3, #0]
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a08:	b29a      	uxth	r2, r3
 8008a0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a0c:	801a      	strh	r2, [r3, #0]
 8008a0e:	e041      	b.n	8008a94 <USB_EPStartXfer+0xb62>
 8008a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a14:	085b      	lsrs	r3, r3, #1
 8008a16:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a1e:	f003 0301 	and.w	r3, r3, #1
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d004      	beq.n	8008a30 <USB_EPStartXfer+0xafe>
 8008a26:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008a30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a32:	881b      	ldrh	r3, [r3, #0]
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	029b      	lsls	r3, r3, #10
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	4313      	orrs	r3, r2
 8008a42:	b29a      	uxth	r2, r3
 8008a44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a46:	801a      	strh	r2, [r3, #0]
 8008a48:	e024      	b.n	8008a94 <USB_EPStartXfer+0xb62>
 8008a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	785b      	ldrb	r3, [r3, #1]
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d11c      	bne.n	8008a94 <USB_EPStartXfer+0xb62>
 8008a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a6e:	4413      	add	r3, r2
 8008a70:	673b      	str	r3, [r7, #112]	; 0x70
 8008a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	00da      	lsls	r2, r3, #3
 8008a80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a82:	4413      	add	r3, r2
 8008a84:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008a88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a8e:	b29a      	uxth	r2, r3
 8008a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a92:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	895b      	ldrh	r3, [r3, #10]
 8008aa0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	6959      	ldr	r1, [r3, #20]
 8008ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008aba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008abe:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008ac2:	6800      	ldr	r0, [r0, #0]
 8008ac4:	f000 ff20 	bl	8009908 <USB_WritePMA>
 8008ac8:	e0ca      	b.n	8008c60 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ace:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	785b      	ldrb	r3, [r3, #1]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d177      	bne.n	8008bca <USB_EPStartXfer+0xc98>
 8008ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ade:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	461a      	mov	r2, r3
 8008af8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008afa:	4413      	add	r3, r2
 8008afc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	00da      	lsls	r2, r3, #3
 8008b0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b0e:	4413      	add	r3, r2
 8008b10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008b14:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b18:	881b      	ldrh	r3, [r3, #0]
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b20:	b29a      	uxth	r2, r3
 8008b22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b24:	801a      	strh	r2, [r3, #0]
 8008b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b2a:	2b3e      	cmp	r3, #62	; 0x3e
 8008b2c:	d921      	bls.n	8008b72 <USB_EPStartXfer+0xc40>
 8008b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b32:	095b      	lsrs	r3, r3, #5
 8008b34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b3c:	f003 031f 	and.w	r3, r3, #31
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d104      	bne.n	8008b4e <USB_EPStartXfer+0xc1c>
 8008b44:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008b48:	3b01      	subs	r3, #1
 8008b4a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008b4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b50:	881b      	ldrh	r3, [r3, #0]
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	029b      	lsls	r3, r3, #10
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b6e:	801a      	strh	r2, [r3, #0]
 8008b70:	e05c      	b.n	8008c2c <USB_EPStartXfer+0xcfa>
 8008b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d10a      	bne.n	8008b90 <USB_EPStartXfer+0xc5e>
 8008b7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b7c:	881b      	ldrh	r3, [r3, #0]
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b8c:	801a      	strh	r2, [r3, #0]
 8008b8e:	e04d      	b.n	8008c2c <USB_EPStartXfer+0xcfa>
 8008b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b94:	085b      	lsrs	r3, r3, #1
 8008b96:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b9e:	f003 0301 	and.w	r3, r3, #1
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d004      	beq.n	8008bb0 <USB_EPStartXfer+0xc7e>
 8008ba6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008baa:	3301      	adds	r3, #1
 8008bac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008bb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008bb2:	881b      	ldrh	r3, [r3, #0]
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	029b      	lsls	r3, r3, #10
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	b29a      	uxth	r2, r3
 8008bc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008bc6:	801a      	strh	r2, [r3, #0]
 8008bc8:	e030      	b.n	8008c2c <USB_EPStartXfer+0xcfa>
 8008bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	785b      	ldrb	r3, [r3, #1]
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d128      	bne.n	8008c2c <USB_EPStartXfer+0xcfa>
 8008bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008bfe:	4413      	add	r3, r2
 8008c00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	00da      	lsls	r2, r3, #3
 8008c12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008c16:	4413      	add	r3, r2
 8008c18:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008c1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c24:	b29a      	uxth	r2, r3
 8008c26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c2a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008c2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	891b      	ldrh	r3, [r3, #8]
 8008c38:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	6959      	ldr	r1, [r3, #20]
 8008c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008c52:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008c56:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008c5a:	6800      	ldr	r0, [r0, #0]
 8008c5c:	f000 fe54 	bl	8009908 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	4413      	add	r3, r2
 8008c7a:	881b      	ldrh	r3, [r3, #0]
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c86:	817b      	strh	r3, [r7, #10]
 8008c88:	897b      	ldrh	r3, [r7, #10]
 8008c8a:	f083 0310 	eor.w	r3, r3, #16
 8008c8e:	817b      	strh	r3, [r7, #10]
 8008c90:	897b      	ldrh	r3, [r7, #10]
 8008c92:	f083 0320 	eor.w	r3, r3, #32
 8008c96:	817b      	strh	r3, [r7, #10]
 8008c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ca6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	009b      	lsls	r3, r3, #2
 8008cb0:	441a      	add	r2, r3
 8008cb2:	897b      	ldrh	r3, [r7, #10]
 8008cb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	8013      	strh	r3, [r2, #0]
 8008cc8:	f000 bcde 	b.w	8009688 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	7b1b      	ldrb	r3, [r3, #12]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f040 80bb 	bne.w	8008e54 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ce2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	699a      	ldr	r2, [r3, #24]
 8008cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d917      	bls.n	8008d2a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008d0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	699a      	ldr	r2, [r3, #24]
 8008d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d1a:	1ad2      	subs	r2, r2, r3
 8008d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	619a      	str	r2, [r3, #24]
 8008d28:	e00e      	b.n	8008d48 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	699b      	ldr	r3, [r3, #24]
 8008d36:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2200      	movs	r2, #0
 8008d46:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	461a      	mov	r2, r3
 8008d68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008d6c:	4413      	add	r3, r2
 8008d6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	00da      	lsls	r2, r3, #3
 8008d80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008d84:	4413      	add	r3, r2
 8008d86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008d8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008d8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d92:	881b      	ldrh	r3, [r3, #0]
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d9a:	b29a      	uxth	r2, r3
 8008d9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008da0:	801a      	strh	r2, [r3, #0]
 8008da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008da6:	2b3e      	cmp	r3, #62	; 0x3e
 8008da8:	d924      	bls.n	8008df4 <USB_EPStartXfer+0xec2>
 8008daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dae:	095b      	lsrs	r3, r3, #5
 8008db0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008db8:	f003 031f 	and.w	r3, r3, #31
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d104      	bne.n	8008dca <USB_EPStartXfer+0xe98>
 8008dc0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008dca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008dce:	881b      	ldrh	r3, [r3, #0]
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	029b      	lsls	r3, r3, #10
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008de4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008de8:	b29a      	uxth	r2, r3
 8008dea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008dee:	801a      	strh	r2, [r3, #0]
 8008df0:	f000 bc10 	b.w	8009614 <USB_EPStartXfer+0x16e2>
 8008df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d10c      	bne.n	8008e16 <USB_EPStartXfer+0xee4>
 8008dfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e00:	881b      	ldrh	r3, [r3, #0]
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e0c:	b29a      	uxth	r2, r3
 8008e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e12:	801a      	strh	r2, [r3, #0]
 8008e14:	e3fe      	b.n	8009614 <USB_EPStartXfer+0x16e2>
 8008e16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e1a:	085b      	lsrs	r3, r3, #1
 8008e1c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e24:	f003 0301 	and.w	r3, r3, #1
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d004      	beq.n	8008e36 <USB_EPStartXfer+0xf04>
 8008e2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008e30:	3301      	adds	r3, #1
 8008e32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008e36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e3a:	881b      	ldrh	r3, [r3, #0]
 8008e3c:	b29a      	uxth	r2, r3
 8008e3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	029b      	lsls	r3, r3, #10
 8008e46:	b29b      	uxth	r3, r3
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	b29a      	uxth	r2, r3
 8008e4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e50:	801a      	strh	r2, [r3, #0]
 8008e52:	e3df      	b.n	8009614 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008e54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	78db      	ldrb	r3, [r3, #3]
 8008e60:	2b02      	cmp	r3, #2
 8008e62:	f040 8218 	bne.w	8009296 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	785b      	ldrb	r3, [r3, #1]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	f040 809d 	bne.w	8008fb2 <USB_EPStartXfer+0x1080>
 8008e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	461a      	mov	r2, r3
 8008e98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e9c:	4413      	add	r3, r2
 8008e9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	00da      	lsls	r2, r3, #3
 8008eb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008eb4:	4413      	add	r3, r2
 8008eb6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008eba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008ebe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008ec2:	881b      	ldrh	r3, [r3, #0]
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008ed0:	801a      	strh	r2, [r3, #0]
 8008ed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ed6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	691b      	ldr	r3, [r3, #16]
 8008ede:	2b3e      	cmp	r3, #62	; 0x3e
 8008ee0:	d92b      	bls.n	8008f3a <USB_EPStartXfer+0x1008>
 8008ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	095b      	lsrs	r3, r3, #5
 8008ef0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ef8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	691b      	ldr	r3, [r3, #16]
 8008f00:	f003 031f 	and.w	r3, r3, #31
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d104      	bne.n	8008f12 <USB_EPStartXfer+0xfe0>
 8008f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008f12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008f16:	881b      	ldrh	r3, [r3, #0]
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	029b      	lsls	r3, r3, #10
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	4313      	orrs	r3, r2
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008f36:	801a      	strh	r2, [r3, #0]
 8008f38:	e070      	b.n	800901c <USB_EPStartXfer+0x10ea>
 8008f3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10c      	bne.n	8008f64 <USB_EPStartXfer+0x1032>
 8008f4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008f4e:	881b      	ldrh	r3, [r3, #0]
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008f60:	801a      	strh	r2, [r3, #0]
 8008f62:	e05b      	b.n	800901c <USB_EPStartXfer+0x10ea>
 8008f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	691b      	ldr	r3, [r3, #16]
 8008f70:	085b      	lsrs	r3, r3, #1
 8008f72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	f003 0301 	and.w	r3, r3, #1
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d004      	beq.n	8008f94 <USB_EPStartXfer+0x1062>
 8008f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f8e:	3301      	adds	r3, #1
 8008f90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008f94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008f98:	881b      	ldrh	r3, [r3, #0]
 8008f9a:	b29a      	uxth	r2, r3
 8008f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	029b      	lsls	r3, r3, #10
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008fae:	801a      	strh	r2, [r3, #0]
 8008fb0:	e034      	b.n	800901c <USB_EPStartXfer+0x10ea>
 8008fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	785b      	ldrb	r3, [r3, #1]
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d12c      	bne.n	800901c <USB_EPStartXfer+0x10ea>
 8008fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008fd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008fe6:	4413      	add	r3, r2
 8008fe8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	00da      	lsls	r2, r3, #3
 8008ffa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ffe:	4413      	add	r3, r2
 8009000:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009004:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800900c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	b29a      	uxth	r2, r3
 8009016:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800901a:	801a      	strh	r2, [r3, #0]
 800901c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009020:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800902a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800902e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	785b      	ldrb	r3, [r3, #1]
 8009036:	2b00      	cmp	r3, #0
 8009038:	f040 809d 	bne.w	8009176 <USB_EPStartXfer+0x1244>
 800903c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009040:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800904a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800904e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009058:	b29b      	uxth	r3, r3
 800905a:	461a      	mov	r2, r3
 800905c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009060:	4413      	add	r3, r2
 8009062:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800906a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	00da      	lsls	r2, r3, #3
 8009074:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009078:	4413      	add	r3, r2
 800907a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800907e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009082:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009086:	881b      	ldrh	r3, [r3, #0]
 8009088:	b29b      	uxth	r3, r3
 800908a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800908e:	b29a      	uxth	r2, r3
 8009090:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009094:	801a      	strh	r2, [r3, #0]
 8009096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800909a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	2b3e      	cmp	r3, #62	; 0x3e
 80090a4:	d92b      	bls.n	80090fe <USB_EPStartXfer+0x11cc>
 80090a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	095b      	lsrs	r3, r3, #5
 80090b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80090b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	f003 031f 	and.w	r3, r3, #31
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d104      	bne.n	80090d6 <USB_EPStartXfer+0x11a4>
 80090cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090d0:	3b01      	subs	r3, #1
 80090d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80090d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80090da:	881b      	ldrh	r3, [r3, #0]
 80090dc:	b29a      	uxth	r2, r3
 80090de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	029b      	lsls	r3, r3, #10
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	4313      	orrs	r3, r2
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090f4:	b29a      	uxth	r2, r3
 80090f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80090fa:	801a      	strh	r2, [r3, #0]
 80090fc:	e069      	b.n	80091d2 <USB_EPStartXfer+0x12a0>
 80090fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d10c      	bne.n	8009128 <USB_EPStartXfer+0x11f6>
 800910e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009112:	881b      	ldrh	r3, [r3, #0]
 8009114:	b29b      	uxth	r3, r3
 8009116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800911a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800911e:	b29a      	uxth	r2, r3
 8009120:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009124:	801a      	strh	r2, [r3, #0]
 8009126:	e054      	b.n	80091d2 <USB_EPStartXfer+0x12a0>
 8009128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800912c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	085b      	lsrs	r3, r3, #1
 8009136:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800913a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800913e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	f003 0301 	and.w	r3, r3, #1
 800914a:	2b00      	cmp	r3, #0
 800914c:	d004      	beq.n	8009158 <USB_EPStartXfer+0x1226>
 800914e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009152:	3301      	adds	r3, #1
 8009154:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009158:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800915c:	881b      	ldrh	r3, [r3, #0]
 800915e:	b29a      	uxth	r2, r3
 8009160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009164:	b29b      	uxth	r3, r3
 8009166:	029b      	lsls	r3, r3, #10
 8009168:	b29b      	uxth	r3, r3
 800916a:	4313      	orrs	r3, r2
 800916c:	b29a      	uxth	r2, r3
 800916e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009172:	801a      	strh	r2, [r3, #0]
 8009174:	e02d      	b.n	80091d2 <USB_EPStartXfer+0x12a0>
 8009176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800917a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	785b      	ldrb	r3, [r3, #1]
 8009182:	2b01      	cmp	r3, #1
 8009184:	d125      	bne.n	80091d2 <USB_EPStartXfer+0x12a0>
 8009186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800918a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009194:	b29b      	uxth	r3, r3
 8009196:	461a      	mov	r2, r3
 8009198:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800919c:	4413      	add	r3, r2
 800919e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80091a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	00da      	lsls	r2, r3, #3
 80091b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80091b4:	4413      	add	r3, r2
 80091b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80091ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80091be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	b29a      	uxth	r2, r3
 80091cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80091d0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80091d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	69db      	ldr	r3, [r3, #28]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f000 8218 	beq.w	8009614 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80091e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	4413      	add	r3, r2
 80091fe:	881b      	ldrh	r3, [r3, #0]
 8009200:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009204:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800920c:	2b00      	cmp	r3, #0
 800920e:	d005      	beq.n	800921c <USB_EPStartXfer+0x12ea>
 8009210:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009218:	2b00      	cmp	r3, #0
 800921a:	d10d      	bne.n	8009238 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800921c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009224:	2b00      	cmp	r3, #0
 8009226:	f040 81f5 	bne.w	8009614 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800922a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800922e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009232:	2b00      	cmp	r3, #0
 8009234:	f040 81ee 	bne.w	8009614 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800923c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	4413      	add	r3, r2
 8009252:	881b      	ldrh	r3, [r3, #0]
 8009254:	b29b      	uxth	r3, r3
 8009256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800925a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800925e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009266:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	441a      	add	r2, r3
 800927c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800928c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009290:	b29b      	uxth	r3, r3
 8009292:	8013      	strh	r3, [r2, #0]
 8009294:	e1be      	b.n	8009614 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800929a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	78db      	ldrb	r3, [r3, #3]
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	f040 81b4 	bne.w	8009610 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80092a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	699a      	ldr	r2, [r3, #24]
 80092b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	691b      	ldr	r3, [r3, #16]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d917      	bls.n	80092f4 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80092c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	691b      	ldr	r3, [r3, #16]
 80092d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80092d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	699a      	ldr	r2, [r3, #24]
 80092e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092e4:	1ad2      	subs	r2, r2, r3
 80092e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	619a      	str	r2, [r3, #24]
 80092f2:	e00e      	b.n	8009312 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80092f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	699b      	ldr	r3, [r3, #24]
 8009300:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2200      	movs	r2, #0
 8009310:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	785b      	ldrb	r3, [r3, #1]
 800931e:	2b00      	cmp	r3, #0
 8009320:	f040 8085 	bne.w	800942e <USB_EPStartXfer+0x14fc>
 8009324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009328:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009336:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009340:	b29b      	uxth	r3, r3
 8009342:	461a      	mov	r2, r3
 8009344:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009348:	4413      	add	r3, r2
 800934a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800934e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009352:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	00da      	lsls	r2, r3, #3
 800935c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009360:	4413      	add	r3, r2
 8009362:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009366:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800936a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800936e:	881b      	ldrh	r3, [r3, #0]
 8009370:	b29b      	uxth	r3, r3
 8009372:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009376:	b29a      	uxth	r2, r3
 8009378:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800937c:	801a      	strh	r2, [r3, #0]
 800937e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009382:	2b3e      	cmp	r3, #62	; 0x3e
 8009384:	d923      	bls.n	80093ce <USB_EPStartXfer+0x149c>
 8009386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800938a:	095b      	lsrs	r3, r3, #5
 800938c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009394:	f003 031f 	and.w	r3, r3, #31
 8009398:	2b00      	cmp	r3, #0
 800939a:	d104      	bne.n	80093a6 <USB_EPStartXfer+0x1474>
 800939c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093a0:	3b01      	subs	r3, #1
 80093a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80093a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80093aa:	881b      	ldrh	r3, [r3, #0]
 80093ac:	b29a      	uxth	r2, r3
 80093ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	029b      	lsls	r3, r3, #10
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	4313      	orrs	r3, r2
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80093ca:	801a      	strh	r2, [r3, #0]
 80093cc:	e060      	b.n	8009490 <USB_EPStartXfer+0x155e>
 80093ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d10c      	bne.n	80093f0 <USB_EPStartXfer+0x14be>
 80093d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80093da:	881b      	ldrh	r3, [r3, #0]
 80093dc:	b29b      	uxth	r3, r3
 80093de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80093ec:	801a      	strh	r2, [r3, #0]
 80093ee:	e04f      	b.n	8009490 <USB_EPStartXfer+0x155e>
 80093f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093f4:	085b      	lsrs	r3, r3, #1
 80093f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80093fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093fe:	f003 0301 	and.w	r3, r3, #1
 8009402:	2b00      	cmp	r3, #0
 8009404:	d004      	beq.n	8009410 <USB_EPStartXfer+0x14de>
 8009406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800940a:	3301      	adds	r3, #1
 800940c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009410:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009414:	881b      	ldrh	r3, [r3, #0]
 8009416:	b29a      	uxth	r2, r3
 8009418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800941c:	b29b      	uxth	r3, r3
 800941e:	029b      	lsls	r3, r3, #10
 8009420:	b29b      	uxth	r3, r3
 8009422:	4313      	orrs	r3, r2
 8009424:	b29a      	uxth	r2, r3
 8009426:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800942a:	801a      	strh	r2, [r3, #0]
 800942c:	e030      	b.n	8009490 <USB_EPStartXfer+0x155e>
 800942e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	785b      	ldrb	r3, [r3, #1]
 800943a:	2b01      	cmp	r3, #1
 800943c:	d128      	bne.n	8009490 <USB_EPStartXfer+0x155e>
 800943e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009442:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800944c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009450:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800945a:	b29b      	uxth	r3, r3
 800945c:	461a      	mov	r2, r3
 800945e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009462:	4413      	add	r3, r2
 8009464:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800946c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	00da      	lsls	r2, r3, #3
 8009476:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800947a:	4413      	add	r3, r2
 800947c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009480:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009488:	b29a      	uxth	r2, r3
 800948a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800948e:	801a      	strh	r2, [r3, #0]
 8009490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009494:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800949e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	785b      	ldrb	r3, [r3, #1]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	f040 8085 	bne.w	80095ba <USB_EPStartXfer+0x1688>
 80094b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80094be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094cc:	b29b      	uxth	r3, r3
 80094ce:	461a      	mov	r2, r3
 80094d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80094d4:	4413      	add	r3, r2
 80094d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80094da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	00da      	lsls	r2, r3, #3
 80094e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80094ec:	4413      	add	r3, r2
 80094ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80094f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80094f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80094fa:	881b      	ldrh	r3, [r3, #0]
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009502:	b29a      	uxth	r2, r3
 8009504:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009508:	801a      	strh	r2, [r3, #0]
 800950a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800950e:	2b3e      	cmp	r3, #62	; 0x3e
 8009510:	d923      	bls.n	800955a <USB_EPStartXfer+0x1628>
 8009512:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009516:	095b      	lsrs	r3, r3, #5
 8009518:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800951c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009520:	f003 031f 	and.w	r3, r3, #31
 8009524:	2b00      	cmp	r3, #0
 8009526:	d104      	bne.n	8009532 <USB_EPStartXfer+0x1600>
 8009528:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800952c:	3b01      	subs	r3, #1
 800952e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009532:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009536:	881b      	ldrh	r3, [r3, #0]
 8009538:	b29a      	uxth	r2, r3
 800953a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800953e:	b29b      	uxth	r3, r3
 8009540:	029b      	lsls	r3, r3, #10
 8009542:	b29b      	uxth	r3, r3
 8009544:	4313      	orrs	r3, r2
 8009546:	b29b      	uxth	r3, r3
 8009548:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800954c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009550:	b29a      	uxth	r2, r3
 8009552:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009556:	801a      	strh	r2, [r3, #0]
 8009558:	e05c      	b.n	8009614 <USB_EPStartXfer+0x16e2>
 800955a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800955e:	2b00      	cmp	r3, #0
 8009560:	d10c      	bne.n	800957c <USB_EPStartXfer+0x164a>
 8009562:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009566:	881b      	ldrh	r3, [r3, #0]
 8009568:	b29b      	uxth	r3, r3
 800956a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800956e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009572:	b29a      	uxth	r2, r3
 8009574:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009578:	801a      	strh	r2, [r3, #0]
 800957a:	e04b      	b.n	8009614 <USB_EPStartXfer+0x16e2>
 800957c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009580:	085b      	lsrs	r3, r3, #1
 8009582:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800958a:	f003 0301 	and.w	r3, r3, #1
 800958e:	2b00      	cmp	r3, #0
 8009590:	d004      	beq.n	800959c <USB_EPStartXfer+0x166a>
 8009592:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009596:	3301      	adds	r3, #1
 8009598:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800959c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80095a0:	881b      	ldrh	r3, [r3, #0]
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	029b      	lsls	r3, r3, #10
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	4313      	orrs	r3, r2
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80095b6:	801a      	strh	r2, [r3, #0]
 80095b8:	e02c      	b.n	8009614 <USB_EPStartXfer+0x16e2>
 80095ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	785b      	ldrb	r3, [r3, #1]
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d124      	bne.n	8009614 <USB_EPStartXfer+0x16e2>
 80095ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095d8:	b29b      	uxth	r3, r3
 80095da:	461a      	mov	r2, r3
 80095dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80095e0:	4413      	add	r3, r2
 80095e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80095e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	00da      	lsls	r2, r3, #3
 80095f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80095f8:	4413      	add	r3, r2
 80095fa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80095fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009606:	b29a      	uxth	r2, r3
 8009608:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800960c:	801a      	strh	r2, [r3, #0]
 800960e:	e001      	b.n	8009614 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	e03a      	b.n	800968a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009614:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009618:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	4413      	add	r3, r2
 800962e:	881b      	ldrh	r3, [r3, #0]
 8009630:	b29b      	uxth	r3, r3
 8009632:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800963a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800963e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009642:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009646:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800964a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800964e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009652:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800965a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	441a      	add	r2, r3
 8009670:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800967c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009684:	b29b      	uxth	r3, r3
 8009686:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009688:	2300      	movs	r3, #0
}
 800968a:	4618      	mov	r0, r3
 800968c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009694:	b480      	push	{r7}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	785b      	ldrb	r3, [r3, #1]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d020      	beq.n	80096e8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	4413      	add	r3, r2
 80096b0:	881b      	ldrh	r3, [r3, #0]
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096bc:	81bb      	strh	r3, [r7, #12]
 80096be:	89bb      	ldrh	r3, [r7, #12]
 80096c0:	f083 0310 	eor.w	r3, r3, #16
 80096c4:	81bb      	strh	r3, [r7, #12]
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	441a      	add	r2, r3
 80096d0:	89bb      	ldrh	r3, [r7, #12]
 80096d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	8013      	strh	r3, [r2, #0]
 80096e6:	e01f      	b.n	8009728 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	4413      	add	r3, r2
 80096f2:	881b      	ldrh	r3, [r3, #0]
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096fe:	81fb      	strh	r3, [r7, #14]
 8009700:	89fb      	ldrh	r3, [r7, #14]
 8009702:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009706:	81fb      	strh	r3, [r7, #14]
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	441a      	add	r2, r3
 8009712:	89fb      	ldrh	r3, [r7, #14]
 8009714:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009718:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800971c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009724:	b29b      	uxth	r3, r3
 8009726:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3714      	adds	r7, #20
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr

08009736 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009736:	b480      	push	{r7}
 8009738:	b087      	sub	sp, #28
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
 800973e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	7b1b      	ldrb	r3, [r3, #12]
 8009744:	2b00      	cmp	r3, #0
 8009746:	f040 809d 	bne.w	8009884 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	785b      	ldrb	r3, [r3, #1]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d04c      	beq.n	80097ec <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	4413      	add	r3, r2
 800975c:	881b      	ldrh	r3, [r3, #0]
 800975e:	823b      	strh	r3, [r7, #16]
 8009760:	8a3b      	ldrh	r3, [r7, #16]
 8009762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009766:	2b00      	cmp	r3, #0
 8009768:	d01b      	beq.n	80097a2 <USB_EPClearStall+0x6c>
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	4413      	add	r3, r2
 8009774:	881b      	ldrh	r3, [r3, #0]
 8009776:	b29b      	uxth	r3, r3
 8009778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800977c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009780:	81fb      	strh	r3, [r7, #14]
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	441a      	add	r2, r3
 800978c:	89fb      	ldrh	r3, [r7, #14]
 800978e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009792:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800979a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800979e:	b29b      	uxth	r3, r3
 80097a0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	78db      	ldrb	r3, [r3, #3]
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d06c      	beq.n	8009884 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	4413      	add	r3, r2
 80097b4:	881b      	ldrh	r3, [r3, #0]
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097c0:	81bb      	strh	r3, [r7, #12]
 80097c2:	89bb      	ldrh	r3, [r7, #12]
 80097c4:	f083 0320 	eor.w	r3, r3, #32
 80097c8:	81bb      	strh	r3, [r7, #12]
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	441a      	add	r2, r3
 80097d4:	89bb      	ldrh	r3, [r7, #12]
 80097d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	8013      	strh	r3, [r2, #0]
 80097ea:	e04b      	b.n	8009884 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	4413      	add	r3, r2
 80097f6:	881b      	ldrh	r3, [r3, #0]
 80097f8:	82fb      	strh	r3, [r7, #22]
 80097fa:	8afb      	ldrh	r3, [r7, #22]
 80097fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009800:	2b00      	cmp	r3, #0
 8009802:	d01b      	beq.n	800983c <USB_EPClearStall+0x106>
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	4413      	add	r3, r2
 800980e:	881b      	ldrh	r3, [r3, #0]
 8009810:	b29b      	uxth	r3, r3
 8009812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800981a:	82bb      	strh	r3, [r7, #20]
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	441a      	add	r2, r3
 8009826:	8abb      	ldrh	r3, [r7, #20]
 8009828:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800982c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009830:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009838:	b29b      	uxth	r3, r3
 800983a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	4413      	add	r3, r2
 8009846:	881b      	ldrh	r3, [r3, #0]
 8009848:	b29b      	uxth	r3, r3
 800984a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800984e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009852:	827b      	strh	r3, [r7, #18]
 8009854:	8a7b      	ldrh	r3, [r7, #18]
 8009856:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800985a:	827b      	strh	r3, [r7, #18]
 800985c:	8a7b      	ldrh	r3, [r7, #18]
 800985e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009862:	827b      	strh	r3, [r7, #18]
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	441a      	add	r2, r3
 800986e:	8a7b      	ldrh	r3, [r7, #18]
 8009870:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009874:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009878:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800987c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009880:	b29b      	uxth	r3, r3
 8009882:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009884:	2300      	movs	r3, #0
}
 8009886:	4618      	mov	r0, r3
 8009888:	371c      	adds	r7, #28
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr

08009892 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009892:	b480      	push	{r7}
 8009894:	b083      	sub	sp, #12
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
 800989a:	460b      	mov	r3, r1
 800989c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800989e:	78fb      	ldrb	r3, [r7, #3]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d103      	bne.n	80098ac <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2280      	movs	r2, #128	; 0x80
 80098a8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	370c      	adds	r7, #12
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr

080098ba <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80098ba:	b480      	push	{r7}
 80098bc:	b083      	sub	sp, #12
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80098da:	2300      	movs	r3, #0
}
 80098dc:	4618      	mov	r0, r3
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80098fa:	68fb      	ldr	r3, [r7, #12]
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3714      	adds	r7, #20
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009908:	b480      	push	{r7}
 800990a:	b08b      	sub	sp, #44	; 0x2c
 800990c:	af00      	add	r7, sp, #0
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	60b9      	str	r1, [r7, #8]
 8009912:	4611      	mov	r1, r2
 8009914:	461a      	mov	r2, r3
 8009916:	460b      	mov	r3, r1
 8009918:	80fb      	strh	r3, [r7, #6]
 800991a:	4613      	mov	r3, r2
 800991c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800991e:	88bb      	ldrh	r3, [r7, #4]
 8009920:	3301      	adds	r3, #1
 8009922:	085b      	lsrs	r3, r3, #1
 8009924:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800992e:	88fa      	ldrh	r2, [r7, #6]
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	4413      	add	r3, r2
 8009934:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009938:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	627b      	str	r3, [r7, #36]	; 0x24
 800993e:	e01b      	b.n	8009978 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	3301      	adds	r3, #1
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	021b      	lsls	r3, r3, #8
 800994e:	b21a      	sxth	r2, r3
 8009950:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009954:	4313      	orrs	r3, r2
 8009956:	b21b      	sxth	r3, r3
 8009958:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800995a:	6a3b      	ldr	r3, [r7, #32]
 800995c:	8a7a      	ldrh	r2, [r7, #18]
 800995e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009960:	6a3b      	ldr	r3, [r7, #32]
 8009962:	3302      	adds	r3, #2
 8009964:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	3301      	adds	r3, #1
 800996a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	3301      	adds	r3, #1
 8009970:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009974:	3b01      	subs	r3, #1
 8009976:	627b      	str	r3, [r7, #36]	; 0x24
 8009978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997a:	2b00      	cmp	r3, #0
 800997c:	d1e0      	bne.n	8009940 <USB_WritePMA+0x38>
  }
}
 800997e:	bf00      	nop
 8009980:	bf00      	nop
 8009982:	372c      	adds	r7, #44	; 0x2c
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800998c:	b480      	push	{r7}
 800998e:	b08b      	sub	sp, #44	; 0x2c
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	4611      	mov	r1, r2
 8009998:	461a      	mov	r2, r3
 800999a:	460b      	mov	r3, r1
 800999c:	80fb      	strh	r3, [r7, #6]
 800999e:	4613      	mov	r3, r2
 80099a0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80099a2:	88bb      	ldrh	r3, [r7, #4]
 80099a4:	085b      	lsrs	r3, r3, #1
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80099b2:	88fa      	ldrh	r2, [r7, #6]
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	4413      	add	r3, r2
 80099b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80099bc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	627b      	str	r3, [r7, #36]	; 0x24
 80099c2:	e018      	b.n	80099f6 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80099c4:	6a3b      	ldr	r3, [r7, #32]
 80099c6:	881b      	ldrh	r3, [r3, #0]
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80099cc:	6a3b      	ldr	r3, [r7, #32]
 80099ce:	3302      	adds	r3, #2
 80099d0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	b2da      	uxtb	r2, r3
 80099d6:	69fb      	ldr	r3, [r7, #28]
 80099d8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80099da:	69fb      	ldr	r3, [r7, #28]
 80099dc:	3301      	adds	r3, #1
 80099de:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	0a1b      	lsrs	r3, r3, #8
 80099e4:	b2da      	uxtb	r2, r3
 80099e6:	69fb      	ldr	r3, [r7, #28]
 80099e8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80099ea:	69fb      	ldr	r3, [r7, #28]
 80099ec:	3301      	adds	r3, #1
 80099ee:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80099f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f2:	3b01      	subs	r3, #1
 80099f4:	627b      	str	r3, [r7, #36]	; 0x24
 80099f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1e3      	bne.n	80099c4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80099fc:	88bb      	ldrh	r3, [r7, #4]
 80099fe:	f003 0301 	and.w	r3, r3, #1
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d007      	beq.n	8009a18 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009a08:	6a3b      	ldr	r3, [r7, #32]
 8009a0a:	881b      	ldrh	r3, [r3, #0]
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	b2da      	uxtb	r2, r3
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	701a      	strb	r2, [r3, #0]
  }
}
 8009a18:	bf00      	nop
 8009a1a:	372c      	adds	r7, #44	; 0x2c
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009a30:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009a34:	f002 f94a 	bl	800bccc <USBD_static_malloc>
 8009a38:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d105      	bne.n	8009a4c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009a48:	2302      	movs	r3, #2
 8009a4a:	e066      	b.n	8009b1a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	68fa      	ldr	r2, [r7, #12]
 8009a50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	7c1b      	ldrb	r3, [r3, #16]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d119      	bne.n	8009a90 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009a5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a60:	2202      	movs	r2, #2
 8009a62:	2181      	movs	r1, #129	; 0x81
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f001 ffd8 	bl	800ba1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a74:	2202      	movs	r2, #2
 8009a76:	2101      	movs	r1, #1
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f001 ffce 	bl	800ba1a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2201      	movs	r2, #1
 8009a82:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2210      	movs	r2, #16
 8009a8a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009a8e:	e016      	b.n	8009abe <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009a90:	2340      	movs	r3, #64	; 0x40
 8009a92:	2202      	movs	r2, #2
 8009a94:	2181      	movs	r1, #129	; 0x81
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f001 ffbf 	bl	800ba1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009aa2:	2340      	movs	r3, #64	; 0x40
 8009aa4:	2202      	movs	r2, #2
 8009aa6:	2101      	movs	r1, #1
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f001 ffb6 	bl	800ba1a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2210      	movs	r2, #16
 8009aba:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009abe:	2308      	movs	r3, #8
 8009ac0:	2203      	movs	r2, #3
 8009ac2:	2182      	movs	r1, #130	; 0x82
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f001 ffa8 	bl	800ba1a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2201      	movs	r2, #1
 8009ace:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	7c1b      	ldrb	r3, [r3, #16]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d109      	bne.n	8009b08 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009afa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009afe:	2101      	movs	r1, #1
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f002 f879 	bl	800bbf8 <USBD_LL_PrepareReceive>
 8009b06:	e007      	b.n	8009b18 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009b0e:	2340      	movs	r3, #64	; 0x40
 8009b10:	2101      	movs	r1, #1
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f002 f870 	bl	800bbf8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009b18:	2300      	movs	r3, #0
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b082      	sub	sp, #8
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009b2e:	2181      	movs	r1, #129	; 0x81
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f001 ff98 	bl	800ba66 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009b3c:	2101      	movs	r1, #1
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f001 ff91 	bl	800ba66 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009b4c:	2182      	movs	r1, #130	; 0x82
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f001 ff89 	bl	800ba66 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00e      	beq.n	8009b8c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f002 f8b2 	bl	800bce8 <USBD_static_free>
    pdev->pClassData = NULL;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3708      	adds	r7, #8
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
	...

08009b98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b086      	sub	sp, #24
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ba8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009baa:	2300      	movs	r3, #0
 8009bac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d101      	bne.n	8009bc0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009bbc:	2303      	movs	r3, #3
 8009bbe:	e0af      	b.n	8009d20 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d03f      	beq.n	8009c4c <USBD_CDC_Setup+0xb4>
 8009bcc:	2b20      	cmp	r3, #32
 8009bce:	f040 809f 	bne.w	8009d10 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	88db      	ldrh	r3, [r3, #6]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d02e      	beq.n	8009c38 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	781b      	ldrb	r3, [r3, #0]
 8009bde:	b25b      	sxtb	r3, r3
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	da16      	bge.n	8009c12 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	683a      	ldr	r2, [r7, #0]
 8009bee:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009bf0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009bf2:	683a      	ldr	r2, [r7, #0]
 8009bf4:	88d2      	ldrh	r2, [r2, #6]
 8009bf6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	88db      	ldrh	r3, [r3, #6]
 8009bfc:	2b07      	cmp	r3, #7
 8009bfe:	bf28      	it	cs
 8009c00:	2307      	movcs	r3, #7
 8009c02:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	89fa      	ldrh	r2, [r7, #14]
 8009c08:	4619      	mov	r1, r3
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f001 fa9f 	bl	800b14e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009c10:	e085      	b.n	8009d1e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	785a      	ldrb	r2, [r3, #1]
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	88db      	ldrh	r3, [r3, #6]
 8009c20:	b2da      	uxtb	r2, r3
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009c28:	6939      	ldr	r1, [r7, #16]
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	88db      	ldrh	r3, [r3, #6]
 8009c2e:	461a      	mov	r2, r3
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f001 fab8 	bl	800b1a6 <USBD_CtlPrepareRx>
      break;
 8009c36:	e072      	b.n	8009d1e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	683a      	ldr	r2, [r7, #0]
 8009c42:	7850      	ldrb	r0, [r2, #1]
 8009c44:	2200      	movs	r2, #0
 8009c46:	6839      	ldr	r1, [r7, #0]
 8009c48:	4798      	blx	r3
      break;
 8009c4a:	e068      	b.n	8009d1e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	785b      	ldrb	r3, [r3, #1]
 8009c50:	2b0b      	cmp	r3, #11
 8009c52:	d852      	bhi.n	8009cfa <USBD_CDC_Setup+0x162>
 8009c54:	a201      	add	r2, pc, #4	; (adr r2, 8009c5c <USBD_CDC_Setup+0xc4>)
 8009c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c5a:	bf00      	nop
 8009c5c:	08009c8d 	.word	0x08009c8d
 8009c60:	08009d09 	.word	0x08009d09
 8009c64:	08009cfb 	.word	0x08009cfb
 8009c68:	08009cfb 	.word	0x08009cfb
 8009c6c:	08009cfb 	.word	0x08009cfb
 8009c70:	08009cfb 	.word	0x08009cfb
 8009c74:	08009cfb 	.word	0x08009cfb
 8009c78:	08009cfb 	.word	0x08009cfb
 8009c7c:	08009cfb 	.word	0x08009cfb
 8009c80:	08009cfb 	.word	0x08009cfb
 8009c84:	08009cb7 	.word	0x08009cb7
 8009c88:	08009ce1 	.word	0x08009ce1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	2b03      	cmp	r3, #3
 8009c96:	d107      	bne.n	8009ca8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009c98:	f107 030a 	add.w	r3, r7, #10
 8009c9c:	2202      	movs	r2, #2
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f001 fa54 	bl	800b14e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ca6:	e032      	b.n	8009d0e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009ca8:	6839      	ldr	r1, [r7, #0]
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f001 f9de 	bl	800b06c <USBD_CtlError>
            ret = USBD_FAIL;
 8009cb0:	2303      	movs	r3, #3
 8009cb2:	75fb      	strb	r3, [r7, #23]
          break;
 8009cb4:	e02b      	b.n	8009d0e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	2b03      	cmp	r3, #3
 8009cc0:	d107      	bne.n	8009cd2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009cc2:	f107 030d 	add.w	r3, r7, #13
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	4619      	mov	r1, r3
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f001 fa3f 	bl	800b14e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009cd0:	e01d      	b.n	8009d0e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009cd2:	6839      	ldr	r1, [r7, #0]
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f001 f9c9 	bl	800b06c <USBD_CtlError>
            ret = USBD_FAIL;
 8009cda:	2303      	movs	r3, #3
 8009cdc:	75fb      	strb	r3, [r7, #23]
          break;
 8009cde:	e016      	b.n	8009d0e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	2b03      	cmp	r3, #3
 8009cea:	d00f      	beq.n	8009d0c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009cec:	6839      	ldr	r1, [r7, #0]
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f001 f9bc 	bl	800b06c <USBD_CtlError>
            ret = USBD_FAIL;
 8009cf4:	2303      	movs	r3, #3
 8009cf6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009cf8:	e008      	b.n	8009d0c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009cfa:	6839      	ldr	r1, [r7, #0]
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f001 f9b5 	bl	800b06c <USBD_CtlError>
          ret = USBD_FAIL;
 8009d02:	2303      	movs	r3, #3
 8009d04:	75fb      	strb	r3, [r7, #23]
          break;
 8009d06:	e002      	b.n	8009d0e <USBD_CDC_Setup+0x176>
          break;
 8009d08:	bf00      	nop
 8009d0a:	e008      	b.n	8009d1e <USBD_CDC_Setup+0x186>
          break;
 8009d0c:	bf00      	nop
      }
      break;
 8009d0e:	e006      	b.n	8009d1e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009d10:	6839      	ldr	r1, [r7, #0]
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f001 f9aa 	bl	800b06c <USBD_CtlError>
      ret = USBD_FAIL;
 8009d18:	2303      	movs	r3, #3
 8009d1a:	75fb      	strb	r3, [r7, #23]
      break;
 8009d1c:	bf00      	nop
  }

  return (uint8_t)ret;
 8009d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3718      	adds	r7, #24
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	460b      	mov	r3, r1
 8009d32:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d3a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d101      	bne.n	8009d4a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009d46:	2303      	movs	r3, #3
 8009d48:	e04f      	b.n	8009dea <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d50:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009d52:	78fa      	ldrb	r2, [r7, #3]
 8009d54:	6879      	ldr	r1, [r7, #4]
 8009d56:	4613      	mov	r3, r2
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	4413      	add	r3, r2
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	440b      	add	r3, r1
 8009d60:	3318      	adds	r3, #24
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d029      	beq.n	8009dbc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009d68:	78fa      	ldrb	r2, [r7, #3]
 8009d6a:	6879      	ldr	r1, [r7, #4]
 8009d6c:	4613      	mov	r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4413      	add	r3, r2
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	440b      	add	r3, r1
 8009d76:	3318      	adds	r3, #24
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	78f9      	ldrb	r1, [r7, #3]
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	460b      	mov	r3, r1
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	440b      	add	r3, r1
 8009d84:	00db      	lsls	r3, r3, #3
 8009d86:	4403      	add	r3, r0
 8009d88:	3320      	adds	r3, #32
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009d90:	fb01 f303 	mul.w	r3, r1, r3
 8009d94:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d110      	bne.n	8009dbc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009d9a:	78fa      	ldrb	r2, [r7, #3]
 8009d9c:	6879      	ldr	r1, [r7, #4]
 8009d9e:	4613      	mov	r3, r2
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	4413      	add	r3, r2
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	440b      	add	r3, r1
 8009da8:	3318      	adds	r3, #24
 8009daa:	2200      	movs	r2, #0
 8009dac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009dae:	78f9      	ldrb	r1, [r7, #3]
 8009db0:	2300      	movs	r3, #0
 8009db2:	2200      	movs	r2, #0
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f001 fefe 	bl	800bbb6 <USBD_LL_Transmit>
 8009dba:	e015      	b.n	8009de8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d00b      	beq.n	8009de8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009dd6:	691b      	ldr	r3, [r3, #16]
 8009dd8:	68ba      	ldr	r2, [r7, #8]
 8009dda:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009dde:	68ba      	ldr	r2, [r7, #8]
 8009de0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009de4:	78fa      	ldrb	r2, [r7, #3]
 8009de6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b084      	sub	sp, #16
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e04:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d101      	bne.n	8009e14 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009e10:	2303      	movs	r3, #3
 8009e12:	e015      	b.n	8009e40 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009e14:	78fb      	ldrb	r3, [r7, #3]
 8009e16:	4619      	mov	r1, r3
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f001 ff0e 	bl	800bc3a <USBD_LL_GetRxDataSize>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	68fa      	ldr	r2, [r7, #12]
 8009e30:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009e34:	68fa      	ldr	r2, [r7, #12]
 8009e36:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009e3a:	4611      	mov	r1, r2
 8009e3c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3710      	adds	r7, #16
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e56:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d101      	bne.n	8009e62 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009e5e:	2303      	movs	r3, #3
 8009e60:	e01b      	b.n	8009e9a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d015      	beq.n	8009e98 <USBD_CDC_EP0_RxReady+0x50>
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009e72:	2bff      	cmp	r3, #255	; 0xff
 8009e74:	d010      	beq.n	8009e98 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e7c:	689b      	ldr	r3, [r3, #8]
 8009e7e:	68fa      	ldr	r2, [r7, #12]
 8009e80:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009e84:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009e86:	68fa      	ldr	r2, [r7, #12]
 8009e88:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009e8c:	b292      	uxth	r2, r2
 8009e8e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	22ff      	movs	r2, #255	; 0xff
 8009e94:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009e98:	2300      	movs	r3, #0
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3710      	adds	r7, #16
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
	...

08009ea4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2243      	movs	r2, #67	; 0x43
 8009eb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009eb2:	4b03      	ldr	r3, [pc, #12]	; (8009ec0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	370c      	adds	r7, #12
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr
 8009ec0:	200000b4 	.word	0x200000b4

08009ec4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2243      	movs	r2, #67	; 0x43
 8009ed0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009ed2:	4b03      	ldr	r3, [pc, #12]	; (8009ee0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	370c      	adds	r7, #12
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr
 8009ee0:	20000070 	.word	0x20000070

08009ee4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2243      	movs	r2, #67	; 0x43
 8009ef0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009ef2:	4b03      	ldr	r3, [pc, #12]	; (8009f00 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	370c      	adds	r7, #12
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr
 8009f00:	200000f8 	.word	0x200000f8

08009f04 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	220a      	movs	r2, #10
 8009f10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009f12:	4b03      	ldr	r3, [pc, #12]	; (8009f20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr
 8009f20:	2000002c 	.word	0x2000002c

08009f24 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
 8009f2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d101      	bne.n	8009f38 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009f34:	2303      	movs	r3, #3
 8009f36:	e004      	b.n	8009f42 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	683a      	ldr	r2, [r7, #0]
 8009f3c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009f40:	2300      	movs	r3, #0
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	370c      	adds	r7, #12
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr

08009f4e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009f4e:	b480      	push	{r7}
 8009f50:	b087      	sub	sp, #28
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	60f8      	str	r0, [r7, #12]
 8009f56:	60b9      	str	r1, [r7, #8]
 8009f58:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f60:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d101      	bne.n	8009f6c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009f68:	2303      	movs	r3, #3
 8009f6a:	e008      	b.n	8009f7e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	68ba      	ldr	r2, [r7, #8]
 8009f70:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	371c      	adds	r7, #28
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr

08009f8a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009f8a:	b480      	push	{r7}
 8009f8c:	b085      	sub	sp, #20
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
 8009f92:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f9a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d101      	bne.n	8009fa6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	e004      	b.n	8009fb0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	683a      	ldr	r2, [r7, #0]
 8009faa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009fae:	2300      	movs	r3, #0
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3714      	adds	r7, #20
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d101      	bne.n	8009fda <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009fd6:	2303      	movs	r3, #3
 8009fd8:	e016      	b.n	800a008 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	7c1b      	ldrb	r3, [r3, #16]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d109      	bne.n	8009ff6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009fe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fec:	2101      	movs	r1, #1
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f001 fe02 	bl	800bbf8 <USBD_LL_PrepareReceive>
 8009ff4:	e007      	b.n	800a006 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009ffc:	2340      	movs	r3, #64	; 0x40
 8009ffe:	2101      	movs	r1, #1
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f001 fdf9 	bl	800bbf8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a006:	2300      	movs	r3, #0
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3710      	adds	r7, #16
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b086      	sub	sp, #24
 800a014:	af00      	add	r7, sp, #0
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	60b9      	str	r1, [r7, #8]
 800a01a:	4613      	mov	r3, r2
 800a01c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d101      	bne.n	800a028 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a024:	2303      	movs	r3, #3
 800a026:	e01f      	b.n	800a068 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2200      	movs	r2, #0
 800a034:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d003      	beq.n	800a04e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	68ba      	ldr	r2, [r7, #8]
 800a04a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2201      	movs	r2, #1
 800a052:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	79fa      	ldrb	r2, [r7, #7]
 800a05a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f001 fc61 	bl	800b924 <USBD_LL_Init>
 800a062:	4603      	mov	r3, r0
 800a064:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a066:	7dfb      	ldrb	r3, [r7, #23]
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3718      	adds	r7, #24
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a07a:	2300      	movs	r3, #0
 800a07c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d101      	bne.n	800a088 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a084:	2303      	movs	r3, #3
 800a086:	e016      	b.n	800a0b6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	683a      	ldr	r2, [r7, #0]
 800a08c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d00b      	beq.n	800a0b4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a4:	f107 020e 	add.w	r2, r7, #14
 800a0a8:	4610      	mov	r0, r2
 800a0aa:	4798      	blx	r3
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b082      	sub	sp, #8
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f001 fc8c 	bl	800b9e4 <USBD_LL_Start>
 800a0cc:	4603      	mov	r3, r0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3708      	adds	r7, #8
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a0d6:	b480      	push	{r7}
 800a0d8:	b083      	sub	sp, #12
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a0f8:	2303      	movs	r3, #3
 800a0fa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a102:	2b00      	cmp	r3, #0
 800a104:	d009      	beq.n	800a11a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	78fa      	ldrb	r2, [r7, #3]
 800a110:	4611      	mov	r1, r2
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	4798      	blx	r3
 800a116:	4603      	mov	r3, r0
 800a118:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a11a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3710      	adds	r7, #16
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b082      	sub	sp, #8
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	460b      	mov	r3, r1
 800a12e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a136:	2b00      	cmp	r3, #0
 800a138:	d007      	beq.n	800a14a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	78fa      	ldrb	r2, [r7, #3]
 800a144:	4611      	mov	r1, r2
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	4798      	blx	r3
  }

  return USBD_OK;
 800a14a:	2300      	movs	r3, #0
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3708      	adds	r7, #8
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a164:	6839      	ldr	r1, [r7, #0]
 800a166:	4618      	mov	r0, r3
 800a168:	f000 ff46 	bl	800aff8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a17a:	461a      	mov	r2, r3
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a188:	f003 031f 	and.w	r3, r3, #31
 800a18c:	2b02      	cmp	r3, #2
 800a18e:	d01a      	beq.n	800a1c6 <USBD_LL_SetupStage+0x72>
 800a190:	2b02      	cmp	r3, #2
 800a192:	d822      	bhi.n	800a1da <USBD_LL_SetupStage+0x86>
 800a194:	2b00      	cmp	r3, #0
 800a196:	d002      	beq.n	800a19e <USBD_LL_SetupStage+0x4a>
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d00a      	beq.n	800a1b2 <USBD_LL_SetupStage+0x5e>
 800a19c:	e01d      	b.n	800a1da <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 f9ee 	bl	800a588 <USBD_StdDevReq>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	73fb      	strb	r3, [r7, #15]
      break;
 800a1b0:	e020      	b.n	800a1f4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 fa52 	bl	800a664 <USBD_StdItfReq>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	73fb      	strb	r3, [r7, #15]
      break;
 800a1c4:	e016      	b.n	800a1f4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 fa91 	bl	800a6f6 <USBD_StdEPReq>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	73fb      	strb	r3, [r7, #15]
      break;
 800a1d8:	e00c      	b.n	800a1f4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a1e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f001 fc5b 	bl	800baa4 <USBD_LL_StallEP>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	73fb      	strb	r3, [r7, #15]
      break;
 800a1f2:	bf00      	nop
  }

  return ret;
 800a1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b086      	sub	sp, #24
 800a202:	af00      	add	r7, sp, #0
 800a204:	60f8      	str	r0, [r7, #12]
 800a206:	460b      	mov	r3, r1
 800a208:	607a      	str	r2, [r7, #4]
 800a20a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a20c:	7afb      	ldrb	r3, [r7, #11]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d138      	bne.n	800a284 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a218:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a220:	2b03      	cmp	r3, #3
 800a222:	d14a      	bne.n	800a2ba <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	689a      	ldr	r2, [r3, #8]
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	68db      	ldr	r3, [r3, #12]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d913      	bls.n	800a258 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	689a      	ldr	r2, [r3, #8]
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	1ad2      	subs	r2, r2, r3
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	68da      	ldr	r2, [r3, #12]
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	4293      	cmp	r3, r2
 800a248:	bf28      	it	cs
 800a24a:	4613      	movcs	r3, r2
 800a24c:	461a      	mov	r2, r3
 800a24e:	6879      	ldr	r1, [r7, #4]
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	f000 ffc5 	bl	800b1e0 <USBD_CtlContinueRx>
 800a256:	e030      	b.n	800a2ba <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	2b03      	cmp	r3, #3
 800a262:	d10b      	bne.n	800a27c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a26a:	691b      	ldr	r3, [r3, #16]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d005      	beq.n	800a27c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	f000 ffc0 	bl	800b202 <USBD_CtlSendStatus>
 800a282:	e01a      	b.n	800a2ba <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a28a:	b2db      	uxtb	r3, r3
 800a28c:	2b03      	cmp	r3, #3
 800a28e:	d114      	bne.n	800a2ba <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a296:	699b      	ldr	r3, [r3, #24]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d00e      	beq.n	800a2ba <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2a2:	699b      	ldr	r3, [r3, #24]
 800a2a4:	7afa      	ldrb	r2, [r7, #11]
 800a2a6:	4611      	mov	r1, r2
 800a2a8:	68f8      	ldr	r0, [r7, #12]
 800a2aa:	4798      	blx	r3
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a2b0:	7dfb      	ldrb	r3, [r7, #23]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d001      	beq.n	800a2ba <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a2b6:	7dfb      	ldrb	r3, [r7, #23]
 800a2b8:	e000      	b.n	800a2bc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a2ba:	2300      	movs	r3, #0
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3718      	adds	r7, #24
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b086      	sub	sp, #24
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	607a      	str	r2, [r7, #4]
 800a2d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a2d2:	7afb      	ldrb	r3, [r7, #11]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d16b      	bne.n	800a3b0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	3314      	adds	r3, #20
 800a2dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a2e4:	2b02      	cmp	r3, #2
 800a2e6:	d156      	bne.n	800a396 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	689a      	ldr	r2, [r3, #8]
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d914      	bls.n	800a31e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	689a      	ldr	r2, [r3, #8]
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	1ad2      	subs	r2, r2, r3
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	461a      	mov	r2, r3
 800a308:	6879      	ldr	r1, [r7, #4]
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f000 ff3a 	bl	800b184 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a310:	2300      	movs	r3, #0
 800a312:	2200      	movs	r2, #0
 800a314:	2100      	movs	r1, #0
 800a316:	68f8      	ldr	r0, [r7, #12]
 800a318:	f001 fc6e 	bl	800bbf8 <USBD_LL_PrepareReceive>
 800a31c:	e03b      	b.n	800a396 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	68da      	ldr	r2, [r3, #12]
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	429a      	cmp	r2, r3
 800a328:	d11c      	bne.n	800a364 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	685a      	ldr	r2, [r3, #4]
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a332:	429a      	cmp	r2, r3
 800a334:	d316      	bcc.n	800a364 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	685a      	ldr	r2, [r3, #4]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a340:	429a      	cmp	r2, r3
 800a342:	d20f      	bcs.n	800a364 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a344:	2200      	movs	r2, #0
 800a346:	2100      	movs	r1, #0
 800a348:	68f8      	ldr	r0, [r7, #12]
 800a34a:	f000 ff1b 	bl	800b184 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2200      	movs	r2, #0
 800a352:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a356:	2300      	movs	r3, #0
 800a358:	2200      	movs	r2, #0
 800a35a:	2100      	movs	r1, #0
 800a35c:	68f8      	ldr	r0, [r7, #12]
 800a35e:	f001 fc4b 	bl	800bbf8 <USBD_LL_PrepareReceive>
 800a362:	e018      	b.n	800a396 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	2b03      	cmp	r3, #3
 800a36e:	d10b      	bne.n	800a388 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d005      	beq.n	800a388 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a388:	2180      	movs	r1, #128	; 0x80
 800a38a:	68f8      	ldr	r0, [r7, #12]
 800a38c:	f001 fb8a 	bl	800baa4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a390:	68f8      	ldr	r0, [r7, #12]
 800a392:	f000 ff49 	bl	800b228 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d122      	bne.n	800a3e6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a3a0:	68f8      	ldr	r0, [r7, #12]
 800a3a2:	f7ff fe98 	bl	800a0d6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a3ae:	e01a      	b.n	800a3e6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3b6:	b2db      	uxtb	r3, r3
 800a3b8:	2b03      	cmp	r3, #3
 800a3ba:	d114      	bne.n	800a3e6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3c2:	695b      	ldr	r3, [r3, #20]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d00e      	beq.n	800a3e6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3ce:	695b      	ldr	r3, [r3, #20]
 800a3d0:	7afa      	ldrb	r2, [r7, #11]
 800a3d2:	4611      	mov	r1, r2
 800a3d4:	68f8      	ldr	r0, [r7, #12]
 800a3d6:	4798      	blx	r3
 800a3d8:	4603      	mov	r3, r0
 800a3da:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a3dc:	7dfb      	ldrb	r3, [r7, #23]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d001      	beq.n	800a3e6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a3e2:	7dfb      	ldrb	r3, [r7, #23]
 800a3e4:	e000      	b.n	800a3e8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a3e6:	2300      	movs	r3, #0
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3718      	adds	r7, #24
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2200      	movs	r2, #0
 800a412:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d101      	bne.n	800a424 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a420:	2303      	movs	r3, #3
 800a422:	e02f      	b.n	800a484 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d00f      	beq.n	800a44e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d009      	beq.n	800a44e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	6852      	ldr	r2, [r2, #4]
 800a446:	b2d2      	uxtb	r2, r2
 800a448:	4611      	mov	r1, r2
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a44e:	2340      	movs	r3, #64	; 0x40
 800a450:	2200      	movs	r2, #0
 800a452:	2100      	movs	r1, #0
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f001 fae0 	bl	800ba1a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2201      	movs	r2, #1
 800a45e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2240      	movs	r2, #64	; 0x40
 800a466:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a46a:	2340      	movs	r3, #64	; 0x40
 800a46c:	2200      	movs	r2, #0
 800a46e:	2180      	movs	r1, #128	; 0x80
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f001 fad2 	bl	800ba1a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2201      	movs	r2, #1
 800a47a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2240      	movs	r2, #64	; 0x40
 800a480:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a482:	2300      	movs	r3, #0
}
 800a484:	4618      	mov	r0, r3
 800a486:	3708      	adds	r7, #8
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	460b      	mov	r3, r1
 800a496:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	78fa      	ldrb	r2, [r7, #3]
 800a49c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	370c      	adds	r7, #12
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4ba:	b2da      	uxtb	r2, r3
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2204      	movs	r2, #4
 800a4c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a4ca:	2300      	movs	r3, #0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	2b04      	cmp	r3, #4
 800a4ea:	d106      	bne.n	800a4fa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a4f2:	b2da      	uxtb	r2, r3
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a4fa:	2300      	movs	r3, #0
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b082      	sub	sp, #8
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a516:	2b00      	cmp	r3, #0
 800a518:	d101      	bne.n	800a51e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a51a:	2303      	movs	r3, #3
 800a51c:	e012      	b.n	800a544 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a524:	b2db      	uxtb	r3, r3
 800a526:	2b03      	cmp	r3, #3
 800a528:	d10b      	bne.n	800a542 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a530:	69db      	ldr	r3, [r3, #28]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d005      	beq.n	800a542 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a53c:	69db      	ldr	r3, [r3, #28]
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a542:	2300      	movs	r3, #0
}
 800a544:	4618      	mov	r0, r3
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b087      	sub	sp, #28
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	3301      	adds	r3, #1
 800a562:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a56a:	8a3b      	ldrh	r3, [r7, #16]
 800a56c:	021b      	lsls	r3, r3, #8
 800a56e:	b21a      	sxth	r2, r3
 800a570:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a574:	4313      	orrs	r3, r2
 800a576:	b21b      	sxth	r3, r3
 800a578:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a57a:	89fb      	ldrh	r3, [r7, #14]
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	371c      	adds	r7, #28
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b084      	sub	sp, #16
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a592:	2300      	movs	r3, #0
 800a594:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a59e:	2b40      	cmp	r3, #64	; 0x40
 800a5a0:	d005      	beq.n	800a5ae <USBD_StdDevReq+0x26>
 800a5a2:	2b40      	cmp	r3, #64	; 0x40
 800a5a4:	d853      	bhi.n	800a64e <USBD_StdDevReq+0xc6>
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d00b      	beq.n	800a5c2 <USBD_StdDevReq+0x3a>
 800a5aa:	2b20      	cmp	r3, #32
 800a5ac:	d14f      	bne.n	800a64e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5b4:	689b      	ldr	r3, [r3, #8]
 800a5b6:	6839      	ldr	r1, [r7, #0]
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	4798      	blx	r3
 800a5bc:	4603      	mov	r3, r0
 800a5be:	73fb      	strb	r3, [r7, #15]
      break;
 800a5c0:	e04a      	b.n	800a658 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	785b      	ldrb	r3, [r3, #1]
 800a5c6:	2b09      	cmp	r3, #9
 800a5c8:	d83b      	bhi.n	800a642 <USBD_StdDevReq+0xba>
 800a5ca:	a201      	add	r2, pc, #4	; (adr r2, 800a5d0 <USBD_StdDevReq+0x48>)
 800a5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d0:	0800a625 	.word	0x0800a625
 800a5d4:	0800a639 	.word	0x0800a639
 800a5d8:	0800a643 	.word	0x0800a643
 800a5dc:	0800a62f 	.word	0x0800a62f
 800a5e0:	0800a643 	.word	0x0800a643
 800a5e4:	0800a603 	.word	0x0800a603
 800a5e8:	0800a5f9 	.word	0x0800a5f9
 800a5ec:	0800a643 	.word	0x0800a643
 800a5f0:	0800a61b 	.word	0x0800a61b
 800a5f4:	0800a60d 	.word	0x0800a60d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a5f8:	6839      	ldr	r1, [r7, #0]
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 f9de 	bl	800a9bc <USBD_GetDescriptor>
          break;
 800a600:	e024      	b.n	800a64c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a602:	6839      	ldr	r1, [r7, #0]
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 fb6d 	bl	800ace4 <USBD_SetAddress>
          break;
 800a60a:	e01f      	b.n	800a64c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a60c:	6839      	ldr	r1, [r7, #0]
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 fbac 	bl	800ad6c <USBD_SetConfig>
 800a614:	4603      	mov	r3, r0
 800a616:	73fb      	strb	r3, [r7, #15]
          break;
 800a618:	e018      	b.n	800a64c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a61a:	6839      	ldr	r1, [r7, #0]
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 fc4b 	bl	800aeb8 <USBD_GetConfig>
          break;
 800a622:	e013      	b.n	800a64c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a624:	6839      	ldr	r1, [r7, #0]
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 fc7c 	bl	800af24 <USBD_GetStatus>
          break;
 800a62c:	e00e      	b.n	800a64c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a62e:	6839      	ldr	r1, [r7, #0]
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 fcab 	bl	800af8c <USBD_SetFeature>
          break;
 800a636:	e009      	b.n	800a64c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a638:	6839      	ldr	r1, [r7, #0]
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f000 fcba 	bl	800afb4 <USBD_ClrFeature>
          break;
 800a640:	e004      	b.n	800a64c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a642:	6839      	ldr	r1, [r7, #0]
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 fd11 	bl	800b06c <USBD_CtlError>
          break;
 800a64a:	bf00      	nop
      }
      break;
 800a64c:	e004      	b.n	800a658 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a64e:	6839      	ldr	r1, [r7, #0]
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 fd0b 	bl	800b06c <USBD_CtlError>
      break;
 800a656:	bf00      	nop
  }

  return ret;
 800a658:	7bfb      	ldrb	r3, [r7, #15]
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop

0800a664 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b084      	sub	sp, #16
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a66e:	2300      	movs	r3, #0
 800a670:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a67a:	2b40      	cmp	r3, #64	; 0x40
 800a67c:	d005      	beq.n	800a68a <USBD_StdItfReq+0x26>
 800a67e:	2b40      	cmp	r3, #64	; 0x40
 800a680:	d82f      	bhi.n	800a6e2 <USBD_StdItfReq+0x7e>
 800a682:	2b00      	cmp	r3, #0
 800a684:	d001      	beq.n	800a68a <USBD_StdItfReq+0x26>
 800a686:	2b20      	cmp	r3, #32
 800a688:	d12b      	bne.n	800a6e2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a690:	b2db      	uxtb	r3, r3
 800a692:	3b01      	subs	r3, #1
 800a694:	2b02      	cmp	r3, #2
 800a696:	d81d      	bhi.n	800a6d4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	889b      	ldrh	r3, [r3, #4]
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d813      	bhi.n	800a6ca <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6a8:	689b      	ldr	r3, [r3, #8]
 800a6aa:	6839      	ldr	r1, [r7, #0]
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	4798      	blx	r3
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	88db      	ldrh	r3, [r3, #6]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d110      	bne.n	800a6de <USBD_StdItfReq+0x7a>
 800a6bc:	7bfb      	ldrb	r3, [r7, #15]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d10d      	bne.n	800a6de <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 fd9d 	bl	800b202 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a6c8:	e009      	b.n	800a6de <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a6ca:	6839      	ldr	r1, [r7, #0]
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 fccd 	bl	800b06c <USBD_CtlError>
          break;
 800a6d2:	e004      	b.n	800a6de <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a6d4:	6839      	ldr	r1, [r7, #0]
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 fcc8 	bl	800b06c <USBD_CtlError>
          break;
 800a6dc:	e000      	b.n	800a6e0 <USBD_StdItfReq+0x7c>
          break;
 800a6de:	bf00      	nop
      }
      break;
 800a6e0:	e004      	b.n	800a6ec <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a6e2:	6839      	ldr	r1, [r7, #0]
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 fcc1 	bl	800b06c <USBD_CtlError>
      break;
 800a6ea:	bf00      	nop
  }

  return ret;
 800a6ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3710      	adds	r7, #16
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	bd80      	pop	{r7, pc}

0800a6f6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6f6:	b580      	push	{r7, lr}
 800a6f8:	b084      	sub	sp, #16
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
 800a6fe:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a700:	2300      	movs	r3, #0
 800a702:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	889b      	ldrh	r3, [r3, #4]
 800a708:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a712:	2b40      	cmp	r3, #64	; 0x40
 800a714:	d007      	beq.n	800a726 <USBD_StdEPReq+0x30>
 800a716:	2b40      	cmp	r3, #64	; 0x40
 800a718:	f200 8145 	bhi.w	800a9a6 <USBD_StdEPReq+0x2b0>
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d00c      	beq.n	800a73a <USBD_StdEPReq+0x44>
 800a720:	2b20      	cmp	r3, #32
 800a722:	f040 8140 	bne.w	800a9a6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a72c:	689b      	ldr	r3, [r3, #8]
 800a72e:	6839      	ldr	r1, [r7, #0]
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	4798      	blx	r3
 800a734:	4603      	mov	r3, r0
 800a736:	73fb      	strb	r3, [r7, #15]
      break;
 800a738:	e13a      	b.n	800a9b0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	785b      	ldrb	r3, [r3, #1]
 800a73e:	2b03      	cmp	r3, #3
 800a740:	d007      	beq.n	800a752 <USBD_StdEPReq+0x5c>
 800a742:	2b03      	cmp	r3, #3
 800a744:	f300 8129 	bgt.w	800a99a <USBD_StdEPReq+0x2a4>
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d07f      	beq.n	800a84c <USBD_StdEPReq+0x156>
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d03c      	beq.n	800a7ca <USBD_StdEPReq+0xd4>
 800a750:	e123      	b.n	800a99a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	2b02      	cmp	r3, #2
 800a75c:	d002      	beq.n	800a764 <USBD_StdEPReq+0x6e>
 800a75e:	2b03      	cmp	r3, #3
 800a760:	d016      	beq.n	800a790 <USBD_StdEPReq+0x9a>
 800a762:	e02c      	b.n	800a7be <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a764:	7bbb      	ldrb	r3, [r7, #14]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d00d      	beq.n	800a786 <USBD_StdEPReq+0x90>
 800a76a:	7bbb      	ldrb	r3, [r7, #14]
 800a76c:	2b80      	cmp	r3, #128	; 0x80
 800a76e:	d00a      	beq.n	800a786 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a770:	7bbb      	ldrb	r3, [r7, #14]
 800a772:	4619      	mov	r1, r3
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f001 f995 	bl	800baa4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a77a:	2180      	movs	r1, #128	; 0x80
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f001 f991 	bl	800baa4 <USBD_LL_StallEP>
 800a782:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a784:	e020      	b.n	800a7c8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a786:	6839      	ldr	r1, [r7, #0]
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 fc6f 	bl	800b06c <USBD_CtlError>
              break;
 800a78e:	e01b      	b.n	800a7c8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	885b      	ldrh	r3, [r3, #2]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d10e      	bne.n	800a7b6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a798:	7bbb      	ldrb	r3, [r7, #14]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d00b      	beq.n	800a7b6 <USBD_StdEPReq+0xc0>
 800a79e:	7bbb      	ldrb	r3, [r7, #14]
 800a7a0:	2b80      	cmp	r3, #128	; 0x80
 800a7a2:	d008      	beq.n	800a7b6 <USBD_StdEPReq+0xc0>
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	88db      	ldrh	r3, [r3, #6]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d104      	bne.n	800a7b6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7ac:	7bbb      	ldrb	r3, [r7, #14]
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f001 f977 	bl	800baa4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f000 fd23 	bl	800b202 <USBD_CtlSendStatus>

              break;
 800a7bc:	e004      	b.n	800a7c8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a7be:	6839      	ldr	r1, [r7, #0]
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 fc53 	bl	800b06c <USBD_CtlError>
              break;
 800a7c6:	bf00      	nop
          }
          break;
 800a7c8:	e0ec      	b.n	800a9a4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7d0:	b2db      	uxtb	r3, r3
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	d002      	beq.n	800a7dc <USBD_StdEPReq+0xe6>
 800a7d6:	2b03      	cmp	r3, #3
 800a7d8:	d016      	beq.n	800a808 <USBD_StdEPReq+0x112>
 800a7da:	e030      	b.n	800a83e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7dc:	7bbb      	ldrb	r3, [r7, #14]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d00d      	beq.n	800a7fe <USBD_StdEPReq+0x108>
 800a7e2:	7bbb      	ldrb	r3, [r7, #14]
 800a7e4:	2b80      	cmp	r3, #128	; 0x80
 800a7e6:	d00a      	beq.n	800a7fe <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7e8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f001 f959 	bl	800baa4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7f2:	2180      	movs	r1, #128	; 0x80
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f001 f955 	bl	800baa4 <USBD_LL_StallEP>
 800a7fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a7fc:	e025      	b.n	800a84a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a7fe:	6839      	ldr	r1, [r7, #0]
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 fc33 	bl	800b06c <USBD_CtlError>
              break;
 800a806:	e020      	b.n	800a84a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	885b      	ldrh	r3, [r3, #2]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d11b      	bne.n	800a848 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a810:	7bbb      	ldrb	r3, [r7, #14]
 800a812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a816:	2b00      	cmp	r3, #0
 800a818:	d004      	beq.n	800a824 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a81a:	7bbb      	ldrb	r3, [r7, #14]
 800a81c:	4619      	mov	r1, r3
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f001 f95f 	bl	800bae2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 fcec 	bl	800b202 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a830:	689b      	ldr	r3, [r3, #8]
 800a832:	6839      	ldr	r1, [r7, #0]
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	4798      	blx	r3
 800a838:	4603      	mov	r3, r0
 800a83a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a83c:	e004      	b.n	800a848 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a83e:	6839      	ldr	r1, [r7, #0]
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 fc13 	bl	800b06c <USBD_CtlError>
              break;
 800a846:	e000      	b.n	800a84a <USBD_StdEPReq+0x154>
              break;
 800a848:	bf00      	nop
          }
          break;
 800a84a:	e0ab      	b.n	800a9a4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a852:	b2db      	uxtb	r3, r3
 800a854:	2b02      	cmp	r3, #2
 800a856:	d002      	beq.n	800a85e <USBD_StdEPReq+0x168>
 800a858:	2b03      	cmp	r3, #3
 800a85a:	d032      	beq.n	800a8c2 <USBD_StdEPReq+0x1cc>
 800a85c:	e097      	b.n	800a98e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a85e:	7bbb      	ldrb	r3, [r7, #14]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d007      	beq.n	800a874 <USBD_StdEPReq+0x17e>
 800a864:	7bbb      	ldrb	r3, [r7, #14]
 800a866:	2b80      	cmp	r3, #128	; 0x80
 800a868:	d004      	beq.n	800a874 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a86a:	6839      	ldr	r1, [r7, #0]
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 fbfd 	bl	800b06c <USBD_CtlError>
                break;
 800a872:	e091      	b.n	800a998 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a874:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	da0b      	bge.n	800a894 <USBD_StdEPReq+0x19e>
 800a87c:	7bbb      	ldrb	r3, [r7, #14]
 800a87e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a882:	4613      	mov	r3, r2
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	4413      	add	r3, r2
 800a888:	009b      	lsls	r3, r3, #2
 800a88a:	3310      	adds	r3, #16
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	4413      	add	r3, r2
 800a890:	3304      	adds	r3, #4
 800a892:	e00b      	b.n	800a8ac <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a894:	7bbb      	ldrb	r3, [r7, #14]
 800a896:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a89a:	4613      	mov	r3, r2
 800a89c:	009b      	lsls	r3, r3, #2
 800a89e:	4413      	add	r3, r2
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	4413      	add	r3, r2
 800a8aa:	3304      	adds	r3, #4
 800a8ac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	2202      	movs	r2, #2
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 fc47 	bl	800b14e <USBD_CtlSendData>
              break;
 800a8c0:	e06a      	b.n	800a998 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a8c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	da11      	bge.n	800a8ee <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a8ca:	7bbb      	ldrb	r3, [r7, #14]
 800a8cc:	f003 020f 	and.w	r2, r3, #15
 800a8d0:	6879      	ldr	r1, [r7, #4]
 800a8d2:	4613      	mov	r3, r2
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	4413      	add	r3, r2
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	440b      	add	r3, r1
 800a8dc:	3324      	adds	r3, #36	; 0x24
 800a8de:	881b      	ldrh	r3, [r3, #0]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d117      	bne.n	800a914 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a8e4:	6839      	ldr	r1, [r7, #0]
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 fbc0 	bl	800b06c <USBD_CtlError>
                  break;
 800a8ec:	e054      	b.n	800a998 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a8ee:	7bbb      	ldrb	r3, [r7, #14]
 800a8f0:	f003 020f 	and.w	r2, r3, #15
 800a8f4:	6879      	ldr	r1, [r7, #4]
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	4413      	add	r3, r2
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	440b      	add	r3, r1
 800a900:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a904:	881b      	ldrh	r3, [r3, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d104      	bne.n	800a914 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a90a:	6839      	ldr	r1, [r7, #0]
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 fbad 	bl	800b06c <USBD_CtlError>
                  break;
 800a912:	e041      	b.n	800a998 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a914:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	da0b      	bge.n	800a934 <USBD_StdEPReq+0x23e>
 800a91c:	7bbb      	ldrb	r3, [r7, #14]
 800a91e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a922:	4613      	mov	r3, r2
 800a924:	009b      	lsls	r3, r3, #2
 800a926:	4413      	add	r3, r2
 800a928:	009b      	lsls	r3, r3, #2
 800a92a:	3310      	adds	r3, #16
 800a92c:	687a      	ldr	r2, [r7, #4]
 800a92e:	4413      	add	r3, r2
 800a930:	3304      	adds	r3, #4
 800a932:	e00b      	b.n	800a94c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a934:	7bbb      	ldrb	r3, [r7, #14]
 800a936:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a93a:	4613      	mov	r3, r2
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	4413      	add	r3, r2
 800a940:	009b      	lsls	r3, r3, #2
 800a942:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	4413      	add	r3, r2
 800a94a:	3304      	adds	r3, #4
 800a94c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a94e:	7bbb      	ldrb	r3, [r7, #14]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d002      	beq.n	800a95a <USBD_StdEPReq+0x264>
 800a954:	7bbb      	ldrb	r3, [r7, #14]
 800a956:	2b80      	cmp	r3, #128	; 0x80
 800a958:	d103      	bne.n	800a962 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	2200      	movs	r2, #0
 800a95e:	601a      	str	r2, [r3, #0]
 800a960:	e00e      	b.n	800a980 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a962:	7bbb      	ldrb	r3, [r7, #14]
 800a964:	4619      	mov	r1, r3
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f001 f8da 	bl	800bb20 <USBD_LL_IsStallEP>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d003      	beq.n	800a97a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	2201      	movs	r2, #1
 800a976:	601a      	str	r2, [r3, #0]
 800a978:	e002      	b.n	800a980 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	2200      	movs	r2, #0
 800a97e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	2202      	movs	r2, #2
 800a984:	4619      	mov	r1, r3
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 fbe1 	bl	800b14e <USBD_CtlSendData>
              break;
 800a98c:	e004      	b.n	800a998 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a98e:	6839      	ldr	r1, [r7, #0]
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 fb6b 	bl	800b06c <USBD_CtlError>
              break;
 800a996:	bf00      	nop
          }
          break;
 800a998:	e004      	b.n	800a9a4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a99a:	6839      	ldr	r1, [r7, #0]
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 fb65 	bl	800b06c <USBD_CtlError>
          break;
 800a9a2:	bf00      	nop
      }
      break;
 800a9a4:	e004      	b.n	800a9b0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a9a6:	6839      	ldr	r1, [r7, #0]
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f000 fb5f 	bl	800b06c <USBD_CtlError>
      break;
 800a9ae:	bf00      	nop
  }

  return ret;
 800a9b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3710      	adds	r7, #16
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
	...

0800a9bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	885b      	ldrh	r3, [r3, #2]
 800a9d6:	0a1b      	lsrs	r3, r3, #8
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	3b01      	subs	r3, #1
 800a9dc:	2b0e      	cmp	r3, #14
 800a9de:	f200 8152 	bhi.w	800ac86 <USBD_GetDescriptor+0x2ca>
 800a9e2:	a201      	add	r2, pc, #4	; (adr r2, 800a9e8 <USBD_GetDescriptor+0x2c>)
 800a9e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e8:	0800aa59 	.word	0x0800aa59
 800a9ec:	0800aa71 	.word	0x0800aa71
 800a9f0:	0800aab1 	.word	0x0800aab1
 800a9f4:	0800ac87 	.word	0x0800ac87
 800a9f8:	0800ac87 	.word	0x0800ac87
 800a9fc:	0800ac27 	.word	0x0800ac27
 800aa00:	0800ac53 	.word	0x0800ac53
 800aa04:	0800ac87 	.word	0x0800ac87
 800aa08:	0800ac87 	.word	0x0800ac87
 800aa0c:	0800ac87 	.word	0x0800ac87
 800aa10:	0800ac87 	.word	0x0800ac87
 800aa14:	0800ac87 	.word	0x0800ac87
 800aa18:	0800ac87 	.word	0x0800ac87
 800aa1c:	0800ac87 	.word	0x0800ac87
 800aa20:	0800aa25 	.word	0x0800aa25
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa2a:	69db      	ldr	r3, [r3, #28]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d00b      	beq.n	800aa48 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa36:	69db      	ldr	r3, [r3, #28]
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	7c12      	ldrb	r2, [r2, #16]
 800aa3c:	f107 0108 	add.w	r1, r7, #8
 800aa40:	4610      	mov	r0, r2
 800aa42:	4798      	blx	r3
 800aa44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa46:	e126      	b.n	800ac96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aa48:	6839      	ldr	r1, [r7, #0]
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 fb0e 	bl	800b06c <USBD_CtlError>
        err++;
 800aa50:	7afb      	ldrb	r3, [r7, #11]
 800aa52:	3301      	adds	r3, #1
 800aa54:	72fb      	strb	r3, [r7, #11]
      break;
 800aa56:	e11e      	b.n	800ac96 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	7c12      	ldrb	r2, [r2, #16]
 800aa64:	f107 0108 	add.w	r1, r7, #8
 800aa68:	4610      	mov	r0, r2
 800aa6a:	4798      	blx	r3
 800aa6c:	60f8      	str	r0, [r7, #12]
      break;
 800aa6e:	e112      	b.n	800ac96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	7c1b      	ldrb	r3, [r3, #16]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d10d      	bne.n	800aa94 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa80:	f107 0208 	add.w	r2, r7, #8
 800aa84:	4610      	mov	r0, r2
 800aa86:	4798      	blx	r3
 800aa88:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	2202      	movs	r2, #2
 800aa90:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aa92:	e100      	b.n	800ac96 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa9c:	f107 0208 	add.w	r2, r7, #8
 800aaa0:	4610      	mov	r0, r2
 800aaa2:	4798      	blx	r3
 800aaa4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	2202      	movs	r2, #2
 800aaac:	701a      	strb	r2, [r3, #0]
      break;
 800aaae:	e0f2      	b.n	800ac96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	885b      	ldrh	r3, [r3, #2]
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	2b05      	cmp	r3, #5
 800aab8:	f200 80ac 	bhi.w	800ac14 <USBD_GetDescriptor+0x258>
 800aabc:	a201      	add	r2, pc, #4	; (adr r2, 800aac4 <USBD_GetDescriptor+0x108>)
 800aabe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac2:	bf00      	nop
 800aac4:	0800aadd 	.word	0x0800aadd
 800aac8:	0800ab11 	.word	0x0800ab11
 800aacc:	0800ab45 	.word	0x0800ab45
 800aad0:	0800ab79 	.word	0x0800ab79
 800aad4:	0800abad 	.word	0x0800abad
 800aad8:	0800abe1 	.word	0x0800abe1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d00b      	beq.n	800ab00 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	687a      	ldr	r2, [r7, #4]
 800aaf2:	7c12      	ldrb	r2, [r2, #16]
 800aaf4:	f107 0108 	add.w	r1, r7, #8
 800aaf8:	4610      	mov	r0, r2
 800aafa:	4798      	blx	r3
 800aafc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aafe:	e091      	b.n	800ac24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ab00:	6839      	ldr	r1, [r7, #0]
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 fab2 	bl	800b06c <USBD_CtlError>
            err++;
 800ab08:	7afb      	ldrb	r3, [r7, #11]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	72fb      	strb	r3, [r7, #11]
          break;
 800ab0e:	e089      	b.n	800ac24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab16:	689b      	ldr	r3, [r3, #8]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00b      	beq.n	800ab34 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab22:	689b      	ldr	r3, [r3, #8]
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	7c12      	ldrb	r2, [r2, #16]
 800ab28:	f107 0108 	add.w	r1, r7, #8
 800ab2c:	4610      	mov	r0, r2
 800ab2e:	4798      	blx	r3
 800ab30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab32:	e077      	b.n	800ac24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ab34:	6839      	ldr	r1, [r7, #0]
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 fa98 	bl	800b06c <USBD_CtlError>
            err++;
 800ab3c:	7afb      	ldrb	r3, [r7, #11]
 800ab3e:	3301      	adds	r3, #1
 800ab40:	72fb      	strb	r3, [r7, #11]
          break;
 800ab42:	e06f      	b.n	800ac24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d00b      	beq.n	800ab68 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	7c12      	ldrb	r2, [r2, #16]
 800ab5c:	f107 0108 	add.w	r1, r7, #8
 800ab60:	4610      	mov	r0, r2
 800ab62:	4798      	blx	r3
 800ab64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab66:	e05d      	b.n	800ac24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ab68:	6839      	ldr	r1, [r7, #0]
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 fa7e 	bl	800b06c <USBD_CtlError>
            err++;
 800ab70:	7afb      	ldrb	r3, [r7, #11]
 800ab72:	3301      	adds	r3, #1
 800ab74:	72fb      	strb	r3, [r7, #11]
          break;
 800ab76:	e055      	b.n	800ac24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab7e:	691b      	ldr	r3, [r3, #16]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d00b      	beq.n	800ab9c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab8a:	691b      	ldr	r3, [r3, #16]
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	7c12      	ldrb	r2, [r2, #16]
 800ab90:	f107 0108 	add.w	r1, r7, #8
 800ab94:	4610      	mov	r0, r2
 800ab96:	4798      	blx	r3
 800ab98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab9a:	e043      	b.n	800ac24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ab9c:	6839      	ldr	r1, [r7, #0]
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 fa64 	bl	800b06c <USBD_CtlError>
            err++;
 800aba4:	7afb      	ldrb	r3, [r7, #11]
 800aba6:	3301      	adds	r3, #1
 800aba8:	72fb      	strb	r3, [r7, #11]
          break;
 800abaa:	e03b      	b.n	800ac24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abb2:	695b      	ldr	r3, [r3, #20]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d00b      	beq.n	800abd0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abbe:	695b      	ldr	r3, [r3, #20]
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	7c12      	ldrb	r2, [r2, #16]
 800abc4:	f107 0108 	add.w	r1, r7, #8
 800abc8:	4610      	mov	r0, r2
 800abca:	4798      	blx	r3
 800abcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abce:	e029      	b.n	800ac24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800abd0:	6839      	ldr	r1, [r7, #0]
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 fa4a 	bl	800b06c <USBD_CtlError>
            err++;
 800abd8:	7afb      	ldrb	r3, [r7, #11]
 800abda:	3301      	adds	r3, #1
 800abdc:	72fb      	strb	r3, [r7, #11]
          break;
 800abde:	e021      	b.n	800ac24 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abe6:	699b      	ldr	r3, [r3, #24]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d00b      	beq.n	800ac04 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abf2:	699b      	ldr	r3, [r3, #24]
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	7c12      	ldrb	r2, [r2, #16]
 800abf8:	f107 0108 	add.w	r1, r7, #8
 800abfc:	4610      	mov	r0, r2
 800abfe:	4798      	blx	r3
 800ac00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac02:	e00f      	b.n	800ac24 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac04:	6839      	ldr	r1, [r7, #0]
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 fa30 	bl	800b06c <USBD_CtlError>
            err++;
 800ac0c:	7afb      	ldrb	r3, [r7, #11]
 800ac0e:	3301      	adds	r3, #1
 800ac10:	72fb      	strb	r3, [r7, #11]
          break;
 800ac12:	e007      	b.n	800ac24 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ac14:	6839      	ldr	r1, [r7, #0]
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 fa28 	bl	800b06c <USBD_CtlError>
          err++;
 800ac1c:	7afb      	ldrb	r3, [r7, #11]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ac22:	bf00      	nop
      }
      break;
 800ac24:	e037      	b.n	800ac96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	7c1b      	ldrb	r3, [r3, #16]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d109      	bne.n	800ac42 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac36:	f107 0208 	add.w	r2, r7, #8
 800ac3a:	4610      	mov	r0, r2
 800ac3c:	4798      	blx	r3
 800ac3e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac40:	e029      	b.n	800ac96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ac42:	6839      	ldr	r1, [r7, #0]
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 fa11 	bl	800b06c <USBD_CtlError>
        err++;
 800ac4a:	7afb      	ldrb	r3, [r7, #11]
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	72fb      	strb	r3, [r7, #11]
      break;
 800ac50:	e021      	b.n	800ac96 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	7c1b      	ldrb	r3, [r3, #16]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d10d      	bne.n	800ac76 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac62:	f107 0208 	add.w	r2, r7, #8
 800ac66:	4610      	mov	r0, r2
 800ac68:	4798      	blx	r3
 800ac6a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	3301      	adds	r3, #1
 800ac70:	2207      	movs	r2, #7
 800ac72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac74:	e00f      	b.n	800ac96 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ac76:	6839      	ldr	r1, [r7, #0]
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 f9f7 	bl	800b06c <USBD_CtlError>
        err++;
 800ac7e:	7afb      	ldrb	r3, [r7, #11]
 800ac80:	3301      	adds	r3, #1
 800ac82:	72fb      	strb	r3, [r7, #11]
      break;
 800ac84:	e007      	b.n	800ac96 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ac86:	6839      	ldr	r1, [r7, #0]
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 f9ef 	bl	800b06c <USBD_CtlError>
      err++;
 800ac8e:	7afb      	ldrb	r3, [r7, #11]
 800ac90:	3301      	adds	r3, #1
 800ac92:	72fb      	strb	r3, [r7, #11]
      break;
 800ac94:	bf00      	nop
  }

  if (err != 0U)
 800ac96:	7afb      	ldrb	r3, [r7, #11]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d11e      	bne.n	800acda <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	88db      	ldrh	r3, [r3, #6]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d016      	beq.n	800acd2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800aca4:	893b      	ldrh	r3, [r7, #8]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d00e      	beq.n	800acc8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	88da      	ldrh	r2, [r3, #6]
 800acae:	893b      	ldrh	r3, [r7, #8]
 800acb0:	4293      	cmp	r3, r2
 800acb2:	bf28      	it	cs
 800acb4:	4613      	movcs	r3, r2
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800acba:	893b      	ldrh	r3, [r7, #8]
 800acbc:	461a      	mov	r2, r3
 800acbe:	68f9      	ldr	r1, [r7, #12]
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 fa44 	bl	800b14e <USBD_CtlSendData>
 800acc6:	e009      	b.n	800acdc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800acc8:	6839      	ldr	r1, [r7, #0]
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 f9ce 	bl	800b06c <USBD_CtlError>
 800acd0:	e004      	b.n	800acdc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f000 fa95 	bl	800b202 <USBD_CtlSendStatus>
 800acd8:	e000      	b.n	800acdc <USBD_GetDescriptor+0x320>
    return;
 800acda:	bf00      	nop
  }
}
 800acdc:	3710      	adds	r7, #16
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop

0800ace4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	889b      	ldrh	r3, [r3, #4]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d131      	bne.n	800ad5a <USBD_SetAddress+0x76>
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	88db      	ldrh	r3, [r3, #6]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d12d      	bne.n	800ad5a <USBD_SetAddress+0x76>
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	885b      	ldrh	r3, [r3, #2]
 800ad02:	2b7f      	cmp	r3, #127	; 0x7f
 800ad04:	d829      	bhi.n	800ad5a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	885b      	ldrh	r3, [r3, #2]
 800ad0a:	b2db      	uxtb	r3, r3
 800ad0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	2b03      	cmp	r3, #3
 800ad1c:	d104      	bne.n	800ad28 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ad1e:	6839      	ldr	r1, [r7, #0]
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 f9a3 	bl	800b06c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad26:	e01d      	b.n	800ad64 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	7bfa      	ldrb	r2, [r7, #15]
 800ad2c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ad30:	7bfb      	ldrb	r3, [r7, #15]
 800ad32:	4619      	mov	r1, r3
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 ff1f 	bl	800bb78 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 fa61 	bl	800b202 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ad40:	7bfb      	ldrb	r3, [r7, #15]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d004      	beq.n	800ad50 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2202      	movs	r2, #2
 800ad4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad4e:	e009      	b.n	800ad64 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad58:	e004      	b.n	800ad64 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ad5a:	6839      	ldr	r1, [r7, #0]
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 f985 	bl	800b06c <USBD_CtlError>
  }
}
 800ad62:	bf00      	nop
 800ad64:	bf00      	nop
 800ad66:	3710      	adds	r7, #16
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b084      	sub	sp, #16
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad76:	2300      	movs	r3, #0
 800ad78:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	885b      	ldrh	r3, [r3, #2]
 800ad7e:	b2da      	uxtb	r2, r3
 800ad80:	4b4c      	ldr	r3, [pc, #304]	; (800aeb4 <USBD_SetConfig+0x148>)
 800ad82:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ad84:	4b4b      	ldr	r3, [pc, #300]	; (800aeb4 <USBD_SetConfig+0x148>)
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d905      	bls.n	800ad98 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ad8c:	6839      	ldr	r1, [r7, #0]
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f000 f96c 	bl	800b06c <USBD_CtlError>
    return USBD_FAIL;
 800ad94:	2303      	movs	r3, #3
 800ad96:	e088      	b.n	800aeaa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad9e:	b2db      	uxtb	r3, r3
 800ada0:	2b02      	cmp	r3, #2
 800ada2:	d002      	beq.n	800adaa <USBD_SetConfig+0x3e>
 800ada4:	2b03      	cmp	r3, #3
 800ada6:	d025      	beq.n	800adf4 <USBD_SetConfig+0x88>
 800ada8:	e071      	b.n	800ae8e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800adaa:	4b42      	ldr	r3, [pc, #264]	; (800aeb4 <USBD_SetConfig+0x148>)
 800adac:	781b      	ldrb	r3, [r3, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d01c      	beq.n	800adec <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800adb2:	4b40      	ldr	r3, [pc, #256]	; (800aeb4 <USBD_SetConfig+0x148>)
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	461a      	mov	r2, r3
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800adbc:	4b3d      	ldr	r3, [pc, #244]	; (800aeb4 <USBD_SetConfig+0x148>)
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	4619      	mov	r1, r3
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f7ff f992 	bl	800a0ec <USBD_SetClassConfig>
 800adc8:	4603      	mov	r3, r0
 800adca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800adcc:	7bfb      	ldrb	r3, [r7, #15]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d004      	beq.n	800addc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800add2:	6839      	ldr	r1, [r7, #0]
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 f949 	bl	800b06c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800adda:	e065      	b.n	800aea8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 fa10 	bl	800b202 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2203      	movs	r2, #3
 800ade6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800adea:	e05d      	b.n	800aea8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f000 fa08 	bl	800b202 <USBD_CtlSendStatus>
      break;
 800adf2:	e059      	b.n	800aea8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800adf4:	4b2f      	ldr	r3, [pc, #188]	; (800aeb4 <USBD_SetConfig+0x148>)
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d112      	bne.n	800ae22 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2202      	movs	r2, #2
 800ae00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ae04:	4b2b      	ldr	r3, [pc, #172]	; (800aeb4 <USBD_SetConfig+0x148>)
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	461a      	mov	r2, r3
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae0e:	4b29      	ldr	r3, [pc, #164]	; (800aeb4 <USBD_SetConfig+0x148>)
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	4619      	mov	r1, r3
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f7ff f985 	bl	800a124 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 f9f1 	bl	800b202 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ae20:	e042      	b.n	800aea8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ae22:	4b24      	ldr	r3, [pc, #144]	; (800aeb4 <USBD_SetConfig+0x148>)
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	461a      	mov	r2, r3
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d02a      	beq.n	800ae86 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	4619      	mov	r1, r3
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f7ff f973 	bl	800a124 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ae3e:	4b1d      	ldr	r3, [pc, #116]	; (800aeb4 <USBD_SetConfig+0x148>)
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	461a      	mov	r2, r3
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ae48:	4b1a      	ldr	r3, [pc, #104]	; (800aeb4 <USBD_SetConfig+0x148>)
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f7ff f94c 	bl	800a0ec <USBD_SetClassConfig>
 800ae54:	4603      	mov	r3, r0
 800ae56:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ae58:	7bfb      	ldrb	r3, [r7, #15]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d00f      	beq.n	800ae7e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ae5e:	6839      	ldr	r1, [r7, #0]
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 f903 	bl	800b06c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f7ff f958 	bl	800a124 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2202      	movs	r2, #2
 800ae78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ae7c:	e014      	b.n	800aea8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 f9bf 	bl	800b202 <USBD_CtlSendStatus>
      break;
 800ae84:	e010      	b.n	800aea8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 f9bb 	bl	800b202 <USBD_CtlSendStatus>
      break;
 800ae8c:	e00c      	b.n	800aea8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ae8e:	6839      	ldr	r1, [r7, #0]
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 f8eb 	bl	800b06c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae96:	4b07      	ldr	r3, [pc, #28]	; (800aeb4 <USBD_SetConfig+0x148>)
 800ae98:	781b      	ldrb	r3, [r3, #0]
 800ae9a:	4619      	mov	r1, r3
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f7ff f941 	bl	800a124 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800aea2:	2303      	movs	r3, #3
 800aea4:	73fb      	strb	r3, [r7, #15]
      break;
 800aea6:	bf00      	nop
  }

  return ret;
 800aea8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	20000450 	.word	0x20000450

0800aeb8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	88db      	ldrh	r3, [r3, #6]
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d004      	beq.n	800aed4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aeca:	6839      	ldr	r1, [r7, #0]
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 f8cd 	bl	800b06c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aed2:	e023      	b.n	800af1c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeda:	b2db      	uxtb	r3, r3
 800aedc:	2b02      	cmp	r3, #2
 800aede:	dc02      	bgt.n	800aee6 <USBD_GetConfig+0x2e>
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	dc03      	bgt.n	800aeec <USBD_GetConfig+0x34>
 800aee4:	e015      	b.n	800af12 <USBD_GetConfig+0x5a>
 800aee6:	2b03      	cmp	r3, #3
 800aee8:	d00b      	beq.n	800af02 <USBD_GetConfig+0x4a>
 800aeea:	e012      	b.n	800af12 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	3308      	adds	r3, #8
 800aef6:	2201      	movs	r2, #1
 800aef8:	4619      	mov	r1, r3
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 f927 	bl	800b14e <USBD_CtlSendData>
        break;
 800af00:	e00c      	b.n	800af1c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	3304      	adds	r3, #4
 800af06:	2201      	movs	r2, #1
 800af08:	4619      	mov	r1, r3
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 f91f 	bl	800b14e <USBD_CtlSendData>
        break;
 800af10:	e004      	b.n	800af1c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800af12:	6839      	ldr	r1, [r7, #0]
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 f8a9 	bl	800b06c <USBD_CtlError>
        break;
 800af1a:	bf00      	nop
}
 800af1c:	bf00      	nop
 800af1e:	3708      	adds	r7, #8
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b082      	sub	sp, #8
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af34:	b2db      	uxtb	r3, r3
 800af36:	3b01      	subs	r3, #1
 800af38:	2b02      	cmp	r3, #2
 800af3a:	d81e      	bhi.n	800af7a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	88db      	ldrh	r3, [r3, #6]
 800af40:	2b02      	cmp	r3, #2
 800af42:	d004      	beq.n	800af4e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800af44:	6839      	ldr	r1, [r7, #0]
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 f890 	bl	800b06c <USBD_CtlError>
        break;
 800af4c:	e01a      	b.n	800af84 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2201      	movs	r2, #1
 800af52:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d005      	beq.n	800af6a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	68db      	ldr	r3, [r3, #12]
 800af62:	f043 0202 	orr.w	r2, r3, #2
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	330c      	adds	r3, #12
 800af6e:	2202      	movs	r2, #2
 800af70:	4619      	mov	r1, r3
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 f8eb 	bl	800b14e <USBD_CtlSendData>
      break;
 800af78:	e004      	b.n	800af84 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800af7a:	6839      	ldr	r1, [r7, #0]
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 f875 	bl	800b06c <USBD_CtlError>
      break;
 800af82:	bf00      	nop
  }
}
 800af84:	bf00      	nop
 800af86:	3708      	adds	r7, #8
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	885b      	ldrh	r3, [r3, #2]
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d106      	bne.n	800afac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2201      	movs	r2, #1
 800afa2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 f92b 	bl	800b202 <USBD_CtlSendStatus>
  }
}
 800afac:	bf00      	nop
 800afae:	3708      	adds	r7, #8
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	3b01      	subs	r3, #1
 800afc8:	2b02      	cmp	r3, #2
 800afca:	d80b      	bhi.n	800afe4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	885b      	ldrh	r3, [r3, #2]
 800afd0:	2b01      	cmp	r3, #1
 800afd2:	d10c      	bne.n	800afee <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2200      	movs	r2, #0
 800afd8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 f910 	bl	800b202 <USBD_CtlSendStatus>
      }
      break;
 800afe2:	e004      	b.n	800afee <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800afe4:	6839      	ldr	r1, [r7, #0]
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 f840 	bl	800b06c <USBD_CtlError>
      break;
 800afec:	e000      	b.n	800aff0 <USBD_ClrFeature+0x3c>
      break;
 800afee:	bf00      	nop
  }
}
 800aff0:	bf00      	nop
 800aff2:	3708      	adds	r7, #8
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b084      	sub	sp, #16
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	781a      	ldrb	r2, [r3, #0]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	3301      	adds	r3, #1
 800b012:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	781a      	ldrb	r2, [r3, #0]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	3301      	adds	r3, #1
 800b020:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b022:	68f8      	ldr	r0, [r7, #12]
 800b024:	f7ff fa92 	bl	800a54c <SWAPBYTE>
 800b028:	4603      	mov	r3, r0
 800b02a:	461a      	mov	r2, r3
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	3301      	adds	r3, #1
 800b034:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	3301      	adds	r3, #1
 800b03a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f7ff fa85 	bl	800a54c <SWAPBYTE>
 800b042:	4603      	mov	r3, r0
 800b044:	461a      	mov	r2, r3
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	3301      	adds	r3, #1
 800b04e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	3301      	adds	r3, #1
 800b054:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b056:	68f8      	ldr	r0, [r7, #12]
 800b058:	f7ff fa78 	bl	800a54c <SWAPBYTE>
 800b05c:	4603      	mov	r3, r0
 800b05e:	461a      	mov	r2, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	80da      	strh	r2, [r3, #6]
}
 800b064:	bf00      	nop
 800b066:	3710      	adds	r7, #16
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b076:	2180      	movs	r1, #128	; 0x80
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 fd13 	bl	800baa4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b07e:	2100      	movs	r1, #0
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 fd0f 	bl	800baa4 <USBD_LL_StallEP>
}
 800b086:	bf00      	nop
 800b088:	3708      	adds	r7, #8
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}

0800b08e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b08e:	b580      	push	{r7, lr}
 800b090:	b086      	sub	sp, #24
 800b092:	af00      	add	r7, sp, #0
 800b094:	60f8      	str	r0, [r7, #12]
 800b096:	60b9      	str	r1, [r7, #8]
 800b098:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b09a:	2300      	movs	r3, #0
 800b09c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d036      	beq.n	800b112 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b0a8:	6938      	ldr	r0, [r7, #16]
 800b0aa:	f000 f836 	bl	800b11a <USBD_GetLen>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	005b      	lsls	r3, r3, #1
 800b0b6:	b29a      	uxth	r2, r3
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b0bc:	7dfb      	ldrb	r3, [r7, #23]
 800b0be:	68ba      	ldr	r2, [r7, #8]
 800b0c0:	4413      	add	r3, r2
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	7812      	ldrb	r2, [r2, #0]
 800b0c6:	701a      	strb	r2, [r3, #0]
  idx++;
 800b0c8:	7dfb      	ldrb	r3, [r7, #23]
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b0ce:	7dfb      	ldrb	r3, [r7, #23]
 800b0d0:	68ba      	ldr	r2, [r7, #8]
 800b0d2:	4413      	add	r3, r2
 800b0d4:	2203      	movs	r2, #3
 800b0d6:	701a      	strb	r2, [r3, #0]
  idx++;
 800b0d8:	7dfb      	ldrb	r3, [r7, #23]
 800b0da:	3301      	adds	r3, #1
 800b0dc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b0de:	e013      	b.n	800b108 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b0e0:	7dfb      	ldrb	r3, [r7, #23]
 800b0e2:	68ba      	ldr	r2, [r7, #8]
 800b0e4:	4413      	add	r3, r2
 800b0e6:	693a      	ldr	r2, [r7, #16]
 800b0e8:	7812      	ldrb	r2, [r2, #0]
 800b0ea:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	613b      	str	r3, [r7, #16]
    idx++;
 800b0f2:	7dfb      	ldrb	r3, [r7, #23]
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b0f8:	7dfb      	ldrb	r3, [r7, #23]
 800b0fa:	68ba      	ldr	r2, [r7, #8]
 800b0fc:	4413      	add	r3, r2
 800b0fe:	2200      	movs	r2, #0
 800b100:	701a      	strb	r2, [r3, #0]
    idx++;
 800b102:	7dfb      	ldrb	r3, [r7, #23]
 800b104:	3301      	adds	r3, #1
 800b106:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d1e7      	bne.n	800b0e0 <USBD_GetString+0x52>
 800b110:	e000      	b.n	800b114 <USBD_GetString+0x86>
    return;
 800b112:	bf00      	nop
  }
}
 800b114:	3718      	adds	r7, #24
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}

0800b11a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b11a:	b480      	push	{r7}
 800b11c:	b085      	sub	sp, #20
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b122:	2300      	movs	r3, #0
 800b124:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b12a:	e005      	b.n	800b138 <USBD_GetLen+0x1e>
  {
    len++;
 800b12c:	7bfb      	ldrb	r3, [r7, #15]
 800b12e:	3301      	adds	r3, #1
 800b130:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	3301      	adds	r3, #1
 800b136:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d1f5      	bne.n	800b12c <USBD_GetLen+0x12>
  }

  return len;
 800b140:	7bfb      	ldrb	r3, [r7, #15]
}
 800b142:	4618      	mov	r0, r3
 800b144:	3714      	adds	r7, #20
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr

0800b14e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b14e:	b580      	push	{r7, lr}
 800b150:	b084      	sub	sp, #16
 800b152:	af00      	add	r7, sp, #0
 800b154:	60f8      	str	r0, [r7, #12]
 800b156:	60b9      	str	r1, [r7, #8]
 800b158:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	2202      	movs	r2, #2
 800b15e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	68ba      	ldr	r2, [r7, #8]
 800b172:	2100      	movs	r1, #0
 800b174:	68f8      	ldr	r0, [r7, #12]
 800b176:	f000 fd1e 	bl	800bbb6 <USBD_LL_Transmit>

  return USBD_OK;
 800b17a:	2300      	movs	r3, #0
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3710      	adds	r7, #16
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	af00      	add	r7, sp, #0
 800b18a:	60f8      	str	r0, [r7, #12]
 800b18c:	60b9      	str	r1, [r7, #8]
 800b18e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	68ba      	ldr	r2, [r7, #8]
 800b194:	2100      	movs	r1, #0
 800b196:	68f8      	ldr	r0, [r7, #12]
 800b198:	f000 fd0d 	bl	800bbb6 <USBD_LL_Transmit>

  return USBD_OK;
 800b19c:	2300      	movs	r3, #0
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3710      	adds	r7, #16
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}

0800b1a6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b1a6:	b580      	push	{r7, lr}
 800b1a8:	b084      	sub	sp, #16
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	60f8      	str	r0, [r7, #12]
 800b1ae:	60b9      	str	r1, [r7, #8]
 800b1b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2203      	movs	r2, #3
 800b1b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	68ba      	ldr	r2, [r7, #8]
 800b1ce:	2100      	movs	r1, #0
 800b1d0:	68f8      	ldr	r0, [r7, #12]
 800b1d2:	f000 fd11 	bl	800bbf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1d6:	2300      	movs	r3, #0
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	60b9      	str	r1, [r7, #8]
 800b1ea:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	68ba      	ldr	r2, [r7, #8]
 800b1f0:	2100      	movs	r1, #0
 800b1f2:	68f8      	ldr	r0, [r7, #12]
 800b1f4:	f000 fd00 	bl	800bbf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1f8:	2300      	movs	r3, #0
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3710      	adds	r7, #16
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}

0800b202 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b202:	b580      	push	{r7, lr}
 800b204:	b082      	sub	sp, #8
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2204      	movs	r2, #4
 800b20e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b212:	2300      	movs	r3, #0
 800b214:	2200      	movs	r2, #0
 800b216:	2100      	movs	r1, #0
 800b218:	6878      	ldr	r0, [r7, #4]
 800b21a:	f000 fccc 	bl	800bbb6 <USBD_LL_Transmit>

  return USBD_OK;
 800b21e:	2300      	movs	r3, #0
}
 800b220:	4618      	mov	r0, r3
 800b222:	3708      	adds	r7, #8
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b082      	sub	sp, #8
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2205      	movs	r2, #5
 800b234:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b238:	2300      	movs	r3, #0
 800b23a:	2200      	movs	r2, #0
 800b23c:	2100      	movs	r1, #0
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 fcda 	bl	800bbf8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b244:	2300      	movs	r3, #0
}
 800b246:	4618      	mov	r0, r3
 800b248:	3708      	adds	r7, #8
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
	...

0800b250 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b254:	2200      	movs	r2, #0
 800b256:	4912      	ldr	r1, [pc, #72]	; (800b2a0 <MX_USB_Device_Init+0x50>)
 800b258:	4812      	ldr	r0, [pc, #72]	; (800b2a4 <MX_USB_Device_Init+0x54>)
 800b25a:	f7fe fed9 	bl	800a010 <USBD_Init>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b00      	cmp	r3, #0
 800b262:	d001      	beq.n	800b268 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b264:	f7f5 faca 	bl	80007fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b268:	490f      	ldr	r1, [pc, #60]	; (800b2a8 <MX_USB_Device_Init+0x58>)
 800b26a:	480e      	ldr	r0, [pc, #56]	; (800b2a4 <MX_USB_Device_Init+0x54>)
 800b26c:	f7fe ff00 	bl	800a070 <USBD_RegisterClass>
 800b270:	4603      	mov	r3, r0
 800b272:	2b00      	cmp	r3, #0
 800b274:	d001      	beq.n	800b27a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b276:	f7f5 fac1 	bl	80007fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b27a:	490c      	ldr	r1, [pc, #48]	; (800b2ac <MX_USB_Device_Init+0x5c>)
 800b27c:	4809      	ldr	r0, [pc, #36]	; (800b2a4 <MX_USB_Device_Init+0x54>)
 800b27e:	f7fe fe51 	bl	8009f24 <USBD_CDC_RegisterInterface>
 800b282:	4603      	mov	r3, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d001      	beq.n	800b28c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b288:	f7f5 fab8 	bl	80007fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b28c:	4805      	ldr	r0, [pc, #20]	; (800b2a4 <MX_USB_Device_Init+0x54>)
 800b28e:	f7fe ff16 	bl	800a0be <USBD_Start>
 800b292:	4603      	mov	r3, r0
 800b294:	2b00      	cmp	r3, #0
 800b296:	d001      	beq.n	800b29c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b298:	f7f5 fab0 	bl	80007fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b29c:	bf00      	nop
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	20000158 	.word	0x20000158
 800b2a4:	20000454 	.word	0x20000454
 800b2a8:	20000038 	.word	0x20000038
 800b2ac:	20000144 	.word	0x20000144

0800b2b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	4905      	ldr	r1, [pc, #20]	; (800b2cc <CDC_Init_FS+0x1c>)
 800b2b8:	4805      	ldr	r0, [pc, #20]	; (800b2d0 <CDC_Init_FS+0x20>)
 800b2ba:	f7fe fe48 	bl	8009f4e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b2be:	4905      	ldr	r1, [pc, #20]	; (800b2d4 <CDC_Init_FS+0x24>)
 800b2c0:	4803      	ldr	r0, [pc, #12]	; (800b2d0 <CDC_Init_FS+0x20>)
 800b2c2:	f7fe fe62 	bl	8009f8a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b2c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	bd80      	pop	{r7, pc}
 800b2cc:	20001f50 	.word	0x20001f50
 800b2d0:	20000454 	.word	0x20000454
 800b2d4:	20001750 	.word	0x20001750

0800b2d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b2dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b085      	sub	sp, #20
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	6039      	str	r1, [r7, #0]
 800b2f2:	71fb      	strb	r3, [r7, #7]
 800b2f4:	4613      	mov	r3, r2
 800b2f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef *)pbuf;
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	60fb      	str	r3, [r7, #12]

  switch(cmd)
 800b2fc:	79fb      	ldrb	r3, [r7, #7]
 800b2fe:	2b23      	cmp	r3, #35	; 0x23
 800b300:	f200 80af 	bhi.w	800b462 <CDC_Control_FS+0x17a>
 800b304:	a201      	add	r2, pc, #4	; (adr r2, 800b30c <CDC_Control_FS+0x24>)
 800b306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b30a:	bf00      	nop
 800b30c:	0800b463 	.word	0x0800b463
 800b310:	0800b463 	.word	0x0800b463
 800b314:	0800b463 	.word	0x0800b463
 800b318:	0800b463 	.word	0x0800b463
 800b31c:	0800b463 	.word	0x0800b463
 800b320:	0800b463 	.word	0x0800b463
 800b324:	0800b463 	.word	0x0800b463
 800b328:	0800b463 	.word	0x0800b463
 800b32c:	0800b463 	.word	0x0800b463
 800b330:	0800b463 	.word	0x0800b463
 800b334:	0800b463 	.word	0x0800b463
 800b338:	0800b463 	.word	0x0800b463
 800b33c:	0800b463 	.word	0x0800b463
 800b340:	0800b463 	.word	0x0800b463
 800b344:	0800b463 	.word	0x0800b463
 800b348:	0800b463 	.word	0x0800b463
 800b34c:	0800b463 	.word	0x0800b463
 800b350:	0800b463 	.word	0x0800b463
 800b354:	0800b463 	.word	0x0800b463
 800b358:	0800b463 	.word	0x0800b463
 800b35c:	0800b463 	.word	0x0800b463
 800b360:	0800b463 	.word	0x0800b463
 800b364:	0800b463 	.word	0x0800b463
 800b368:	0800b463 	.word	0x0800b463
 800b36c:	0800b463 	.word	0x0800b463
 800b370:	0800b463 	.word	0x0800b463
 800b374:	0800b463 	.word	0x0800b463
 800b378:	0800b463 	.word	0x0800b463
 800b37c:	0800b463 	.word	0x0800b463
 800b380:	0800b463 	.word	0x0800b463
 800b384:	0800b463 	.word	0x0800b463
 800b388:	0800b463 	.word	0x0800b463
 800b38c:	0800b39d 	.word	0x0800b39d
 800b390:	0800b3f7 	.word	0x0800b3f7
 800b394:	0800b44b 	.word	0x0800b44b
 800b398:	0800b463 	.word	0x0800b463
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate   = (uint32_t)(pbuf[0]);
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	4b34      	ldr	r3, [pc, #208]	; (800b474 <CDC_Control_FS+0x18c>)
 800b3a4:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[1]<<8);
 800b3a6:	4b33      	ldr	r3, [pc, #204]	; (800b474 <CDC_Control_FS+0x18c>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	683a      	ldr	r2, [r7, #0]
 800b3ac:	3201      	adds	r2, #1
 800b3ae:	7812      	ldrb	r2, [r2, #0]
 800b3b0:	0212      	lsls	r2, r2, #8
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	4a2f      	ldr	r2, [pc, #188]	; (800b474 <CDC_Control_FS+0x18c>)
 800b3b6:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[2]<<16);
 800b3b8:	4b2e      	ldr	r3, [pc, #184]	; (800b474 <CDC_Control_FS+0x18c>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	683a      	ldr	r2, [r7, #0]
 800b3be:	3202      	adds	r2, #2
 800b3c0:	7812      	ldrb	r2, [r2, #0]
 800b3c2:	0412      	lsls	r2, r2, #16
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	4a2b      	ldr	r2, [pc, #172]	; (800b474 <CDC_Control_FS+0x18c>)
 800b3c8:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[3]<<24);
 800b3ca:	4b2a      	ldr	r3, [pc, #168]	; (800b474 <CDC_Control_FS+0x18c>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	683a      	ldr	r2, [r7, #0]
 800b3d0:	3203      	adds	r2, #3
 800b3d2:	7812      	ldrb	r2, [r2, #0]
 800b3d4:	0612      	lsls	r2, r2, #24
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	4a26      	ldr	r2, [pc, #152]	; (800b474 <CDC_Control_FS+0x18c>)
 800b3da:	6013      	str	r3, [r2, #0]
      LineCoding.format    = pbuf[4];
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	791a      	ldrb	r2, [r3, #4]
 800b3e0:	4b24      	ldr	r3, [pc, #144]	; (800b474 <CDC_Control_FS+0x18c>)
 800b3e2:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype= pbuf[5];
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	795a      	ldrb	r2, [r3, #5]
 800b3e8:	4b22      	ldr	r3, [pc, #136]	; (800b474 <CDC_Control_FS+0x18c>)
 800b3ea:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype  = pbuf[6];
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	799a      	ldrb	r2, [r3, #6]
 800b3f0:	4b20      	ldr	r3, [pc, #128]	; (800b474 <CDC_Control_FS+0x18c>)
 800b3f2:	719a      	strb	r2, [r3, #6]

    break;
 800b3f4:	e036      	b.n	800b464 <CDC_Control_FS+0x17c>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800b3f6:	4b1f      	ldr	r3, [pc, #124]	; (800b474 <CDC_Control_FS+0x18c>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	b2da      	uxtb	r2, r3
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 800b400:	4b1c      	ldr	r3, [pc, #112]	; (800b474 <CDC_Control_FS+0x18c>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	0a1a      	lsrs	r2, r3, #8
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	3301      	adds	r3, #1
 800b40a:	b2d2      	uxtb	r2, r2
 800b40c:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 800b40e:	4b19      	ldr	r3, [pc, #100]	; (800b474 <CDC_Control_FS+0x18c>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	0c1a      	lsrs	r2, r3, #16
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	3302      	adds	r3, #2
 800b418:	b2d2      	uxtb	r2, r2
 800b41a:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 800b41c:	4b15      	ldr	r3, [pc, #84]	; (800b474 <CDC_Control_FS+0x18c>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	0e1a      	lsrs	r2, r3, #24
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	3303      	adds	r3, #3
 800b426:	b2d2      	uxtb	r2, r2
 800b428:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	3304      	adds	r3, #4
 800b42e:	4a11      	ldr	r2, [pc, #68]	; (800b474 <CDC_Control_FS+0x18c>)
 800b430:	7912      	ldrb	r2, [r2, #4]
 800b432:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	3305      	adds	r3, #5
 800b438:	4a0e      	ldr	r2, [pc, #56]	; (800b474 <CDC_Control_FS+0x18c>)
 800b43a:	7952      	ldrb	r2, [r2, #5]
 800b43c:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	3306      	adds	r3, #6
 800b442:	4a0c      	ldr	r2, [pc, #48]	; (800b474 <CDC_Control_FS+0x18c>)
 800b444:	7992      	ldrb	r2, [r2, #6]
 800b446:	701a      	strb	r2, [r3, #0]

    break;
 800b448:	e00c      	b.n	800b464 <CDC_Control_FS+0x17c>

    case CDC_SET_CONTROL_LINE_STATE:
      is_opened = req->wValue & 0x01;   // 0 bit: DTR, 1 bit: RTS
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	885b      	ldrh	r3, [r3, #2]
 800b44e:	f003 0301 	and.w	r3, r3, #1
 800b452:	2b00      	cmp	r3, #0
 800b454:	bf14      	ite	ne
 800b456:	2301      	movne	r3, #1
 800b458:	2300      	moveq	r3, #0
 800b45a:	b2da      	uxtb	r2, r3
 800b45c:	4b06      	ldr	r3, [pc, #24]	; (800b478 <CDC_Control_FS+0x190>)
 800b45e:	701a      	strb	r2, [r3, #0]

    break;
 800b460:	e000      	b.n	800b464 <CDC_Control_FS+0x17c>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b462:	bf00      	nop
  }

  return (USBD_OK);
 800b464:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b466:	4618      	mov	r0, r3
 800b468:	3714      	adds	r7, #20
 800b46a:	46bd      	mov	sp, r7
 800b46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b470:	4770      	bx	lr
 800b472:	bf00      	nop
 800b474:	2000013c 	.word	0x2000013c
 800b478:	2000174c 	.word	0x2000174c

0800b47c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b47c:	b590      	push	{r4, r7, lr}
 800b47e:	b085      	sub	sp, #20
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  qbufferWrite(&q_rx, Buf, *Len);
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	461a      	mov	r2, r3
 800b48c:	6879      	ldr	r1, [r7, #4]
 800b48e:	480f      	ldr	r0, [pc, #60]	; (800b4cc <CDC_Receive_FS+0x50>)
 800b490:	f7f5 faad 	bl	80009ee <qbufferWrite>


  uint32_t buf_len;

  buf_len = (q_rx.len - qbufferAvailable(&q_rx)) - 1;
 800b494:	4b0d      	ldr	r3, [pc, #52]	; (800b4cc <CDC_Receive_FS+0x50>)
 800b496:	689c      	ldr	r4, [r3, #8]
 800b498:	480c      	ldr	r0, [pc, #48]	; (800b4cc <CDC_Receive_FS+0x50>)
 800b49a:	f7f5 fb5c 	bl	8000b56 <qbufferAvailable>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	1ae3      	subs	r3, r4, r3
 800b4a2:	3b01      	subs	r3, #1
 800b4a4:	60fb      	str	r3, [r7, #12]

  if (buf_len >= CDC_DATA_FS_MAX_PACKET_SIZE)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2b3f      	cmp	r3, #63	; 0x3f
 800b4aa:	d907      	bls.n	800b4bc <CDC_Receive_FS+0x40>
  {
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b4ac:	6879      	ldr	r1, [r7, #4]
 800b4ae:	4808      	ldr	r0, [pc, #32]	; (800b4d0 <CDC_Receive_FS+0x54>)
 800b4b0:	f7fe fd6b 	bl	8009f8a <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b4b4:	4806      	ldr	r0, [pc, #24]	; (800b4d0 <CDC_Receive_FS+0x54>)
 800b4b6:	f7fe fd81 	bl	8009fbc <USBD_CDC_ReceivePacket>
 800b4ba:	e002      	b.n	800b4c2 <CDC_Receive_FS+0x46>
  }
  else
  {
    is_rx_full = true;
 800b4bc:	4b05      	ldr	r3, [pc, #20]	; (800b4d4 <CDC_Receive_FS+0x58>)
 800b4be:	2201      	movs	r2, #1
 800b4c0:	701a      	strb	r2, [r3, #0]
  }

    return (USBD_OK);
 800b4c2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3714      	adds	r7, #20
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd90      	pop	{r4, r7, pc}
 800b4cc:	20000724 	.word	0x20000724
 800b4d0:	20000454 	.word	0x20000454
 800b4d4:	2000174d 	.word	0x2000174d

0800b4d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b087      	sub	sp, #28
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	60f8      	str	r0, [r7, #12]
 800b4e0:	60b9      	str	r1, [r7, #8]
 800b4e2:	4613      	mov	r3, r2
 800b4e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b4ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	371c      	adds	r7, #28
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr
	...

0800b4fc <cdcIfInit>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
bool cdcIfInit(void)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	af00      	add	r7, sp, #0
  is_opened = false;
 800b500:	4b08      	ldr	r3, [pc, #32]	; (800b524 <cdcIfInit+0x28>)
 800b502:	2200      	movs	r2, #0
 800b504:	701a      	strb	r2, [r3, #0]
  qbufferCreate(&q_rx, q_rx_buf, 2048);
 800b506:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b50a:	4907      	ldr	r1, [pc, #28]	; (800b528 <cdcIfInit+0x2c>)
 800b50c:	4807      	ldr	r0, [pc, #28]	; (800b52c <cdcIfInit+0x30>)
 800b50e:	f7f5 fa50 	bl	80009b2 <qbufferCreate>
  qbufferCreate(&q_tx, q_tx_buf, 2048);
 800b512:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b516:	4906      	ldr	r1, [pc, #24]	; (800b530 <cdcIfInit+0x34>)
 800b518:	4806      	ldr	r0, [pc, #24]	; (800b534 <cdcIfInit+0x38>)
 800b51a:	f7f5 fa4a 	bl	80009b2 <qbufferCreate>

  return true;
 800b51e:	2301      	movs	r3, #1
}
 800b520:	4618      	mov	r0, r3
 800b522:	bd80      	pop	{r7, pc}
 800b524:	2000174c 	.word	0x2000174c
 800b528:	2000074c 	.word	0x2000074c
 800b52c:	20000724 	.word	0x20000724
 800b530:	20000f4c 	.word	0x20000f4c
 800b534:	20000738 	.word	0x20000738

0800b538 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b538:	b480      	push	{r7}
 800b53a:	b083      	sub	sp, #12
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	4603      	mov	r3, r0
 800b540:	6039      	str	r1, [r7, #0]
 800b542:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	2212      	movs	r2, #18
 800b548:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b54a:	4b03      	ldr	r3, [pc, #12]	; (800b558 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	370c      	adds	r7, #12
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr
 800b558:	20000178 	.word	0x20000178

0800b55c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
 800b562:	4603      	mov	r3, r0
 800b564:	6039      	str	r1, [r7, #0]
 800b566:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	2204      	movs	r2, #4
 800b56c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b56e:	4b03      	ldr	r3, [pc, #12]	; (800b57c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b570:	4618      	mov	r0, r3
 800b572:	370c      	adds	r7, #12
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr
 800b57c:	2000018c 	.word	0x2000018c

0800b580 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b082      	sub	sp, #8
 800b584:	af00      	add	r7, sp, #0
 800b586:	4603      	mov	r3, r0
 800b588:	6039      	str	r1, [r7, #0]
 800b58a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b58c:	79fb      	ldrb	r3, [r7, #7]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d105      	bne.n	800b59e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b592:	683a      	ldr	r2, [r7, #0]
 800b594:	4907      	ldr	r1, [pc, #28]	; (800b5b4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b596:	4808      	ldr	r0, [pc, #32]	; (800b5b8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b598:	f7ff fd79 	bl	800b08e <USBD_GetString>
 800b59c:	e004      	b.n	800b5a8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b59e:	683a      	ldr	r2, [r7, #0]
 800b5a0:	4904      	ldr	r1, [pc, #16]	; (800b5b4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b5a2:	4805      	ldr	r0, [pc, #20]	; (800b5b8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b5a4:	f7ff fd73 	bl	800b08e <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5a8:	4b02      	ldr	r3, [pc, #8]	; (800b5b4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3708      	adds	r7, #8
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	20002750 	.word	0x20002750
 800b5b8:	0800c740 	.word	0x0800c740

0800b5bc <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b082      	sub	sp, #8
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	6039      	str	r1, [r7, #0]
 800b5c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b5c8:	683a      	ldr	r2, [r7, #0]
 800b5ca:	4904      	ldr	r1, [pc, #16]	; (800b5dc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b5cc:	4804      	ldr	r0, [pc, #16]	; (800b5e0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b5ce:	f7ff fd5e 	bl	800b08e <USBD_GetString>
  return USBD_StrDesc;
 800b5d2:	4b02      	ldr	r3, [pc, #8]	; (800b5dc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3708      	adds	r7, #8
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}
 800b5dc:	20002750 	.word	0x20002750
 800b5e0:	0800c758 	.word	0x0800c758

0800b5e4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	6039      	str	r1, [r7, #0]
 800b5ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	221a      	movs	r2, #26
 800b5f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b5f6:	f000 f843 	bl	800b680 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b5fa:	4b02      	ldr	r3, [pc, #8]	; (800b604 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3708      	adds	r7, #8
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}
 800b604:	20000190 	.word	0x20000190

0800b608 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	4603      	mov	r3, r0
 800b610:	6039      	str	r1, [r7, #0]
 800b612:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b614:	79fb      	ldrb	r3, [r7, #7]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d105      	bne.n	800b626 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b61a:	683a      	ldr	r2, [r7, #0]
 800b61c:	4907      	ldr	r1, [pc, #28]	; (800b63c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b61e:	4808      	ldr	r0, [pc, #32]	; (800b640 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b620:	f7ff fd35 	bl	800b08e <USBD_GetString>
 800b624:	e004      	b.n	800b630 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b626:	683a      	ldr	r2, [r7, #0]
 800b628:	4904      	ldr	r1, [pc, #16]	; (800b63c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b62a:	4805      	ldr	r0, [pc, #20]	; (800b640 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b62c:	f7ff fd2f 	bl	800b08e <USBD_GetString>
  }
  return USBD_StrDesc;
 800b630:	4b02      	ldr	r3, [pc, #8]	; (800b63c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b632:	4618      	mov	r0, r3
 800b634:	3708      	adds	r7, #8
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	20002750 	.word	0x20002750
 800b640:	0800c76c 	.word	0x0800c76c

0800b644 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
 800b64a:	4603      	mov	r3, r0
 800b64c:	6039      	str	r1, [r7, #0]
 800b64e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b650:	79fb      	ldrb	r3, [r7, #7]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d105      	bne.n	800b662 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b656:	683a      	ldr	r2, [r7, #0]
 800b658:	4907      	ldr	r1, [pc, #28]	; (800b678 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b65a:	4808      	ldr	r0, [pc, #32]	; (800b67c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b65c:	f7ff fd17 	bl	800b08e <USBD_GetString>
 800b660:	e004      	b.n	800b66c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b662:	683a      	ldr	r2, [r7, #0]
 800b664:	4904      	ldr	r1, [pc, #16]	; (800b678 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b666:	4805      	ldr	r0, [pc, #20]	; (800b67c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b668:	f7ff fd11 	bl	800b08e <USBD_GetString>
  }
  return USBD_StrDesc;
 800b66c:	4b02      	ldr	r3, [pc, #8]	; (800b678 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3708      	adds	r7, #8
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	20002750 	.word	0x20002750
 800b67c:	0800c778 	.word	0x0800c778

0800b680 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b084      	sub	sp, #16
 800b684:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b686:	4b0f      	ldr	r3, [pc, #60]	; (800b6c4 <Get_SerialNum+0x44>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b68c:	4b0e      	ldr	r3, [pc, #56]	; (800b6c8 <Get_SerialNum+0x48>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b692:	4b0e      	ldr	r3, [pc, #56]	; (800b6cc <Get_SerialNum+0x4c>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b698:	68fa      	ldr	r2, [r7, #12]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	4413      	add	r3, r2
 800b69e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d009      	beq.n	800b6ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b6a6:	2208      	movs	r2, #8
 800b6a8:	4909      	ldr	r1, [pc, #36]	; (800b6d0 <Get_SerialNum+0x50>)
 800b6aa:	68f8      	ldr	r0, [r7, #12]
 800b6ac:	f000 f814 	bl	800b6d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b6b0:	2204      	movs	r2, #4
 800b6b2:	4908      	ldr	r1, [pc, #32]	; (800b6d4 <Get_SerialNum+0x54>)
 800b6b4:	68b8      	ldr	r0, [r7, #8]
 800b6b6:	f000 f80f 	bl	800b6d8 <IntToUnicode>
  }
}
 800b6ba:	bf00      	nop
 800b6bc:	3710      	adds	r7, #16
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	1fff7590 	.word	0x1fff7590
 800b6c8:	1fff7594 	.word	0x1fff7594
 800b6cc:	1fff7598 	.word	0x1fff7598
 800b6d0:	20000192 	.word	0x20000192
 800b6d4:	200001a2 	.word	0x200001a2

0800b6d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b087      	sub	sp, #28
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	60f8      	str	r0, [r7, #12]
 800b6e0:	60b9      	str	r1, [r7, #8]
 800b6e2:	4613      	mov	r3, r2
 800b6e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	75fb      	strb	r3, [r7, #23]
 800b6ee:	e027      	b.n	800b740 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	0f1b      	lsrs	r3, r3, #28
 800b6f4:	2b09      	cmp	r3, #9
 800b6f6:	d80b      	bhi.n	800b710 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	0f1b      	lsrs	r3, r3, #28
 800b6fc:	b2da      	uxtb	r2, r3
 800b6fe:	7dfb      	ldrb	r3, [r7, #23]
 800b700:	005b      	lsls	r3, r3, #1
 800b702:	4619      	mov	r1, r3
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	440b      	add	r3, r1
 800b708:	3230      	adds	r2, #48	; 0x30
 800b70a:	b2d2      	uxtb	r2, r2
 800b70c:	701a      	strb	r2, [r3, #0]
 800b70e:	e00a      	b.n	800b726 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	0f1b      	lsrs	r3, r3, #28
 800b714:	b2da      	uxtb	r2, r3
 800b716:	7dfb      	ldrb	r3, [r7, #23]
 800b718:	005b      	lsls	r3, r3, #1
 800b71a:	4619      	mov	r1, r3
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	440b      	add	r3, r1
 800b720:	3237      	adds	r2, #55	; 0x37
 800b722:	b2d2      	uxtb	r2, r2
 800b724:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	011b      	lsls	r3, r3, #4
 800b72a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b72c:	7dfb      	ldrb	r3, [r7, #23]
 800b72e:	005b      	lsls	r3, r3, #1
 800b730:	3301      	adds	r3, #1
 800b732:	68ba      	ldr	r2, [r7, #8]
 800b734:	4413      	add	r3, r2
 800b736:	2200      	movs	r2, #0
 800b738:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b73a:	7dfb      	ldrb	r3, [r7, #23]
 800b73c:	3301      	adds	r3, #1
 800b73e:	75fb      	strb	r3, [r7, #23]
 800b740:	7dfa      	ldrb	r2, [r7, #23]
 800b742:	79fb      	ldrb	r3, [r7, #7]
 800b744:	429a      	cmp	r2, r3
 800b746:	d3d3      	bcc.n	800b6f0 <IntToUnicode+0x18>
  }
}
 800b748:	bf00      	nop
 800b74a:	bf00      	nop
 800b74c:	371c      	adds	r7, #28
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr
	...

0800b758 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b098      	sub	sp, #96	; 0x60
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b760:	f107 030c 	add.w	r3, r7, #12
 800b764:	2254      	movs	r2, #84	; 0x54
 800b766:	2100      	movs	r1, #0
 800b768:	4618      	mov	r0, r3
 800b76a:	f000 fb3d 	bl	800bde8 <memset>
  if(pcdHandle->Instance==USB)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	4a15      	ldr	r2, [pc, #84]	; (800b7c8 <HAL_PCD_MspInit+0x70>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d123      	bne.n	800b7c0 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b778:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b77c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800b77e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b782:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b784:	f107 030c 	add.w	r3, r7, #12
 800b788:	4618      	mov	r0, r3
 800b78a:	f7f9 f915 	bl	80049b8 <HAL_RCCEx_PeriphCLKConfig>
 800b78e:	4603      	mov	r3, r0
 800b790:	2b00      	cmp	r3, #0
 800b792:	d001      	beq.n	800b798 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800b794:	f7f5 f832 	bl	80007fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b798:	4b0c      	ldr	r3, [pc, #48]	; (800b7cc <HAL_PCD_MspInit+0x74>)
 800b79a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b79c:	4a0b      	ldr	r2, [pc, #44]	; (800b7cc <HAL_PCD_MspInit+0x74>)
 800b79e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b7a2:	6593      	str	r3, [r2, #88]	; 0x58
 800b7a4:	4b09      	ldr	r3, [pc, #36]	; (800b7cc <HAL_PCD_MspInit+0x74>)
 800b7a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b7ac:	60bb      	str	r3, [r7, #8]
 800b7ae:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	2100      	movs	r1, #0
 800b7b4:	2014      	movs	r0, #20
 800b7b6:	f7f6 f900 	bl	80019ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b7ba:	2014      	movs	r0, #20
 800b7bc:	f7f6 f917 	bl	80019ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b7c0:	bf00      	nop
 800b7c2:	3760      	adds	r7, #96	; 0x60
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}
 800b7c8:	40005c00 	.word	0x40005c00
 800b7cc:	40021000 	.word	0x40021000

0800b7d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b082      	sub	sp, #8
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	4610      	mov	r0, r2
 800b7e8:	f7fe fcb4 	bl	800a154 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b7ec:	bf00      	nop
 800b7ee:	3708      	adds	r7, #8
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800b806:	78fa      	ldrb	r2, [r7, #3]
 800b808:	6879      	ldr	r1, [r7, #4]
 800b80a:	4613      	mov	r3, r2
 800b80c:	009b      	lsls	r3, r3, #2
 800b80e:	4413      	add	r3, r2
 800b810:	00db      	lsls	r3, r3, #3
 800b812:	440b      	add	r3, r1
 800b814:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b818:	681a      	ldr	r2, [r3, #0]
 800b81a:	78fb      	ldrb	r3, [r7, #3]
 800b81c:	4619      	mov	r1, r3
 800b81e:	f7fe fcee 	bl	800a1fe <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b822:	bf00      	nop
 800b824:	3708      	adds	r7, #8
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}

0800b82a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b82a:	b580      	push	{r7, lr}
 800b82c:	b082      	sub	sp, #8
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
 800b832:	460b      	mov	r3, r1
 800b834:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800b83c:	78fa      	ldrb	r2, [r7, #3]
 800b83e:	6879      	ldr	r1, [r7, #4]
 800b840:	4613      	mov	r3, r2
 800b842:	009b      	lsls	r3, r3, #2
 800b844:	4413      	add	r3, r2
 800b846:	00db      	lsls	r3, r3, #3
 800b848:	440b      	add	r3, r1
 800b84a:	3324      	adds	r3, #36	; 0x24
 800b84c:	681a      	ldr	r2, [r3, #0]
 800b84e:	78fb      	ldrb	r3, [r7, #3]
 800b850:	4619      	mov	r1, r3
 800b852:	f7fe fd37 	bl	800a2c4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b856:	bf00      	nop
 800b858:	3708      	adds	r7, #8
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}

0800b85e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b85e:	b580      	push	{r7, lr}
 800b860:	b082      	sub	sp, #8
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7fe fe4b 	bl	800a508 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b872:	bf00      	nop
 800b874:	3708      	adds	r7, #8
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}

0800b87a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b87a:	b580      	push	{r7, lr}
 800b87c:	b084      	sub	sp, #16
 800b87e:	af00      	add	r7, sp, #0
 800b880:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b882:	2301      	movs	r3, #1
 800b884:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	795b      	ldrb	r3, [r3, #5]
 800b88a:	2b02      	cmp	r3, #2
 800b88c:	d001      	beq.n	800b892 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b88e:	f7f4 ffb5 	bl	80007fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b898:	7bfa      	ldrb	r2, [r7, #15]
 800b89a:	4611      	mov	r1, r2
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7fe fdf5 	bl	800a48c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7fe fda1 	bl	800a3f0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b8ae:	bf00      	nop
 800b8b0:	3710      	adds	r7, #16
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
	...

0800b8b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b082      	sub	sp, #8
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7fe fdf0 	bl	800a4ac <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	7a5b      	ldrb	r3, [r3, #9]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d005      	beq.n	800b8e0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b8d4:	4b04      	ldr	r3, [pc, #16]	; (800b8e8 <HAL_PCD_SuspendCallback+0x30>)
 800b8d6:	691b      	ldr	r3, [r3, #16]
 800b8d8:	4a03      	ldr	r2, [pc, #12]	; (800b8e8 <HAL_PCD_SuspendCallback+0x30>)
 800b8da:	f043 0306 	orr.w	r3, r3, #6
 800b8de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b8e0:	bf00      	nop
 800b8e2:	3708      	adds	r7, #8
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	e000ed00 	.word	0xe000ed00

0800b8ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	7a5b      	ldrb	r3, [r3, #9]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d007      	beq.n	800b90c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b8fc:	4b08      	ldr	r3, [pc, #32]	; (800b920 <HAL_PCD_ResumeCallback+0x34>)
 800b8fe:	691b      	ldr	r3, [r3, #16]
 800b900:	4a07      	ldr	r2, [pc, #28]	; (800b920 <HAL_PCD_ResumeCallback+0x34>)
 800b902:	f023 0306 	bic.w	r3, r3, #6
 800b906:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b908:	f000 f9f8 	bl	800bcfc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b912:	4618      	mov	r0, r3
 800b914:	f7fe fde0 	bl	800a4d8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b918:	bf00      	nop
 800b91a:	3708      	adds	r7, #8
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	e000ed00 	.word	0xe000ed00

0800b924 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b92c:	4a2b      	ldr	r2, [pc, #172]	; (800b9dc <USBD_LL_Init+0xb8>)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	4a29      	ldr	r2, [pc, #164]	; (800b9dc <USBD_LL_Init+0xb8>)
 800b938:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800b93c:	4b27      	ldr	r3, [pc, #156]	; (800b9dc <USBD_LL_Init+0xb8>)
 800b93e:	4a28      	ldr	r2, [pc, #160]	; (800b9e0 <USBD_LL_Init+0xbc>)
 800b940:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b942:	4b26      	ldr	r3, [pc, #152]	; (800b9dc <USBD_LL_Init+0xb8>)
 800b944:	2208      	movs	r2, #8
 800b946:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b948:	4b24      	ldr	r3, [pc, #144]	; (800b9dc <USBD_LL_Init+0xb8>)
 800b94a:	2202      	movs	r2, #2
 800b94c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b94e:	4b23      	ldr	r3, [pc, #140]	; (800b9dc <USBD_LL_Init+0xb8>)
 800b950:	2202      	movs	r2, #2
 800b952:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b954:	4b21      	ldr	r3, [pc, #132]	; (800b9dc <USBD_LL_Init+0xb8>)
 800b956:	2200      	movs	r2, #0
 800b958:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b95a:	4b20      	ldr	r3, [pc, #128]	; (800b9dc <USBD_LL_Init+0xb8>)
 800b95c:	2200      	movs	r2, #0
 800b95e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b960:	4b1e      	ldr	r3, [pc, #120]	; (800b9dc <USBD_LL_Init+0xb8>)
 800b962:	2200      	movs	r2, #0
 800b964:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b966:	4b1d      	ldr	r3, [pc, #116]	; (800b9dc <USBD_LL_Init+0xb8>)
 800b968:	2200      	movs	r2, #0
 800b96a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b96c:	481b      	ldr	r0, [pc, #108]	; (800b9dc <USBD_LL_Init+0xb8>)
 800b96e:	f7f6 fc8b 	bl	8002288 <HAL_PCD_Init>
 800b972:	4603      	mov	r3, r0
 800b974:	2b00      	cmp	r3, #0
 800b976:	d001      	beq.n	800b97c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800b978:	f7f4 ff40 	bl	80007fc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b982:	2318      	movs	r3, #24
 800b984:	2200      	movs	r2, #0
 800b986:	2100      	movs	r1, #0
 800b988:	f7f8 f945 	bl	8003c16 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b992:	2358      	movs	r3, #88	; 0x58
 800b994:	2200      	movs	r2, #0
 800b996:	2180      	movs	r1, #128	; 0x80
 800b998:	f7f8 f93d 	bl	8003c16 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b9a2:	23c0      	movs	r3, #192	; 0xc0
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	2181      	movs	r1, #129	; 0x81
 800b9a8:	f7f8 f935 	bl	8003c16 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b9b2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	2101      	movs	r1, #1
 800b9ba:	f7f8 f92c 	bl	8003c16 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b9c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	2182      	movs	r1, #130	; 0x82
 800b9cc:	f7f8 f923 	bl	8003c16 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b9d0:	2300      	movs	r3, #0
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3708      	adds	r7, #8
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	20002950 	.word	0x20002950
 800b9e0:	40005c00 	.word	0x40005c00

0800b9e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b084      	sub	sp, #16
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f7f6 fd12 	bl	8002424 <HAL_PCD_Start>
 800ba00:	4603      	mov	r3, r0
 800ba02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba04:	7bfb      	ldrb	r3, [r7, #15]
 800ba06:	4618      	mov	r0, r3
 800ba08:	f000 f97e 	bl	800bd08 <USBD_Get_USB_Status>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba10:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3710      	adds	r7, #16
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}

0800ba1a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ba1a:	b580      	push	{r7, lr}
 800ba1c:	b084      	sub	sp, #16
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
 800ba22:	4608      	mov	r0, r1
 800ba24:	4611      	mov	r1, r2
 800ba26:	461a      	mov	r2, r3
 800ba28:	4603      	mov	r3, r0
 800ba2a:	70fb      	strb	r3, [r7, #3]
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	70bb      	strb	r3, [r7, #2]
 800ba30:	4613      	mov	r3, r2
 800ba32:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba34:	2300      	movs	r3, #0
 800ba36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ba42:	78bb      	ldrb	r3, [r7, #2]
 800ba44:	883a      	ldrh	r2, [r7, #0]
 800ba46:	78f9      	ldrb	r1, [r7, #3]
 800ba48:	f7f6 fe59 	bl	80026fe <HAL_PCD_EP_Open>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba50:	7bfb      	ldrb	r3, [r7, #15]
 800ba52:	4618      	mov	r0, r3
 800ba54:	f000 f958 	bl	800bd08 <USBD_Get_USB_Status>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3710      	adds	r7, #16
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}

0800ba66 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba66:	b580      	push	{r7, lr}
 800ba68:	b084      	sub	sp, #16
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
 800ba6e:	460b      	mov	r3, r1
 800ba70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba72:	2300      	movs	r3, #0
 800ba74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba76:	2300      	movs	r3, #0
 800ba78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ba80:	78fa      	ldrb	r2, [r7, #3]
 800ba82:	4611      	mov	r1, r2
 800ba84:	4618      	mov	r0, r3
 800ba86:	f7f6 fe97 	bl	80027b8 <HAL_PCD_EP_Close>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba8e:	7bfb      	ldrb	r3, [r7, #15]
 800ba90:	4618      	mov	r0, r3
 800ba92:	f000 f939 	bl	800bd08 <USBD_Get_USB_Status>
 800ba96:	4603      	mov	r3, r0
 800ba98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3710      	adds	r7, #16
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b084      	sub	sp, #16
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	460b      	mov	r3, r1
 800baae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bab0:	2300      	movs	r3, #0
 800bab2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bab4:	2300      	movs	r3, #0
 800bab6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800babe:	78fa      	ldrb	r2, [r7, #3]
 800bac0:	4611      	mov	r1, r2
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7f6 ff40 	bl	8002948 <HAL_PCD_EP_SetStall>
 800bac8:	4603      	mov	r3, r0
 800baca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bacc:	7bfb      	ldrb	r3, [r7, #15]
 800bace:	4618      	mov	r0, r3
 800bad0:	f000 f91a 	bl	800bd08 <USBD_Get_USB_Status>
 800bad4:	4603      	mov	r3, r0
 800bad6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bad8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bada:	4618      	mov	r0, r3
 800badc:	3710      	adds	r7, #16
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}

0800bae2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bae2:	b580      	push	{r7, lr}
 800bae4:	b084      	sub	sp, #16
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	6078      	str	r0, [r7, #4]
 800baea:	460b      	mov	r3, r1
 800baec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baee:	2300      	movs	r3, #0
 800baf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800baf2:	2300      	movs	r3, #0
 800baf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bafc:	78fa      	ldrb	r2, [r7, #3]
 800bafe:	4611      	mov	r1, r2
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7f6 ff73 	bl	80029ec <HAL_PCD_EP_ClrStall>
 800bb06:	4603      	mov	r3, r0
 800bb08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb0a:	7bfb      	ldrb	r3, [r7, #15]
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f000 f8fb 	bl	800bd08 <USBD_Get_USB_Status>
 800bb12:	4603      	mov	r3, r0
 800bb14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb16:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3710      	adds	r7, #16
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b085      	sub	sp, #20
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	460b      	mov	r3, r1
 800bb2a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb32:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bb34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	da0b      	bge.n	800bb54 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bb3c:	78fb      	ldrb	r3, [r7, #3]
 800bb3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb42:	68f9      	ldr	r1, [r7, #12]
 800bb44:	4613      	mov	r3, r2
 800bb46:	009b      	lsls	r3, r3, #2
 800bb48:	4413      	add	r3, r2
 800bb4a:	00db      	lsls	r3, r3, #3
 800bb4c:	440b      	add	r3, r1
 800bb4e:	3312      	adds	r3, #18
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	e00b      	b.n	800bb6c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bb54:	78fb      	ldrb	r3, [r7, #3]
 800bb56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb5a:	68f9      	ldr	r1, [r7, #12]
 800bb5c:	4613      	mov	r3, r2
 800bb5e:	009b      	lsls	r3, r3, #2
 800bb60:	4413      	add	r3, r2
 800bb62:	00db      	lsls	r3, r3, #3
 800bb64:	440b      	add	r3, r1
 800bb66:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800bb6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3714      	adds	r7, #20
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr

0800bb78 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	460b      	mov	r3, r1
 800bb82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb84:	2300      	movs	r3, #0
 800bb86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb92:	78fa      	ldrb	r2, [r7, #3]
 800bb94:	4611      	mov	r1, r2
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7f6 fd8d 	bl	80026b6 <HAL_PCD_SetAddress>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bba0:	7bfb      	ldrb	r3, [r7, #15]
 800bba2:	4618      	mov	r0, r3
 800bba4:	f000 f8b0 	bl	800bd08 <USBD_Get_USB_Status>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbac:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3710      	adds	r7, #16
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}

0800bbb6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bbb6:	b580      	push	{r7, lr}
 800bbb8:	b086      	sub	sp, #24
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	60f8      	str	r0, [r7, #12]
 800bbbe:	607a      	str	r2, [r7, #4]
 800bbc0:	603b      	str	r3, [r7, #0]
 800bbc2:	460b      	mov	r3, r1
 800bbc4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bbd4:	7af9      	ldrb	r1, [r7, #11]
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	687a      	ldr	r2, [r7, #4]
 800bbda:	f7f6 fe7e 	bl	80028da <HAL_PCD_EP_Transmit>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbe2:	7dfb      	ldrb	r3, [r7, #23]
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f000 f88f 	bl	800bd08 <USBD_Get_USB_Status>
 800bbea:	4603      	mov	r3, r0
 800bbec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bbee:	7dbb      	ldrb	r3, [r7, #22]
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3718      	adds	r7, #24
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b086      	sub	sp, #24
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	607a      	str	r2, [r7, #4]
 800bc02:	603b      	str	r3, [r7, #0]
 800bc04:	460b      	mov	r3, r1
 800bc06:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bc16:	7af9      	ldrb	r1, [r7, #11]
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	f7f6 fe14 	bl	8002848 <HAL_PCD_EP_Receive>
 800bc20:	4603      	mov	r3, r0
 800bc22:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc24:	7dfb      	ldrb	r3, [r7, #23]
 800bc26:	4618      	mov	r0, r3
 800bc28:	f000 f86e 	bl	800bd08 <USBD_Get_USB_Status>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bc30:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3718      	adds	r7, #24
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}

0800bc3a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc3a:	b580      	push	{r7, lr}
 800bc3c:	b082      	sub	sp, #8
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
 800bc42:	460b      	mov	r3, r1
 800bc44:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc4c:	78fa      	ldrb	r2, [r7, #3]
 800bc4e:	4611      	mov	r1, r2
 800bc50:	4618      	mov	r0, r3
 800bc52:	f7f6 fe2a 	bl	80028aa <HAL_PCD_EP_GetRxCount>
 800bc56:	4603      	mov	r3, r0
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3708      	adds	r7, #8
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b082      	sub	sp, #8
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	460b      	mov	r3, r1
 800bc6a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800bc6c:	78fb      	ldrb	r3, [r7, #3]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d002      	beq.n	800bc78 <HAL_PCDEx_LPM_Callback+0x18>
 800bc72:	2b01      	cmp	r3, #1
 800bc74:	d013      	beq.n	800bc9e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800bc76:	e023      	b.n	800bcc0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	7a5b      	ldrb	r3, [r3, #9]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d007      	beq.n	800bc90 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bc80:	f000 f83c 	bl	800bcfc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc84:	4b10      	ldr	r3, [pc, #64]	; (800bcc8 <HAL_PCDEx_LPM_Callback+0x68>)
 800bc86:	691b      	ldr	r3, [r3, #16]
 800bc88:	4a0f      	ldr	r2, [pc, #60]	; (800bcc8 <HAL_PCDEx_LPM_Callback+0x68>)
 800bc8a:	f023 0306 	bic.w	r3, r3, #6
 800bc8e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7fe fc1e 	bl	800a4d8 <USBD_LL_Resume>
    break;
 800bc9c:	e010      	b.n	800bcc0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bca4:	4618      	mov	r0, r3
 800bca6:	f7fe fc01 	bl	800a4ac <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	7a5b      	ldrb	r3, [r3, #9]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d005      	beq.n	800bcbe <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bcb2:	4b05      	ldr	r3, [pc, #20]	; (800bcc8 <HAL_PCDEx_LPM_Callback+0x68>)
 800bcb4:	691b      	ldr	r3, [r3, #16]
 800bcb6:	4a04      	ldr	r2, [pc, #16]	; (800bcc8 <HAL_PCDEx_LPM_Callback+0x68>)
 800bcb8:	f043 0306 	orr.w	r3, r3, #6
 800bcbc:	6113      	str	r3, [r2, #16]
    break;
 800bcbe:	bf00      	nop
}
 800bcc0:	bf00      	nop
 800bcc2:	3708      	adds	r7, #8
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}
 800bcc8:	e000ed00 	.word	0xe000ed00

0800bccc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b083      	sub	sp, #12
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bcd4:	4b03      	ldr	r3, [pc, #12]	; (800bce4 <USBD_static_malloc+0x18>)
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	370c      	adds	r7, #12
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr
 800bce2:	bf00      	nop
 800bce4:	20002c2c 	.word	0x20002c2c

0800bce8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]

}
 800bcf0:	bf00      	nop
 800bcf2:	370c      	adds	r7, #12
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr

0800bcfc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bd00:	f7f4 fd22 	bl	8000748 <SystemClock_Config>
}
 800bd04:	bf00      	nop
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b085      	sub	sp, #20
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	4603      	mov	r3, r0
 800bd10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd12:	2300      	movs	r3, #0
 800bd14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bd16:	79fb      	ldrb	r3, [r7, #7]
 800bd18:	2b03      	cmp	r3, #3
 800bd1a:	d817      	bhi.n	800bd4c <USBD_Get_USB_Status+0x44>
 800bd1c:	a201      	add	r2, pc, #4	; (adr r2, 800bd24 <USBD_Get_USB_Status+0x1c>)
 800bd1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd22:	bf00      	nop
 800bd24:	0800bd35 	.word	0x0800bd35
 800bd28:	0800bd3b 	.word	0x0800bd3b
 800bd2c:	0800bd41 	.word	0x0800bd41
 800bd30:	0800bd47 	.word	0x0800bd47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bd34:	2300      	movs	r3, #0
 800bd36:	73fb      	strb	r3, [r7, #15]
    break;
 800bd38:	e00b      	b.n	800bd52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bd3a:	2303      	movs	r3, #3
 800bd3c:	73fb      	strb	r3, [r7, #15]
    break;
 800bd3e:	e008      	b.n	800bd52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bd40:	2301      	movs	r3, #1
 800bd42:	73fb      	strb	r3, [r7, #15]
    break;
 800bd44:	e005      	b.n	800bd52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bd46:	2303      	movs	r3, #3
 800bd48:	73fb      	strb	r3, [r7, #15]
    break;
 800bd4a:	e002      	b.n	800bd52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bd4c:	2303      	movs	r3, #3
 800bd4e:	73fb      	strb	r3, [r7, #15]
    break;
 800bd50:	bf00      	nop
  }
  return usb_status;
 800bd52:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3714      	adds	r7, #20
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <main>:


#include "main.h"

int main(void)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	af00      	add	r7, sp, #0
  hwInit();
 800bd64:	f7f5 fc2e 	bl	80015c4 <hwInit>
  apInit();
 800bd68:	f7f4 fc28 	bl	80005bc <apInit>

  apMain();
 800bd6c:	f7f4 fc2e 	bl	80005cc <apMain>
 800bd70:	2300      	movs	r3, #0
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	bd80      	pop	{r7, pc}

0800bd76 <_vsniprintf_r>:
 800bd76:	b530      	push	{r4, r5, lr}
 800bd78:	4614      	mov	r4, r2
 800bd7a:	2c00      	cmp	r4, #0
 800bd7c:	b09b      	sub	sp, #108	; 0x6c
 800bd7e:	4605      	mov	r5, r0
 800bd80:	461a      	mov	r2, r3
 800bd82:	da05      	bge.n	800bd90 <_vsniprintf_r+0x1a>
 800bd84:	238b      	movs	r3, #139	; 0x8b
 800bd86:	6003      	str	r3, [r0, #0]
 800bd88:	f04f 30ff 	mov.w	r0, #4294967295
 800bd8c:	b01b      	add	sp, #108	; 0x6c
 800bd8e:	bd30      	pop	{r4, r5, pc}
 800bd90:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bd94:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bd98:	bf14      	ite	ne
 800bd9a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bd9e:	4623      	moveq	r3, r4
 800bda0:	9302      	str	r3, [sp, #8]
 800bda2:	9305      	str	r3, [sp, #20]
 800bda4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bda8:	9100      	str	r1, [sp, #0]
 800bdaa:	9104      	str	r1, [sp, #16]
 800bdac:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bdb0:	4669      	mov	r1, sp
 800bdb2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bdb4:	f000 f99e 	bl	800c0f4 <_svfiprintf_r>
 800bdb8:	1c43      	adds	r3, r0, #1
 800bdba:	bfbc      	itt	lt
 800bdbc:	238b      	movlt	r3, #139	; 0x8b
 800bdbe:	602b      	strlt	r3, [r5, #0]
 800bdc0:	2c00      	cmp	r4, #0
 800bdc2:	d0e3      	beq.n	800bd8c <_vsniprintf_r+0x16>
 800bdc4:	9b00      	ldr	r3, [sp, #0]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	701a      	strb	r2, [r3, #0]
 800bdca:	e7df      	b.n	800bd8c <_vsniprintf_r+0x16>

0800bdcc <vsniprintf>:
 800bdcc:	b507      	push	{r0, r1, r2, lr}
 800bdce:	9300      	str	r3, [sp, #0]
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	460a      	mov	r2, r1
 800bdd4:	4601      	mov	r1, r0
 800bdd6:	4803      	ldr	r0, [pc, #12]	; (800bde4 <vsniprintf+0x18>)
 800bdd8:	6800      	ldr	r0, [r0, #0]
 800bdda:	f7ff ffcc 	bl	800bd76 <_vsniprintf_r>
 800bdde:	b003      	add	sp, #12
 800bde0:	f85d fb04 	ldr.w	pc, [sp], #4
 800bde4:	200001f8 	.word	0x200001f8

0800bde8 <memset>:
 800bde8:	4402      	add	r2, r0
 800bdea:	4603      	mov	r3, r0
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d100      	bne.n	800bdf2 <memset+0xa>
 800bdf0:	4770      	bx	lr
 800bdf2:	f803 1b01 	strb.w	r1, [r3], #1
 800bdf6:	e7f9      	b.n	800bdec <memset+0x4>

0800bdf8 <__errno>:
 800bdf8:	4b01      	ldr	r3, [pc, #4]	; (800be00 <__errno+0x8>)
 800bdfa:	6818      	ldr	r0, [r3, #0]
 800bdfc:	4770      	bx	lr
 800bdfe:	bf00      	nop
 800be00:	200001f8 	.word	0x200001f8

0800be04 <__libc_init_array>:
 800be04:	b570      	push	{r4, r5, r6, lr}
 800be06:	4d0d      	ldr	r5, [pc, #52]	; (800be3c <__libc_init_array+0x38>)
 800be08:	4c0d      	ldr	r4, [pc, #52]	; (800be40 <__libc_init_array+0x3c>)
 800be0a:	1b64      	subs	r4, r4, r5
 800be0c:	10a4      	asrs	r4, r4, #2
 800be0e:	2600      	movs	r6, #0
 800be10:	42a6      	cmp	r6, r4
 800be12:	d109      	bne.n	800be28 <__libc_init_array+0x24>
 800be14:	4d0b      	ldr	r5, [pc, #44]	; (800be44 <__libc_init_array+0x40>)
 800be16:	4c0c      	ldr	r4, [pc, #48]	; (800be48 <__libc_init_array+0x44>)
 800be18:	f000 fc6a 	bl	800c6f0 <_init>
 800be1c:	1b64      	subs	r4, r4, r5
 800be1e:	10a4      	asrs	r4, r4, #2
 800be20:	2600      	movs	r6, #0
 800be22:	42a6      	cmp	r6, r4
 800be24:	d105      	bne.n	800be32 <__libc_init_array+0x2e>
 800be26:	bd70      	pop	{r4, r5, r6, pc}
 800be28:	f855 3b04 	ldr.w	r3, [r5], #4
 800be2c:	4798      	blx	r3
 800be2e:	3601      	adds	r6, #1
 800be30:	e7ee      	b.n	800be10 <__libc_init_array+0xc>
 800be32:	f855 3b04 	ldr.w	r3, [r5], #4
 800be36:	4798      	blx	r3
 800be38:	3601      	adds	r6, #1
 800be3a:	e7f2      	b.n	800be22 <__libc_init_array+0x1e>
 800be3c:	0800c818 	.word	0x0800c818
 800be40:	0800c818 	.word	0x0800c818
 800be44:	0800c818 	.word	0x0800c818
 800be48:	0800c81c 	.word	0x0800c81c

0800be4c <__retarget_lock_acquire_recursive>:
 800be4c:	4770      	bx	lr

0800be4e <__retarget_lock_release_recursive>:
 800be4e:	4770      	bx	lr

0800be50 <_free_r>:
 800be50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be52:	2900      	cmp	r1, #0
 800be54:	d044      	beq.n	800bee0 <_free_r+0x90>
 800be56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be5a:	9001      	str	r0, [sp, #4]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	f1a1 0404 	sub.w	r4, r1, #4
 800be62:	bfb8      	it	lt
 800be64:	18e4      	addlt	r4, r4, r3
 800be66:	f000 f8df 	bl	800c028 <__malloc_lock>
 800be6a:	4a1e      	ldr	r2, [pc, #120]	; (800bee4 <_free_r+0x94>)
 800be6c:	9801      	ldr	r0, [sp, #4]
 800be6e:	6813      	ldr	r3, [r2, #0]
 800be70:	b933      	cbnz	r3, 800be80 <_free_r+0x30>
 800be72:	6063      	str	r3, [r4, #4]
 800be74:	6014      	str	r4, [r2, #0]
 800be76:	b003      	add	sp, #12
 800be78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800be7c:	f000 b8da 	b.w	800c034 <__malloc_unlock>
 800be80:	42a3      	cmp	r3, r4
 800be82:	d908      	bls.n	800be96 <_free_r+0x46>
 800be84:	6825      	ldr	r5, [r4, #0]
 800be86:	1961      	adds	r1, r4, r5
 800be88:	428b      	cmp	r3, r1
 800be8a:	bf01      	itttt	eq
 800be8c:	6819      	ldreq	r1, [r3, #0]
 800be8e:	685b      	ldreq	r3, [r3, #4]
 800be90:	1949      	addeq	r1, r1, r5
 800be92:	6021      	streq	r1, [r4, #0]
 800be94:	e7ed      	b.n	800be72 <_free_r+0x22>
 800be96:	461a      	mov	r2, r3
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	b10b      	cbz	r3, 800bea0 <_free_r+0x50>
 800be9c:	42a3      	cmp	r3, r4
 800be9e:	d9fa      	bls.n	800be96 <_free_r+0x46>
 800bea0:	6811      	ldr	r1, [r2, #0]
 800bea2:	1855      	adds	r5, r2, r1
 800bea4:	42a5      	cmp	r5, r4
 800bea6:	d10b      	bne.n	800bec0 <_free_r+0x70>
 800bea8:	6824      	ldr	r4, [r4, #0]
 800beaa:	4421      	add	r1, r4
 800beac:	1854      	adds	r4, r2, r1
 800beae:	42a3      	cmp	r3, r4
 800beb0:	6011      	str	r1, [r2, #0]
 800beb2:	d1e0      	bne.n	800be76 <_free_r+0x26>
 800beb4:	681c      	ldr	r4, [r3, #0]
 800beb6:	685b      	ldr	r3, [r3, #4]
 800beb8:	6053      	str	r3, [r2, #4]
 800beba:	440c      	add	r4, r1
 800bebc:	6014      	str	r4, [r2, #0]
 800bebe:	e7da      	b.n	800be76 <_free_r+0x26>
 800bec0:	d902      	bls.n	800bec8 <_free_r+0x78>
 800bec2:	230c      	movs	r3, #12
 800bec4:	6003      	str	r3, [r0, #0]
 800bec6:	e7d6      	b.n	800be76 <_free_r+0x26>
 800bec8:	6825      	ldr	r5, [r4, #0]
 800beca:	1961      	adds	r1, r4, r5
 800becc:	428b      	cmp	r3, r1
 800bece:	bf04      	itt	eq
 800bed0:	6819      	ldreq	r1, [r3, #0]
 800bed2:	685b      	ldreq	r3, [r3, #4]
 800bed4:	6063      	str	r3, [r4, #4]
 800bed6:	bf04      	itt	eq
 800bed8:	1949      	addeq	r1, r1, r5
 800beda:	6021      	streq	r1, [r4, #0]
 800bedc:	6054      	str	r4, [r2, #4]
 800bede:	e7ca      	b.n	800be76 <_free_r+0x26>
 800bee0:	b003      	add	sp, #12
 800bee2:	bd30      	pop	{r4, r5, pc}
 800bee4:	20002f8c 	.word	0x20002f8c

0800bee8 <sbrk_aligned>:
 800bee8:	b570      	push	{r4, r5, r6, lr}
 800beea:	4e0e      	ldr	r6, [pc, #56]	; (800bf24 <sbrk_aligned+0x3c>)
 800beec:	460c      	mov	r4, r1
 800beee:	6831      	ldr	r1, [r6, #0]
 800bef0:	4605      	mov	r5, r0
 800bef2:	b911      	cbnz	r1, 800befa <sbrk_aligned+0x12>
 800bef4:	f000 fba6 	bl	800c644 <_sbrk_r>
 800bef8:	6030      	str	r0, [r6, #0]
 800befa:	4621      	mov	r1, r4
 800befc:	4628      	mov	r0, r5
 800befe:	f000 fba1 	bl	800c644 <_sbrk_r>
 800bf02:	1c43      	adds	r3, r0, #1
 800bf04:	d00a      	beq.n	800bf1c <sbrk_aligned+0x34>
 800bf06:	1cc4      	adds	r4, r0, #3
 800bf08:	f024 0403 	bic.w	r4, r4, #3
 800bf0c:	42a0      	cmp	r0, r4
 800bf0e:	d007      	beq.n	800bf20 <sbrk_aligned+0x38>
 800bf10:	1a21      	subs	r1, r4, r0
 800bf12:	4628      	mov	r0, r5
 800bf14:	f000 fb96 	bl	800c644 <_sbrk_r>
 800bf18:	3001      	adds	r0, #1
 800bf1a:	d101      	bne.n	800bf20 <sbrk_aligned+0x38>
 800bf1c:	f04f 34ff 	mov.w	r4, #4294967295
 800bf20:	4620      	mov	r0, r4
 800bf22:	bd70      	pop	{r4, r5, r6, pc}
 800bf24:	20002f90 	.word	0x20002f90

0800bf28 <_malloc_r>:
 800bf28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf2c:	1ccd      	adds	r5, r1, #3
 800bf2e:	f025 0503 	bic.w	r5, r5, #3
 800bf32:	3508      	adds	r5, #8
 800bf34:	2d0c      	cmp	r5, #12
 800bf36:	bf38      	it	cc
 800bf38:	250c      	movcc	r5, #12
 800bf3a:	2d00      	cmp	r5, #0
 800bf3c:	4607      	mov	r7, r0
 800bf3e:	db01      	blt.n	800bf44 <_malloc_r+0x1c>
 800bf40:	42a9      	cmp	r1, r5
 800bf42:	d905      	bls.n	800bf50 <_malloc_r+0x28>
 800bf44:	230c      	movs	r3, #12
 800bf46:	603b      	str	r3, [r7, #0]
 800bf48:	2600      	movs	r6, #0
 800bf4a:	4630      	mov	r0, r6
 800bf4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c024 <_malloc_r+0xfc>
 800bf54:	f000 f868 	bl	800c028 <__malloc_lock>
 800bf58:	f8d8 3000 	ldr.w	r3, [r8]
 800bf5c:	461c      	mov	r4, r3
 800bf5e:	bb5c      	cbnz	r4, 800bfb8 <_malloc_r+0x90>
 800bf60:	4629      	mov	r1, r5
 800bf62:	4638      	mov	r0, r7
 800bf64:	f7ff ffc0 	bl	800bee8 <sbrk_aligned>
 800bf68:	1c43      	adds	r3, r0, #1
 800bf6a:	4604      	mov	r4, r0
 800bf6c:	d155      	bne.n	800c01a <_malloc_r+0xf2>
 800bf6e:	f8d8 4000 	ldr.w	r4, [r8]
 800bf72:	4626      	mov	r6, r4
 800bf74:	2e00      	cmp	r6, #0
 800bf76:	d145      	bne.n	800c004 <_malloc_r+0xdc>
 800bf78:	2c00      	cmp	r4, #0
 800bf7a:	d048      	beq.n	800c00e <_malloc_r+0xe6>
 800bf7c:	6823      	ldr	r3, [r4, #0]
 800bf7e:	4631      	mov	r1, r6
 800bf80:	4638      	mov	r0, r7
 800bf82:	eb04 0903 	add.w	r9, r4, r3
 800bf86:	f000 fb5d 	bl	800c644 <_sbrk_r>
 800bf8a:	4581      	cmp	r9, r0
 800bf8c:	d13f      	bne.n	800c00e <_malloc_r+0xe6>
 800bf8e:	6821      	ldr	r1, [r4, #0]
 800bf90:	1a6d      	subs	r5, r5, r1
 800bf92:	4629      	mov	r1, r5
 800bf94:	4638      	mov	r0, r7
 800bf96:	f7ff ffa7 	bl	800bee8 <sbrk_aligned>
 800bf9a:	3001      	adds	r0, #1
 800bf9c:	d037      	beq.n	800c00e <_malloc_r+0xe6>
 800bf9e:	6823      	ldr	r3, [r4, #0]
 800bfa0:	442b      	add	r3, r5
 800bfa2:	6023      	str	r3, [r4, #0]
 800bfa4:	f8d8 3000 	ldr.w	r3, [r8]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d038      	beq.n	800c01e <_malloc_r+0xf6>
 800bfac:	685a      	ldr	r2, [r3, #4]
 800bfae:	42a2      	cmp	r2, r4
 800bfb0:	d12b      	bne.n	800c00a <_malloc_r+0xe2>
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	605a      	str	r2, [r3, #4]
 800bfb6:	e00f      	b.n	800bfd8 <_malloc_r+0xb0>
 800bfb8:	6822      	ldr	r2, [r4, #0]
 800bfba:	1b52      	subs	r2, r2, r5
 800bfbc:	d41f      	bmi.n	800bffe <_malloc_r+0xd6>
 800bfbe:	2a0b      	cmp	r2, #11
 800bfc0:	d917      	bls.n	800bff2 <_malloc_r+0xca>
 800bfc2:	1961      	adds	r1, r4, r5
 800bfc4:	42a3      	cmp	r3, r4
 800bfc6:	6025      	str	r5, [r4, #0]
 800bfc8:	bf18      	it	ne
 800bfca:	6059      	strne	r1, [r3, #4]
 800bfcc:	6863      	ldr	r3, [r4, #4]
 800bfce:	bf08      	it	eq
 800bfd0:	f8c8 1000 	streq.w	r1, [r8]
 800bfd4:	5162      	str	r2, [r4, r5]
 800bfd6:	604b      	str	r3, [r1, #4]
 800bfd8:	4638      	mov	r0, r7
 800bfda:	f104 060b 	add.w	r6, r4, #11
 800bfde:	f000 f829 	bl	800c034 <__malloc_unlock>
 800bfe2:	f026 0607 	bic.w	r6, r6, #7
 800bfe6:	1d23      	adds	r3, r4, #4
 800bfe8:	1af2      	subs	r2, r6, r3
 800bfea:	d0ae      	beq.n	800bf4a <_malloc_r+0x22>
 800bfec:	1b9b      	subs	r3, r3, r6
 800bfee:	50a3      	str	r3, [r4, r2]
 800bff0:	e7ab      	b.n	800bf4a <_malloc_r+0x22>
 800bff2:	42a3      	cmp	r3, r4
 800bff4:	6862      	ldr	r2, [r4, #4]
 800bff6:	d1dd      	bne.n	800bfb4 <_malloc_r+0x8c>
 800bff8:	f8c8 2000 	str.w	r2, [r8]
 800bffc:	e7ec      	b.n	800bfd8 <_malloc_r+0xb0>
 800bffe:	4623      	mov	r3, r4
 800c000:	6864      	ldr	r4, [r4, #4]
 800c002:	e7ac      	b.n	800bf5e <_malloc_r+0x36>
 800c004:	4634      	mov	r4, r6
 800c006:	6876      	ldr	r6, [r6, #4]
 800c008:	e7b4      	b.n	800bf74 <_malloc_r+0x4c>
 800c00a:	4613      	mov	r3, r2
 800c00c:	e7cc      	b.n	800bfa8 <_malloc_r+0x80>
 800c00e:	230c      	movs	r3, #12
 800c010:	603b      	str	r3, [r7, #0]
 800c012:	4638      	mov	r0, r7
 800c014:	f000 f80e 	bl	800c034 <__malloc_unlock>
 800c018:	e797      	b.n	800bf4a <_malloc_r+0x22>
 800c01a:	6025      	str	r5, [r4, #0]
 800c01c:	e7dc      	b.n	800bfd8 <_malloc_r+0xb0>
 800c01e:	605b      	str	r3, [r3, #4]
 800c020:	deff      	udf	#255	; 0xff
 800c022:	bf00      	nop
 800c024:	20002f8c 	.word	0x20002f8c

0800c028 <__malloc_lock>:
 800c028:	4801      	ldr	r0, [pc, #4]	; (800c030 <__malloc_lock+0x8>)
 800c02a:	f7ff bf0f 	b.w	800be4c <__retarget_lock_acquire_recursive>
 800c02e:	bf00      	nop
 800c030:	20002f88 	.word	0x20002f88

0800c034 <__malloc_unlock>:
 800c034:	4801      	ldr	r0, [pc, #4]	; (800c03c <__malloc_unlock+0x8>)
 800c036:	f7ff bf0a 	b.w	800be4e <__retarget_lock_release_recursive>
 800c03a:	bf00      	nop
 800c03c:	20002f88 	.word	0x20002f88

0800c040 <__ssputs_r>:
 800c040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c044:	688e      	ldr	r6, [r1, #8]
 800c046:	461f      	mov	r7, r3
 800c048:	42be      	cmp	r6, r7
 800c04a:	680b      	ldr	r3, [r1, #0]
 800c04c:	4682      	mov	sl, r0
 800c04e:	460c      	mov	r4, r1
 800c050:	4690      	mov	r8, r2
 800c052:	d82c      	bhi.n	800c0ae <__ssputs_r+0x6e>
 800c054:	898a      	ldrh	r2, [r1, #12]
 800c056:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c05a:	d026      	beq.n	800c0aa <__ssputs_r+0x6a>
 800c05c:	6965      	ldr	r5, [r4, #20]
 800c05e:	6909      	ldr	r1, [r1, #16]
 800c060:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c064:	eba3 0901 	sub.w	r9, r3, r1
 800c068:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c06c:	1c7b      	adds	r3, r7, #1
 800c06e:	444b      	add	r3, r9
 800c070:	106d      	asrs	r5, r5, #1
 800c072:	429d      	cmp	r5, r3
 800c074:	bf38      	it	cc
 800c076:	461d      	movcc	r5, r3
 800c078:	0553      	lsls	r3, r2, #21
 800c07a:	d527      	bpl.n	800c0cc <__ssputs_r+0x8c>
 800c07c:	4629      	mov	r1, r5
 800c07e:	f7ff ff53 	bl	800bf28 <_malloc_r>
 800c082:	4606      	mov	r6, r0
 800c084:	b360      	cbz	r0, 800c0e0 <__ssputs_r+0xa0>
 800c086:	6921      	ldr	r1, [r4, #16]
 800c088:	464a      	mov	r2, r9
 800c08a:	f000 faeb 	bl	800c664 <memcpy>
 800c08e:	89a3      	ldrh	r3, [r4, #12]
 800c090:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c098:	81a3      	strh	r3, [r4, #12]
 800c09a:	6126      	str	r6, [r4, #16]
 800c09c:	6165      	str	r5, [r4, #20]
 800c09e:	444e      	add	r6, r9
 800c0a0:	eba5 0509 	sub.w	r5, r5, r9
 800c0a4:	6026      	str	r6, [r4, #0]
 800c0a6:	60a5      	str	r5, [r4, #8]
 800c0a8:	463e      	mov	r6, r7
 800c0aa:	42be      	cmp	r6, r7
 800c0ac:	d900      	bls.n	800c0b0 <__ssputs_r+0x70>
 800c0ae:	463e      	mov	r6, r7
 800c0b0:	6820      	ldr	r0, [r4, #0]
 800c0b2:	4632      	mov	r2, r6
 800c0b4:	4641      	mov	r1, r8
 800c0b6:	f000 faab 	bl	800c610 <memmove>
 800c0ba:	68a3      	ldr	r3, [r4, #8]
 800c0bc:	1b9b      	subs	r3, r3, r6
 800c0be:	60a3      	str	r3, [r4, #8]
 800c0c0:	6823      	ldr	r3, [r4, #0]
 800c0c2:	4433      	add	r3, r6
 800c0c4:	6023      	str	r3, [r4, #0]
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0cc:	462a      	mov	r2, r5
 800c0ce:	f000 fad7 	bl	800c680 <_realloc_r>
 800c0d2:	4606      	mov	r6, r0
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	d1e0      	bne.n	800c09a <__ssputs_r+0x5a>
 800c0d8:	6921      	ldr	r1, [r4, #16]
 800c0da:	4650      	mov	r0, sl
 800c0dc:	f7ff feb8 	bl	800be50 <_free_r>
 800c0e0:	230c      	movs	r3, #12
 800c0e2:	f8ca 3000 	str.w	r3, [sl]
 800c0e6:	89a3      	ldrh	r3, [r4, #12]
 800c0e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0ec:	81a3      	strh	r3, [r4, #12]
 800c0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f2:	e7e9      	b.n	800c0c8 <__ssputs_r+0x88>

0800c0f4 <_svfiprintf_r>:
 800c0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f8:	4698      	mov	r8, r3
 800c0fa:	898b      	ldrh	r3, [r1, #12]
 800c0fc:	061b      	lsls	r3, r3, #24
 800c0fe:	b09d      	sub	sp, #116	; 0x74
 800c100:	4607      	mov	r7, r0
 800c102:	460d      	mov	r5, r1
 800c104:	4614      	mov	r4, r2
 800c106:	d50e      	bpl.n	800c126 <_svfiprintf_r+0x32>
 800c108:	690b      	ldr	r3, [r1, #16]
 800c10a:	b963      	cbnz	r3, 800c126 <_svfiprintf_r+0x32>
 800c10c:	2140      	movs	r1, #64	; 0x40
 800c10e:	f7ff ff0b 	bl	800bf28 <_malloc_r>
 800c112:	6028      	str	r0, [r5, #0]
 800c114:	6128      	str	r0, [r5, #16]
 800c116:	b920      	cbnz	r0, 800c122 <_svfiprintf_r+0x2e>
 800c118:	230c      	movs	r3, #12
 800c11a:	603b      	str	r3, [r7, #0]
 800c11c:	f04f 30ff 	mov.w	r0, #4294967295
 800c120:	e0d0      	b.n	800c2c4 <_svfiprintf_r+0x1d0>
 800c122:	2340      	movs	r3, #64	; 0x40
 800c124:	616b      	str	r3, [r5, #20]
 800c126:	2300      	movs	r3, #0
 800c128:	9309      	str	r3, [sp, #36]	; 0x24
 800c12a:	2320      	movs	r3, #32
 800c12c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c130:	f8cd 800c 	str.w	r8, [sp, #12]
 800c134:	2330      	movs	r3, #48	; 0x30
 800c136:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c2dc <_svfiprintf_r+0x1e8>
 800c13a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c13e:	f04f 0901 	mov.w	r9, #1
 800c142:	4623      	mov	r3, r4
 800c144:	469a      	mov	sl, r3
 800c146:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c14a:	b10a      	cbz	r2, 800c150 <_svfiprintf_r+0x5c>
 800c14c:	2a25      	cmp	r2, #37	; 0x25
 800c14e:	d1f9      	bne.n	800c144 <_svfiprintf_r+0x50>
 800c150:	ebba 0b04 	subs.w	fp, sl, r4
 800c154:	d00b      	beq.n	800c16e <_svfiprintf_r+0x7a>
 800c156:	465b      	mov	r3, fp
 800c158:	4622      	mov	r2, r4
 800c15a:	4629      	mov	r1, r5
 800c15c:	4638      	mov	r0, r7
 800c15e:	f7ff ff6f 	bl	800c040 <__ssputs_r>
 800c162:	3001      	adds	r0, #1
 800c164:	f000 80a9 	beq.w	800c2ba <_svfiprintf_r+0x1c6>
 800c168:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c16a:	445a      	add	r2, fp
 800c16c:	9209      	str	r2, [sp, #36]	; 0x24
 800c16e:	f89a 3000 	ldrb.w	r3, [sl]
 800c172:	2b00      	cmp	r3, #0
 800c174:	f000 80a1 	beq.w	800c2ba <_svfiprintf_r+0x1c6>
 800c178:	2300      	movs	r3, #0
 800c17a:	f04f 32ff 	mov.w	r2, #4294967295
 800c17e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c182:	f10a 0a01 	add.w	sl, sl, #1
 800c186:	9304      	str	r3, [sp, #16]
 800c188:	9307      	str	r3, [sp, #28]
 800c18a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c18e:	931a      	str	r3, [sp, #104]	; 0x68
 800c190:	4654      	mov	r4, sl
 800c192:	2205      	movs	r2, #5
 800c194:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c198:	4850      	ldr	r0, [pc, #320]	; (800c2dc <_svfiprintf_r+0x1e8>)
 800c19a:	f7f4 f841 	bl	8000220 <memchr>
 800c19e:	9a04      	ldr	r2, [sp, #16]
 800c1a0:	b9d8      	cbnz	r0, 800c1da <_svfiprintf_r+0xe6>
 800c1a2:	06d0      	lsls	r0, r2, #27
 800c1a4:	bf44      	itt	mi
 800c1a6:	2320      	movmi	r3, #32
 800c1a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1ac:	0711      	lsls	r1, r2, #28
 800c1ae:	bf44      	itt	mi
 800c1b0:	232b      	movmi	r3, #43	; 0x2b
 800c1b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1b6:	f89a 3000 	ldrb.w	r3, [sl]
 800c1ba:	2b2a      	cmp	r3, #42	; 0x2a
 800c1bc:	d015      	beq.n	800c1ea <_svfiprintf_r+0xf6>
 800c1be:	9a07      	ldr	r2, [sp, #28]
 800c1c0:	4654      	mov	r4, sl
 800c1c2:	2000      	movs	r0, #0
 800c1c4:	f04f 0c0a 	mov.w	ip, #10
 800c1c8:	4621      	mov	r1, r4
 800c1ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1ce:	3b30      	subs	r3, #48	; 0x30
 800c1d0:	2b09      	cmp	r3, #9
 800c1d2:	d94d      	bls.n	800c270 <_svfiprintf_r+0x17c>
 800c1d4:	b1b0      	cbz	r0, 800c204 <_svfiprintf_r+0x110>
 800c1d6:	9207      	str	r2, [sp, #28]
 800c1d8:	e014      	b.n	800c204 <_svfiprintf_r+0x110>
 800c1da:	eba0 0308 	sub.w	r3, r0, r8
 800c1de:	fa09 f303 	lsl.w	r3, r9, r3
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	9304      	str	r3, [sp, #16]
 800c1e6:	46a2      	mov	sl, r4
 800c1e8:	e7d2      	b.n	800c190 <_svfiprintf_r+0x9c>
 800c1ea:	9b03      	ldr	r3, [sp, #12]
 800c1ec:	1d19      	adds	r1, r3, #4
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	9103      	str	r1, [sp, #12]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	bfbb      	ittet	lt
 800c1f6:	425b      	neglt	r3, r3
 800c1f8:	f042 0202 	orrlt.w	r2, r2, #2
 800c1fc:	9307      	strge	r3, [sp, #28]
 800c1fe:	9307      	strlt	r3, [sp, #28]
 800c200:	bfb8      	it	lt
 800c202:	9204      	strlt	r2, [sp, #16]
 800c204:	7823      	ldrb	r3, [r4, #0]
 800c206:	2b2e      	cmp	r3, #46	; 0x2e
 800c208:	d10c      	bne.n	800c224 <_svfiprintf_r+0x130>
 800c20a:	7863      	ldrb	r3, [r4, #1]
 800c20c:	2b2a      	cmp	r3, #42	; 0x2a
 800c20e:	d134      	bne.n	800c27a <_svfiprintf_r+0x186>
 800c210:	9b03      	ldr	r3, [sp, #12]
 800c212:	1d1a      	adds	r2, r3, #4
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	9203      	str	r2, [sp, #12]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	bfb8      	it	lt
 800c21c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c220:	3402      	adds	r4, #2
 800c222:	9305      	str	r3, [sp, #20]
 800c224:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c2ec <_svfiprintf_r+0x1f8>
 800c228:	7821      	ldrb	r1, [r4, #0]
 800c22a:	2203      	movs	r2, #3
 800c22c:	4650      	mov	r0, sl
 800c22e:	f7f3 fff7 	bl	8000220 <memchr>
 800c232:	b138      	cbz	r0, 800c244 <_svfiprintf_r+0x150>
 800c234:	9b04      	ldr	r3, [sp, #16]
 800c236:	eba0 000a 	sub.w	r0, r0, sl
 800c23a:	2240      	movs	r2, #64	; 0x40
 800c23c:	4082      	lsls	r2, r0
 800c23e:	4313      	orrs	r3, r2
 800c240:	3401      	adds	r4, #1
 800c242:	9304      	str	r3, [sp, #16]
 800c244:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c248:	4825      	ldr	r0, [pc, #148]	; (800c2e0 <_svfiprintf_r+0x1ec>)
 800c24a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c24e:	2206      	movs	r2, #6
 800c250:	f7f3 ffe6 	bl	8000220 <memchr>
 800c254:	2800      	cmp	r0, #0
 800c256:	d038      	beq.n	800c2ca <_svfiprintf_r+0x1d6>
 800c258:	4b22      	ldr	r3, [pc, #136]	; (800c2e4 <_svfiprintf_r+0x1f0>)
 800c25a:	bb1b      	cbnz	r3, 800c2a4 <_svfiprintf_r+0x1b0>
 800c25c:	9b03      	ldr	r3, [sp, #12]
 800c25e:	3307      	adds	r3, #7
 800c260:	f023 0307 	bic.w	r3, r3, #7
 800c264:	3308      	adds	r3, #8
 800c266:	9303      	str	r3, [sp, #12]
 800c268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c26a:	4433      	add	r3, r6
 800c26c:	9309      	str	r3, [sp, #36]	; 0x24
 800c26e:	e768      	b.n	800c142 <_svfiprintf_r+0x4e>
 800c270:	fb0c 3202 	mla	r2, ip, r2, r3
 800c274:	460c      	mov	r4, r1
 800c276:	2001      	movs	r0, #1
 800c278:	e7a6      	b.n	800c1c8 <_svfiprintf_r+0xd4>
 800c27a:	2300      	movs	r3, #0
 800c27c:	3401      	adds	r4, #1
 800c27e:	9305      	str	r3, [sp, #20]
 800c280:	4619      	mov	r1, r3
 800c282:	f04f 0c0a 	mov.w	ip, #10
 800c286:	4620      	mov	r0, r4
 800c288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c28c:	3a30      	subs	r2, #48	; 0x30
 800c28e:	2a09      	cmp	r2, #9
 800c290:	d903      	bls.n	800c29a <_svfiprintf_r+0x1a6>
 800c292:	2b00      	cmp	r3, #0
 800c294:	d0c6      	beq.n	800c224 <_svfiprintf_r+0x130>
 800c296:	9105      	str	r1, [sp, #20]
 800c298:	e7c4      	b.n	800c224 <_svfiprintf_r+0x130>
 800c29a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c29e:	4604      	mov	r4, r0
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	e7f0      	b.n	800c286 <_svfiprintf_r+0x192>
 800c2a4:	ab03      	add	r3, sp, #12
 800c2a6:	9300      	str	r3, [sp, #0]
 800c2a8:	462a      	mov	r2, r5
 800c2aa:	4b0f      	ldr	r3, [pc, #60]	; (800c2e8 <_svfiprintf_r+0x1f4>)
 800c2ac:	a904      	add	r1, sp, #16
 800c2ae:	4638      	mov	r0, r7
 800c2b0:	f3af 8000 	nop.w
 800c2b4:	1c42      	adds	r2, r0, #1
 800c2b6:	4606      	mov	r6, r0
 800c2b8:	d1d6      	bne.n	800c268 <_svfiprintf_r+0x174>
 800c2ba:	89ab      	ldrh	r3, [r5, #12]
 800c2bc:	065b      	lsls	r3, r3, #25
 800c2be:	f53f af2d 	bmi.w	800c11c <_svfiprintf_r+0x28>
 800c2c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2c4:	b01d      	add	sp, #116	; 0x74
 800c2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ca:	ab03      	add	r3, sp, #12
 800c2cc:	9300      	str	r3, [sp, #0]
 800c2ce:	462a      	mov	r2, r5
 800c2d0:	4b05      	ldr	r3, [pc, #20]	; (800c2e8 <_svfiprintf_r+0x1f4>)
 800c2d2:	a904      	add	r1, sp, #16
 800c2d4:	4638      	mov	r0, r7
 800c2d6:	f000 f879 	bl	800c3cc <_printf_i>
 800c2da:	e7eb      	b.n	800c2b4 <_svfiprintf_r+0x1c0>
 800c2dc:	0800c7dc 	.word	0x0800c7dc
 800c2e0:	0800c7e6 	.word	0x0800c7e6
 800c2e4:	00000000 	.word	0x00000000
 800c2e8:	0800c041 	.word	0x0800c041
 800c2ec:	0800c7e2 	.word	0x0800c7e2

0800c2f0 <_printf_common>:
 800c2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2f4:	4616      	mov	r6, r2
 800c2f6:	4699      	mov	r9, r3
 800c2f8:	688a      	ldr	r2, [r1, #8]
 800c2fa:	690b      	ldr	r3, [r1, #16]
 800c2fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c300:	4293      	cmp	r3, r2
 800c302:	bfb8      	it	lt
 800c304:	4613      	movlt	r3, r2
 800c306:	6033      	str	r3, [r6, #0]
 800c308:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c30c:	4607      	mov	r7, r0
 800c30e:	460c      	mov	r4, r1
 800c310:	b10a      	cbz	r2, 800c316 <_printf_common+0x26>
 800c312:	3301      	adds	r3, #1
 800c314:	6033      	str	r3, [r6, #0]
 800c316:	6823      	ldr	r3, [r4, #0]
 800c318:	0699      	lsls	r1, r3, #26
 800c31a:	bf42      	ittt	mi
 800c31c:	6833      	ldrmi	r3, [r6, #0]
 800c31e:	3302      	addmi	r3, #2
 800c320:	6033      	strmi	r3, [r6, #0]
 800c322:	6825      	ldr	r5, [r4, #0]
 800c324:	f015 0506 	ands.w	r5, r5, #6
 800c328:	d106      	bne.n	800c338 <_printf_common+0x48>
 800c32a:	f104 0a19 	add.w	sl, r4, #25
 800c32e:	68e3      	ldr	r3, [r4, #12]
 800c330:	6832      	ldr	r2, [r6, #0]
 800c332:	1a9b      	subs	r3, r3, r2
 800c334:	42ab      	cmp	r3, r5
 800c336:	dc26      	bgt.n	800c386 <_printf_common+0x96>
 800c338:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c33c:	1e13      	subs	r3, r2, #0
 800c33e:	6822      	ldr	r2, [r4, #0]
 800c340:	bf18      	it	ne
 800c342:	2301      	movne	r3, #1
 800c344:	0692      	lsls	r2, r2, #26
 800c346:	d42b      	bmi.n	800c3a0 <_printf_common+0xb0>
 800c348:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c34c:	4649      	mov	r1, r9
 800c34e:	4638      	mov	r0, r7
 800c350:	47c0      	blx	r8
 800c352:	3001      	adds	r0, #1
 800c354:	d01e      	beq.n	800c394 <_printf_common+0xa4>
 800c356:	6823      	ldr	r3, [r4, #0]
 800c358:	6922      	ldr	r2, [r4, #16]
 800c35a:	f003 0306 	and.w	r3, r3, #6
 800c35e:	2b04      	cmp	r3, #4
 800c360:	bf02      	ittt	eq
 800c362:	68e5      	ldreq	r5, [r4, #12]
 800c364:	6833      	ldreq	r3, [r6, #0]
 800c366:	1aed      	subeq	r5, r5, r3
 800c368:	68a3      	ldr	r3, [r4, #8]
 800c36a:	bf0c      	ite	eq
 800c36c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c370:	2500      	movne	r5, #0
 800c372:	4293      	cmp	r3, r2
 800c374:	bfc4      	itt	gt
 800c376:	1a9b      	subgt	r3, r3, r2
 800c378:	18ed      	addgt	r5, r5, r3
 800c37a:	2600      	movs	r6, #0
 800c37c:	341a      	adds	r4, #26
 800c37e:	42b5      	cmp	r5, r6
 800c380:	d11a      	bne.n	800c3b8 <_printf_common+0xc8>
 800c382:	2000      	movs	r0, #0
 800c384:	e008      	b.n	800c398 <_printf_common+0xa8>
 800c386:	2301      	movs	r3, #1
 800c388:	4652      	mov	r2, sl
 800c38a:	4649      	mov	r1, r9
 800c38c:	4638      	mov	r0, r7
 800c38e:	47c0      	blx	r8
 800c390:	3001      	adds	r0, #1
 800c392:	d103      	bne.n	800c39c <_printf_common+0xac>
 800c394:	f04f 30ff 	mov.w	r0, #4294967295
 800c398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c39c:	3501      	adds	r5, #1
 800c39e:	e7c6      	b.n	800c32e <_printf_common+0x3e>
 800c3a0:	18e1      	adds	r1, r4, r3
 800c3a2:	1c5a      	adds	r2, r3, #1
 800c3a4:	2030      	movs	r0, #48	; 0x30
 800c3a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c3aa:	4422      	add	r2, r4
 800c3ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c3b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c3b4:	3302      	adds	r3, #2
 800c3b6:	e7c7      	b.n	800c348 <_printf_common+0x58>
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	4622      	mov	r2, r4
 800c3bc:	4649      	mov	r1, r9
 800c3be:	4638      	mov	r0, r7
 800c3c0:	47c0      	blx	r8
 800c3c2:	3001      	adds	r0, #1
 800c3c4:	d0e6      	beq.n	800c394 <_printf_common+0xa4>
 800c3c6:	3601      	adds	r6, #1
 800c3c8:	e7d9      	b.n	800c37e <_printf_common+0x8e>
	...

0800c3cc <_printf_i>:
 800c3cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3d0:	7e0f      	ldrb	r7, [r1, #24]
 800c3d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c3d4:	2f78      	cmp	r7, #120	; 0x78
 800c3d6:	4691      	mov	r9, r2
 800c3d8:	4680      	mov	r8, r0
 800c3da:	460c      	mov	r4, r1
 800c3dc:	469a      	mov	sl, r3
 800c3de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c3e2:	d807      	bhi.n	800c3f4 <_printf_i+0x28>
 800c3e4:	2f62      	cmp	r7, #98	; 0x62
 800c3e6:	d80a      	bhi.n	800c3fe <_printf_i+0x32>
 800c3e8:	2f00      	cmp	r7, #0
 800c3ea:	f000 80d4 	beq.w	800c596 <_printf_i+0x1ca>
 800c3ee:	2f58      	cmp	r7, #88	; 0x58
 800c3f0:	f000 80c0 	beq.w	800c574 <_printf_i+0x1a8>
 800c3f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c3fc:	e03a      	b.n	800c474 <_printf_i+0xa8>
 800c3fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c402:	2b15      	cmp	r3, #21
 800c404:	d8f6      	bhi.n	800c3f4 <_printf_i+0x28>
 800c406:	a101      	add	r1, pc, #4	; (adr r1, 800c40c <_printf_i+0x40>)
 800c408:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c40c:	0800c465 	.word	0x0800c465
 800c410:	0800c479 	.word	0x0800c479
 800c414:	0800c3f5 	.word	0x0800c3f5
 800c418:	0800c3f5 	.word	0x0800c3f5
 800c41c:	0800c3f5 	.word	0x0800c3f5
 800c420:	0800c3f5 	.word	0x0800c3f5
 800c424:	0800c479 	.word	0x0800c479
 800c428:	0800c3f5 	.word	0x0800c3f5
 800c42c:	0800c3f5 	.word	0x0800c3f5
 800c430:	0800c3f5 	.word	0x0800c3f5
 800c434:	0800c3f5 	.word	0x0800c3f5
 800c438:	0800c57d 	.word	0x0800c57d
 800c43c:	0800c4a5 	.word	0x0800c4a5
 800c440:	0800c537 	.word	0x0800c537
 800c444:	0800c3f5 	.word	0x0800c3f5
 800c448:	0800c3f5 	.word	0x0800c3f5
 800c44c:	0800c59f 	.word	0x0800c59f
 800c450:	0800c3f5 	.word	0x0800c3f5
 800c454:	0800c4a5 	.word	0x0800c4a5
 800c458:	0800c3f5 	.word	0x0800c3f5
 800c45c:	0800c3f5 	.word	0x0800c3f5
 800c460:	0800c53f 	.word	0x0800c53f
 800c464:	682b      	ldr	r3, [r5, #0]
 800c466:	1d1a      	adds	r2, r3, #4
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	602a      	str	r2, [r5, #0]
 800c46c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c470:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c474:	2301      	movs	r3, #1
 800c476:	e09f      	b.n	800c5b8 <_printf_i+0x1ec>
 800c478:	6820      	ldr	r0, [r4, #0]
 800c47a:	682b      	ldr	r3, [r5, #0]
 800c47c:	0607      	lsls	r7, r0, #24
 800c47e:	f103 0104 	add.w	r1, r3, #4
 800c482:	6029      	str	r1, [r5, #0]
 800c484:	d501      	bpl.n	800c48a <_printf_i+0xbe>
 800c486:	681e      	ldr	r6, [r3, #0]
 800c488:	e003      	b.n	800c492 <_printf_i+0xc6>
 800c48a:	0646      	lsls	r6, r0, #25
 800c48c:	d5fb      	bpl.n	800c486 <_printf_i+0xba>
 800c48e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c492:	2e00      	cmp	r6, #0
 800c494:	da03      	bge.n	800c49e <_printf_i+0xd2>
 800c496:	232d      	movs	r3, #45	; 0x2d
 800c498:	4276      	negs	r6, r6
 800c49a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c49e:	485a      	ldr	r0, [pc, #360]	; (800c608 <_printf_i+0x23c>)
 800c4a0:	230a      	movs	r3, #10
 800c4a2:	e012      	b.n	800c4ca <_printf_i+0xfe>
 800c4a4:	682b      	ldr	r3, [r5, #0]
 800c4a6:	6820      	ldr	r0, [r4, #0]
 800c4a8:	1d19      	adds	r1, r3, #4
 800c4aa:	6029      	str	r1, [r5, #0]
 800c4ac:	0605      	lsls	r5, r0, #24
 800c4ae:	d501      	bpl.n	800c4b4 <_printf_i+0xe8>
 800c4b0:	681e      	ldr	r6, [r3, #0]
 800c4b2:	e002      	b.n	800c4ba <_printf_i+0xee>
 800c4b4:	0641      	lsls	r1, r0, #25
 800c4b6:	d5fb      	bpl.n	800c4b0 <_printf_i+0xe4>
 800c4b8:	881e      	ldrh	r6, [r3, #0]
 800c4ba:	4853      	ldr	r0, [pc, #332]	; (800c608 <_printf_i+0x23c>)
 800c4bc:	2f6f      	cmp	r7, #111	; 0x6f
 800c4be:	bf0c      	ite	eq
 800c4c0:	2308      	moveq	r3, #8
 800c4c2:	230a      	movne	r3, #10
 800c4c4:	2100      	movs	r1, #0
 800c4c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c4ca:	6865      	ldr	r5, [r4, #4]
 800c4cc:	60a5      	str	r5, [r4, #8]
 800c4ce:	2d00      	cmp	r5, #0
 800c4d0:	bfa2      	ittt	ge
 800c4d2:	6821      	ldrge	r1, [r4, #0]
 800c4d4:	f021 0104 	bicge.w	r1, r1, #4
 800c4d8:	6021      	strge	r1, [r4, #0]
 800c4da:	b90e      	cbnz	r6, 800c4e0 <_printf_i+0x114>
 800c4dc:	2d00      	cmp	r5, #0
 800c4de:	d04b      	beq.n	800c578 <_printf_i+0x1ac>
 800c4e0:	4615      	mov	r5, r2
 800c4e2:	fbb6 f1f3 	udiv	r1, r6, r3
 800c4e6:	fb03 6711 	mls	r7, r3, r1, r6
 800c4ea:	5dc7      	ldrb	r7, [r0, r7]
 800c4ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c4f0:	4637      	mov	r7, r6
 800c4f2:	42bb      	cmp	r3, r7
 800c4f4:	460e      	mov	r6, r1
 800c4f6:	d9f4      	bls.n	800c4e2 <_printf_i+0x116>
 800c4f8:	2b08      	cmp	r3, #8
 800c4fa:	d10b      	bne.n	800c514 <_printf_i+0x148>
 800c4fc:	6823      	ldr	r3, [r4, #0]
 800c4fe:	07de      	lsls	r6, r3, #31
 800c500:	d508      	bpl.n	800c514 <_printf_i+0x148>
 800c502:	6923      	ldr	r3, [r4, #16]
 800c504:	6861      	ldr	r1, [r4, #4]
 800c506:	4299      	cmp	r1, r3
 800c508:	bfde      	ittt	le
 800c50a:	2330      	movle	r3, #48	; 0x30
 800c50c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c510:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c514:	1b52      	subs	r2, r2, r5
 800c516:	6122      	str	r2, [r4, #16]
 800c518:	f8cd a000 	str.w	sl, [sp]
 800c51c:	464b      	mov	r3, r9
 800c51e:	aa03      	add	r2, sp, #12
 800c520:	4621      	mov	r1, r4
 800c522:	4640      	mov	r0, r8
 800c524:	f7ff fee4 	bl	800c2f0 <_printf_common>
 800c528:	3001      	adds	r0, #1
 800c52a:	d14a      	bne.n	800c5c2 <_printf_i+0x1f6>
 800c52c:	f04f 30ff 	mov.w	r0, #4294967295
 800c530:	b004      	add	sp, #16
 800c532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c536:	6823      	ldr	r3, [r4, #0]
 800c538:	f043 0320 	orr.w	r3, r3, #32
 800c53c:	6023      	str	r3, [r4, #0]
 800c53e:	4833      	ldr	r0, [pc, #204]	; (800c60c <_printf_i+0x240>)
 800c540:	2778      	movs	r7, #120	; 0x78
 800c542:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c546:	6823      	ldr	r3, [r4, #0]
 800c548:	6829      	ldr	r1, [r5, #0]
 800c54a:	061f      	lsls	r7, r3, #24
 800c54c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c550:	d402      	bmi.n	800c558 <_printf_i+0x18c>
 800c552:	065f      	lsls	r7, r3, #25
 800c554:	bf48      	it	mi
 800c556:	b2b6      	uxthmi	r6, r6
 800c558:	07df      	lsls	r7, r3, #31
 800c55a:	bf48      	it	mi
 800c55c:	f043 0320 	orrmi.w	r3, r3, #32
 800c560:	6029      	str	r1, [r5, #0]
 800c562:	bf48      	it	mi
 800c564:	6023      	strmi	r3, [r4, #0]
 800c566:	b91e      	cbnz	r6, 800c570 <_printf_i+0x1a4>
 800c568:	6823      	ldr	r3, [r4, #0]
 800c56a:	f023 0320 	bic.w	r3, r3, #32
 800c56e:	6023      	str	r3, [r4, #0]
 800c570:	2310      	movs	r3, #16
 800c572:	e7a7      	b.n	800c4c4 <_printf_i+0xf8>
 800c574:	4824      	ldr	r0, [pc, #144]	; (800c608 <_printf_i+0x23c>)
 800c576:	e7e4      	b.n	800c542 <_printf_i+0x176>
 800c578:	4615      	mov	r5, r2
 800c57a:	e7bd      	b.n	800c4f8 <_printf_i+0x12c>
 800c57c:	682b      	ldr	r3, [r5, #0]
 800c57e:	6826      	ldr	r6, [r4, #0]
 800c580:	6961      	ldr	r1, [r4, #20]
 800c582:	1d18      	adds	r0, r3, #4
 800c584:	6028      	str	r0, [r5, #0]
 800c586:	0635      	lsls	r5, r6, #24
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	d501      	bpl.n	800c590 <_printf_i+0x1c4>
 800c58c:	6019      	str	r1, [r3, #0]
 800c58e:	e002      	b.n	800c596 <_printf_i+0x1ca>
 800c590:	0670      	lsls	r0, r6, #25
 800c592:	d5fb      	bpl.n	800c58c <_printf_i+0x1c0>
 800c594:	8019      	strh	r1, [r3, #0]
 800c596:	2300      	movs	r3, #0
 800c598:	6123      	str	r3, [r4, #16]
 800c59a:	4615      	mov	r5, r2
 800c59c:	e7bc      	b.n	800c518 <_printf_i+0x14c>
 800c59e:	682b      	ldr	r3, [r5, #0]
 800c5a0:	1d1a      	adds	r2, r3, #4
 800c5a2:	602a      	str	r2, [r5, #0]
 800c5a4:	681d      	ldr	r5, [r3, #0]
 800c5a6:	6862      	ldr	r2, [r4, #4]
 800c5a8:	2100      	movs	r1, #0
 800c5aa:	4628      	mov	r0, r5
 800c5ac:	f7f3 fe38 	bl	8000220 <memchr>
 800c5b0:	b108      	cbz	r0, 800c5b6 <_printf_i+0x1ea>
 800c5b2:	1b40      	subs	r0, r0, r5
 800c5b4:	6060      	str	r0, [r4, #4]
 800c5b6:	6863      	ldr	r3, [r4, #4]
 800c5b8:	6123      	str	r3, [r4, #16]
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5c0:	e7aa      	b.n	800c518 <_printf_i+0x14c>
 800c5c2:	6923      	ldr	r3, [r4, #16]
 800c5c4:	462a      	mov	r2, r5
 800c5c6:	4649      	mov	r1, r9
 800c5c8:	4640      	mov	r0, r8
 800c5ca:	47d0      	blx	sl
 800c5cc:	3001      	adds	r0, #1
 800c5ce:	d0ad      	beq.n	800c52c <_printf_i+0x160>
 800c5d0:	6823      	ldr	r3, [r4, #0]
 800c5d2:	079b      	lsls	r3, r3, #30
 800c5d4:	d413      	bmi.n	800c5fe <_printf_i+0x232>
 800c5d6:	68e0      	ldr	r0, [r4, #12]
 800c5d8:	9b03      	ldr	r3, [sp, #12]
 800c5da:	4298      	cmp	r0, r3
 800c5dc:	bfb8      	it	lt
 800c5de:	4618      	movlt	r0, r3
 800c5e0:	e7a6      	b.n	800c530 <_printf_i+0x164>
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	4632      	mov	r2, r6
 800c5e6:	4649      	mov	r1, r9
 800c5e8:	4640      	mov	r0, r8
 800c5ea:	47d0      	blx	sl
 800c5ec:	3001      	adds	r0, #1
 800c5ee:	d09d      	beq.n	800c52c <_printf_i+0x160>
 800c5f0:	3501      	adds	r5, #1
 800c5f2:	68e3      	ldr	r3, [r4, #12]
 800c5f4:	9903      	ldr	r1, [sp, #12]
 800c5f6:	1a5b      	subs	r3, r3, r1
 800c5f8:	42ab      	cmp	r3, r5
 800c5fa:	dcf2      	bgt.n	800c5e2 <_printf_i+0x216>
 800c5fc:	e7eb      	b.n	800c5d6 <_printf_i+0x20a>
 800c5fe:	2500      	movs	r5, #0
 800c600:	f104 0619 	add.w	r6, r4, #25
 800c604:	e7f5      	b.n	800c5f2 <_printf_i+0x226>
 800c606:	bf00      	nop
 800c608:	0800c7ed 	.word	0x0800c7ed
 800c60c:	0800c7fe 	.word	0x0800c7fe

0800c610 <memmove>:
 800c610:	4288      	cmp	r0, r1
 800c612:	b510      	push	{r4, lr}
 800c614:	eb01 0402 	add.w	r4, r1, r2
 800c618:	d902      	bls.n	800c620 <memmove+0x10>
 800c61a:	4284      	cmp	r4, r0
 800c61c:	4623      	mov	r3, r4
 800c61e:	d807      	bhi.n	800c630 <memmove+0x20>
 800c620:	1e43      	subs	r3, r0, #1
 800c622:	42a1      	cmp	r1, r4
 800c624:	d008      	beq.n	800c638 <memmove+0x28>
 800c626:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c62a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c62e:	e7f8      	b.n	800c622 <memmove+0x12>
 800c630:	4402      	add	r2, r0
 800c632:	4601      	mov	r1, r0
 800c634:	428a      	cmp	r2, r1
 800c636:	d100      	bne.n	800c63a <memmove+0x2a>
 800c638:	bd10      	pop	{r4, pc}
 800c63a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c63e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c642:	e7f7      	b.n	800c634 <memmove+0x24>

0800c644 <_sbrk_r>:
 800c644:	b538      	push	{r3, r4, r5, lr}
 800c646:	4d06      	ldr	r5, [pc, #24]	; (800c660 <_sbrk_r+0x1c>)
 800c648:	2300      	movs	r3, #0
 800c64a:	4604      	mov	r4, r0
 800c64c:	4608      	mov	r0, r1
 800c64e:	602b      	str	r3, [r5, #0]
 800c650:	f7f4 f93e 	bl	80008d0 <_sbrk>
 800c654:	1c43      	adds	r3, r0, #1
 800c656:	d102      	bne.n	800c65e <_sbrk_r+0x1a>
 800c658:	682b      	ldr	r3, [r5, #0]
 800c65a:	b103      	cbz	r3, 800c65e <_sbrk_r+0x1a>
 800c65c:	6023      	str	r3, [r4, #0]
 800c65e:	bd38      	pop	{r3, r4, r5, pc}
 800c660:	20002f84 	.word	0x20002f84

0800c664 <memcpy>:
 800c664:	440a      	add	r2, r1
 800c666:	4291      	cmp	r1, r2
 800c668:	f100 33ff 	add.w	r3, r0, #4294967295
 800c66c:	d100      	bne.n	800c670 <memcpy+0xc>
 800c66e:	4770      	bx	lr
 800c670:	b510      	push	{r4, lr}
 800c672:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c676:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c67a:	4291      	cmp	r1, r2
 800c67c:	d1f9      	bne.n	800c672 <memcpy+0xe>
 800c67e:	bd10      	pop	{r4, pc}

0800c680 <_realloc_r>:
 800c680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c684:	4680      	mov	r8, r0
 800c686:	4614      	mov	r4, r2
 800c688:	460e      	mov	r6, r1
 800c68a:	b921      	cbnz	r1, 800c696 <_realloc_r+0x16>
 800c68c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c690:	4611      	mov	r1, r2
 800c692:	f7ff bc49 	b.w	800bf28 <_malloc_r>
 800c696:	b92a      	cbnz	r2, 800c6a4 <_realloc_r+0x24>
 800c698:	f7ff fbda 	bl	800be50 <_free_r>
 800c69c:	4625      	mov	r5, r4
 800c69e:	4628      	mov	r0, r5
 800c6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6a4:	f000 f81b 	bl	800c6de <_malloc_usable_size_r>
 800c6a8:	4284      	cmp	r4, r0
 800c6aa:	4607      	mov	r7, r0
 800c6ac:	d802      	bhi.n	800c6b4 <_realloc_r+0x34>
 800c6ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c6b2:	d812      	bhi.n	800c6da <_realloc_r+0x5a>
 800c6b4:	4621      	mov	r1, r4
 800c6b6:	4640      	mov	r0, r8
 800c6b8:	f7ff fc36 	bl	800bf28 <_malloc_r>
 800c6bc:	4605      	mov	r5, r0
 800c6be:	2800      	cmp	r0, #0
 800c6c0:	d0ed      	beq.n	800c69e <_realloc_r+0x1e>
 800c6c2:	42bc      	cmp	r4, r7
 800c6c4:	4622      	mov	r2, r4
 800c6c6:	4631      	mov	r1, r6
 800c6c8:	bf28      	it	cs
 800c6ca:	463a      	movcs	r2, r7
 800c6cc:	f7ff ffca 	bl	800c664 <memcpy>
 800c6d0:	4631      	mov	r1, r6
 800c6d2:	4640      	mov	r0, r8
 800c6d4:	f7ff fbbc 	bl	800be50 <_free_r>
 800c6d8:	e7e1      	b.n	800c69e <_realloc_r+0x1e>
 800c6da:	4635      	mov	r5, r6
 800c6dc:	e7df      	b.n	800c69e <_realloc_r+0x1e>

0800c6de <_malloc_usable_size_r>:
 800c6de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6e2:	1f18      	subs	r0, r3, #4
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	bfbc      	itt	lt
 800c6e8:	580b      	ldrlt	r3, [r1, r0]
 800c6ea:	18c0      	addlt	r0, r0, r3
 800c6ec:	4770      	bx	lr
	...

0800c6f0 <_init>:
 800c6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6f2:	bf00      	nop
 800c6f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6f6:	bc08      	pop	{r3}
 800c6f8:	469e      	mov	lr, r3
 800c6fa:	4770      	bx	lr

0800c6fc <_fini>:
 800c6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6fe:	bf00      	nop
 800c700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c702:	bc08      	pop	{r3}
 800c704:	469e      	mov	lr, r3
 800c706:	4770      	bx	lr
