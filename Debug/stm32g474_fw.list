
stm32g474_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008084  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800825c  0800825c  0001825c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082bc  080082bc  0002018c  2**0
                  CONTENTS
  4 .ARM          00000000  080082bc  080082bc  0002018c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080082bc  080082bc  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082bc  080082bc  000182bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082c0  080082c0  000182c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  080082c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  0002018c  2**0
                  CONTENTS
 10 .bss          00001a08  2000018c  2000018c  0002018c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001b94  20001b94  0002018c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000fbd4  00000000  00000000  000201ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000033b4  00000000  00000000  0002fdd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e10  00000000  00000000  00033188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a48  00000000  00000000  00033f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028413  00000000  00000000  000349e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015544  00000000  00000000  0005cdf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000edd6c  00000000  00000000  00072337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003588  00000000  00000000  001600a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  0016362c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000018c 	.word	0x2000018c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008244 	.word	0x08008244

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000190 	.word	0x20000190
 8000214:	08008244 	.word	0x08008244

08000218 <apInit>:
static uint32_t g_LEDOffTime = 200;
static uint32_t nextmill = 0;
*/

void apInit(void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0

}
 800021c:	bf00      	nop
 800021e:	46bd      	mov	sp, r7
 8000220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000224:	4770      	bx	lr

08000226 <apMain>:

void apMain(void)
{
 8000226:	b580      	push	{r7, lr}
 8000228:	b082      	sub	sp, #8
 800022a:	af00      	add	r7, sp, #0
  uint32_t pre_time = millis();
 800022c:	f000 f877 	bl	800031e <millis>
 8000230:	6078      	str	r0, [r7, #4]
  while(1)
  {
    /* LED Non blocking toggle*/
    /* Using Reg to toggle */
    if(millis()-pre_time >= 500)
 8000232:	f000 f874 	bl	800031e <millis>
 8000236:	4602      	mov	r2, r0
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	1ad3      	subs	r3, r2, r3
 800023c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000240:	d3f7      	bcc.n	8000232 <apMain+0xc>
    {
      pre_time = millis();
 8000242:	f000 f86c 	bl	800031e <millis>
 8000246:	6078      	str	r0, [r7, #4]
      //ledToggle(_DEF_LED1);
      gpio_out_toggle(GPIOA, GPIO_PIN_5);
 8000248:	2120      	movs	r1, #32
 800024a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800024e:	f000 fa29 	bl	80006a4 <gpio_out_toggle>
    if(millis()-pre_time >= 500)
 8000252:	e7ee      	b.n	8000232 <apMain+0xc>

08000254 <bspInit>:
#include "usb_device.h"

void SystemClock_Config(void);

bool bspInit(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af00      	add	r7, sp, #0
  HAL_Init();
 800025a:	f000 fa58 	bl	800070e <HAL_Init>
  SystemClock_Config();
 800025e:	f000 f865 	bl	800032c <SystemClock_Config>

  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000262:	4b28      	ldr	r3, [pc, #160]	; (8000304 <bspInit+0xb0>)
 8000264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000266:	4a27      	ldr	r2, [pc, #156]	; (8000304 <bspInit+0xb0>)
 8000268:	f043 0320 	orr.w	r3, r3, #32
 800026c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800026e:	4b25      	ldr	r3, [pc, #148]	; (8000304 <bspInit+0xb0>)
 8000270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000272:	f003 0320 	and.w	r3, r3, #32
 8000276:	60bb      	str	r3, [r7, #8]
 8000278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800027a:	4b22      	ldr	r3, [pc, #136]	; (8000304 <bspInit+0xb0>)
 800027c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800027e:	4a21      	ldr	r2, [pc, #132]	; (8000304 <bspInit+0xb0>)
 8000280:	f043 0301 	orr.w	r3, r3, #1
 8000284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000286:	4b1f      	ldr	r3, [pc, #124]	; (8000304 <bspInit+0xb0>)
 8000288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800028a:	f003 0301 	and.w	r3, r3, #1
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	687b      	ldr	r3, [r7, #4]

  /* USB - RESET 시 장치관리자 해제 연결 안될 시 */

  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 8000292:	f107 030c 	add.w	r3, r7, #12
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]
 80002a0:	611a      	str	r2, [r3, #16]
  // PA12(USB_DP) 출력 설정
  GPIO_InitStructure.Pin = GPIO_PIN_12;
 80002a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 80002a8:	2311      	movs	r3, #17
 80002aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80002ac:	2300      	movs	r3, #0
 80002ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 80002b0:	2300      	movs	r3, #0
 80002b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80002b4:	f107 030c 	add.w	r3, r7, #12
 80002b8:	4619      	mov	r1, r3
 80002ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002be:	f000 fbc9 	bl	8000a54 <HAL_GPIO_Init>

  //회로에 PULL UP 이 걸려있다면 - 내리고
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80002c2:	2200      	movs	r2, #0
 80002c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002cc:	f000 fd44 	bl	8000d58 <HAL_GPIO_WritePin>
  delay(100);
 80002d0:	2064      	movs	r0, #100	; 0x64
 80002d2:	f000 f819 	bl	8000308 <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80002d6:	2201      	movs	r2, #1
 80002d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e0:	f000 fd3a 	bl	8000d58 <HAL_GPIO_WritePin>

  // INPUT 으로 다시 변경
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80002e4:	2300      	movs	r3, #0
 80002e6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80002e8:	f107 030c 	add.w	r3, r7, #12
 80002ec:	4619      	mov	r1, r3
 80002ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f2:	f000 fbaf 	bl	8000a54 <HAL_GPIO_Init>

  MX_USB_Device_Init();
 80002f6:	f007 fa03 	bl	8007700 <MX_USB_Device_Init>

  return true;
 80002fa:	2301      	movs	r3, #1
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	3720      	adds	r7, #32
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	40021000 	.word	0x40021000

08000308 <delay>:

void delay(uint32_t time_ms)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  HAL_Delay(time_ms);
 8000310:	6878      	ldr	r0, [r7, #4]
 8000312:	f000 fa6d 	bl	80007f0 <HAL_Delay>
}
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}

0800031e <millis>:

uint32_t millis(void)
{
 800031e:	b580      	push	{r7, lr}
 8000320:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000322:	f000 fa59 	bl	80007d8 <HAL_GetTick>
 8000326:	4603      	mov	r3, r0
}
 8000328:	4618      	mov	r0, r3
 800032a:	bd80      	pop	{r7, pc}

0800032c <SystemClock_Config>:


void SystemClock_Config(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b094      	sub	sp, #80	; 0x50
 8000330:	af00      	add	r7, sp, #0

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	f107 0318 	add.w	r3, r7, #24
 8000336:	2238      	movs	r2, #56	; 0x38
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f007 ff55 	bl	80081ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
 800034c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800034e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000352:	f002 fa4d 	bl	80027f0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000356:	2309      	movs	r3, #9
 8000358:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800035a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800035e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000360:	2301      	movs	r3, #1
 8000362:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000364:	2302      	movs	r3, #2
 8000366:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000368:	2303      	movs	r3, #3
 800036a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800036c:	2302      	movs	r3, #2
 800036e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000370:	2308      	movs	r3, #8
 8000372:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000374:	2302      	movs	r3, #2
 8000376:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000378:	2302      	movs	r3, #2
 800037a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800037c:	2302      	movs	r3, #2
 800037e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000380:	f107 0318 	add.w	r3, r7, #24
 8000384:	4618      	mov	r0, r3
 8000386:	f002 fae7 	bl	8002958 <HAL_RCC_OscConfig>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000390:	f000 f818 	bl	80003c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000394:	230f      	movs	r3, #15
 8000396:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000398:	2303      	movs	r3, #3
 800039a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a4:	2300      	movs	r3, #0
 80003a6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	2101      	movs	r1, #1
 80003ac:	4618      	mov	r0, r3
 80003ae:	f002 fde5 	bl	8002f7c <HAL_RCC_ClockConfig>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80003b8:	f000 f804 	bl	80003c4 <Error_Handler>
  }
}
 80003bc:	bf00      	nop
 80003be:	3750      	adds	r7, #80	; 0x50
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <Error_Handler>:


void Error_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0

}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
	...

080003d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003da:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <HAL_MspInit+0x44>)
 80003dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003de:	4a0e      	ldr	r2, [pc, #56]	; (8000418 <HAL_MspInit+0x44>)
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	6613      	str	r3, [r2, #96]	; 0x60
 80003e6:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <HAL_MspInit+0x44>)
 80003e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003ea:	f003 0301 	and.w	r3, r3, #1
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003f2:	4b09      	ldr	r3, [pc, #36]	; (8000418 <HAL_MspInit+0x44>)
 80003f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003f6:	4a08      	ldr	r2, [pc, #32]	; (8000418 <HAL_MspInit+0x44>)
 80003f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003fc:	6593      	str	r3, [r2, #88]	; 0x58
 80003fe:	4b06      	ldr	r3, [pc, #24]	; (8000418 <HAL_MspInit+0x44>)
 8000400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000406:	603b      	str	r3, [r7, #0]
 8000408:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800040a:	f002 fa95 	bl	8002938 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800040e:	bf00      	nop
 8000410:	3708      	adds	r7, #8
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40021000 	.word	0x40021000

0800041c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000420:	e7fe      	b.n	8000420 <NMI_Handler+0x4>

08000422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000422:	b480      	push	{r7}
 8000424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000426:	e7fe      	b.n	8000426 <HardFault_Handler+0x4>

08000428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800042c:	e7fe      	b.n	800042c <MemManage_Handler+0x4>

0800042e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000432:	e7fe      	b.n	8000432 <BusFault_Handler+0x4>

08000434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000438:	e7fe      	b.n	8000438 <UsageFault_Handler+0x4>

0800043a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800043e:	bf00      	nop
 8000440:	46bd      	mov	sp, r7
 8000442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000446:	4770      	bx	lr

08000448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr

08000456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000456:	b480      	push	{r7}
 8000458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800045a:	bf00      	nop
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr

08000464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000468:	f000 f9a4 	bl	80007b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800046c:	bf00      	nop
 800046e:	bd80      	pop	{r7, pc}

08000470 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000474:	4802      	ldr	r0, [pc, #8]	; (8000480 <USB_LP_IRQHandler+0x10>)
 8000476:	f000 fd77 	bl	8000f68 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	20001698 	.word	0x20001698

08000484 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000488:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <SystemInit+0x20>)
 800048a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800048e:	4a05      	ldr	r2, [pc, #20]	; (80004a4 <SystemInit+0x20>)
 8000490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000494:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	e000ed00 	.word	0xe000ed00

080004a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004a8:	480d      	ldr	r0, [pc, #52]	; (80004e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004ac:	f7ff ffea 	bl	8000484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004b0:	480c      	ldr	r0, [pc, #48]	; (80004e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80004b2:	490d      	ldr	r1, [pc, #52]	; (80004e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004b4:	4a0d      	ldr	r2, [pc, #52]	; (80004ec <LoopForever+0xe>)
  movs r3, #0
 80004b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004b8:	e002      	b.n	80004c0 <LoopCopyDataInit>

080004ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004be:	3304      	adds	r3, #4

080004c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004c4:	d3f9      	bcc.n	80004ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004c6:	4a0a      	ldr	r2, [pc, #40]	; (80004f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004c8:	4c0a      	ldr	r4, [pc, #40]	; (80004f4 <LoopForever+0x16>)
  movs r3, #0
 80004ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004cc:	e001      	b.n	80004d2 <LoopFillZerobss>

080004ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d0:	3204      	adds	r2, #4

080004d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004d4:	d3fb      	bcc.n	80004ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004d6:	f007 fe91 	bl	80081fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004da:	f007 fe7b 	bl	80081d4 <main>

080004de <LoopForever>:

LoopForever:
  b LoopForever
 80004de:	e7fe      	b.n	80004de <LoopForever>
  ldr   r0, =_estack
 80004e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e8:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 80004ec:	080082c4 	.word	0x080082c4
  ldr r2, =_sbss
 80004f0:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 80004f4:	20001b94 	.word	0x20001b94

080004f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004f8:	e7fe      	b.n	80004f8 <ADC1_2_IRQHandler>

080004fa <qbufferWrite>:

  return ret;
}

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80004fa:	b480      	push	{r7}
 80004fc:	b08b      	sub	sp, #44	; 0x2c
 80004fe:	af00      	add	r7, sp, #0
 8000500:	60f8      	str	r0, [r7, #12]
 8000502:	60b9      	str	r1, [r7, #8]
 8000504:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8000506:	2301      	movs	r3, #1
 8000508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t next_in;


  for (int i=0; i<length; i++)
 800050c:	2300      	movs	r3, #0
 800050e:	623b      	str	r3, [r7, #32]
 8000510:	e043      	b.n	800059a <qbufferWrite+0xa0>
  {
    next_in = (p_node->in + 1) % p_node->len;
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	3301      	adds	r3, #1
 8000518:	68fa      	ldr	r2, [r7, #12]
 800051a:	6892      	ldr	r2, [r2, #8]
 800051c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000520:	fb01 f202 	mul.w	r2, r1, r2
 8000524:	1a9b      	subs	r3, r3, r2
 8000526:	61bb      	str	r3, [r7, #24]

    if (next_in != p_node->out)
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	69ba      	ldr	r2, [r7, #24]
 800052e:	429a      	cmp	r2, r3
 8000530:	d02c      	beq.n	800058c <qbufferWrite+0x92>
    {
      if (p_node->p_buf != NULL && p_data != NULL)
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	691b      	ldr	r3, [r3, #16]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d024      	beq.n	8000584 <qbufferWrite+0x8a>
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d021      	beq.n	8000584 <qbufferWrite+0x8a>
      {
        uint8_t *p_buf;

        p_buf = &p_node->p_buf[p_node->in*p_node->size];
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	691a      	ldr	r2, [r3, #16]
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	68f9      	ldr	r1, [r7, #12]
 800054a:	68c9      	ldr	r1, [r1, #12]
 800054c:	fb01 f303 	mul.w	r3, r1, r3
 8000550:	4413      	add	r3, r2
 8000552:	617b      	str	r3, [r7, #20]
        for (int i=0; i<p_node->size; i++)
 8000554:	2300      	movs	r3, #0
 8000556:	61fb      	str	r3, [r7, #28]
 8000558:	e00a      	b.n	8000570 <qbufferWrite+0x76>
        {
          p_buf[i] = p_data[i];
 800055a:	69fb      	ldr	r3, [r7, #28]
 800055c:	68ba      	ldr	r2, [r7, #8]
 800055e:	441a      	add	r2, r3
 8000560:	69fb      	ldr	r3, [r7, #28]
 8000562:	6979      	ldr	r1, [r7, #20]
 8000564:	440b      	add	r3, r1
 8000566:	7812      	ldrb	r2, [r2, #0]
 8000568:	701a      	strb	r2, [r3, #0]
        for (int i=0; i<p_node->size; i++)
 800056a:	69fb      	ldr	r3, [r7, #28]
 800056c:	3301      	adds	r3, #1
 800056e:	61fb      	str	r3, [r7, #28]
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	68da      	ldr	r2, [r3, #12]
 8000574:	69fb      	ldr	r3, [r7, #28]
 8000576:	429a      	cmp	r2, r3
 8000578:	d8ef      	bhi.n	800055a <qbufferWrite+0x60>
        }
        p_data += p_node->size;
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	68db      	ldr	r3, [r3, #12]
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	4413      	add	r3, r2
 8000582:	60bb      	str	r3, [r7, #8]
      }
      p_node->in = next_in;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	69ba      	ldr	r2, [r7, #24]
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	e003      	b.n	8000594 <qbufferWrite+0x9a>
    }
    else
    {
      ret = false;
 800058c:	2300      	movs	r3, #0
 800058e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8000592:	e006      	b.n	80005a2 <qbufferWrite+0xa8>
  for (int i=0; i<length; i++)
 8000594:	6a3b      	ldr	r3, [r7, #32]
 8000596:	3301      	adds	r3, #1
 8000598:	623b      	str	r3, [r7, #32]
 800059a:	6a3b      	ldr	r3, [r7, #32]
 800059c:	687a      	ldr	r2, [r7, #4]
 800059e:	429a      	cmp	r2, r3
 80005a0:	d8b7      	bhi.n	8000512 <qbufferWrite+0x18>
    }
  }

  return ret;
 80005a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	372c      	adds	r7, #44	; 0x2c
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <qbufferAvailable>:
  return &p_node->p_buf[p_node->out*p_node->size];
}


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 80005b2:	b480      	push	{r7}
 80005b4:	b085      	sub	sp, #20
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	1ad3      	subs	r3, r2, r3
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	6892      	ldr	r2, [r2, #8]
 80005c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80005cc:	fb01 f202 	mul.w	r2, r1, r2
 80005d0:	1a9b      	subs	r3, r3, r2
 80005d2:	60fb      	str	r3, [r7, #12]

  return ret;
 80005d4:	68fb      	ldr	r3, [r7, #12]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3714      	adds	r7, #20
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <ledInit>:




bool ledInit(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure = {0, };
 80005ea:	f107 0308 	add.w	r3, r7, #8
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
 80005f6:	60da      	str	r2, [r3, #12]
 80005f8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <ledInit+0x80>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	4a19      	ldr	r2, [pc, #100]	; (8000664 <ledInit+0x80>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000606:	4b17      	ldr	r3, [pc, #92]	; (8000664 <ledInit+0x80>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	2301      	movs	r3, #1
 8000614:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]

  for (int i=0; i<LED_MAX_CH; i++)
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
 8000622:	e017      	b.n	8000654 <ledInit+0x70>
  {
    GPIO_InitStructure.Pin = led_tbl[i].pin;
 8000624:	4a10      	ldr	r2, [pc, #64]	; (8000668 <ledInit+0x84>)
 8000626:	69fb      	ldr	r3, [r7, #28]
 8000628:	00db      	lsls	r3, r3, #3
 800062a:	4413      	add	r3, r2
 800062c:	889b      	ldrh	r3, [r3, #4]
 800062e:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStructure);
 8000630:	4a0d      	ldr	r2, [pc, #52]	; (8000668 <ledInit+0x84>)
 8000632:	69fb      	ldr	r3, [r7, #28]
 8000634:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000638:	f107 0208 	add.w	r2, r7, #8
 800063c:	4611      	mov	r1, r2
 800063e:	4618      	mov	r0, r3
 8000640:	f000 fa08 	bl	8000a54 <HAL_GPIO_Init>

    ledOff(i);
 8000644:	69fb      	ldr	r3, [r7, #28]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	4618      	mov	r0, r3
 800064a:	f000 f80f 	bl	800066c <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 800064e:	69fb      	ldr	r3, [r7, #28]
 8000650:	3301      	adds	r3, #1
 8000652:	61fb      	str	r3, [r7, #28]
 8000654:	69fb      	ldr	r3, [r7, #28]
 8000656:	2b00      	cmp	r3, #0
 8000658:	dde4      	ble.n	8000624 <ledInit+0x40>
  }
  return true;
 800065a:	2301      	movs	r3, #1
}
 800065c:	4618      	mov	r0, r3
 800065e:	3720      	adds	r7, #32
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000
 8000668:	080082b4 	.word	0x080082b4

0800066c <ledOff>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d10d      	bne.n	8000698 <ledOff+0x2c>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	4a08      	ldr	r2, [pc, #32]	; (80006a0 <ledOff+0x34>)
 8000680:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	4a06      	ldr	r2, [pc, #24]	; (80006a0 <ledOff+0x34>)
 8000688:	00db      	lsls	r3, r3, #3
 800068a:	4413      	add	r3, r2
 800068c:	889b      	ldrh	r3, [r3, #4]
 800068e:	2200      	movs	r2, #0
 8000690:	4619      	mov	r1, r3
 8000692:	f000 fb61 	bl	8000d58 <HAL_GPIO_WritePin>
 8000696:	e000      	b.n	800069a <ledOff+0x2e>
  if (ch >= LED_MAX_CH) return;
 8000698:	bf00      	nop
}
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	080082b4 	.word	0x080082b4

080006a4 <gpio_out_toggle>:
  gpio->ODR &= ~(GPIO_Pin);
}

//
void gpio_out_toggle(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
 80006ac:	460b      	mov	r3, r1
 80006ae:	807b      	strh	r3, [r7, #2]
  GPIO_TypeDef *gpio = (void*)GPIOA_BASE;
 80006b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80006b4:	60fb      	str	r3, [r7, #12]
  gpio->ODR ^= GPIO_Pin;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	695a      	ldr	r2, [r3, #20]
 80006ba:	887b      	ldrh	r3, [r7, #2]
 80006bc:	405a      	eors	r2, r3
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	615a      	str	r2, [r3, #20]
}
 80006c2:	bf00      	nop
 80006c4:	3714      	adds	r7, #20
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <hwInit>:
 *      Author: mm940
 */
#include "hw.h"

bool hwInit(void)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b082      	sub	sp, #8
 80006d2:	af00      	add	r7, sp, #0
  bool ret = true;
 80006d4:	2301      	movs	r3, #1
 80006d6:	71fb      	strb	r3, [r7, #7]

  ret &= bspInit();
 80006d8:	f7ff fdbc 	bl	8000254 <bspInit>
 80006dc:	4603      	mov	r3, r0
 80006de:	461a      	mov	r2, r3
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	4013      	ands	r3, r2
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	bf14      	ite	ne
 80006e8:	2301      	movne	r3, #1
 80006ea:	2300      	moveq	r3, #0
 80006ec:	71fb      	strb	r3, [r7, #7]
  ret &= ledInit();
 80006ee:	f7ff ff79 	bl	80005e4 <ledInit>
 80006f2:	4603      	mov	r3, r0
 80006f4:	461a      	mov	r2, r3
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4013      	ands	r3, r2
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	bf14      	ite	ne
 80006fe:	2301      	movne	r3, #1
 8000700:	2300      	moveq	r3, #0
 8000702:	71fb      	strb	r3, [r7, #7]

  return ret;
 8000704:	79fb      	ldrb	r3, [r7, #7]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b082      	sub	sp, #8
 8000712:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000714:	2300      	movs	r3, #0
 8000716:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000718:	2003      	movs	r0, #3
 800071a:	f000 f95b 	bl	80009d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800071e:	200f      	movs	r0, #15
 8000720:	f000 f80e 	bl	8000740 <HAL_InitTick>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d002      	beq.n	8000730 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800072a:	2301      	movs	r3, #1
 800072c:	71fb      	strb	r3, [r7, #7]
 800072e:	e001      	b.n	8000734 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000730:	f7ff fe50 	bl	80003d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000734:	79fb      	ldrb	r3, [r7, #7]

}
 8000736:	4618      	mov	r0, r3
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000748:	2300      	movs	r3, #0
 800074a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800074c:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <HAL_InitTick+0x68>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d022      	beq.n	800079a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <HAL_InitTick+0x6c>)
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <HAL_InitTick+0x68>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000760:	fbb1 f3f3 	udiv	r3, r1, r3
 8000764:	fbb2 f3f3 	udiv	r3, r2, r3
 8000768:	4618      	mov	r0, r3
 800076a:	f000 f966 	bl	8000a3a <HAL_SYSTICK_Config>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d10f      	bne.n	8000794 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b0f      	cmp	r3, #15
 8000778:	d809      	bhi.n	800078e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800077a:	2200      	movs	r2, #0
 800077c:	6879      	ldr	r1, [r7, #4]
 800077e:	f04f 30ff 	mov.w	r0, #4294967295
 8000782:	f000 f932 	bl	80009ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <HAL_InitTick+0x70>)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	e007      	b.n	800079e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800078e:	2301      	movs	r3, #1
 8000790:	73fb      	strb	r3, [r7, #15]
 8000792:	e004      	b.n	800079e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000794:	2301      	movs	r3, #1
 8000796:	73fb      	strb	r3, [r7, #15]
 8000798:	e001      	b.n	800079e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800079a:	2301      	movs	r3, #1
 800079c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800079e:	7bfb      	ldrb	r3, [r7, #15]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000008 	.word	0x20000008
 80007ac:	20000000 	.word	0x20000000
 80007b0:	20000004 	.word	0x20000004

080007b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <HAL_IncTick+0x1c>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <HAL_IncTick+0x20>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4413      	add	r3, r2
 80007c2:	4a03      	ldr	r2, [pc, #12]	; (80007d0 <HAL_IncTick+0x1c>)
 80007c4:	6013      	str	r3, [r2, #0]
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	200001a8 	.word	0x200001a8
 80007d4:	20000008 	.word	0x20000008

080007d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  return uwTick;
 80007dc:	4b03      	ldr	r3, [pc, #12]	; (80007ec <HAL_GetTick+0x14>)
 80007de:	681b      	ldr	r3, [r3, #0]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	200001a8 	.word	0x200001a8

080007f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007f8:	f7ff ffee 	bl	80007d8 <HAL_GetTick>
 80007fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000808:	d004      	beq.n	8000814 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <HAL_Delay+0x40>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	68fa      	ldr	r2, [r7, #12]
 8000810:	4413      	add	r3, r2
 8000812:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000814:	bf00      	nop
 8000816:	f7ff ffdf 	bl	80007d8 <HAL_GetTick>
 800081a:	4602      	mov	r2, r0
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	1ad3      	subs	r3, r2, r3
 8000820:	68fa      	ldr	r2, [r7, #12]
 8000822:	429a      	cmp	r2, r3
 8000824:	d8f7      	bhi.n	8000816 <HAL_Delay+0x26>
  {
  }
}
 8000826:	bf00      	nop
 8000828:	bf00      	nop
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000008 	.word	0x20000008

08000834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f003 0307 	and.w	r3, r3, #7
 8000842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <__NVIC_SetPriorityGrouping+0x44>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800084a:	68ba      	ldr	r2, [r7, #8]
 800084c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000850:	4013      	ands	r3, r2
 8000852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800085c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000866:	4a04      	ldr	r2, [pc, #16]	; (8000878 <__NVIC_SetPriorityGrouping+0x44>)
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	60d3      	str	r3, [r2, #12]
}
 800086c:	bf00      	nop
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000880:	4b04      	ldr	r3, [pc, #16]	; (8000894 <__NVIC_GetPriorityGrouping+0x18>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	0a1b      	lsrs	r3, r3, #8
 8000886:	f003 0307 	and.w	r3, r3, #7
}
 800088a:	4618      	mov	r0, r3
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	db0b      	blt.n	80008c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	f003 021f 	and.w	r2, r3, #31
 80008b0:	4907      	ldr	r1, [pc, #28]	; (80008d0 <__NVIC_EnableIRQ+0x38>)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	095b      	lsrs	r3, r3, #5
 80008b8:	2001      	movs	r0, #1
 80008ba:	fa00 f202 	lsl.w	r2, r0, r2
 80008be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000e100 	.word	0xe000e100

080008d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	db0a      	blt.n	80008fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	b2da      	uxtb	r2, r3
 80008ec:	490c      	ldr	r1, [pc, #48]	; (8000920 <__NVIC_SetPriority+0x4c>)
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	0112      	lsls	r2, r2, #4
 80008f4:	b2d2      	uxtb	r2, r2
 80008f6:	440b      	add	r3, r1
 80008f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008fc:	e00a      	b.n	8000914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	b2da      	uxtb	r2, r3
 8000902:	4908      	ldr	r1, [pc, #32]	; (8000924 <__NVIC_SetPriority+0x50>)
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	f003 030f 	and.w	r3, r3, #15
 800090a:	3b04      	subs	r3, #4
 800090c:	0112      	lsls	r2, r2, #4
 800090e:	b2d2      	uxtb	r2, r2
 8000910:	440b      	add	r3, r1
 8000912:	761a      	strb	r2, [r3, #24]
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000e100 	.word	0xe000e100
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000928:	b480      	push	{r7}
 800092a:	b089      	sub	sp, #36	; 0x24
 800092c:	af00      	add	r7, sp, #0
 800092e:	60f8      	str	r0, [r7, #12]
 8000930:	60b9      	str	r1, [r7, #8]
 8000932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	f003 0307 	and.w	r3, r3, #7
 800093a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	f1c3 0307 	rsb	r3, r3, #7
 8000942:	2b04      	cmp	r3, #4
 8000944:	bf28      	it	cs
 8000946:	2304      	movcs	r3, #4
 8000948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	3304      	adds	r3, #4
 800094e:	2b06      	cmp	r3, #6
 8000950:	d902      	bls.n	8000958 <NVIC_EncodePriority+0x30>
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	3b03      	subs	r3, #3
 8000956:	e000      	b.n	800095a <NVIC_EncodePriority+0x32>
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800095c:	f04f 32ff 	mov.w	r2, #4294967295
 8000960:	69bb      	ldr	r3, [r7, #24]
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	43da      	mvns	r2, r3
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	401a      	ands	r2, r3
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000970:	f04f 31ff 	mov.w	r1, #4294967295
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	fa01 f303 	lsl.w	r3, r1, r3
 800097a:	43d9      	mvns	r1, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000980:	4313      	orrs	r3, r2
         );
}
 8000982:	4618      	mov	r0, r3
 8000984:	3724      	adds	r7, #36	; 0x24
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
	...

08000990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3b01      	subs	r3, #1
 800099c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009a0:	d301      	bcc.n	80009a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009a2:	2301      	movs	r3, #1
 80009a4:	e00f      	b.n	80009c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009a6:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <SysTick_Config+0x40>)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ae:	210f      	movs	r1, #15
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	f7ff ff8e 	bl	80008d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <SysTick_Config+0x40>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009be:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <SysTick_Config+0x40>)
 80009c0:	2207      	movs	r2, #7
 80009c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	e000e010 	.word	0xe000e010

080009d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff ff29 	bl	8000834 <__NVIC_SetPriorityGrouping>
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b086      	sub	sp, #24
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	4603      	mov	r3, r0
 80009f2:	60b9      	str	r1, [r7, #8]
 80009f4:	607a      	str	r2, [r7, #4]
 80009f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009f8:	f7ff ff40 	bl	800087c <__NVIC_GetPriorityGrouping>
 80009fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	68b9      	ldr	r1, [r7, #8]
 8000a02:	6978      	ldr	r0, [r7, #20]
 8000a04:	f7ff ff90 	bl	8000928 <NVIC_EncodePriority>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a0e:	4611      	mov	r1, r2
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ff5f 	bl	80008d4 <__NVIC_SetPriority>
}
 8000a16:	bf00      	nop
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b082      	sub	sp, #8
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	4603      	mov	r3, r0
 8000a26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff ff33 	bl	8000898 <__NVIC_EnableIRQ>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f7ff ffa4 	bl	8000990 <SysTick_Config>
 8000a48:	4603      	mov	r3, r0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b087      	sub	sp, #28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000a62:	e15a      	b.n	8000d1a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	2101      	movs	r1, #1
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a70:	4013      	ands	r3, r2
 8000a72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	f000 814c 	beq.w	8000d14 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f003 0303 	and.w	r3, r3, #3
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d005      	beq.n	8000a94 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d130      	bne.n	8000af6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	2203      	movs	r2, #3
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	68da      	ldr	r2, [r3, #12]
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4313      	orrs	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000aca:	2201      	movs	r2, #1
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	091b      	lsrs	r3, r3, #4
 8000ae0:	f003 0201 	and.w	r2, r3, #1
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	4313      	orrs	r3, r2
 8000aee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f003 0303 	and.w	r3, r3, #3
 8000afe:	2b03      	cmp	r3, #3
 8000b00:	d017      	beq.n	8000b32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43db      	mvns	r3, r3
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	4013      	ands	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	689a      	ldr	r2, [r3, #8]
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	f003 0303 	and.w	r3, r3, #3
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d123      	bne.n	8000b86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	08da      	lsrs	r2, r3, #3
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	3208      	adds	r2, #8
 8000b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	220f      	movs	r2, #15
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	691a      	ldr	r2, [r3, #16]
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	f003 0307 	and.w	r3, r3, #7
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	08da      	lsrs	r2, r3, #3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3208      	adds	r2, #8
 8000b80:	6939      	ldr	r1, [r7, #16]
 8000b82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	2203      	movs	r2, #3
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f003 0203 	and.w	r2, r3, #3
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f000 80a6 	beq.w	8000d14 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc8:	4b5b      	ldr	r3, [pc, #364]	; (8000d38 <HAL_GPIO_Init+0x2e4>)
 8000bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bcc:	4a5a      	ldr	r2, [pc, #360]	; (8000d38 <HAL_GPIO_Init+0x2e4>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	6613      	str	r3, [r2, #96]	; 0x60
 8000bd4:	4b58      	ldr	r3, [pc, #352]	; (8000d38 <HAL_GPIO_Init+0x2e4>)
 8000bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000be0:	4a56      	ldr	r2, [pc, #344]	; (8000d3c <HAL_GPIO_Init+0x2e8>)
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	089b      	lsrs	r3, r3, #2
 8000be6:	3302      	adds	r3, #2
 8000be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	f003 0303 	and.w	r3, r3, #3
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	220f      	movs	r2, #15
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c0a:	d01f      	beq.n	8000c4c <HAL_GPIO_Init+0x1f8>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a4c      	ldr	r2, [pc, #304]	; (8000d40 <HAL_GPIO_Init+0x2ec>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d019      	beq.n	8000c48 <HAL_GPIO_Init+0x1f4>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a4b      	ldr	r2, [pc, #300]	; (8000d44 <HAL_GPIO_Init+0x2f0>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d013      	beq.n	8000c44 <HAL_GPIO_Init+0x1f0>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a4a      	ldr	r2, [pc, #296]	; (8000d48 <HAL_GPIO_Init+0x2f4>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d00d      	beq.n	8000c40 <HAL_GPIO_Init+0x1ec>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a49      	ldr	r2, [pc, #292]	; (8000d4c <HAL_GPIO_Init+0x2f8>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d007      	beq.n	8000c3c <HAL_GPIO_Init+0x1e8>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a48      	ldr	r2, [pc, #288]	; (8000d50 <HAL_GPIO_Init+0x2fc>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d101      	bne.n	8000c38 <HAL_GPIO_Init+0x1e4>
 8000c34:	2305      	movs	r3, #5
 8000c36:	e00a      	b.n	8000c4e <HAL_GPIO_Init+0x1fa>
 8000c38:	2306      	movs	r3, #6
 8000c3a:	e008      	b.n	8000c4e <HAL_GPIO_Init+0x1fa>
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	e006      	b.n	8000c4e <HAL_GPIO_Init+0x1fa>
 8000c40:	2303      	movs	r3, #3
 8000c42:	e004      	b.n	8000c4e <HAL_GPIO_Init+0x1fa>
 8000c44:	2302      	movs	r3, #2
 8000c46:	e002      	b.n	8000c4e <HAL_GPIO_Init+0x1fa>
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e000      	b.n	8000c4e <HAL_GPIO_Init+0x1fa>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	697a      	ldr	r2, [r7, #20]
 8000c50:	f002 0203 	and.w	r2, r2, #3
 8000c54:	0092      	lsls	r2, r2, #2
 8000c56:	4093      	lsls	r3, r2
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c5e:	4937      	ldr	r1, [pc, #220]	; (8000d3c <HAL_GPIO_Init+0x2e8>)
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	089b      	lsrs	r3, r3, #2
 8000c64:	3302      	adds	r3, #2
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c6c:	4b39      	ldr	r3, [pc, #228]	; (8000d54 <HAL_GPIO_Init+0x300>)
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	43db      	mvns	r3, r3
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d003      	beq.n	8000c90 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c90:	4a30      	ldr	r2, [pc, #192]	; (8000d54 <HAL_GPIO_Init+0x300>)
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c96:	4b2f      	ldr	r3, [pc, #188]	; (8000d54 <HAL_GPIO_Init+0x300>)
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d003      	beq.n	8000cba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cba:	4a26      	ldr	r2, [pc, #152]	; (8000d54 <HAL_GPIO_Init+0x300>)
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000cc0:	4b24      	ldr	r3, [pc, #144]	; (8000d54 <HAL_GPIO_Init+0x300>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d003      	beq.n	8000ce4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ce4:	4a1b      	ldr	r2, [pc, #108]	; (8000d54 <HAL_GPIO_Init+0x300>)
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000cea:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <HAL_GPIO_Init+0x300>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d003      	beq.n	8000d0e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d0e:	4a11      	ldr	r2, [pc, #68]	; (8000d54 <HAL_GPIO_Init+0x300>)
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	3301      	adds	r3, #1
 8000d18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	fa22 f303 	lsr.w	r3, r2, r3
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	f47f ae9d 	bne.w	8000a64 <HAL_GPIO_Init+0x10>
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	bf00      	nop
 8000d2e:	371c      	adds	r7, #28
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	40010000 	.word	0x40010000
 8000d40:	48000400 	.word	0x48000400
 8000d44:	48000800 	.word	0x48000800
 8000d48:	48000c00 	.word	0x48000c00
 8000d4c:	48001000 	.word	0x48001000
 8000d50:	48001400 	.word	0x48001400
 8000d54:	40010400 	.word	0x40010400

08000d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	807b      	strh	r3, [r7, #2]
 8000d64:	4613      	mov	r3, r2
 8000d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d68:	787b      	ldrb	r3, [r7, #1]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d003      	beq.n	8000d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d6e:	887a      	ldrh	r2, [r7, #2]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d74:	e002      	b.n	8000d7c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d76:	887a      	ldrh	r2, [r7, #2]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d101      	bne.n	8000d9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e0c0      	b.n	8000f1c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d106      	bne.n	8000db4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2200      	movs	r2, #0
 8000daa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f006 ff0c 	bl	8007bcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2203      	movs	r2, #3
 8000db8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f002 fd24 	bl	800380e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	73fb      	strb	r3, [r7, #15]
 8000dca:	e03e      	b.n	8000e4a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000dcc:	7bfa      	ldrb	r2, [r7, #15]
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	4413      	add	r3, r2
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	440b      	add	r3, r1
 8000dda:	3311      	adds	r3, #17
 8000ddc:	2201      	movs	r2, #1
 8000dde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000de0:	7bfa      	ldrb	r2, [r7, #15]
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	4613      	mov	r3, r2
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	4413      	add	r3, r2
 8000dea:	00db      	lsls	r3, r3, #3
 8000dec:	440b      	add	r3, r1
 8000dee:	3310      	adds	r3, #16
 8000df0:	7bfa      	ldrb	r2, [r7, #15]
 8000df2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000df4:	7bfa      	ldrb	r2, [r7, #15]
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	4413      	add	r3, r2
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	440b      	add	r3, r1
 8000e02:	3313      	adds	r3, #19
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e08:	7bfa      	ldrb	r2, [r7, #15]
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	4413      	add	r3, r2
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	440b      	add	r3, r1
 8000e16:	3320      	adds	r3, #32
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e1c:	7bfa      	ldrb	r2, [r7, #15]
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	4613      	mov	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	4413      	add	r3, r2
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	440b      	add	r3, r1
 8000e2a:	3324      	adds	r3, #36	; 0x24
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	1c5a      	adds	r2, r3, #1
 8000e36:	4613      	mov	r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	4413      	add	r3, r2
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	440b      	add	r3, r1
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	3301      	adds	r3, #1
 8000e48:	73fb      	strb	r3, [r7, #15]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	791b      	ldrb	r3, [r3, #4]
 8000e4e:	7bfa      	ldrb	r2, [r7, #15]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d3bb      	bcc.n	8000dcc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	73fb      	strb	r3, [r7, #15]
 8000e58:	e044      	b.n	8000ee4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000e5a:	7bfa      	ldrb	r2, [r7, #15]
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	4413      	add	r3, r2
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	440b      	add	r3, r1
 8000e68:	f203 1351 	addw	r3, r3, #337	; 0x151
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000e70:	7bfa      	ldrb	r2, [r7, #15]
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	4613      	mov	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4413      	add	r3, r2
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	440b      	add	r3, r1
 8000e7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000e82:	7bfa      	ldrb	r2, [r7, #15]
 8000e84:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000e86:	7bfa      	ldrb	r2, [r7, #15]
 8000e88:	6879      	ldr	r1, [r7, #4]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4413      	add	r3, r2
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	440b      	add	r3, r1
 8000e94:	f203 1353 	addw	r3, r3, #339	; 0x153
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000e9c:	7bfa      	ldrb	r2, [r7, #15]
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	4413      	add	r3, r2
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	440b      	add	r3, r1
 8000eaa:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000eb2:	7bfa      	ldrb	r2, [r7, #15]
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	4413      	add	r3, r2
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	440b      	add	r3, r1
 8000ec0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000ec8:	7bfa      	ldrb	r2, [r7, #15]
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	440b      	add	r3, r1
 8000ed6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	73fb      	strb	r3, [r7, #15]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	791b      	ldrb	r3, [r3, #4]
 8000ee8:	7bfa      	ldrb	r2, [r7, #15]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d3b5      	bcc.n	8000e5a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6818      	ldr	r0, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000efa:	f002 fca3 	bl	8003844 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2201      	movs	r2, #1
 8000f08:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	7a9b      	ldrb	r3, [r3, #10]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d102      	bne.n	8000f1a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f001 fc41 	bl	800279c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d101      	bne.n	8000f3a <HAL_PCD_Start+0x16>
 8000f36:	2302      	movs	r3, #2
 8000f38:	e012      	b.n	8000f60 <HAL_PCD_Start+0x3c>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f002 fc4a 	bl	80037e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f004 ff0a 	bl	8005d6a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f004 ff0f 	bl	8005d98 <USB_ReadInterrupts>
 8000f7a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 fb04 	bl	8001594 <PCD_EP_ISR_Handler>

    return;
 8000f8c:	e110      	b.n	80011b0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d013      	beq.n	8000fc0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000faa:	b292      	uxth	r2, r2
 8000fac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f006 fe9c 	bl	8007cee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f000 f8fc 	bl	80011b6 <HAL_PCD_SetAddress>

    return;
 8000fbe:	e0f7      	b.n	80011b0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00c      	beq.n	8000fe4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000fdc:	b292      	uxth	r2, r2
 8000fde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8000fe2:	e0e5      	b.n	80011b0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00c      	beq.n	8001008 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001000:	b292      	uxth	r2, r2
 8001002:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001006:	e0d3      	b.n	80011b0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d034      	beq.n	800107c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800101a:	b29a      	uxth	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 0204 	bic.w	r2, r2, #4
 8001024:	b292      	uxth	r2, r2
 8001026:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001032:	b29a      	uxth	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0208 	bic.w	r2, r2, #8
 800103c:	b292      	uxth	r2, r2
 800103e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8001048:	2b01      	cmp	r3, #1
 800104a:	d107      	bne.n	800105c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001054:	2100      	movs	r1, #0
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f007 f83c 	bl	80080d4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f006 fe7f 	bl	8007d60 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800106a:	b29a      	uxth	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001074:	b292      	uxth	r2, r2
 8001076:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800107a:	e099      	b.n	80011b0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001082:	2b00      	cmp	r3, #0
 8001084:	d027      	beq.n	80010d6 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800108e:	b29a      	uxth	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f042 0208 	orr.w	r2, r2, #8
 8001098:	b292      	uxth	r2, r2
 800109a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010b0:	b292      	uxth	r2, r2
 80010b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80010be:	b29a      	uxth	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f042 0204 	orr.w	r2, r2, #4
 80010c8:	b292      	uxth	r2, r2
 80010ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f006 fe2c 	bl	8007d2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80010d4:	e06c      	b.n	80011b0 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d040      	beq.n	8001162 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010f2:	b292      	uxth	r2, r2
 80010f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d12b      	bne.n	800115a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800110a:	b29a      	uxth	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f042 0204 	orr.w	r2, r2, #4
 8001114:	b292      	uxth	r2, r2
 8001116:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001122:	b29a      	uxth	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f042 0208 	orr.w	r2, r2, #8
 800112c:	b292      	uxth	r2, r2
 800112e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2201      	movs	r2, #1
 8001136:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001142:	b29b      	uxth	r3, r3
 8001144:	089b      	lsrs	r3, r3, #2
 8001146:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001150:	2101      	movs	r1, #1
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f006 ffbe 	bl	80080d4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001158:	e02a      	b.n	80011b0 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f006 fde6 	bl	8007d2c <HAL_PCD_SuspendCallback>
    return;
 8001160:	e026      	b.n	80011b0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001168:	2b00      	cmp	r3, #0
 800116a:	d00f      	beq.n	800118c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001174:	b29a      	uxth	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800117e:	b292      	uxth	r2, r2
 8001180:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f006 fda4 	bl	8007cd2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800118a:	e011      	b.n	80011b0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00c      	beq.n	80011b0 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800119e:	b29a      	uxth	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011a8:	b292      	uxth	r2, r2
 80011aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80011ae:	bf00      	nop
  }
}
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	460b      	mov	r3, r1
 80011c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d101      	bne.n	80011d0 <HAL_PCD_SetAddress+0x1a>
 80011cc:	2302      	movs	r3, #2
 80011ce:	e012      	b.n	80011f6 <HAL_PCD_SetAddress+0x40>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2201      	movs	r2, #1
 80011d4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	78fa      	ldrb	r2, [r7, #3]
 80011dc:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	78fa      	ldrb	r2, [r7, #3]
 80011e4:	4611      	mov	r1, r2
 80011e6:	4618      	mov	r0, r3
 80011e8:	f004 fdab 	bl	8005d42 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	4608      	mov	r0, r1
 8001208:	4611      	mov	r1, r2
 800120a:	461a      	mov	r2, r3
 800120c:	4603      	mov	r3, r0
 800120e:	70fb      	strb	r3, [r7, #3]
 8001210:	460b      	mov	r3, r1
 8001212:	803b      	strh	r3, [r7, #0]
 8001214:	4613      	mov	r3, r2
 8001216:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001218:	2300      	movs	r3, #0
 800121a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800121c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001220:	2b00      	cmp	r3, #0
 8001222:	da0e      	bge.n	8001242 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001224:	78fb      	ldrb	r3, [r7, #3]
 8001226:	f003 0207 	and.w	r2, r3, #7
 800122a:	4613      	mov	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	3310      	adds	r3, #16
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	4413      	add	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2201      	movs	r2, #1
 800123e:	705a      	strb	r2, [r3, #1]
 8001240:	e00e      	b.n	8001260 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001242:	78fb      	ldrb	r3, [r7, #3]
 8001244:	f003 0207 	and.w	r2, r3, #7
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	4413      	add	r3, r2
 8001258:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2200      	movs	r2, #0
 800125e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001260:	78fb      	ldrb	r3, [r7, #3]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	b2da      	uxtb	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800126c:	883a      	ldrh	r2, [r7, #0]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	78ba      	ldrb	r2, [r7, #2]
 8001276:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001278:	78bb      	ldrb	r3, [r7, #2]
 800127a:	2b02      	cmp	r3, #2
 800127c:	d102      	bne.n	8001284 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2200      	movs	r2, #0
 8001282:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800128a:	2b01      	cmp	r3, #1
 800128c:	d101      	bne.n	8001292 <HAL_PCD_EP_Open+0x94>
 800128e:	2302      	movs	r3, #2
 8001290:	e00e      	b.n	80012b0 <HAL_PCD_EP_Open+0xb2>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2201      	movs	r2, #1
 8001296:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68f9      	ldr	r1, [r7, #12]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f002 faed 	bl	8003880 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 80012ae:	7afb      	ldrb	r3, [r7, #11]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80012c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	da0e      	bge.n	80012ea <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012cc:	78fb      	ldrb	r3, [r7, #3]
 80012ce:	f003 0207 	and.w	r2, r3, #7
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	3310      	adds	r3, #16
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	4413      	add	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2201      	movs	r2, #1
 80012e6:	705a      	strb	r2, [r3, #1]
 80012e8:	e00e      	b.n	8001308 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80012ea:	78fb      	ldrb	r3, [r7, #3]
 80012ec:	f003 0207 	and.w	r2, r3, #7
 80012f0:	4613      	mov	r3, r2
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	4413      	add	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2200      	movs	r2, #0
 8001306:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001308:	78fb      	ldrb	r3, [r7, #3]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	b2da      	uxtb	r2, r3
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800131a:	2b01      	cmp	r3, #1
 800131c:	d101      	bne.n	8001322 <HAL_PCD_EP_Close+0x6a>
 800131e:	2302      	movs	r3, #2
 8001320:	e00e      	b.n	8001340 <HAL_PCD_EP_Close+0x88>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2201      	movs	r2, #1
 8001326:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68f9      	ldr	r1, [r7, #12]
 8001330:	4618      	mov	r0, r3
 8001332:	f002 fe69 	bl	8004008 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	460b      	mov	r3, r1
 8001356:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001358:	7afb      	ldrb	r3, [r7, #11]
 800135a:	f003 0207 	and.w	r2, r3, #7
 800135e:	4613      	mov	r3, r2
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	4413      	add	r3, r2
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	4413      	add	r3, r2
 800136e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	2200      	movs	r2, #0
 8001386:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001388:	7afb      	ldrb	r3, [r7, #11]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	b2da      	uxtb	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6979      	ldr	r1, [r7, #20]
 800139a:	4618      	mov	r0, r3
 800139c:	f003 f821 	bl	80043e2 <USB_EPStartXfer>

  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3718      	adds	r7, #24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	460b      	mov	r3, r1
 80013b4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80013b6:	78fb      	ldrb	r3, [r7, #3]
 80013b8:	f003 0207 	and.w	r2, r3, #7
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	440b      	add	r3, r1
 80013c8:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80013cc:	681b      	ldr	r3, [r3, #0]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b086      	sub	sp, #24
 80013de:	af00      	add	r7, sp, #0
 80013e0:	60f8      	str	r0, [r7, #12]
 80013e2:	607a      	str	r2, [r7, #4]
 80013e4:	603b      	str	r3, [r7, #0]
 80013e6:	460b      	mov	r3, r1
 80013e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013ea:	7afb      	ldrb	r3, [r7, #11]
 80013ec:	f003 0207 	and.w	r2, r3, #7
 80013f0:	4613      	mov	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	3310      	adds	r3, #16
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	4413      	add	r3, r2
 80013fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	2200      	movs	r2, #0
 800141e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	2201      	movs	r2, #1
 8001424:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001426:	7afb      	ldrb	r3, [r7, #11]
 8001428:	f003 0307 	and.w	r3, r3, #7
 800142c:	b2da      	uxtb	r2, r3
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6979      	ldr	r1, [r7, #20]
 8001438:	4618      	mov	r0, r3
 800143a:	f002 ffd2 	bl	80043e2 <USB_EPStartXfer>

  return HAL_OK;
 800143e:	2300      	movs	r3, #0
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001454:	78fb      	ldrb	r3, [r7, #3]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	7912      	ldrb	r2, [r2, #4]
 800145e:	4293      	cmp	r3, r2
 8001460:	d901      	bls.n	8001466 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e03e      	b.n	80014e4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001466:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800146a:	2b00      	cmp	r3, #0
 800146c:	da0e      	bge.n	800148c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800146e:	78fb      	ldrb	r3, [r7, #3]
 8001470:	f003 0207 	and.w	r2, r3, #7
 8001474:	4613      	mov	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	3310      	adds	r3, #16
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2201      	movs	r2, #1
 8001488:	705a      	strb	r2, [r3, #1]
 800148a:	e00c      	b.n	80014a6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800148c:	78fa      	ldrb	r2, [r7, #3]
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	4413      	add	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	2200      	movs	r2, #0
 80014a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2201      	movs	r2, #1
 80014aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014ac:	78fb      	ldrb	r3, [r7, #3]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d101      	bne.n	80014c6 <HAL_PCD_EP_SetStall+0x7e>
 80014c2:	2302      	movs	r3, #2
 80014c4:	e00e      	b.n	80014e4 <HAL_PCD_EP_SetStall+0x9c>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2201      	movs	r2, #1
 80014ca:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68f9      	ldr	r1, [r7, #12]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f004 fb35 	bl	8005b44 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3710      	adds	r7, #16
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80014f8:	78fb      	ldrb	r3, [r7, #3]
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	7912      	ldrb	r2, [r2, #4]
 8001502:	4293      	cmp	r3, r2
 8001504:	d901      	bls.n	800150a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e040      	b.n	800158c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800150a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800150e:	2b00      	cmp	r3, #0
 8001510:	da0e      	bge.n	8001530 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001512:	78fb      	ldrb	r3, [r7, #3]
 8001514:	f003 0207 	and.w	r2, r3, #7
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	3310      	adds	r3, #16
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	2201      	movs	r2, #1
 800152c:	705a      	strb	r2, [r3, #1]
 800152e:	e00e      	b.n	800154e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	f003 0207 	and.w	r2, r3, #7
 8001536:	4613      	mov	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4413      	add	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2200      	movs	r2, #0
 800154c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2200      	movs	r2, #0
 8001552:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	b2da      	uxtb	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8001566:	2b01      	cmp	r3, #1
 8001568:	d101      	bne.n	800156e <HAL_PCD_EP_ClrStall+0x82>
 800156a:	2302      	movs	r3, #2
 800156c:	e00e      	b.n	800158c <HAL_PCD_EP_ClrStall+0xa0>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2201      	movs	r2, #1
 8001572:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	68f9      	ldr	r1, [r7, #12]
 800157c:	4618      	mov	r0, r3
 800157e:	f004 fb32 	bl	8005be6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b096      	sub	sp, #88	; 0x58
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800159c:	e3ae      	b.n	8001cfc <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80015aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	f003 030f 	and.w	r3, r3, #15
 80015b4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80015b8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f040 8170 	bne.w	80018a2 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80015c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80015c6:	f003 0310 	and.w	r3, r3, #16
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d14d      	bne.n	800166a <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80015da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015de:	81fb      	strh	r3, [r7, #14]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	89fb      	ldrh	r3, [r7, #14]
 80015e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3310      	adds	r3, #16
 80015f6:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001600:	b29b      	uxth	r3, r3
 8001602:	461a      	mov	r2, r3
 8001604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	4413      	add	r3, r2
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6812      	ldr	r2, [r2, #0]
 8001610:	4413      	add	r3, r2
 8001612:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800161c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800161e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001622:	695a      	ldr	r2, [r3, #20]
 8001624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001626:	69db      	ldr	r3, [r3, #28]
 8001628:	441a      	add	r2, r3
 800162a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800162c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800162e:	2100      	movs	r1, #0
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f006 fb34 	bl	8007c9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	7b1b      	ldrb	r3, [r3, #12]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 835d 	beq.w	8001cfc <PCD_EP_ISR_Handler+0x768>
 8001642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	2b00      	cmp	r3, #0
 8001648:	f040 8358 	bne.w	8001cfc <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7b1b      	ldrb	r3, [r3, #12]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001656:	b2da      	uxtb	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	b292      	uxth	r2, r2
 800165e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	731a      	strb	r2, [r3, #12]
 8001668:	e348      	b.n	8001cfc <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001670:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800167c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001684:	2b00      	cmp	r3, #0
 8001686:	d032      	beq.n	80016ee <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001690:	b29b      	uxth	r3, r3
 8001692:	461a      	mov	r2, r3
 8001694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	4413      	add	r3, r2
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	4413      	add	r3, r2
 80016a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80016ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016ae:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6818      	ldr	r0, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f503 7126 	add.w	r1, r3, #664	; 0x298
 80016ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016bc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80016be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016c0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	f004 fbba 	bl	8005e3c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80016d4:	4013      	ands	r3, r2
 80016d6:	823b      	strh	r3, [r7, #16]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	8a3a      	ldrh	r2, [r7, #16]
 80016de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016e2:	b292      	uxth	r2, r2
 80016e4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f006 faac 	bl	8007c44 <HAL_PCD_SetupStageCallback>
 80016ec:	e306      	b.n	8001cfc <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80016ee:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f280 8302 	bge.w	8001cfc <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	881b      	ldrh	r3, [r3, #0]
 80016fe:	b29a      	uxth	r2, r3
 8001700:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001704:	4013      	ands	r3, r2
 8001706:	83fb      	strh	r3, [r7, #30]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	8bfa      	ldrh	r2, [r7, #30]
 800170e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001712:	b292      	uxth	r2, r2
 8001714:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800171e:	b29b      	uxth	r3, r3
 8001720:	461a      	mov	r2, r3
 8001722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	4413      	add	r3, r2
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6812      	ldr	r2, [r2, #0]
 800172e:	4413      	add	r3, r2
 8001730:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800173a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800173c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800173e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d019      	beq.n	800177a <PCD_EP_ISR_Handler+0x1e6>
 8001746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d015      	beq.n	800177a <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6818      	ldr	r0, [r3, #0]
 8001752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001754:	6959      	ldr	r1, [r3, #20]
 8001756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001758:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800175a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800175c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800175e:	b29b      	uxth	r3, r3
 8001760:	f004 fb6c 	bl	8005e3c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001766:	695a      	ldr	r2, [r3, #20]
 8001768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	441a      	add	r2, r3
 800176e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001770:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001772:	2100      	movs	r1, #0
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f006 fa77 	bl	8007c68 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001784:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800178c:	2b00      	cmp	r3, #0
 800178e:	f040 82b5 	bne.w	8001cfc <PCD_EP_ISR_Handler+0x768>
 8001792:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001796:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800179a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800179e:	f000 82ad 	beq.w	8001cfc <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	61bb      	str	r3, [r7, #24]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	461a      	mov	r2, r3
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	4413      	add	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	801a      	strh	r2, [r3, #0]
 80017d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	2b3e      	cmp	r3, #62	; 0x3e
 80017d8:	d91d      	bls.n	8001816 <PCD_EP_ISR_Handler+0x282>
 80017da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	647b      	str	r3, [r7, #68]	; 0x44
 80017e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	f003 031f 	and.w	r3, r3, #31
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d102      	bne.n	80017f4 <PCD_EP_ISR_Handler+0x260>
 80017ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017f0:	3b01      	subs	r3, #1
 80017f2:	647b      	str	r3, [r7, #68]	; 0x44
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	029b      	lsls	r3, r3, #10
 8001800:	b29b      	uxth	r3, r3
 8001802:	4313      	orrs	r3, r2
 8001804:	b29b      	uxth	r3, r3
 8001806:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800180a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800180e:	b29a      	uxth	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	801a      	strh	r2, [r3, #0]
 8001814:	e026      	b.n	8001864 <PCD_EP_ISR_Handler+0x2d0>
 8001816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10a      	bne.n	8001834 <PCD_EP_ISR_Handler+0x2a0>
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	b29b      	uxth	r3, r3
 8001824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800182c:	b29a      	uxth	r2, r3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	801a      	strh	r2, [r3, #0]
 8001832:	e017      	b.n	8001864 <PCD_EP_ISR_Handler+0x2d0>
 8001834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	085b      	lsrs	r3, r3, #1
 800183a:	647b      	str	r3, [r7, #68]	; 0x44
 800183c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	d002      	beq.n	800184e <PCD_EP_ISR_Handler+0x2ba>
 8001848:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800184a:	3301      	adds	r3, #1
 800184c:	647b      	str	r3, [r7, #68]	; 0x44
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	b29a      	uxth	r2, r3
 8001854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001856:	b29b      	uxth	r3, r3
 8001858:	029b      	lsls	r3, r3, #10
 800185a:	b29b      	uxth	r3, r3
 800185c:	4313      	orrs	r3, r2
 800185e:	b29a      	uxth	r2, r3
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	b29b      	uxth	r3, r3
 800186c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001874:	827b      	strh	r3, [r7, #18]
 8001876:	8a7b      	ldrh	r3, [r7, #18]
 8001878:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800187c:	827b      	strh	r3, [r7, #18]
 800187e:	8a7b      	ldrh	r3, [r7, #18]
 8001880:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001884:	827b      	strh	r3, [r7, #18]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	8a7b      	ldrh	r3, [r7, #18]
 800188c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001890:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800189c:	b29b      	uxth	r3, r3
 800189e:	8013      	strh	r3, [r2, #0]
 80018a0:	e22c      	b.n	8001cfc <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	461a      	mov	r2, r3
 80018a8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80018b6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f280 80f6 	bge.w	8001aac <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	461a      	mov	r2, r3
 80018c6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80018d6:	4013      	ands	r3, r2
 80018d8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	461a      	mov	r2, r3
 80018e2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80018ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018f2:	b292      	uxth	r2, r2
 80018f4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80018f6:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800190c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800190e:	7b1b      	ldrb	r3, [r3, #12]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d123      	bne.n	800195c <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800191c:	b29b      	uxth	r3, r3
 800191e:	461a      	mov	r2, r3
 8001920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	4413      	add	r3, r2
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	4413      	add	r3, r2
 800192e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001938:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800193c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 808e 	beq.w	8001a62 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6818      	ldr	r0, [r3, #0]
 800194a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800194c:	6959      	ldr	r1, [r3, #20]
 800194e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001950:	88da      	ldrh	r2, [r3, #6]
 8001952:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001956:	f004 fa71 	bl	8005e3c <USB_ReadPMA>
 800195a:	e082      	b.n	8001a62 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800195c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800195e:	78db      	ldrb	r3, [r3, #3]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d10a      	bne.n	800197a <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001964:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001968:	461a      	mov	r2, r3
 800196a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 f9d3 	bl	8001d18 <HAL_PCD_EP_DB_Receive>
 8001972:	4603      	mov	r3, r0
 8001974:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001978:	e073      	b.n	8001a62 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	461a      	mov	r2, r3
 8001980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	b29b      	uxth	r3, r3
 800198c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001994:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	461a      	mov	r2, r3
 800199e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	441a      	add	r2, r3
 80019a6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80019aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80019ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80019b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	461a      	mov	r2, r3
 80019c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d022      	beq.n	8001a1e <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	461a      	mov	r2, r3
 80019e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	4413      	add	r3, r2
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	4413      	add	r3, r2
 80019f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019fc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001a00:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d02c      	beq.n	8001a62 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a0e:	6959      	ldr	r1, [r3, #20]
 8001a10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a12:	891a      	ldrh	r2, [r3, #8]
 8001a14:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a18:	f004 fa10 	bl	8005e3c <USB_ReadPMA>
 8001a1c:	e021      	b.n	8001a62 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	461a      	mov	r2, r3
 8001a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	4413      	add	r3, r2
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6812      	ldr	r2, [r2, #0]
 8001a36:	4413      	add	r3, r2
 8001a38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a42:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8001a46:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d009      	beq.n	8001a62 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6818      	ldr	r0, [r3, #0]
 8001a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a54:	6959      	ldr	r1, [r3, #20]
 8001a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a58:	895a      	ldrh	r2, [r3, #10]
 8001a5a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a5e:	f004 f9ed 	bl	8005e3c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a64:	69da      	ldr	r2, [r3, #28]
 8001a66:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a6a:	441a      	add	r2, r3
 8001a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a6e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a72:	695a      	ldr	r2, [r3, #20]
 8001a74:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001a78:	441a      	add	r2, r3
 8001a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a7c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d005      	beq.n	8001a92 <PCD_EP_ISR_Handler+0x4fe>
 8001a86:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8001a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a8c:	691b      	ldr	r3, [r3, #16]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d206      	bcs.n	8001aa0 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	4619      	mov	r1, r3
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f006 f8e5 	bl	8007c68 <HAL_PCD_DataOutStageCallback>
 8001a9e:	e005      	b.n	8001aac <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f002 fc9b 	bl	80043e2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001aac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 8121 	beq.w	8001cfc <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8001aba:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8001abe:	4613      	mov	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	3310      	adds	r3, #16
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	4413      	add	r3, r2
 8001acc:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	4413      	add	r3, r2
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ae8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	441a      	add	r2, r3
 8001afa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001afe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8001b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b0c:	78db      	ldrb	r3, [r3, #3]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	f040 80a2 	bne.w	8001c58 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8001b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b16:	2200      	movs	r2, #0
 8001b18:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8001b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b1c:	7b1b      	ldrb	r3, [r3, #12]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 8093 	beq.w	8001c4a <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001b24:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d046      	beq.n	8001bbe <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001b30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b32:	785b      	ldrb	r3, [r3, #1]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d126      	bne.n	8001b86 <PCD_EP_ISR_Handler+0x5f2>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	4413      	add	r3, r2
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	00da      	lsls	r2, r3, #3
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	4413      	add	r3, r2
 8001b5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001b5e:	623b      	str	r3, [r7, #32]
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	801a      	strh	r2, [r3, #0]
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	6a3b      	ldr	r3, [r7, #32]
 8001b82:	801a      	strh	r2, [r3, #0]
 8001b84:	e061      	b.n	8001c4a <PCD_EP_ISR_Handler+0x6b6>
 8001b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b88:	785b      	ldrb	r3, [r3, #1]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d15d      	bne.n	8001c4a <PCD_EP_ISR_Handler+0x6b6>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba2:	4413      	add	r3, r2
 8001ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	00da      	lsls	r2, r3, #3
 8001bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bae:	4413      	add	r3, r2
 8001bb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb8:	2200      	movs	r2, #0
 8001bba:	801a      	strh	r2, [r3, #0]
 8001bbc:	e045      	b.n	8001c4a <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc6:	785b      	ldrb	r3, [r3, #1]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d126      	bne.n	8001c1a <PCD_EP_ISR_Handler+0x686>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	461a      	mov	r2, r3
 8001bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001be0:	4413      	add	r3, r2
 8001be2:	637b      	str	r3, [r7, #52]	; 0x34
 8001be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	00da      	lsls	r2, r3, #3
 8001bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bec:	4413      	add	r3, r2
 8001bee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001bf2:	633b      	str	r3, [r7, #48]	; 0x30
 8001bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c02:	801a      	strh	r2, [r3, #0]
 8001c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c16:	801a      	strh	r2, [r3, #0]
 8001c18:	e017      	b.n	8001c4a <PCD_EP_ISR_Handler+0x6b6>
 8001c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c1c:	785b      	ldrb	r3, [r3, #1]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d113      	bne.n	8001c4a <PCD_EP_ISR_Handler+0x6b6>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c30:	4413      	add	r3, r2
 8001c32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	00da      	lsls	r2, r3, #3
 8001c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c3c:	4413      	add	r3, r2
 8001c3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001c42:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c46:	2200      	movs	r2, #0
 8001c48:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	4619      	mov	r1, r3
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f006 f824 	bl	8007c9e <HAL_PCD_DataInStageCallback>
 8001c56:	e051      	b.n	8001cfc <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001c58:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d144      	bne.n	8001cee <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	461a      	mov	r2, r3
 8001c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	4413      	add	r3, r2
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c88:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8001c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c8e:	699a      	ldr	r2, [r3, #24]
 8001c90:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d907      	bls.n	8001ca8 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8001c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c9a:	699a      	ldr	r2, [r3, #24]
 8001c9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001ca0:	1ad2      	subs	r2, r2, r3
 8001ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ca4:	619a      	str	r2, [r3, #24]
 8001ca6:	e002      	b.n	8001cae <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8001ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001caa:	2200      	movs	r2, #0
 8001cac:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8001cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d106      	bne.n	8001cc4 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	4619      	mov	r1, r3
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f005 ffee 	bl	8007c9e <HAL_PCD_DataInStageCallback>
 8001cc2:	e01b      	b.n	8001cfc <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8001cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc6:	695a      	ldr	r2, [r3, #20]
 8001cc8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001ccc:	441a      	add	r2, r3
 8001cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8001cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cd4:	69da      	ldr	r2, [r3, #28]
 8001cd6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001cda:	441a      	add	r2, r3
 8001cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cde:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f002 fb7b 	bl	80043e2 <USB_EPStartXfer>
 8001cec:	e006      	b.n	8001cfc <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001cee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f917 	bl	8001f2a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	b21b      	sxth	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f6ff ac48 	blt.w	800159e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3758      	adds	r7, #88	; 0x58
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	4613      	mov	r3, r2
 8001d24:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d07c      	beq.n	8001e2a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	4413      	add	r3, r2
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	4413      	add	r3, r2
 8001d4a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d54:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	699a      	ldr	r2, [r3, #24]
 8001d5a:	8b7b      	ldrh	r3, [r7, #26]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d306      	bcc.n	8001d6e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	699a      	ldr	r2, [r3, #24]
 8001d64:	8b7b      	ldrh	r3, [r7, #26]
 8001d66:	1ad2      	subs	r2, r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	619a      	str	r2, [r3, #24]
 8001d6c:	e002      	b.n	8001d74 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d123      	bne.n	8001dc4 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d96:	833b      	strh	r3, [r7, #24]
 8001d98:	8b3b      	ldrh	r3, [r7, #24]
 8001d9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d9e:	833b      	strh	r3, [r7, #24]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	441a      	add	r2, r3
 8001dae:	8b3b      	ldrh	r3, [r7, #24]
 8001db0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001db4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001db8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d01f      	beq.n	8001e0e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001de8:	82fb      	strh	r3, [r7, #22]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	461a      	mov	r2, r3
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	441a      	add	r2, r3
 8001df8:	8afb      	ldrh	r3, [r7, #22]
 8001dfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001dfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001e0e:	8b7b      	ldrh	r3, [r7, #26]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	f000 8085 	beq.w	8001f20 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	6959      	ldr	r1, [r3, #20]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	891a      	ldrh	r2, [r3, #8]
 8001e22:	8b7b      	ldrh	r3, [r7, #26]
 8001e24:	f004 f80a 	bl	8005e3c <USB_ReadPMA>
 8001e28:	e07a      	b.n	8001f20 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	461a      	mov	r2, r3
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	6812      	ldr	r2, [r2, #0]
 8001e42:	4413      	add	r3, r2
 8001e44:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e4e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	699a      	ldr	r2, [r3, #24]
 8001e54:	8b7b      	ldrh	r3, [r7, #26]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d306      	bcc.n	8001e68 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	699a      	ldr	r2, [r3, #24]
 8001e5e:	8b7b      	ldrh	r3, [r7, #26]
 8001e60:	1ad2      	subs	r2, r2, r3
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	619a      	str	r2, [r3, #24]
 8001e66:	e002      	b.n	8001e6e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d123      	bne.n	8001ebe <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e90:	83fb      	strh	r3, [r7, #30]
 8001e92:	8bfb      	ldrh	r3, [r7, #30]
 8001e94:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001e98:	83fb      	strh	r3, [r7, #30]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	441a      	add	r2, r3
 8001ea8:	8bfb      	ldrh	r3, [r7, #30]
 8001eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001eae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001ebe:	88fb      	ldrh	r3, [r7, #6]
 8001ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d11f      	bne.n	8001f08 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ee2:	83bb      	strh	r3, [r7, #28]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	441a      	add	r2, r3
 8001ef2:	8bbb      	ldrh	r3, [r7, #28]
 8001ef4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ef8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001efc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001f08:	8b7b      	ldrh	r3, [r7, #26]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d008      	beq.n	8001f20 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6818      	ldr	r0, [r3, #0]
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	6959      	ldr	r1, [r3, #20]
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	895a      	ldrh	r2, [r3, #10]
 8001f1a:	8b7b      	ldrh	r3, [r7, #26]
 8001f1c:	f003 ff8e 	bl	8005e3c <USB_ReadPMA>
    }
  }

  return count;
 8001f20:	8b7b      	ldrh	r3, [r7, #26]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3720      	adds	r7, #32
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b0a4      	sub	sp, #144	; 0x90
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	60f8      	str	r0, [r7, #12]
 8001f32:	60b9      	str	r1, [r7, #8]
 8001f34:	4613      	mov	r3, r2
 8001f36:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 81db 	beq.w	80022fa <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4413      	add	r3, r2
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f68:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	699a      	ldr	r2, [r3, #24]
 8001f70:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d907      	bls.n	8001f88 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	699a      	ldr	r2, [r3, #24]
 8001f7c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001f80:	1ad2      	subs	r2, r2, r3
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	619a      	str	r2, [r3, #24]
 8001f86:	e002      	b.n	8001f8e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	699b      	ldr	r3, [r3, #24]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f040 80b9 	bne.w	800210a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	785b      	ldrb	r3, [r3, #1]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d126      	bne.n	8001fee <HAL_PCD_EP_DB_Transmit+0xc4>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb4:	4413      	add	r3, r2
 8001fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	00da      	lsls	r2, r3, #3
 8001fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd6:	801a      	strh	r2, [r3, #0]
 8001fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fea:	801a      	strh	r2, [r3, #0]
 8001fec:	e01a      	b.n	8002024 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	785b      	ldrb	r3, [r3, #1]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d116      	bne.n	8002024 <HAL_PCD_EP_DB_Transmit+0xfa>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	637b      	str	r3, [r7, #52]	; 0x34
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002004:	b29b      	uxth	r3, r3
 8002006:	461a      	mov	r2, r3
 8002008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800200a:	4413      	add	r3, r2
 800200c:	637b      	str	r3, [r7, #52]	; 0x34
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	00da      	lsls	r2, r3, #3
 8002014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002016:	4413      	add	r3, r2
 8002018:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800201c:	633b      	str	r3, [r7, #48]	; 0x30
 800201e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002020:	2200      	movs	r2, #0
 8002022:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	785b      	ldrb	r3, [r3, #1]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d126      	bne.n	8002080 <HAL_PCD_EP_DB_Transmit+0x156>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	61fb      	str	r3, [r7, #28]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002040:	b29b      	uxth	r3, r3
 8002042:	461a      	mov	r2, r3
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	4413      	add	r3, r2
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	00da      	lsls	r2, r3, #3
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	4413      	add	r3, r2
 8002054:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002058:	61bb      	str	r3, [r7, #24]
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	b29b      	uxth	r3, r3
 8002060:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002064:	b29a      	uxth	r2, r3
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	801a      	strh	r2, [r3, #0]
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	b29b      	uxth	r3, r3
 8002070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002078:	b29a      	uxth	r2, r3
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	801a      	strh	r2, [r3, #0]
 800207e:	e017      	b.n	80020b0 <HAL_PCD_EP_DB_Transmit+0x186>
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	785b      	ldrb	r3, [r3, #1]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d113      	bne.n	80020b0 <HAL_PCD_EP_DB_Transmit+0x186>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002090:	b29b      	uxth	r3, r3
 8002092:	461a      	mov	r2, r3
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	4413      	add	r3, r2
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	00da      	lsls	r2, r3, #3
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	4413      	add	r3, r2
 80020a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80020a8:	623b      	str	r3, [r7, #32]
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	2200      	movs	r2, #0
 80020ae:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	4619      	mov	r1, r3
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f005 fdf1 	bl	8007c9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80020bc:	88fb      	ldrh	r3, [r7, #6]
 80020be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 82fa 	beq.w	80026bc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	461a      	mov	r2, r3
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	b29b      	uxth	r3, r3
 80020da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80020de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020e2:	82fb      	strh	r3, [r7, #22]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	441a      	add	r2, r3
 80020f2:	8afb      	ldrh	r3, [r7, #22]
 80020f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80020f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80020fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002104:	b29b      	uxth	r3, r3
 8002106:	8013      	strh	r3, [r2, #0]
 8002108:	e2d8      	b.n	80026bc <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800210a:	88fb      	ldrh	r3, [r7, #6]
 800210c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d021      	beq.n	8002158 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	461a      	mov	r2, r3
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	b29b      	uxth	r3, r3
 8002126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800212a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800212e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	441a      	add	r2, r3
 8002140:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002144:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002148:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800214c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002154:	b29b      	uxth	r3, r3
 8002156:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800215e:	2b01      	cmp	r3, #1
 8002160:	f040 82ac 	bne.w	80026bc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	695a      	ldr	r2, [r3, #20]
 8002168:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800216c:	441a      	add	r2, r3
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	69da      	ldr	r2, [r3, #28]
 8002176:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800217a:	441a      	add	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	6a1a      	ldr	r2, [r3, #32]
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	429a      	cmp	r2, r3
 800218a:	d30b      	bcc.n	80021a4 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	6a1a      	ldr	r2, [r3, #32]
 8002198:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800219c:	1ad2      	subs	r2, r2, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	621a      	str	r2, [r3, #32]
 80021a2:	e017      	b.n	80021d4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d108      	bne.n	80021be <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80021ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80021b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80021bc:	e00a      	b.n	80021d4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2200      	movs	r2, #0
 80021d2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	785b      	ldrb	r3, [r3, #1]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d165      	bne.n	80022a8 <HAL_PCD_EP_DB_Transmit+0x37e>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	461a      	mov	r2, r3
 80021ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021f0:	4413      	add	r3, r2
 80021f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	00da      	lsls	r2, r3, #3
 80021fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021fc:	4413      	add	r3, r2
 80021fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002202:	63bb      	str	r3, [r7, #56]	; 0x38
 8002204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	b29b      	uxth	r3, r3
 800220a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800220e:	b29a      	uxth	r2, r3
 8002210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002212:	801a      	strh	r2, [r3, #0]
 8002214:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002218:	2b3e      	cmp	r3, #62	; 0x3e
 800221a:	d91d      	bls.n	8002258 <HAL_PCD_EP_DB_Transmit+0x32e>
 800221c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002220:	095b      	lsrs	r3, r3, #5
 8002222:	64bb      	str	r3, [r7, #72]	; 0x48
 8002224:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002228:	f003 031f 	and.w	r3, r3, #31
 800222c:	2b00      	cmp	r3, #0
 800222e:	d102      	bne.n	8002236 <HAL_PCD_EP_DB_Transmit+0x30c>
 8002230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002232:	3b01      	subs	r3, #1
 8002234:	64bb      	str	r3, [r7, #72]	; 0x48
 8002236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	b29a      	uxth	r2, r3
 800223c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800223e:	b29b      	uxth	r3, r3
 8002240:	029b      	lsls	r3, r3, #10
 8002242:	b29b      	uxth	r3, r3
 8002244:	4313      	orrs	r3, r2
 8002246:	b29b      	uxth	r3, r3
 8002248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800224c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002250:	b29a      	uxth	r2, r3
 8002252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002254:	801a      	strh	r2, [r3, #0]
 8002256:	e044      	b.n	80022e2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002258:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10a      	bne.n	8002276 <HAL_PCD_EP_DB_Transmit+0x34c>
 8002260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	b29b      	uxth	r3, r3
 8002266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800226a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800226e:	b29a      	uxth	r2, r3
 8002270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002272:	801a      	strh	r2, [r3, #0]
 8002274:	e035      	b.n	80022e2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8002276:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800227a:	085b      	lsrs	r3, r3, #1
 800227c:	64bb      	str	r3, [r7, #72]	; 0x48
 800227e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d002      	beq.n	8002290 <HAL_PCD_EP_DB_Transmit+0x366>
 800228a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800228c:	3301      	adds	r3, #1
 800228e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002292:	881b      	ldrh	r3, [r3, #0]
 8002294:	b29a      	uxth	r2, r3
 8002296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002298:	b29b      	uxth	r3, r3
 800229a:	029b      	lsls	r3, r3, #10
 800229c:	b29b      	uxth	r3, r3
 800229e:	4313      	orrs	r3, r2
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022a4:	801a      	strh	r2, [r3, #0]
 80022a6:	e01c      	b.n	80022e2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	785b      	ldrb	r3, [r3, #1]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d118      	bne.n	80022e2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	647b      	str	r3, [r7, #68]	; 0x44
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022be:	b29b      	uxth	r3, r3
 80022c0:	461a      	mov	r2, r3
 80022c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022c4:	4413      	add	r3, r2
 80022c6:	647b      	str	r3, [r7, #68]	; 0x44
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	00da      	lsls	r2, r3, #3
 80022ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022d0:	4413      	add	r3, r2
 80022d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80022d6:	643b      	str	r3, [r7, #64]	; 0x40
 80022d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022dc:	b29a      	uxth	r2, r3
 80022de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022e0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6818      	ldr	r0, [r3, #0]
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	6959      	ldr	r1, [r3, #20]
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	891a      	ldrh	r2, [r3, #8]
 80022ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	f003 fd60 	bl	8005db8 <USB_WritePMA>
 80022f8:	e1e0      	b.n	80026bc <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002302:	b29b      	uxth	r3, r3
 8002304:	461a      	mov	r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	4413      	add	r3, r2
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	4413      	add	r3, r2
 8002314:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800231e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	699a      	ldr	r2, [r3, #24]
 8002326:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800232a:	429a      	cmp	r2, r3
 800232c:	d307      	bcc.n	800233e <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	699a      	ldr	r2, [r3, #24]
 8002332:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002336:	1ad2      	subs	r2, r2, r3
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	619a      	str	r2, [r3, #24]
 800233c:	e002      	b.n	8002344 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2200      	movs	r2, #0
 8002342:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	2b00      	cmp	r3, #0
 800234a:	f040 80c0 	bne.w	80024ce <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	785b      	ldrb	r3, [r3, #1]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d126      	bne.n	80023a4 <HAL_PCD_EP_DB_Transmit+0x47a>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002364:	b29b      	uxth	r3, r3
 8002366:	461a      	mov	r2, r3
 8002368:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800236a:	4413      	add	r3, r2
 800236c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	00da      	lsls	r2, r3, #3
 8002374:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002376:	4413      	add	r3, r2
 8002378:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800237c:	67bb      	str	r3, [r7, #120]	; 0x78
 800237e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	b29b      	uxth	r3, r3
 8002384:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002388:	b29a      	uxth	r2, r3
 800238a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800238c:	801a      	strh	r2, [r3, #0]
 800238e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	b29b      	uxth	r3, r3
 8002394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800239c:	b29a      	uxth	r2, r3
 800239e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023a0:	801a      	strh	r2, [r3, #0]
 80023a2:	e01a      	b.n	80023da <HAL_PCD_EP_DB_Transmit+0x4b0>
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	785b      	ldrb	r3, [r3, #1]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d116      	bne.n	80023da <HAL_PCD_EP_DB_Transmit+0x4b0>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	667b      	str	r3, [r7, #100]	; 0x64
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	461a      	mov	r2, r3
 80023be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023c0:	4413      	add	r3, r2
 80023c2:	667b      	str	r3, [r7, #100]	; 0x64
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	00da      	lsls	r2, r3, #3
 80023ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023cc:	4413      	add	r3, r2
 80023ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80023d2:	663b      	str	r3, [r7, #96]	; 0x60
 80023d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023d6:	2200      	movs	r2, #0
 80023d8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	677b      	str	r3, [r7, #116]	; 0x74
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	785b      	ldrb	r3, [r3, #1]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d12b      	bne.n	8002440 <HAL_PCD_EP_DB_Transmit+0x516>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	461a      	mov	r2, r3
 80023fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023fc:	4413      	add	r3, r2
 80023fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	00da      	lsls	r2, r3, #3
 8002406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002408:	4413      	add	r3, r2
 800240a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800240e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002412:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	b29b      	uxth	r3, r3
 800241a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800241e:	b29a      	uxth	r2, r3
 8002420:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002424:	801a      	strh	r2, [r3, #0]
 8002426:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	b29b      	uxth	r3, r3
 800242e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002436:	b29a      	uxth	r2, r3
 8002438:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800243c:	801a      	strh	r2, [r3, #0]
 800243e:	e017      	b.n	8002470 <HAL_PCD_EP_DB_Transmit+0x546>
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	785b      	ldrb	r3, [r3, #1]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d113      	bne.n	8002470 <HAL_PCD_EP_DB_Transmit+0x546>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002450:	b29b      	uxth	r3, r3
 8002452:	461a      	mov	r2, r3
 8002454:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002456:	4413      	add	r3, r2
 8002458:	677b      	str	r3, [r7, #116]	; 0x74
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	00da      	lsls	r2, r3, #3
 8002460:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002462:	4413      	add	r3, r2
 8002464:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002468:	673b      	str	r3, [r7, #112]	; 0x70
 800246a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800246c:	2200      	movs	r2, #0
 800246e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	4619      	mov	r1, r3
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f005 fc11 	bl	8007c9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800247c:	88fb      	ldrh	r3, [r7, #6]
 800247e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002482:	2b00      	cmp	r3, #0
 8002484:	f040 811a 	bne.w	80026bc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	b29b      	uxth	r3, r3
 800249a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800249e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024a2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	461a      	mov	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	441a      	add	r2, r3
 80024b4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80024b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	8013      	strh	r3, [r2, #0]
 80024cc:	e0f6      	b.n	80026bc <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d121      	bne.n	800251c <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	461a      	mov	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	441a      	add	r2, r3
 8002504:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002508:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800250c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002510:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002518:	b29b      	uxth	r3, r3
 800251a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002522:	2b01      	cmp	r3, #1
 8002524:	f040 80ca 	bne.w	80026bc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	695a      	ldr	r2, [r3, #20]
 800252c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002530:	441a      	add	r2, r3
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	69da      	ldr	r2, [r3, #28]
 800253a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800253e:	441a      	add	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	6a1a      	ldr	r2, [r3, #32]
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	429a      	cmp	r2, r3
 800254e:	d30b      	bcc.n	8002568 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	6a1a      	ldr	r2, [r3, #32]
 800255c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002560:	1ad2      	subs	r2, r2, r3
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	621a      	str	r2, [r3, #32]
 8002566:	e017      	b.n	8002598 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d108      	bne.n	8002582 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8002570:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002574:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002580:	e00a      	b.n	8002598 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2200      	movs	r2, #0
 800258e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	657b      	str	r3, [r7, #84]	; 0x54
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	785b      	ldrb	r3, [r3, #1]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d165      	bne.n	8002672 <HAL_PCD_EP_DB_Transmit+0x748>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	461a      	mov	r2, r3
 80025b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025ba:	4413      	add	r3, r2
 80025bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	00da      	lsls	r2, r3, #3
 80025c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025c6:	4413      	add	r3, r2
 80025c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80025ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025d8:	b29a      	uxth	r2, r3
 80025da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025dc:	801a      	strh	r2, [r3, #0]
 80025de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025e2:	2b3e      	cmp	r3, #62	; 0x3e
 80025e4:	d91d      	bls.n	8002622 <HAL_PCD_EP_DB_Transmit+0x6f8>
 80025e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80025ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025f2:	f003 031f 	and.w	r3, r3, #31
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d102      	bne.n	8002600 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80025fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025fc:	3b01      	subs	r3, #1
 80025fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8002600:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	b29a      	uxth	r2, r3
 8002606:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002608:	b29b      	uxth	r3, r3
 800260a:	029b      	lsls	r3, r3, #10
 800260c:	b29b      	uxth	r3, r3
 800260e:	4313      	orrs	r3, r2
 8002610:	b29b      	uxth	r3, r3
 8002612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800261a:	b29a      	uxth	r2, r3
 800261c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800261e:	801a      	strh	r2, [r3, #0]
 8002620:	e041      	b.n	80026a6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002622:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10a      	bne.n	8002640 <HAL_PCD_EP_DB_Transmit+0x716>
 800262a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	b29b      	uxth	r3, r3
 8002630:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002634:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002638:	b29a      	uxth	r2, r3
 800263a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800263c:	801a      	strh	r2, [r3, #0]
 800263e:	e032      	b.n	80026a6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002640:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002644:	085b      	lsrs	r3, r3, #1
 8002646:	66bb      	str	r3, [r7, #104]	; 0x68
 8002648:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <HAL_PCD_EP_DB_Transmit+0x730>
 8002654:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002656:	3301      	adds	r3, #1
 8002658:	66bb      	str	r3, [r7, #104]	; 0x68
 800265a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800265c:	881b      	ldrh	r3, [r3, #0]
 800265e:	b29a      	uxth	r2, r3
 8002660:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002662:	b29b      	uxth	r3, r3
 8002664:	029b      	lsls	r3, r3, #10
 8002666:	b29b      	uxth	r3, r3
 8002668:	4313      	orrs	r3, r2
 800266a:	b29a      	uxth	r2, r3
 800266c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800266e:	801a      	strh	r2, [r3, #0]
 8002670:	e019      	b.n	80026a6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	785b      	ldrb	r3, [r3, #1]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d115      	bne.n	80026a6 <HAL_PCD_EP_DB_Transmit+0x77c>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002682:	b29b      	uxth	r3, r3
 8002684:	461a      	mov	r2, r3
 8002686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002688:	4413      	add	r3, r2
 800268a:	657b      	str	r3, [r7, #84]	; 0x54
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	00da      	lsls	r2, r3, #3
 8002692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002694:	4413      	add	r3, r2
 8002696:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800269a:	653b      	str	r3, [r7, #80]	; 0x50
 800269c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026a4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	6959      	ldr	r1, [r3, #20]
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	895a      	ldrh	r2, [r3, #10]
 80026b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	f003 fb7e 	bl	8005db8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	461a      	mov	r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026d6:	82bb      	strh	r3, [r7, #20]
 80026d8:	8abb      	ldrh	r3, [r7, #20]
 80026da:	f083 0310 	eor.w	r3, r3, #16
 80026de:	82bb      	strh	r3, [r7, #20]
 80026e0:	8abb      	ldrh	r3, [r7, #20]
 80026e2:	f083 0320 	eor.w	r3, r3, #32
 80026e6:	82bb      	strh	r3, [r7, #20]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	441a      	add	r2, r3
 80026f6:	8abb      	ldrh	r3, [r7, #20]
 80026f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002708:	b29b      	uxth	r3, r3
 800270a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3790      	adds	r7, #144	; 0x90
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002716:	b480      	push	{r7}
 8002718:	b087      	sub	sp, #28
 800271a:	af00      	add	r7, sp, #0
 800271c:	60f8      	str	r0, [r7, #12]
 800271e:	607b      	str	r3, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	817b      	strh	r3, [r7, #10]
 8002724:	4613      	mov	r3, r2
 8002726:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002728:	897b      	ldrh	r3, [r7, #10]
 800272a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272e:	b29b      	uxth	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00b      	beq.n	800274c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002734:	897b      	ldrh	r3, [r7, #10]
 8002736:	f003 0207 	and.w	r2, r3, #7
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	3310      	adds	r3, #16
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4413      	add	r3, r2
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	e009      	b.n	8002760 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800274c:	897a      	ldrh	r2, [r7, #10]
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4413      	add	r3, r2
 800275e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002760:	893b      	ldrh	r3, [r7, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d107      	bne.n	8002776 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2200      	movs	r2, #0
 800276a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	b29a      	uxth	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	80da      	strh	r2, [r3, #6]
 8002774:	e00b      	b.n	800278e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	2201      	movs	r2, #1
 800277a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	b29a      	uxth	r2, r3
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	0c1b      	lsrs	r3, r3, #16
 8002788:	b29a      	uxth	r2, r3
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	371c      	adds	r7, #28
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	f043 0302 	orr.w	r3, r3, #2
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d141      	bne.n	8002882 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80027fe:	4b4b      	ldr	r3, [pc, #300]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800280a:	d131      	bne.n	8002870 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800280c:	4b47      	ldr	r3, [pc, #284]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800280e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002812:	4a46      	ldr	r2, [pc, #280]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002818:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800281c:	4b43      	ldr	r3, [pc, #268]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002824:	4a41      	ldr	r2, [pc, #260]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002826:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800282a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800282c:	4b40      	ldr	r3, [pc, #256]	; (8002930 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2232      	movs	r2, #50	; 0x32
 8002832:	fb02 f303 	mul.w	r3, r2, r3
 8002836:	4a3f      	ldr	r2, [pc, #252]	; (8002934 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002838:	fba2 2303 	umull	r2, r3, r2, r3
 800283c:	0c9b      	lsrs	r3, r3, #18
 800283e:	3301      	adds	r3, #1
 8002840:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002842:	e002      	b.n	800284a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	3b01      	subs	r3, #1
 8002848:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800284a:	4b38      	ldr	r3, [pc, #224]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002856:	d102      	bne.n	800285e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f2      	bne.n	8002844 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800285e:	4b33      	ldr	r3, [pc, #204]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800286a:	d158      	bne.n	800291e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e057      	b.n	8002920 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002870:	4b2e      	ldr	r3, [pc, #184]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002876:	4a2d      	ldr	r2, [pc, #180]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800287c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002880:	e04d      	b.n	800291e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002888:	d141      	bne.n	800290e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800288a:	4b28      	ldr	r3, [pc, #160]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002896:	d131      	bne.n	80028fc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002898:	4b24      	ldr	r3, [pc, #144]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800289a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800289e:	4a23      	ldr	r2, [pc, #140]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028a8:	4b20      	ldr	r3, [pc, #128]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028b0:	4a1e      	ldr	r2, [pc, #120]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028b8:	4b1d      	ldr	r3, [pc, #116]	; (8002930 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2232      	movs	r2, #50	; 0x32
 80028be:	fb02 f303 	mul.w	r3, r2, r3
 80028c2:	4a1c      	ldr	r2, [pc, #112]	; (8002934 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80028c4:	fba2 2303 	umull	r2, r3, r2, r3
 80028c8:	0c9b      	lsrs	r3, r3, #18
 80028ca:	3301      	adds	r3, #1
 80028cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028ce:	e002      	b.n	80028d6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028d6:	4b15      	ldr	r3, [pc, #84]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e2:	d102      	bne.n	80028ea <HAL_PWREx_ControlVoltageScaling+0xfa>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f2      	bne.n	80028d0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028ea:	4b10      	ldr	r3, [pc, #64]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f6:	d112      	bne.n	800291e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e011      	b.n	8002920 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028fc:	4b0b      	ldr	r3, [pc, #44]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002902:	4a0a      	ldr	r2, [pc, #40]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002908:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800290c:	e007      	b.n	800291e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800290e:	4b07      	ldr	r3, [pc, #28]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002916:	4a05      	ldr	r2, [pc, #20]	; (800292c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002918:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800291c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800291e:	2300      	movs	r3, #0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	40007000 	.word	0x40007000
 8002930:	20000000 	.word	0x20000000
 8002934:	431bde83 	.word	0x431bde83

08002938 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4a04      	ldr	r2, [pc, #16]	; (8002954 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002946:	6093      	str	r3, [r2, #8]
}
 8002948:	bf00      	nop
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40007000 	.word	0x40007000

08002958 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e2fe      	b.n	8002f68 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d075      	beq.n	8002a62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002976:	4b97      	ldr	r3, [pc, #604]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002980:	4b94      	ldr	r3, [pc, #592]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0303 	and.w	r3, r3, #3
 8002988:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	2b0c      	cmp	r3, #12
 800298e:	d102      	bne.n	8002996 <HAL_RCC_OscConfig+0x3e>
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	2b03      	cmp	r3, #3
 8002994:	d002      	beq.n	800299c <HAL_RCC_OscConfig+0x44>
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	2b08      	cmp	r3, #8
 800299a:	d10b      	bne.n	80029b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299c:	4b8d      	ldr	r3, [pc, #564]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d05b      	beq.n	8002a60 <HAL_RCC_OscConfig+0x108>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d157      	bne.n	8002a60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e2d9      	b.n	8002f68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029bc:	d106      	bne.n	80029cc <HAL_RCC_OscConfig+0x74>
 80029be:	4b85      	ldr	r3, [pc, #532]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a84      	ldr	r2, [pc, #528]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 80029c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	e01d      	b.n	8002a08 <HAL_RCC_OscConfig+0xb0>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029d4:	d10c      	bne.n	80029f0 <HAL_RCC_OscConfig+0x98>
 80029d6:	4b7f      	ldr	r3, [pc, #508]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a7e      	ldr	r2, [pc, #504]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 80029dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	4b7c      	ldr	r3, [pc, #496]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a7b      	ldr	r2, [pc, #492]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 80029e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e00b      	b.n	8002a08 <HAL_RCC_OscConfig+0xb0>
 80029f0:	4b78      	ldr	r3, [pc, #480]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a77      	ldr	r2, [pc, #476]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 80029f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029fa:	6013      	str	r3, [r2, #0]
 80029fc:	4b75      	ldr	r3, [pc, #468]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a74      	ldr	r2, [pc, #464]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d013      	beq.n	8002a38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a10:	f7fd fee2 	bl	80007d8 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a18:	f7fd fede 	bl	80007d8 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b64      	cmp	r3, #100	; 0x64
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e29e      	b.n	8002f68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a2a:	4b6a      	ldr	r3, [pc, #424]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0f0      	beq.n	8002a18 <HAL_RCC_OscConfig+0xc0>
 8002a36:	e014      	b.n	8002a62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a38:	f7fd fece 	bl	80007d8 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a40:	f7fd feca 	bl	80007d8 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b64      	cmp	r3, #100	; 0x64
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e28a      	b.n	8002f68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a52:	4b60      	ldr	r3, [pc, #384]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0xe8>
 8002a5e:	e000      	b.n	8002a62 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d075      	beq.n	8002b5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a6e:	4b59      	ldr	r3, [pc, #356]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
 8002a76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a78:	4b56      	ldr	r3, [pc, #344]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f003 0303 	and.w	r3, r3, #3
 8002a80:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	2b0c      	cmp	r3, #12
 8002a86:	d102      	bne.n	8002a8e <HAL_RCC_OscConfig+0x136>
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d002      	beq.n	8002a94 <HAL_RCC_OscConfig+0x13c>
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d11f      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a94:	4b4f      	ldr	r3, [pc, #316]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_RCC_OscConfig+0x154>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e25d      	b.n	8002f68 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aac:	4b49      	ldr	r3, [pc, #292]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	061b      	lsls	r3, r3, #24
 8002aba:	4946      	ldr	r1, [pc, #280]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002ac0:	4b45      	ldr	r3, [pc, #276]	; (8002bd8 <HAL_RCC_OscConfig+0x280>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fd fe3b 	bl	8000740 <HAL_InitTick>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d043      	beq.n	8002b58 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e249      	b.n	8002f68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d023      	beq.n	8002b24 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002adc:	4b3d      	ldr	r3, [pc, #244]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a3c      	ldr	r2, [pc, #240]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae8:	f7fd fe76 	bl	80007d8 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af0:	f7fd fe72 	bl	80007d8 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e232      	b.n	8002f68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b02:	4b34      	ldr	r3, [pc, #208]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0f0      	beq.n	8002af0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b0e:	4b31      	ldr	r3, [pc, #196]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	061b      	lsls	r3, r3, #24
 8002b1c:	492d      	ldr	r1, [pc, #180]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	604b      	str	r3, [r1, #4]
 8002b22:	e01a      	b.n	8002b5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b24:	4b2b      	ldr	r3, [pc, #172]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a2a      	ldr	r2, [pc, #168]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002b2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b30:	f7fd fe52 	bl	80007d8 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b38:	f7fd fe4e 	bl	80007d8 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e20e      	b.n	8002f68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b4a:	4b22      	ldr	r3, [pc, #136]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0x1e0>
 8002b56:	e000      	b.n	8002b5a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d041      	beq.n	8002bea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d01c      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b6e:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b74:	4a17      	ldr	r2, [pc, #92]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b7e:	f7fd fe2b 	bl	80007d8 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b86:	f7fd fe27 	bl	80007d8 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e1e7      	b.n	8002f68 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b98:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0ef      	beq.n	8002b86 <HAL_RCC_OscConfig+0x22e>
 8002ba6:	e020      	b.n	8002bea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ba8:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bae:	4a09      	ldr	r2, [pc, #36]	; (8002bd4 <HAL_RCC_OscConfig+0x27c>)
 8002bb0:	f023 0301 	bic.w	r3, r3, #1
 8002bb4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb8:	f7fd fe0e 	bl	80007d8 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bbe:	e00d      	b.n	8002bdc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc0:	f7fd fe0a 	bl	80007d8 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d906      	bls.n	8002bdc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e1ca      	b.n	8002f68 <HAL_RCC_OscConfig+0x610>
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bdc:	4b8c      	ldr	r3, [pc, #560]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1ea      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 80a6 	beq.w	8002d44 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bfc:	4b84      	ldr	r3, [pc, #528]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_RCC_OscConfig+0x2b4>
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e000      	b.n	8002c0e <HAL_RCC_OscConfig+0x2b6>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00d      	beq.n	8002c2e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c12:	4b7f      	ldr	r3, [pc, #508]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c16:	4a7e      	ldr	r2, [pc, #504]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c1c:	6593      	str	r3, [r2, #88]	; 0x58
 8002c1e:	4b7c      	ldr	r3, [pc, #496]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c2e:	4b79      	ldr	r3, [pc, #484]	; (8002e14 <HAL_RCC_OscConfig+0x4bc>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d118      	bne.n	8002c6c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c3a:	4b76      	ldr	r3, [pc, #472]	; (8002e14 <HAL_RCC_OscConfig+0x4bc>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a75      	ldr	r2, [pc, #468]	; (8002e14 <HAL_RCC_OscConfig+0x4bc>)
 8002c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c46:	f7fd fdc7 	bl	80007d8 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c4e:	f7fd fdc3 	bl	80007d8 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e183      	b.n	8002f68 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c60:	4b6c      	ldr	r3, [pc, #432]	; (8002e14 <HAL_RCC_OscConfig+0x4bc>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0f0      	beq.n	8002c4e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d108      	bne.n	8002c86 <HAL_RCC_OscConfig+0x32e>
 8002c74:	4b66      	ldr	r3, [pc, #408]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7a:	4a65      	ldr	r2, [pc, #404]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c84:	e024      	b.n	8002cd0 <HAL_RCC_OscConfig+0x378>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b05      	cmp	r3, #5
 8002c8c:	d110      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x358>
 8002c8e:	4b60      	ldr	r3, [pc, #384]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c94:	4a5e      	ldr	r2, [pc, #376]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002c96:	f043 0304 	orr.w	r3, r3, #4
 8002c9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c9e:	4b5c      	ldr	r3, [pc, #368]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca4:	4a5a      	ldr	r2, [pc, #360]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cae:	e00f      	b.n	8002cd0 <HAL_RCC_OscConfig+0x378>
 8002cb0:	4b57      	ldr	r3, [pc, #348]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb6:	4a56      	ldr	r2, [pc, #344]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002cb8:	f023 0301 	bic.w	r3, r3, #1
 8002cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002cc0:	4b53      	ldr	r3, [pc, #332]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc6:	4a52      	ldr	r2, [pc, #328]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002cc8:	f023 0304 	bic.w	r3, r3, #4
 8002ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d016      	beq.n	8002d06 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd8:	f7fd fd7e 	bl	80007d8 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cde:	e00a      	b.n	8002cf6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce0:	f7fd fd7a 	bl	80007d8 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e138      	b.n	8002f68 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf6:	4b46      	ldr	r3, [pc, #280]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0ed      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x388>
 8002d04:	e015      	b.n	8002d32 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d06:	f7fd fd67 	bl	80007d8 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d0c:	e00a      	b.n	8002d24 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0e:	f7fd fd63 	bl	80007d8 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e121      	b.n	8002f68 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d24:	4b3a      	ldr	r3, [pc, #232]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1ed      	bne.n	8002d0e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d32:	7ffb      	ldrb	r3, [r7, #31]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d105      	bne.n	8002d44 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d38:	4b35      	ldr	r3, [pc, #212]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3c:	4a34      	ldr	r2, [pc, #208]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002d3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d42:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0320 	and.w	r3, r3, #32
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d03c      	beq.n	8002dca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d01c      	beq.n	8002d92 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d58:	4b2d      	ldr	r3, [pc, #180]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002d5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d5e:	4a2c      	ldr	r2, [pc, #176]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d68:	f7fd fd36 	bl	80007d8 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d70:	f7fd fd32 	bl	80007d8 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e0f2      	b.n	8002f68 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002d82:	4b23      	ldr	r3, [pc, #140]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002d84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0ef      	beq.n	8002d70 <HAL_RCC_OscConfig+0x418>
 8002d90:	e01b      	b.n	8002dca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d92:	4b1f      	ldr	r3, [pc, #124]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002d94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d98:	4a1d      	ldr	r2, [pc, #116]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002d9a:	f023 0301 	bic.w	r3, r3, #1
 8002d9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da2:	f7fd fd19 	bl	80007d8 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002daa:	f7fd fd15 	bl	80007d8 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e0d5      	b.n	8002f68 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002dbc:	4b14      	ldr	r3, [pc, #80]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002dbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1ef      	bne.n	8002daa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f000 80c9 	beq.w	8002f66 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dd4:	4b0e      	ldr	r3, [pc, #56]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 030c 	and.w	r3, r3, #12
 8002ddc:	2b0c      	cmp	r3, #12
 8002dde:	f000 8083 	beq.w	8002ee8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d15e      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dea:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a08      	ldr	r2, [pc, #32]	; (8002e10 <HAL_RCC_OscConfig+0x4b8>)
 8002df0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002df4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df6:	f7fd fcef 	bl	80007d8 <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dfc:	e00c      	b.n	8002e18 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dfe:	f7fd fceb 	bl	80007d8 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d905      	bls.n	8002e18 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e0ab      	b.n	8002f68 <HAL_RCC_OscConfig+0x610>
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e18:	4b55      	ldr	r3, [pc, #340]	; (8002f70 <HAL_RCC_OscConfig+0x618>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1ec      	bne.n	8002dfe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e24:	4b52      	ldr	r3, [pc, #328]	; (8002f70 <HAL_RCC_OscConfig+0x618>)
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	4b52      	ldr	r3, [pc, #328]	; (8002f74 <HAL_RCC_OscConfig+0x61c>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6a11      	ldr	r1, [r2, #32]
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e34:	3a01      	subs	r2, #1
 8002e36:	0112      	lsls	r2, r2, #4
 8002e38:	4311      	orrs	r1, r2
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002e3e:	0212      	lsls	r2, r2, #8
 8002e40:	4311      	orrs	r1, r2
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e46:	0852      	lsrs	r2, r2, #1
 8002e48:	3a01      	subs	r2, #1
 8002e4a:	0552      	lsls	r2, r2, #21
 8002e4c:	4311      	orrs	r1, r2
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e52:	0852      	lsrs	r2, r2, #1
 8002e54:	3a01      	subs	r2, #1
 8002e56:	0652      	lsls	r2, r2, #25
 8002e58:	4311      	orrs	r1, r2
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e5e:	06d2      	lsls	r2, r2, #27
 8002e60:	430a      	orrs	r2, r1
 8002e62:	4943      	ldr	r1, [pc, #268]	; (8002f70 <HAL_RCC_OscConfig+0x618>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e68:	4b41      	ldr	r3, [pc, #260]	; (8002f70 <HAL_RCC_OscConfig+0x618>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a40      	ldr	r2, [pc, #256]	; (8002f70 <HAL_RCC_OscConfig+0x618>)
 8002e6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e72:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e74:	4b3e      	ldr	r3, [pc, #248]	; (8002f70 <HAL_RCC_OscConfig+0x618>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	4a3d      	ldr	r2, [pc, #244]	; (8002f70 <HAL_RCC_OscConfig+0x618>)
 8002e7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e7e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e80:	f7fd fcaa 	bl	80007d8 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e88:	f7fd fca6 	bl	80007d8 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e066      	b.n	8002f68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e9a:	4b35      	ldr	r3, [pc, #212]	; (8002f70 <HAL_RCC_OscConfig+0x618>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCC_OscConfig+0x530>
 8002ea6:	e05e      	b.n	8002f66 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea8:	4b31      	ldr	r3, [pc, #196]	; (8002f70 <HAL_RCC_OscConfig+0x618>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a30      	ldr	r2, [pc, #192]	; (8002f70 <HAL_RCC_OscConfig+0x618>)
 8002eae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb4:	f7fd fc90 	bl	80007d8 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ebc:	f7fd fc8c 	bl	80007d8 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e04c      	b.n	8002f68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ece:	4b28      	ldr	r3, [pc, #160]	; (8002f70 <HAL_RCC_OscConfig+0x618>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002eda:	4b25      	ldr	r3, [pc, #148]	; (8002f70 <HAL_RCC_OscConfig+0x618>)
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	4924      	ldr	r1, [pc, #144]	; (8002f70 <HAL_RCC_OscConfig+0x618>)
 8002ee0:	4b25      	ldr	r3, [pc, #148]	; (8002f78 <HAL_RCC_OscConfig+0x620>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	60cb      	str	r3, [r1, #12]
 8002ee6:	e03e      	b.n	8002f66 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d101      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e039      	b.n	8002f68 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002ef4:	4b1e      	ldr	r3, [pc, #120]	; (8002f70 <HAL_RCC_OscConfig+0x618>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f003 0203 	and.w	r2, r3, #3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d12c      	bne.n	8002f62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	3b01      	subs	r3, #1
 8002f14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d123      	bne.n	8002f62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f24:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d11b      	bne.n	8002f62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d113      	bne.n	8002f62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f44:	085b      	lsrs	r3, r3, #1
 8002f46:	3b01      	subs	r3, #1
 8002f48:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d109      	bne.n	8002f62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f58:	085b      	lsrs	r3, r3, #1
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d001      	beq.n	8002f66 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3720      	adds	r7, #32
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40021000 	.word	0x40021000
 8002f74:	019f800c 	.word	0x019f800c
 8002f78:	feeefffc 	.word	0xfeeefffc

08002f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e11e      	b.n	80031d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f94:	4b91      	ldr	r3, [pc, #580]	; (80031dc <HAL_RCC_ClockConfig+0x260>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 030f 	and.w	r3, r3, #15
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d910      	bls.n	8002fc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa2:	4b8e      	ldr	r3, [pc, #568]	; (80031dc <HAL_RCC_ClockConfig+0x260>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f023 020f 	bic.w	r2, r3, #15
 8002faa:	498c      	ldr	r1, [pc, #560]	; (80031dc <HAL_RCC_ClockConfig+0x260>)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb2:	4b8a      	ldr	r3, [pc, #552]	; (80031dc <HAL_RCC_ClockConfig+0x260>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e106      	b.n	80031d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d073      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d129      	bne.n	800302c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fd8:	4b81      	ldr	r3, [pc, #516]	; (80031e0 <HAL_RCC_ClockConfig+0x264>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e0f4      	b.n	80031d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002fe8:	f000 f966 	bl	80032b8 <RCC_GetSysClockFreqFromPLLSource>
 8002fec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4a7c      	ldr	r2, [pc, #496]	; (80031e4 <HAL_RCC_ClockConfig+0x268>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d93f      	bls.n	8003076 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002ff6:	4b7a      	ldr	r3, [pc, #488]	; (80031e0 <HAL_RCC_ClockConfig+0x264>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d009      	beq.n	8003016 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800300a:	2b00      	cmp	r3, #0
 800300c:	d033      	beq.n	8003076 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003012:	2b00      	cmp	r3, #0
 8003014:	d12f      	bne.n	8003076 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003016:	4b72      	ldr	r3, [pc, #456]	; (80031e0 <HAL_RCC_ClockConfig+0x264>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800301e:	4a70      	ldr	r2, [pc, #448]	; (80031e0 <HAL_RCC_ClockConfig+0x264>)
 8003020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003024:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	e024      	b.n	8003076 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b02      	cmp	r3, #2
 8003032:	d107      	bne.n	8003044 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003034:	4b6a      	ldr	r3, [pc, #424]	; (80031e0 <HAL_RCC_ClockConfig+0x264>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d109      	bne.n	8003054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0c6      	b.n	80031d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003044:	4b66      	ldr	r3, [pc, #408]	; (80031e0 <HAL_RCC_ClockConfig+0x264>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0be      	b.n	80031d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003054:	f000 f8ce 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 8003058:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	4a61      	ldr	r2, [pc, #388]	; (80031e4 <HAL_RCC_ClockConfig+0x268>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d909      	bls.n	8003076 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003062:	4b5f      	ldr	r3, [pc, #380]	; (80031e0 <HAL_RCC_ClockConfig+0x264>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800306a:	4a5d      	ldr	r2, [pc, #372]	; (80031e0 <HAL_RCC_ClockConfig+0x264>)
 800306c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003070:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003072:	2380      	movs	r3, #128	; 0x80
 8003074:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003076:	4b5a      	ldr	r3, [pc, #360]	; (80031e0 <HAL_RCC_ClockConfig+0x264>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f023 0203 	bic.w	r2, r3, #3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	4957      	ldr	r1, [pc, #348]	; (80031e0 <HAL_RCC_ClockConfig+0x264>)
 8003084:	4313      	orrs	r3, r2
 8003086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003088:	f7fd fba6 	bl	80007d8 <HAL_GetTick>
 800308c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308e:	e00a      	b.n	80030a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003090:	f7fd fba2 	bl	80007d8 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	; 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e095      	b.n	80031d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a6:	4b4e      	ldr	r3, [pc, #312]	; (80031e0 <HAL_RCC_ClockConfig+0x264>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 020c 	and.w	r2, r3, #12
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d1eb      	bne.n	8003090 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d023      	beq.n	800310c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030d0:	4b43      	ldr	r3, [pc, #268]	; (80031e0 <HAL_RCC_ClockConfig+0x264>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	4a42      	ldr	r2, [pc, #264]	; (80031e0 <HAL_RCC_ClockConfig+0x264>)
 80030d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d007      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80030e8:	4b3d      	ldr	r3, [pc, #244]	; (80031e0 <HAL_RCC_ClockConfig+0x264>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80030f0:	4a3b      	ldr	r2, [pc, #236]	; (80031e0 <HAL_RCC_ClockConfig+0x264>)
 80030f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f8:	4b39      	ldr	r3, [pc, #228]	; (80031e0 <HAL_RCC_ClockConfig+0x264>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	4936      	ldr	r1, [pc, #216]	; (80031e0 <HAL_RCC_ClockConfig+0x264>)
 8003106:	4313      	orrs	r3, r2
 8003108:	608b      	str	r3, [r1, #8]
 800310a:	e008      	b.n	800311e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2b80      	cmp	r3, #128	; 0x80
 8003110:	d105      	bne.n	800311e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003112:	4b33      	ldr	r3, [pc, #204]	; (80031e0 <HAL_RCC_ClockConfig+0x264>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	4a32      	ldr	r2, [pc, #200]	; (80031e0 <HAL_RCC_ClockConfig+0x264>)
 8003118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800311c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800311e:	4b2f      	ldr	r3, [pc, #188]	; (80031dc <HAL_RCC_ClockConfig+0x260>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	429a      	cmp	r2, r3
 800312a:	d21d      	bcs.n	8003168 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312c:	4b2b      	ldr	r3, [pc, #172]	; (80031dc <HAL_RCC_ClockConfig+0x260>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f023 020f 	bic.w	r2, r3, #15
 8003134:	4929      	ldr	r1, [pc, #164]	; (80031dc <HAL_RCC_ClockConfig+0x260>)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	4313      	orrs	r3, r2
 800313a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800313c:	f7fd fb4c 	bl	80007d8 <HAL_GetTick>
 8003140:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003142:	e00a      	b.n	800315a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003144:	f7fd fb48 	bl	80007d8 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003152:	4293      	cmp	r3, r2
 8003154:	d901      	bls.n	800315a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e03b      	b.n	80031d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800315a:	4b20      	ldr	r3, [pc, #128]	; (80031dc <HAL_RCC_ClockConfig+0x260>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d1ed      	bne.n	8003144 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	d008      	beq.n	8003186 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003174:	4b1a      	ldr	r3, [pc, #104]	; (80031e0 <HAL_RCC_ClockConfig+0x264>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	4917      	ldr	r1, [pc, #92]	; (80031e0 <HAL_RCC_ClockConfig+0x264>)
 8003182:	4313      	orrs	r3, r2
 8003184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d009      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003192:	4b13      	ldr	r3, [pc, #76]	; (80031e0 <HAL_RCC_ClockConfig+0x264>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	490f      	ldr	r1, [pc, #60]	; (80031e0 <HAL_RCC_ClockConfig+0x264>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031a6:	f000 f825 	bl	80031f4 <HAL_RCC_GetSysClockFreq>
 80031aa:	4602      	mov	r2, r0
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <HAL_RCC_ClockConfig+0x264>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	091b      	lsrs	r3, r3, #4
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	490c      	ldr	r1, [pc, #48]	; (80031e8 <HAL_RCC_ClockConfig+0x26c>)
 80031b8:	5ccb      	ldrb	r3, [r1, r3]
 80031ba:	f003 031f 	and.w	r3, r3, #31
 80031be:	fa22 f303 	lsr.w	r3, r2, r3
 80031c2:	4a0a      	ldr	r2, [pc, #40]	; (80031ec <HAL_RCC_ClockConfig+0x270>)
 80031c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80031c6:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <HAL_RCC_ClockConfig+0x274>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fd fab8 	bl	8000740 <HAL_InitTick>
 80031d0:	4603      	mov	r3, r0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40022000 	.word	0x40022000
 80031e0:	40021000 	.word	0x40021000
 80031e4:	04c4b400 	.word	0x04c4b400
 80031e8:	080082a4 	.word	0x080082a4
 80031ec:	20000000 	.word	0x20000000
 80031f0:	20000004 	.word	0x20000004

080031f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80031fa:	4b2c      	ldr	r3, [pc, #176]	; (80032ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 030c 	and.w	r3, r3, #12
 8003202:	2b04      	cmp	r3, #4
 8003204:	d102      	bne.n	800320c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003206:	4b2a      	ldr	r3, [pc, #168]	; (80032b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	e047      	b.n	800329c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800320c:	4b27      	ldr	r3, [pc, #156]	; (80032ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 030c 	and.w	r3, r3, #12
 8003214:	2b08      	cmp	r3, #8
 8003216:	d102      	bne.n	800321e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003218:	4b26      	ldr	r3, [pc, #152]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	e03e      	b.n	800329c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800321e:	4b23      	ldr	r3, [pc, #140]	; (80032ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b0c      	cmp	r3, #12
 8003228:	d136      	bne.n	8003298 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800322a:	4b20      	ldr	r3, [pc, #128]	; (80032ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003234:	4b1d      	ldr	r3, [pc, #116]	; (80032ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	091b      	lsrs	r3, r3, #4
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	3301      	adds	r3, #1
 8003240:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2b03      	cmp	r3, #3
 8003246:	d10c      	bne.n	8003262 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003248:	4a1a      	ldr	r2, [pc, #104]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003250:	4a16      	ldr	r2, [pc, #88]	; (80032ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003252:	68d2      	ldr	r2, [r2, #12]
 8003254:	0a12      	lsrs	r2, r2, #8
 8003256:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800325a:	fb02 f303 	mul.w	r3, r2, r3
 800325e:	617b      	str	r3, [r7, #20]
      break;
 8003260:	e00c      	b.n	800327c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003262:	4a13      	ldr	r2, [pc, #76]	; (80032b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	fbb2 f3f3 	udiv	r3, r2, r3
 800326a:	4a10      	ldr	r2, [pc, #64]	; (80032ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800326c:	68d2      	ldr	r2, [r2, #12]
 800326e:	0a12      	lsrs	r2, r2, #8
 8003270:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003274:	fb02 f303 	mul.w	r3, r2, r3
 8003278:	617b      	str	r3, [r7, #20]
      break;
 800327a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	0e5b      	lsrs	r3, r3, #25
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	3301      	adds	r3, #1
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	fbb2 f3f3 	udiv	r3, r2, r3
 8003294:	613b      	str	r3, [r7, #16]
 8003296:	e001      	b.n	800329c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800329c:	693b      	ldr	r3, [r7, #16]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	371c      	adds	r7, #28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40021000 	.word	0x40021000
 80032b0:	00f42400 	.word	0x00f42400
 80032b4:	016e3600 	.word	0x016e3600

080032b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032be:	4b1e      	ldr	r3, [pc, #120]	; (8003338 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80032c8:	4b1b      	ldr	r3, [pc, #108]	; (8003338 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	091b      	lsrs	r3, r3, #4
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	3301      	adds	r3, #1
 80032d4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d10c      	bne.n	80032f6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032dc:	4a17      	ldr	r2, [pc, #92]	; (800333c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e4:	4a14      	ldr	r2, [pc, #80]	; (8003338 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80032e6:	68d2      	ldr	r2, [r2, #12]
 80032e8:	0a12      	lsrs	r2, r2, #8
 80032ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80032ee:	fb02 f303 	mul.w	r3, r2, r3
 80032f2:	617b      	str	r3, [r7, #20]
    break;
 80032f4:	e00c      	b.n	8003310 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032f6:	4a12      	ldr	r2, [pc, #72]	; (8003340 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fe:	4a0e      	ldr	r2, [pc, #56]	; (8003338 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003300:	68d2      	ldr	r2, [r2, #12]
 8003302:	0a12      	lsrs	r2, r2, #8
 8003304:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003308:	fb02 f303 	mul.w	r3, r2, r3
 800330c:	617b      	str	r3, [r7, #20]
    break;
 800330e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003310:	4b09      	ldr	r3, [pc, #36]	; (8003338 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	0e5b      	lsrs	r3, r3, #25
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	3301      	adds	r3, #1
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	fbb2 f3f3 	udiv	r3, r2, r3
 8003328:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800332a:	687b      	ldr	r3, [r7, #4]
}
 800332c:	4618      	mov	r0, r3
 800332e:	371c      	adds	r7, #28
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	40021000 	.word	0x40021000
 800333c:	016e3600 	.word	0x016e3600
 8003340:	00f42400 	.word	0x00f42400

08003344 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800334c:	2300      	movs	r3, #0
 800334e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003350:	2300      	movs	r3, #0
 8003352:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 8098 	beq.w	8003492 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003362:	2300      	movs	r3, #0
 8003364:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003366:	4b43      	ldr	r3, [pc, #268]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10d      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003372:	4b40      	ldr	r3, [pc, #256]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003376:	4a3f      	ldr	r2, [pc, #252]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800337c:	6593      	str	r3, [r2, #88]	; 0x58
 800337e:	4b3d      	ldr	r3, [pc, #244]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003386:	60bb      	str	r3, [r7, #8]
 8003388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800338a:	2301      	movs	r3, #1
 800338c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800338e:	4b3a      	ldr	r3, [pc, #232]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a39      	ldr	r2, [pc, #228]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003398:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800339a:	f7fd fa1d 	bl	80007d8 <HAL_GetTick>
 800339e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033a0:	e009      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a2:	f7fd fa19 	bl	80007d8 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d902      	bls.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	74fb      	strb	r3, [r7, #19]
        break;
 80033b4:	e005      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033b6:	4b30      	ldr	r3, [pc, #192]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0ef      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80033c2:	7cfb      	ldrb	r3, [r7, #19]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d159      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033c8:	4b2a      	ldr	r3, [pc, #168]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d01e      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d019      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033e4:	4b23      	ldr	r3, [pc, #140]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033f0:	4b20      	ldr	r3, [pc, #128]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f6:	4a1f      	ldr	r2, [pc, #124]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80033f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003400:	4b1c      	ldr	r3, [pc, #112]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003406:	4a1b      	ldr	r2, [pc, #108]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800340c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003410:	4a18      	ldr	r2, [pc, #96]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d016      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003422:	f7fd f9d9 	bl	80007d8 <HAL_GetTick>
 8003426:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003428:	e00b      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342a:	f7fd f9d5 	bl	80007d8 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	f241 3288 	movw	r2, #5000	; 0x1388
 8003438:	4293      	cmp	r3, r2
 800343a:	d902      	bls.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	74fb      	strb	r3, [r7, #19]
            break;
 8003440:	e006      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003442:	4b0c      	ldr	r3, [pc, #48]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0ec      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003450:	7cfb      	ldrb	r3, [r7, #19]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10b      	bne.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003456:	4b07      	ldr	r3, [pc, #28]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003464:	4903      	ldr	r1, [pc, #12]	; (8003474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800346c:	e008      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800346e:	7cfb      	ldrb	r3, [r7, #19]
 8003470:	74bb      	strb	r3, [r7, #18]
 8003472:	e005      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003474:	40021000 	.word	0x40021000
 8003478:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800347c:	7cfb      	ldrb	r3, [r7, #19]
 800347e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003480:	7c7b      	ldrb	r3, [r7, #17]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d105      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003486:	4ba7      	ldr	r3, [pc, #668]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348a:	4aa6      	ldr	r2, [pc, #664]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800348c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003490:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00a      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800349e:	4ba1      	ldr	r3, [pc, #644]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a4:	f023 0203 	bic.w	r2, r3, #3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	499d      	ldr	r1, [pc, #628]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00a      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034c0:	4b98      	ldr	r3, [pc, #608]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c6:	f023 020c 	bic.w	r2, r3, #12
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	4995      	ldr	r1, [pc, #596]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0304 	and.w	r3, r3, #4
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034e2:	4b90      	ldr	r3, [pc, #576]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	498c      	ldr	r1, [pc, #560]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0308 	and.w	r3, r3, #8
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00a      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003504:	4b87      	ldr	r3, [pc, #540]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	4984      	ldr	r1, [pc, #528]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003514:	4313      	orrs	r3, r2
 8003516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0310 	and.w	r3, r3, #16
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003526:	4b7f      	ldr	r3, [pc, #508]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	497b      	ldr	r1, [pc, #492]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003548:	4b76      	ldr	r3, [pc, #472]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800354a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	4973      	ldr	r1, [pc, #460]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003558:	4313      	orrs	r3, r2
 800355a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800356a:	4b6e      	ldr	r3, [pc, #440]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800356c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003570:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69db      	ldr	r3, [r3, #28]
 8003578:	496a      	ldr	r1, [pc, #424]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800358c:	4b65      	ldr	r3, [pc, #404]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800358e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003592:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	4962      	ldr	r1, [pc, #392]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035ae:	4b5d      	ldr	r3, [pc, #372]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	4959      	ldr	r1, [pc, #356]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00a      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035d0:	4b54      	ldr	r3, [pc, #336]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80035d6:	f023 0203 	bic.w	r2, r3, #3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035de:	4951      	ldr	r1, [pc, #324]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035f2:	4b4c      	ldr	r3, [pc, #304]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	4948      	ldr	r1, [pc, #288]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003610:	2b00      	cmp	r3, #0
 8003612:	d015      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003614:	4b43      	ldr	r3, [pc, #268]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	4940      	ldr	r1, [pc, #256]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003624:	4313      	orrs	r3, r2
 8003626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003632:	d105      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003634:	4b3b      	ldr	r3, [pc, #236]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	4a3a      	ldr	r2, [pc, #232]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800363a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800363e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003648:	2b00      	cmp	r3, #0
 800364a:	d015      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800364c:	4b35      	ldr	r3, [pc, #212]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003652:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800365a:	4932      	ldr	r1, [pc, #200]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003666:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800366a:	d105      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800366c:	4b2d      	ldr	r3, [pc, #180]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	4a2c      	ldr	r2, [pc, #176]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003676:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d015      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003684:	4b27      	ldr	r3, [pc, #156]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003692:	4924      	ldr	r1, [pc, #144]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036a2:	d105      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036a4:	4b1f      	ldr	r3, [pc, #124]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	4a1e      	ldr	r2, [pc, #120]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d015      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036bc:	4b19      	ldr	r3, [pc, #100]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ca:	4916      	ldr	r1, [pc, #88]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036da:	d105      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036dc:	4b11      	ldr	r3, [pc, #68]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	4a10      	ldr	r2, [pc, #64]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036e6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d019      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036f4:	4b0b      	ldr	r3, [pc, #44]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	4908      	ldr	r1, [pc, #32]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003712:	d109      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003714:	4b03      	ldr	r3, [pc, #12]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	4a02      	ldr	r2, [pc, #8]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800371a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800371e:	60d3      	str	r3, [r2, #12]
 8003720:	e002      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003722:	bf00      	nop
 8003724:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d015      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003734:	4b29      	ldr	r3, [pc, #164]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003742:	4926      	ldr	r1, [pc, #152]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003744:	4313      	orrs	r3, r2
 8003746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003752:	d105      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003754:	4b21      	ldr	r3, [pc, #132]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	4a20      	ldr	r2, [pc, #128]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800375a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800375e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d015      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800376c:	4b1b      	ldr	r3, [pc, #108]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003772:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800377a:	4918      	ldr	r1, [pc, #96]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800378a:	d105      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800378c:	4b13      	ldr	r3, [pc, #76]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4a12      	ldr	r2, [pc, #72]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003796:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d015      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80037a4:	4b0d      	ldr	r3, [pc, #52]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b2:	490a      	ldr	r1, [pc, #40]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037c2:	d105      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037c4:	4b05      	ldr	r3, [pc, #20]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	4a04      	ldr	r2, [pc, #16]	; (80037dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80037ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037ce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80037d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3718      	adds	r7, #24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40021000 	.word	0x40021000

080037e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80037f0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80037f4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800380e:	b480      	push	{r7}
 8003810:	b085      	sub	sp, #20
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003816:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800381a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	b29b      	uxth	r3, r3
 8003828:	43db      	mvns	r3, r3
 800382a:	b29b      	uxth	r3, r3
 800382c:	4013      	ands	r3, r2
 800382e:	b29a      	uxth	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	1d3b      	adds	r3, r7, #4
 800384e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2201      	movs	r2, #1
 8003856:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003880:	b480      	push	{r7}
 8003882:	b09d      	sub	sp, #116	; 0x74
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	b29b      	uxth	r3, r3
 800389e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80038a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	78db      	ldrb	r3, [r3, #3]
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	d81f      	bhi.n	80038f2 <USB_ActivateEndpoint+0x72>
 80038b2:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <USB_ActivateEndpoint+0x38>)
 80038b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b8:	080038c9 	.word	0x080038c9
 80038bc:	080038e5 	.word	0x080038e5
 80038c0:	080038fb 	.word	0x080038fb
 80038c4:	080038d7 	.word	0x080038d7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80038c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80038cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038d0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80038d4:	e012      	b.n	80038fc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80038d6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80038da:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80038de:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80038e2:	e00b      	b.n	80038fc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80038e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80038e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038ec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80038f0:	e004      	b.n	80038fc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80038f8:	e000      	b.n	80038fc <USB_ActivateEndpoint+0x7c>
      break;
 80038fa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	441a      	add	r2, r3
 8003906:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800390a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800390e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800391a:	b29b      	uxth	r3, r3
 800391c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	b29b      	uxth	r3, r3
 800392c:	b21b      	sxth	r3, r3
 800392e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003936:	b21a      	sxth	r2, r3
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	b21b      	sxth	r3, r3
 800393e:	4313      	orrs	r3, r2
 8003940:	b21b      	sxth	r3, r3
 8003942:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	441a      	add	r2, r3
 8003950:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003954:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003958:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800395c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003964:	b29b      	uxth	r3, r3
 8003966:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	7b1b      	ldrb	r3, [r3, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	f040 8178 	bne.w	8003c62 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	785b      	ldrb	r3, [r3, #1]
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 8084 	beq.w	8003a84 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	61bb      	str	r3, [r7, #24]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003986:	b29b      	uxth	r3, r3
 8003988:	461a      	mov	r2, r3
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	4413      	add	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	00da      	lsls	r2, r3, #3
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	4413      	add	r3, r2
 800399a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800399e:	617b      	str	r3, [r7, #20]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	88db      	ldrh	r3, [r3, #6]
 80039a4:	085b      	lsrs	r3, r3, #1
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4413      	add	r3, r2
 80039ba:	881b      	ldrh	r3, [r3, #0]
 80039bc:	827b      	strh	r3, [r7, #18]
 80039be:	8a7b      	ldrh	r3, [r7, #18]
 80039c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d01b      	beq.n	8003a00 <USB_ActivateEndpoint+0x180>
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	881b      	ldrh	r3, [r3, #0]
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039de:	823b      	strh	r3, [r7, #16]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	441a      	add	r2, r3
 80039ea:	8a3b      	ldrh	r3, [r7, #16]
 80039ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	78db      	ldrb	r3, [r3, #3]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d020      	beq.n	8003a4a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a1e:	81bb      	strh	r3, [r7, #12]
 8003a20:	89bb      	ldrh	r3, [r7, #12]
 8003a22:	f083 0320 	eor.w	r3, r3, #32
 8003a26:	81bb      	strh	r3, [r7, #12]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	441a      	add	r2, r3
 8003a32:	89bb      	ldrh	r3, [r7, #12]
 8003a34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	8013      	strh	r3, [r2, #0]
 8003a48:	e2d5      	b.n	8003ff6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4413      	add	r3, r2
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a60:	81fb      	strh	r3, [r7, #14]
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	441a      	add	r2, r3
 8003a6c:	89fb      	ldrh	r3, [r7, #14]
 8003a6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	8013      	strh	r3, [r2, #0]
 8003a82:	e2b8      	b.n	8003ff6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	633b      	str	r3, [r7, #48]	; 0x30
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	461a      	mov	r2, r3
 8003a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a94:	4413      	add	r3, r2
 8003a96:	633b      	str	r3, [r7, #48]	; 0x30
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	00da      	lsls	r2, r3, #3
 8003a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	88db      	ldrh	r3, [r3, #6]
 8003aac:	085b      	lsrs	r3, r3, #1
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	62bb      	str	r3, [r7, #40]	; 0x28
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac8:	4413      	add	r3, r2
 8003aca:	62bb      	str	r3, [r7, #40]	; 0x28
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	00da      	lsls	r2, r3, #3
 8003ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	801a      	strh	r2, [r3, #0]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	2b3e      	cmp	r3, #62	; 0x3e
 8003af2:	d91d      	bls.n	8003b30 <USB_ActivateEndpoint+0x2b0>
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	095b      	lsrs	r3, r3, #5
 8003afa:	66bb      	str	r3, [r7, #104]	; 0x68
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	f003 031f 	and.w	r3, r3, #31
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d102      	bne.n	8003b0e <USB_ActivateEndpoint+0x28e>
 8003b08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	029b      	lsls	r3, r3, #10
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	801a      	strh	r2, [r3, #0]
 8003b2e:	e026      	b.n	8003b7e <USB_ActivateEndpoint+0x2fe>
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10a      	bne.n	8003b4e <USB_ActivateEndpoint+0x2ce>
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	881b      	ldrh	r3, [r3, #0]
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	801a      	strh	r2, [r3, #0]
 8003b4c:	e017      	b.n	8003b7e <USB_ActivateEndpoint+0x2fe>
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	085b      	lsrs	r3, r3, #1
 8003b54:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <USB_ActivateEndpoint+0x2e8>
 8003b62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b64:	3301      	adds	r3, #1
 8003b66:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	029b      	lsls	r3, r3, #10
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	4313      	orrs	r3, r2
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	881b      	ldrh	r3, [r3, #0]
 8003b8a:	847b      	strh	r3, [r7, #34]	; 0x22
 8003b8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d01b      	beq.n	8003bce <USB_ActivateEndpoint+0x34e>
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bac:	843b      	strh	r3, [r7, #32]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	441a      	add	r2, r3
 8003bb8:	8c3b      	ldrh	r3, [r7, #32]
 8003bba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d124      	bne.n	8003c20 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bec:	83bb      	strh	r3, [r7, #28]
 8003bee:	8bbb      	ldrh	r3, [r7, #28]
 8003bf0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003bf4:	83bb      	strh	r3, [r7, #28]
 8003bf6:	8bbb      	ldrh	r3, [r7, #28]
 8003bf8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003bfc:	83bb      	strh	r3, [r7, #28]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	441a      	add	r2, r3
 8003c08:	8bbb      	ldrh	r3, [r7, #28]
 8003c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	8013      	strh	r3, [r2, #0]
 8003c1e:	e1ea      	b.n	8003ff6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c36:	83fb      	strh	r3, [r7, #30]
 8003c38:	8bfb      	ldrh	r3, [r7, #30]
 8003c3a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c3e:	83fb      	strh	r3, [r7, #30]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	441a      	add	r2, r3
 8003c4a:	8bfb      	ldrh	r3, [r7, #30]
 8003c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	8013      	strh	r3, [r2, #0]
 8003c60:	e1c9      	b.n	8003ff6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	78db      	ldrb	r3, [r3, #3]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d11e      	bne.n	8003ca8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	881b      	ldrh	r3, [r3, #0]
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c80:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	441a      	add	r2, r3
 8003c8e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c9a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	8013      	strh	r3, [r2, #0]
 8003ca6:	e01d      	b.n	8003ce4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cbe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	441a      	add	r2, r3
 8003ccc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003cd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cf4:	4413      	add	r3, r2
 8003cf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	00da      	lsls	r2, r3, #3
 8003cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d06:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	891b      	ldrh	r3, [r3, #8]
 8003d0c:	085b      	lsrs	r3, r3, #1
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d16:	801a      	strh	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	657b      	str	r3, [r7, #84]	; 0x54
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	461a      	mov	r2, r3
 8003d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d28:	4413      	add	r3, r2
 8003d2a:	657b      	str	r3, [r7, #84]	; 0x54
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	00da      	lsls	r2, r3, #3
 8003d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d34:	4413      	add	r3, r2
 8003d36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d3a:	653b      	str	r3, [r7, #80]	; 0x50
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	895b      	ldrh	r3, [r3, #10]
 8003d40:	085b      	lsrs	r3, r3, #1
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d4a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	785b      	ldrb	r3, [r3, #1]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f040 8093 	bne.w	8003e7c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003d66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d01b      	beq.n	8003daa <USB_ActivateEndpoint+0x52a>
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	4413      	add	r3, r2
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d88:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	441a      	add	r2, r3
 8003d94:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003db8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d01b      	beq.n	8003dfa <USB_ActivateEndpoint+0x57a>
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	441a      	add	r2, r3
 8003de4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003de6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003df2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	881b      	ldrh	r3, [r3, #0]
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e10:	873b      	strh	r3, [r7, #56]	; 0x38
 8003e12:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003e14:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003e18:	873b      	strh	r3, [r7, #56]	; 0x38
 8003e1a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003e1c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003e20:	873b      	strh	r3, [r7, #56]	; 0x38
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	441a      	add	r2, r3
 8003e2c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e58:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	441a      	add	r2, r3
 8003e64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	8013      	strh	r3, [r2, #0]
 8003e7a:	e0bc      	b.n	8003ff6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003e8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d01d      	beq.n	8003ed4 <USB_ActivateEndpoint+0x654>
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eae:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	441a      	add	r2, r3
 8003ebc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ec8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003ee4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d01d      	beq.n	8003f2c <USB_ActivateEndpoint+0x6ac>
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f06:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	441a      	add	r2, r3
 8003f14:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003f18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f24:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	78db      	ldrb	r3, [r3, #3]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d024      	beq.n	8003f7e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f4a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003f4e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003f52:	f083 0320 	eor.w	r3, r3, #32
 8003f56:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	441a      	add	r2, r3
 8003f64:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003f68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	8013      	strh	r3, [r2, #0]
 8003f7c:	e01d      	b.n	8003fba <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f94:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	441a      	add	r2, r3
 8003fa2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003faa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	881b      	ldrh	r3, [r3, #0]
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	441a      	add	r2, r3
 8003fde:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003fe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8003ff6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3774      	adds	r7, #116	; 0x74
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop

08004008 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004008:	b480      	push	{r7}
 800400a:	b08d      	sub	sp, #52	; 0x34
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	7b1b      	ldrb	r3, [r3, #12]
 8004016:	2b00      	cmp	r3, #0
 8004018:	f040 808e 	bne.w	8004138 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	785b      	ldrb	r3, [r3, #1]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d044      	beq.n	80040ae <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	81bb      	strh	r3, [r7, #12]
 8004032:	89bb      	ldrh	r3, [r7, #12]
 8004034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004038:	2b00      	cmp	r3, #0
 800403a:	d01b      	beq.n	8004074 <USB_DeactivateEndpoint+0x6c>
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	881b      	ldrh	r3, [r3, #0]
 8004048:	b29b      	uxth	r3, r3
 800404a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800404e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004052:	817b      	strh	r3, [r7, #10]
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	441a      	add	r2, r3
 800405e:	897b      	ldrh	r3, [r7, #10]
 8004060:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004064:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800406c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004070:	b29b      	uxth	r3, r3
 8004072:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	881b      	ldrh	r3, [r3, #0]
 8004080:	b29b      	uxth	r3, r3
 8004082:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004086:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800408a:	813b      	strh	r3, [r7, #8]
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	441a      	add	r2, r3
 8004096:	893b      	ldrh	r3, [r7, #8]
 8004098:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800409c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	8013      	strh	r3, [r2, #0]
 80040ac:	e192      	b.n	80043d4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	827b      	strh	r3, [r7, #18]
 80040bc:	8a7b      	ldrh	r3, [r7, #18]
 80040be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d01b      	beq.n	80040fe <USB_DeactivateEndpoint+0xf6>
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040dc:	823b      	strh	r3, [r7, #16]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	441a      	add	r2, r3
 80040e8:	8a3b      	ldrh	r3, [r7, #16]
 80040ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	b29b      	uxth	r3, r3
 800410c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004114:	81fb      	strh	r3, [r7, #14]
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	441a      	add	r2, r3
 8004120:	89fb      	ldrh	r3, [r7, #14]
 8004122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800412a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800412e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004132:	b29b      	uxth	r3, r3
 8004134:	8013      	strh	r3, [r2, #0]
 8004136:	e14d      	b.n	80043d4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	785b      	ldrb	r3, [r3, #1]
 800413c:	2b00      	cmp	r3, #0
 800413e:	f040 80a5 	bne.w	800428c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4413      	add	r3, r2
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	843b      	strh	r3, [r7, #32]
 8004150:	8c3b      	ldrh	r3, [r7, #32]
 8004152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d01b      	beq.n	8004192 <USB_DeactivateEndpoint+0x18a>
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4413      	add	r3, r2
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	b29b      	uxth	r3, r3
 8004168:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800416c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004170:	83fb      	strh	r3, [r7, #30]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	441a      	add	r2, r3
 800417c:	8bfb      	ldrh	r3, [r7, #30]
 800417e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004182:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004186:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800418a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800418e:	b29b      	uxth	r3, r3
 8004190:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	83bb      	strh	r3, [r7, #28]
 80041a0:	8bbb      	ldrh	r3, [r7, #28]
 80041a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d01b      	beq.n	80041e2 <USB_DeactivateEndpoint+0x1da>
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c0:	837b      	strh	r3, [r7, #26]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	441a      	add	r2, r3
 80041cc:	8b7b      	ldrh	r3, [r7, #26]
 80041ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041de:	b29b      	uxth	r3, r3
 80041e0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f8:	833b      	strh	r3, [r7, #24]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	441a      	add	r2, r3
 8004204:	8b3b      	ldrh	r3, [r7, #24]
 8004206:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800420a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800420e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004212:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004216:	b29b      	uxth	r3, r3
 8004218:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	b29b      	uxth	r3, r3
 8004228:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800422c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004230:	82fb      	strh	r3, [r7, #22]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	441a      	add	r2, r3
 800423c:	8afb      	ldrh	r3, [r7, #22]
 800423e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004242:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004246:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800424a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800424e:	b29b      	uxth	r3, r3
 8004250:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4413      	add	r3, r2
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	b29b      	uxth	r3, r3
 8004260:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004264:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004268:	82bb      	strh	r3, [r7, #20]
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	441a      	add	r2, r3
 8004274:	8abb      	ldrh	r3, [r7, #20]
 8004276:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800427a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800427e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004286:	b29b      	uxth	r3, r3
 8004288:	8013      	strh	r3, [r2, #0]
 800428a:	e0a3      	b.n	80043d4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	881b      	ldrh	r3, [r3, #0]
 8004298:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800429a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800429c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d01b      	beq.n	80042dc <USB_DeactivateEndpoint+0x2d4>
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ba:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	441a      	add	r2, r3
 80042c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80042c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042d8:	b29b      	uxth	r3, r3
 80042da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80042ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80042ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d01b      	beq.n	800432c <USB_DeactivateEndpoint+0x324>
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	b29b      	uxth	r3, r3
 8004302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430a:	853b      	strh	r3, [r7, #40]	; 0x28
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	441a      	add	r2, r3
 8004316:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800431c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004324:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004328:	b29b      	uxth	r3, r3
 800432a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	b29b      	uxth	r3, r3
 800433a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800433e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004342:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	441a      	add	r2, r3
 800434e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004350:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004354:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004358:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800435c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004360:	b29b      	uxth	r3, r3
 8004362:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	b29b      	uxth	r3, r3
 8004372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004376:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800437a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	441a      	add	r2, r3
 8004386:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004388:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800438c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004398:	b29b      	uxth	r3, r3
 800439a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b2:	847b      	strh	r3, [r7, #34]	; 0x22
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	441a      	add	r2, r3
 80043be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3734      	adds	r7, #52	; 0x34
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b0c2      	sub	sp, #264	; 0x108
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80043f0:	6018      	str	r0, [r3, #0]
 80043f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043fa:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	785b      	ldrb	r3, [r3, #1]
 8004408:	2b01      	cmp	r3, #1
 800440a:	f040 86b7 	bne.w	800517c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800440e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004412:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699a      	ldr	r2, [r3, #24]
 800441a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800441e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	429a      	cmp	r2, r3
 8004428:	d908      	bls.n	800443c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800442a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800442e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800443a:	e007      	b.n	800444c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800443c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004440:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800444c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	7b1b      	ldrb	r3, [r3, #12]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d13a      	bne.n	80044d2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800445c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6959      	ldr	r1, [r3, #20]
 8004468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800446c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	88da      	ldrh	r2, [r3, #6]
 8004474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004478:	b29b      	uxth	r3, r3
 800447a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800447e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004482:	6800      	ldr	r0, [r0, #0]
 8004484:	f001 fc98 	bl	8005db8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800448c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	613b      	str	r3, [r7, #16]
 8004494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004498:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	461a      	mov	r2, r3
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	4413      	add	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]
 80044ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	00da      	lsls	r2, r3, #3
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	4413      	add	r3, r2
 80044be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	801a      	strh	r2, [r3, #0]
 80044ce:	f000 be1f 	b.w	8005110 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80044d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	78db      	ldrb	r3, [r3, #3]
 80044de:	2b02      	cmp	r3, #2
 80044e0:	f040 8462 	bne.w	8004da8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80044e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6a1a      	ldr	r2, [r3, #32]
 80044f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	f240 83df 	bls.w	8004cc0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004506:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	b29b      	uxth	r3, r3
 8004520:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004528:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800452c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004530:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800453a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	441a      	add	r2, r3
 8004546:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800454a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800454e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004552:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800455a:	b29b      	uxth	r3, r3
 800455c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800455e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6a1a      	ldr	r2, [r3, #32]
 800456a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800456e:	1ad2      	subs	r2, r2, r3
 8004570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004574:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800457c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004580:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800458a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	b29b      	uxth	r3, r3
 800459a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459e:	2b00      	cmp	r3, #0
 80045a0:	f000 81c7 	beq.w	8004932 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80045a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	633b      	str	r3, [r7, #48]	; 0x30
 80045b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	785b      	ldrb	r3, [r3, #1]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d177      	bne.n	80046b0 <USB_EPStartXfer+0x2ce>
 80045c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80045cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045da:	b29b      	uxth	r3, r3
 80045dc:	461a      	mov	r2, r3
 80045de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e0:	4413      	add	r3, r2
 80045e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80045e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	00da      	lsls	r2, r3, #3
 80045f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f4:	4413      	add	r3, r2
 80045f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80045fa:	627b      	str	r3, [r7, #36]	; 0x24
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	b29b      	uxth	r3, r3
 8004602:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004606:	b29a      	uxth	r2, r3
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	801a      	strh	r2, [r3, #0]
 800460c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004610:	2b3e      	cmp	r3, #62	; 0x3e
 8004612:	d921      	bls.n	8004658 <USB_EPStartXfer+0x276>
 8004614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004618:	095b      	lsrs	r3, r3, #5
 800461a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800461e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004622:	f003 031f 	and.w	r3, r3, #31
 8004626:	2b00      	cmp	r3, #0
 8004628:	d104      	bne.n	8004634 <USB_EPStartXfer+0x252>
 800462a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800462e:	3b01      	subs	r3, #1
 8004630:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	881b      	ldrh	r3, [r3, #0]
 8004638:	b29a      	uxth	r2, r3
 800463a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800463e:	b29b      	uxth	r3, r3
 8004640:	029b      	lsls	r3, r3, #10
 8004642:	b29b      	uxth	r3, r3
 8004644:	4313      	orrs	r3, r2
 8004646:	b29b      	uxth	r3, r3
 8004648:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800464c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004650:	b29a      	uxth	r2, r3
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	801a      	strh	r2, [r3, #0]
 8004656:	e050      	b.n	80046fa <USB_EPStartXfer+0x318>
 8004658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10a      	bne.n	8004676 <USB_EPStartXfer+0x294>
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	b29b      	uxth	r3, r3
 8004666:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800466a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800466e:	b29a      	uxth	r2, r3
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	801a      	strh	r2, [r3, #0]
 8004674:	e041      	b.n	80046fa <USB_EPStartXfer+0x318>
 8004676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800467a:	085b      	lsrs	r3, r3, #1
 800467c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	d004      	beq.n	8004696 <USB_EPStartXfer+0x2b4>
 800468c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004690:	3301      	adds	r3, #1
 8004692:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	881b      	ldrh	r3, [r3, #0]
 800469a:	b29a      	uxth	r2, r3
 800469c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	029b      	lsls	r3, r3, #10
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	4313      	orrs	r3, r2
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	801a      	strh	r2, [r3, #0]
 80046ae:	e024      	b.n	80046fa <USB_EPStartXfer+0x318>
 80046b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	785b      	ldrb	r3, [r3, #1]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d11c      	bne.n	80046fa <USB_EPStartXfer+0x318>
 80046c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	461a      	mov	r2, r3
 80046d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d4:	4413      	add	r3, r2
 80046d6:	633b      	str	r3, [r7, #48]	; 0x30
 80046d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	00da      	lsls	r2, r3, #3
 80046e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e8:	4413      	add	r3, r2
 80046ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80046ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80046fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	895b      	ldrh	r3, [r3, #10]
 8004706:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800470a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800470e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6959      	ldr	r1, [r3, #20]
 8004716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800471a:	b29b      	uxth	r3, r3
 800471c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004720:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004724:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004728:	6800      	ldr	r0, [r0, #0]
 800472a:	f001 fb45 	bl	8005db8 <USB_WritePMA>
            ep->xfer_buff += len;
 800472e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695a      	ldr	r2, [r3, #20]
 800473a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800473e:	441a      	add	r2, r3
 8004740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800474c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6a1a      	ldr	r2, [r3, #32]
 8004758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800475c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	429a      	cmp	r2, r3
 8004766:	d90f      	bls.n	8004788 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800476c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6a1a      	ldr	r2, [r3, #32]
 8004774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004778:	1ad2      	subs	r2, r2, r3
 800477a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800477e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	621a      	str	r2, [r3, #32]
 8004786:	e00e      	b.n	80047a6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800478c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800479c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2200      	movs	r2, #0
 80047a4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80047a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	785b      	ldrb	r3, [r3, #1]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d177      	bne.n	80048a6 <USB_EPStartXfer+0x4c4>
 80047b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	61bb      	str	r3, [r7, #24]
 80047c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	461a      	mov	r2, r3
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	4413      	add	r3, r2
 80047d8:	61bb      	str	r3, [r7, #24]
 80047da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	00da      	lsls	r2, r3, #3
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	4413      	add	r3, r2
 80047ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80047f0:	617b      	str	r3, [r7, #20]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	801a      	strh	r2, [r3, #0]
 8004802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004806:	2b3e      	cmp	r3, #62	; 0x3e
 8004808:	d921      	bls.n	800484e <USB_EPStartXfer+0x46c>
 800480a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800480e:	095b      	lsrs	r3, r3, #5
 8004810:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004818:	f003 031f 	and.w	r3, r3, #31
 800481c:	2b00      	cmp	r3, #0
 800481e:	d104      	bne.n	800482a <USB_EPStartXfer+0x448>
 8004820:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004824:	3b01      	subs	r3, #1
 8004826:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	b29a      	uxth	r2, r3
 8004830:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004834:	b29b      	uxth	r3, r3
 8004836:	029b      	lsls	r3, r3, #10
 8004838:	b29b      	uxth	r3, r3
 800483a:	4313      	orrs	r3, r2
 800483c:	b29b      	uxth	r3, r3
 800483e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004846:	b29a      	uxth	r2, r3
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	801a      	strh	r2, [r3, #0]
 800484c:	e056      	b.n	80048fc <USB_EPStartXfer+0x51a>
 800484e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10a      	bne.n	800486c <USB_EPStartXfer+0x48a>
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	b29b      	uxth	r3, r3
 800485c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004864:	b29a      	uxth	r2, r3
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	801a      	strh	r2, [r3, #0]
 800486a:	e047      	b.n	80048fc <USB_EPStartXfer+0x51a>
 800486c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004870:	085b      	lsrs	r3, r3, #1
 8004872:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d004      	beq.n	800488c <USB_EPStartXfer+0x4aa>
 8004882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004886:	3301      	adds	r3, #1
 8004888:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	b29a      	uxth	r2, r3
 8004892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004896:	b29b      	uxth	r3, r3
 8004898:	029b      	lsls	r3, r3, #10
 800489a:	b29b      	uxth	r3, r3
 800489c:	4313      	orrs	r3, r2
 800489e:	b29a      	uxth	r2, r3
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	801a      	strh	r2, [r3, #0]
 80048a4:	e02a      	b.n	80048fc <USB_EPStartXfer+0x51a>
 80048a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	785b      	ldrb	r3, [r3, #1]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d122      	bne.n	80048fc <USB_EPStartXfer+0x51a>
 80048b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	623b      	str	r3, [r7, #32]
 80048c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	461a      	mov	r2, r3
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	4413      	add	r3, r2
 80048d8:	623b      	str	r3, [r7, #32]
 80048da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	00da      	lsls	r2, r3, #3
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	4413      	add	r3, r2
 80048ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80048f0:	61fb      	str	r3, [r7, #28]
 80048f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80048fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	891b      	ldrh	r3, [r3, #8]
 8004908:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800490c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6959      	ldr	r1, [r3, #20]
 8004918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800491c:	b29b      	uxth	r3, r3
 800491e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004922:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004926:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800492a:	6800      	ldr	r0, [r0, #0]
 800492c:	f001 fa44 	bl	8005db8 <USB_WritePMA>
 8004930:	e3ee      	b.n	8005110 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004936:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	785b      	ldrb	r3, [r3, #1]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d177      	bne.n	8004a32 <USB_EPStartXfer+0x650>
 8004942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004946:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	64bb      	str	r3, [r7, #72]	; 0x48
 800494e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004952:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800495c:	b29b      	uxth	r3, r3
 800495e:	461a      	mov	r2, r3
 8004960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004962:	4413      	add	r3, r2
 8004964:	64bb      	str	r3, [r7, #72]	; 0x48
 8004966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800496a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	00da      	lsls	r2, r3, #3
 8004974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004976:	4413      	add	r3, r2
 8004978:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800497c:	647b      	str	r3, [r7, #68]	; 0x44
 800497e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004980:	881b      	ldrh	r3, [r3, #0]
 8004982:	b29b      	uxth	r3, r3
 8004984:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004988:	b29a      	uxth	r2, r3
 800498a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800498c:	801a      	strh	r2, [r3, #0]
 800498e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004992:	2b3e      	cmp	r3, #62	; 0x3e
 8004994:	d921      	bls.n	80049da <USB_EPStartXfer+0x5f8>
 8004996:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80049a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049a4:	f003 031f 	and.w	r3, r3, #31
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d104      	bne.n	80049b6 <USB_EPStartXfer+0x5d4>
 80049ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049b0:	3b01      	subs	r3, #1
 80049b2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80049b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	029b      	lsls	r3, r3, #10
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	4313      	orrs	r3, r2
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049d6:	801a      	strh	r2, [r3, #0]
 80049d8:	e056      	b.n	8004a88 <USB_EPStartXfer+0x6a6>
 80049da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10a      	bne.n	80049f8 <USB_EPStartXfer+0x616>
 80049e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049f4:	801a      	strh	r2, [r3, #0]
 80049f6:	e047      	b.n	8004a88 <USB_EPStartXfer+0x6a6>
 80049f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049fc:	085b      	lsrs	r3, r3, #1
 80049fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d004      	beq.n	8004a18 <USB_EPStartXfer+0x636>
 8004a0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a12:	3301      	adds	r3, #1
 8004a14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	029b      	lsls	r3, r3, #10
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a2e:	801a      	strh	r2, [r3, #0]
 8004a30:	e02a      	b.n	8004a88 <USB_EPStartXfer+0x6a6>
 8004a32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	785b      	ldrb	r3, [r3, #1]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d122      	bne.n	8004a88 <USB_EPStartXfer+0x6a6>
 8004a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	653b      	str	r3, [r7, #80]	; 0x50
 8004a4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	461a      	mov	r2, r3
 8004a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a62:	4413      	add	r3, r2
 8004a64:	653b      	str	r3, [r7, #80]	; 0x50
 8004a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	00da      	lsls	r2, r3, #3
 8004a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a76:	4413      	add	r3, r2
 8004a78:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a86:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	891b      	ldrh	r3, [r3, #8]
 8004a94:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6959      	ldr	r1, [r3, #20]
 8004aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004aae:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004ab2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004ab6:	6800      	ldr	r0, [r0, #0]
 8004ab8:	f001 f97e 	bl	8005db8 <USB_WritePMA>
            ep->xfer_buff += len;
 8004abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ac0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	695a      	ldr	r2, [r3, #20]
 8004ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004acc:	441a      	add	r2, r3
 8004ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6a1a      	ldr	r2, [r3, #32]
 8004ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d90f      	bls.n	8004b16 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8004af6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004afa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6a1a      	ldr	r2, [r3, #32]
 8004b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b06:	1ad2      	subs	r2, r2, r3
 8004b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	621a      	str	r2, [r3, #32]
 8004b14:	e00e      	b.n	8004b34 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8004b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2200      	movs	r2, #0
 8004b32:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	643b      	str	r3, [r7, #64]	; 0x40
 8004b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	785b      	ldrb	r3, [r3, #1]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d177      	bne.n	8004c40 <USB_EPStartXfer+0x85e>
 8004b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b70:	4413      	add	r3, r2
 8004b72:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	00da      	lsls	r2, r3, #3
 8004b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b84:	4413      	add	r3, r2
 8004b86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004b8a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b8e:	881b      	ldrh	r3, [r3, #0]
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b9a:	801a      	strh	r2, [r3, #0]
 8004b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ba0:	2b3e      	cmp	r3, #62	; 0x3e
 8004ba2:	d921      	bls.n	8004be8 <USB_EPStartXfer+0x806>
 8004ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ba8:	095b      	lsrs	r3, r3, #5
 8004baa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bb2:	f003 031f 	and.w	r3, r3, #31
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d104      	bne.n	8004bc4 <USB_EPStartXfer+0x7e2>
 8004bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc6:	881b      	ldrh	r3, [r3, #0]
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	029b      	lsls	r3, r3, #10
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be4:	801a      	strh	r2, [r3, #0]
 8004be6:	e050      	b.n	8004c8a <USB_EPStartXfer+0x8a8>
 8004be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10a      	bne.n	8004c06 <USB_EPStartXfer+0x824>
 8004bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf2:	881b      	ldrh	r3, [r3, #0]
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c02:	801a      	strh	r2, [r3, #0]
 8004c04:	e041      	b.n	8004c8a <USB_EPStartXfer+0x8a8>
 8004c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c0a:	085b      	lsrs	r3, r3, #1
 8004c0c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d004      	beq.n	8004c26 <USB_EPStartXfer+0x844>
 8004c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c20:	3301      	adds	r3, #1
 8004c22:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	029b      	lsls	r3, r3, #10
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	4313      	orrs	r3, r2
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c3c:	801a      	strh	r2, [r3, #0]
 8004c3e:	e024      	b.n	8004c8a <USB_EPStartXfer+0x8a8>
 8004c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	785b      	ldrb	r3, [r3, #1]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d11c      	bne.n	8004c8a <USB_EPStartXfer+0x8a8>
 8004c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	461a      	mov	r2, r3
 8004c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c64:	4413      	add	r3, r2
 8004c66:	643b      	str	r3, [r7, #64]	; 0x40
 8004c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	00da      	lsls	r2, r3, #3
 8004c76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c78:	4413      	add	r3, r2
 8004c7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c88:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004c8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	895b      	ldrh	r3, [r3, #10]
 8004c96:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6959      	ldr	r1, [r3, #20]
 8004ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004cb0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004cb4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004cb8:	6800      	ldr	r0, [r0, #0]
 8004cba:	f001 f87d 	bl	8005db8 <USB_WritePMA>
 8004cbe:	e227      	b.n	8005110 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	441a      	add	r2, r3
 8004d14:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004d18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	461a      	mov	r2, r3
 8004d4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d4c:	4413      	add	r3, r2
 8004d4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	00da      	lsls	r2, r3, #3
 8004d5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d60:	4413      	add	r3, r2
 8004d62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d66:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d70:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004d72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	891b      	ldrh	r3, [r3, #8]
 8004d7e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6959      	ldr	r1, [r3, #20]
 8004d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004d98:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004d9c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004da0:	6800      	ldr	r0, [r0, #0]
 8004da2:	f001 f809 	bl	8005db8 <USB_WritePMA>
 8004da6:	e1b3      	b.n	8005110 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6a1a      	ldr	r2, [r3, #32]
 8004db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004db8:	1ad2      	subs	r2, r2, r3
 8004dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004dc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	4413      	add	r3, r2
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 80c6 	beq.w	8004f7a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004df2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	673b      	str	r3, [r7, #112]	; 0x70
 8004dfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	785b      	ldrb	r3, [r3, #1]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d177      	bne.n	8004efa <USB_EPStartXfer+0xb18>
 8004e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	461a      	mov	r2, r3
 8004e28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e2a:	4413      	add	r3, r2
 8004e2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	00da      	lsls	r2, r3, #3
 8004e3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e3e:	4413      	add	r3, r2
 8004e40:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e44:	667b      	str	r3, [r7, #100]	; 0x64
 8004e46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e54:	801a      	strh	r2, [r3, #0]
 8004e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e5a:	2b3e      	cmp	r3, #62	; 0x3e
 8004e5c:	d921      	bls.n	8004ea2 <USB_EPStartXfer+0xac0>
 8004e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e62:	095b      	lsrs	r3, r3, #5
 8004e64:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e6c:	f003 031f 	and.w	r3, r3, #31
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d104      	bne.n	8004e7e <USB_EPStartXfer+0xa9c>
 8004e74:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004e7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	029b      	lsls	r3, r3, #10
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e9e:	801a      	strh	r2, [r3, #0]
 8004ea0:	e050      	b.n	8004f44 <USB_EPStartXfer+0xb62>
 8004ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10a      	bne.n	8004ec0 <USB_EPStartXfer+0xade>
 8004eaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ebc:	801a      	strh	r2, [r3, #0]
 8004ebe:	e041      	b.n	8004f44 <USB_EPStartXfer+0xb62>
 8004ec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ec4:	085b      	lsrs	r3, r3, #1
 8004ec6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004eca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d004      	beq.n	8004ee0 <USB_EPStartXfer+0xafe>
 8004ed6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004eda:	3301      	adds	r3, #1
 8004edc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004ee0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ee2:	881b      	ldrh	r3, [r3, #0]
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	029b      	lsls	r3, r3, #10
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ef6:	801a      	strh	r2, [r3, #0]
 8004ef8:	e024      	b.n	8004f44 <USB_EPStartXfer+0xb62>
 8004efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004efe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	785b      	ldrb	r3, [r3, #1]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d11c      	bne.n	8004f44 <USB_EPStartXfer+0xb62>
 8004f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f1e:	4413      	add	r3, r2
 8004f20:	673b      	str	r3, [r7, #112]	; 0x70
 8004f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	00da      	lsls	r2, r3, #3
 8004f30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f32:	4413      	add	r3, r2
 8004f34:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f42:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004f44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	895b      	ldrh	r3, [r3, #10]
 8004f50:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6959      	ldr	r1, [r3, #20]
 8004f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004f6a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004f6e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004f72:	6800      	ldr	r0, [r0, #0]
 8004f74:	f000 ff20 	bl	8005db8 <USB_WritePMA>
 8004f78:	e0ca      	b.n	8005110 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	785b      	ldrb	r3, [r3, #1]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d177      	bne.n	800507a <USB_EPStartXfer+0xc98>
 8004f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004faa:	4413      	add	r3, r2
 8004fac:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	00da      	lsls	r2, r3, #3
 8004fbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fbe:	4413      	add	r3, r2
 8004fc0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004fc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fd4:	801a      	strh	r2, [r3, #0]
 8004fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fda:	2b3e      	cmp	r3, #62	; 0x3e
 8004fdc:	d921      	bls.n	8005022 <USB_EPStartXfer+0xc40>
 8004fde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fe2:	095b      	lsrs	r3, r3, #5
 8004fe4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fec:	f003 031f 	and.w	r3, r3, #31
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d104      	bne.n	8004ffe <USB_EPStartXfer+0xc1c>
 8004ff4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004ffe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	b29a      	uxth	r2, r3
 8005004:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005008:	b29b      	uxth	r3, r3
 800500a:	029b      	lsls	r3, r3, #10
 800500c:	b29b      	uxth	r3, r3
 800500e:	4313      	orrs	r3, r2
 8005010:	b29b      	uxth	r3, r3
 8005012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800501a:	b29a      	uxth	r2, r3
 800501c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800501e:	801a      	strh	r2, [r3, #0]
 8005020:	e05c      	b.n	80050dc <USB_EPStartXfer+0xcfa>
 8005022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10a      	bne.n	8005040 <USB_EPStartXfer+0xc5e>
 800502a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	b29b      	uxth	r3, r3
 8005030:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005034:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005038:	b29a      	uxth	r2, r3
 800503a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800503c:	801a      	strh	r2, [r3, #0]
 800503e:	e04d      	b.n	80050dc <USB_EPStartXfer+0xcfa>
 8005040:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005044:	085b      	lsrs	r3, r3, #1
 8005046:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800504a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d004      	beq.n	8005060 <USB_EPStartXfer+0xc7e>
 8005056:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800505a:	3301      	adds	r3, #1
 800505c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005060:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	b29a      	uxth	r2, r3
 8005066:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800506a:	b29b      	uxth	r3, r3
 800506c:	029b      	lsls	r3, r3, #10
 800506e:	b29b      	uxth	r3, r3
 8005070:	4313      	orrs	r3, r2
 8005072:	b29a      	uxth	r2, r3
 8005074:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005076:	801a      	strh	r2, [r3, #0]
 8005078:	e030      	b.n	80050dc <USB_EPStartXfer+0xcfa>
 800507a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800507e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	785b      	ldrb	r3, [r3, #1]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d128      	bne.n	80050dc <USB_EPStartXfer+0xcfa>
 800508a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800508e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800509c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	461a      	mov	r2, r3
 80050aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050ae:	4413      	add	r3, r2
 80050b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	00da      	lsls	r2, r3, #3
 80050c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050c6:	4413      	add	r3, r2
 80050c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80050cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80050da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80050dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	891b      	ldrh	r3, [r3, #8]
 80050e8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80050ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6959      	ldr	r1, [r3, #20]
 80050f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005102:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005106:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800510a:	6800      	ldr	r0, [r0, #0]
 800510c:	f000 fe54 	bl	8005db8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005114:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800511e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	881b      	ldrh	r3, [r3, #0]
 800512c:	b29b      	uxth	r3, r3
 800512e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005136:	817b      	strh	r3, [r7, #10]
 8005138:	897b      	ldrh	r3, [r7, #10]
 800513a:	f083 0310 	eor.w	r3, r3, #16
 800513e:	817b      	strh	r3, [r7, #10]
 8005140:	897b      	ldrh	r3, [r7, #10]
 8005142:	f083 0320 	eor.w	r3, r3, #32
 8005146:	817b      	strh	r3, [r7, #10]
 8005148:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800514c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	441a      	add	r2, r3
 8005162:	897b      	ldrh	r3, [r7, #10]
 8005164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800516c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005174:	b29b      	uxth	r3, r3
 8005176:	8013      	strh	r3, [r2, #0]
 8005178:	f000 bcde 	b.w	8005b38 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800517c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	7b1b      	ldrb	r3, [r3, #12]
 8005188:	2b00      	cmp	r3, #0
 800518a:	f040 80bb 	bne.w	8005304 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800518e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699a      	ldr	r2, [r3, #24]
 800519a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800519e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d917      	bls.n	80051da <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80051aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80051ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	699a      	ldr	r2, [r3, #24]
 80051c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051ca:	1ad2      	subs	r2, r2, r3
 80051cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	619a      	str	r2, [r3, #24]
 80051d8:	e00e      	b.n	80051f8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80051da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80051ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2200      	movs	r2, #0
 80051f6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80051f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800520a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005214:	b29b      	uxth	r3, r3
 8005216:	461a      	mov	r2, r3
 8005218:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800521c:	4413      	add	r3, r2
 800521e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	00da      	lsls	r2, r3, #3
 8005230:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005234:	4413      	add	r3, r2
 8005236:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800523a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800523e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	b29b      	uxth	r3, r3
 8005246:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800524a:	b29a      	uxth	r2, r3
 800524c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005250:	801a      	strh	r2, [r3, #0]
 8005252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005256:	2b3e      	cmp	r3, #62	; 0x3e
 8005258:	d924      	bls.n	80052a4 <USB_EPStartXfer+0xec2>
 800525a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800525e:	095b      	lsrs	r3, r3, #5
 8005260:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005268:	f003 031f 	and.w	r3, r3, #31
 800526c:	2b00      	cmp	r3, #0
 800526e:	d104      	bne.n	800527a <USB_EPStartXfer+0xe98>
 8005270:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005274:	3b01      	subs	r3, #1
 8005276:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800527a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800527e:	881b      	ldrh	r3, [r3, #0]
 8005280:	b29a      	uxth	r2, r3
 8005282:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005286:	b29b      	uxth	r3, r3
 8005288:	029b      	lsls	r3, r3, #10
 800528a:	b29b      	uxth	r3, r3
 800528c:	4313      	orrs	r3, r2
 800528e:	b29b      	uxth	r3, r3
 8005290:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005298:	b29a      	uxth	r2, r3
 800529a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800529e:	801a      	strh	r2, [r3, #0]
 80052a0:	f000 bc10 	b.w	8005ac4 <USB_EPStartXfer+0x16e2>
 80052a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10c      	bne.n	80052c6 <USB_EPStartXfer+0xee4>
 80052ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052bc:	b29a      	uxth	r2, r3
 80052be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052c2:	801a      	strh	r2, [r3, #0]
 80052c4:	e3fe      	b.n	8005ac4 <USB_EPStartXfer+0x16e2>
 80052c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ca:	085b      	lsrs	r3, r3, #1
 80052cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d004      	beq.n	80052e6 <USB_EPStartXfer+0xf04>
 80052dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80052e0:	3301      	adds	r3, #1
 80052e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	029b      	lsls	r3, r3, #10
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	4313      	orrs	r3, r2
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005300:	801a      	strh	r2, [r3, #0]
 8005302:	e3df      	b.n	8005ac4 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	78db      	ldrb	r3, [r3, #3]
 8005310:	2b02      	cmp	r3, #2
 8005312:	f040 8218 	bne.w	8005746 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800531a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	785b      	ldrb	r3, [r3, #1]
 8005322:	2b00      	cmp	r3, #0
 8005324:	f040 809d 	bne.w	8005462 <USB_EPStartXfer+0x1080>
 8005328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800532c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800533a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005344:	b29b      	uxth	r3, r3
 8005346:	461a      	mov	r2, r3
 8005348:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800534c:	4413      	add	r3, r2
 800534e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	00da      	lsls	r2, r3, #3
 8005360:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005364:	4413      	add	r3, r2
 8005366:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800536a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800536e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	b29b      	uxth	r3, r3
 8005376:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800537a:	b29a      	uxth	r2, r3
 800537c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005380:	801a      	strh	r2, [r3, #0]
 8005382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005386:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	2b3e      	cmp	r3, #62	; 0x3e
 8005390:	d92b      	bls.n	80053ea <USB_EPStartXfer+0x1008>
 8005392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	095b      	lsrs	r3, r3, #5
 80053a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80053a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	f003 031f 	and.w	r3, r3, #31
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d104      	bne.n	80053c2 <USB_EPStartXfer+0xfe0>
 80053b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053bc:	3b01      	subs	r3, #1
 80053be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80053c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80053c6:	881b      	ldrh	r3, [r3, #0]
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	029b      	lsls	r3, r3, #10
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	4313      	orrs	r3, r2
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80053e6:	801a      	strh	r2, [r3, #0]
 80053e8:	e070      	b.n	80054cc <USB_EPStartXfer+0x10ea>
 80053ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10c      	bne.n	8005414 <USB_EPStartXfer+0x1032>
 80053fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80053fe:	881b      	ldrh	r3, [r3, #0]
 8005400:	b29b      	uxth	r3, r3
 8005402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800540a:	b29a      	uxth	r2, r3
 800540c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005410:	801a      	strh	r2, [r3, #0]
 8005412:	e05b      	b.n	80054cc <USB_EPStartXfer+0x10ea>
 8005414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005418:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	085b      	lsrs	r3, r3, #1
 8005422:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800542a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d004      	beq.n	8005444 <USB_EPStartXfer+0x1062>
 800543a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800543e:	3301      	adds	r3, #1
 8005440:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005444:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	b29a      	uxth	r2, r3
 800544c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005450:	b29b      	uxth	r3, r3
 8005452:	029b      	lsls	r3, r3, #10
 8005454:	b29b      	uxth	r3, r3
 8005456:	4313      	orrs	r3, r2
 8005458:	b29a      	uxth	r2, r3
 800545a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800545e:	801a      	strh	r2, [r3, #0]
 8005460:	e034      	b.n	80054cc <USB_EPStartXfer+0x10ea>
 8005462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	785b      	ldrb	r3, [r3, #1]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d12c      	bne.n	80054cc <USB_EPStartXfer+0x10ea>
 8005472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005476:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005484:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800548e:	b29b      	uxth	r3, r3
 8005490:	461a      	mov	r2, r3
 8005492:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005496:	4413      	add	r3, r2
 8005498:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800549c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	00da      	lsls	r2, r3, #3
 80054aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80054ae:	4413      	add	r3, r2
 80054b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80054b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80054ca:	801a      	strh	r2, [r3, #0]
 80054cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80054da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	785b      	ldrb	r3, [r3, #1]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f040 809d 	bne.w	8005626 <USB_EPStartXfer+0x1244>
 80054ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80054fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005508:	b29b      	uxth	r3, r3
 800550a:	461a      	mov	r2, r3
 800550c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005510:	4413      	add	r3, r2
 8005512:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800551a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	00da      	lsls	r2, r3, #3
 8005524:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005528:	4413      	add	r3, r2
 800552a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800552e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005532:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	b29b      	uxth	r3, r3
 800553a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800553e:	b29a      	uxth	r2, r3
 8005540:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005544:	801a      	strh	r2, [r3, #0]
 8005546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800554a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	2b3e      	cmp	r3, #62	; 0x3e
 8005554:	d92b      	bls.n	80055ae <USB_EPStartXfer+0x11cc>
 8005556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800555a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	095b      	lsrs	r3, r3, #5
 8005564:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800556c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	f003 031f 	and.w	r3, r3, #31
 8005578:	2b00      	cmp	r3, #0
 800557a:	d104      	bne.n	8005586 <USB_EPStartXfer+0x11a4>
 800557c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005580:	3b01      	subs	r3, #1
 8005582:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005586:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800558a:	881b      	ldrh	r3, [r3, #0]
 800558c:	b29a      	uxth	r2, r3
 800558e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005592:	b29b      	uxth	r3, r3
 8005594:	029b      	lsls	r3, r3, #10
 8005596:	b29b      	uxth	r3, r3
 8005598:	4313      	orrs	r3, r2
 800559a:	b29b      	uxth	r3, r3
 800559c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055aa:	801a      	strh	r2, [r3, #0]
 80055ac:	e069      	b.n	8005682 <USB_EPStartXfer+0x12a0>
 80055ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10c      	bne.n	80055d8 <USB_EPStartXfer+0x11f6>
 80055be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055d4:	801a      	strh	r2, [r3, #0]
 80055d6:	e054      	b.n	8005682 <USB_EPStartXfer+0x12a0>
 80055d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	085b      	lsrs	r3, r3, #1
 80055e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80055ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d004      	beq.n	8005608 <USB_EPStartXfer+0x1226>
 80055fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005602:	3301      	adds	r3, #1
 8005604:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005608:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800560c:	881b      	ldrh	r3, [r3, #0]
 800560e:	b29a      	uxth	r2, r3
 8005610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005614:	b29b      	uxth	r3, r3
 8005616:	029b      	lsls	r3, r3, #10
 8005618:	b29b      	uxth	r3, r3
 800561a:	4313      	orrs	r3, r2
 800561c:	b29a      	uxth	r2, r3
 800561e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005622:	801a      	strh	r2, [r3, #0]
 8005624:	e02d      	b.n	8005682 <USB_EPStartXfer+0x12a0>
 8005626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800562a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	785b      	ldrb	r3, [r3, #1]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d125      	bne.n	8005682 <USB_EPStartXfer+0x12a0>
 8005636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800563a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005644:	b29b      	uxth	r3, r3
 8005646:	461a      	mov	r2, r3
 8005648:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800564c:	4413      	add	r3, r2
 800564e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	00da      	lsls	r2, r3, #3
 8005660:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005664:	4413      	add	r3, r2
 8005666:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800566a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800566e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	b29a      	uxth	r2, r3
 800567c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005680:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 8218 	beq.w	8005ac4 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005698:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80056b4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80056b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d005      	beq.n	80056cc <USB_EPStartXfer+0x12ea>
 80056c0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80056c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10d      	bne.n	80056e8 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80056cc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80056d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f040 81f5 	bne.w	8005ac4 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80056da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80056de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f040 81ee 	bne.w	8005ac4 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80056e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4413      	add	r3, r2
 8005702:	881b      	ldrh	r3, [r3, #0]
 8005704:	b29b      	uxth	r3, r3
 8005706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800570a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005716:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	441a      	add	r2, r3
 800572c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005730:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005734:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800573c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005740:	b29b      	uxth	r3, r3
 8005742:	8013      	strh	r3, [r2, #0]
 8005744:	e1be      	b.n	8005ac4 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800574a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	78db      	ldrb	r3, [r3, #3]
 8005752:	2b01      	cmp	r3, #1
 8005754:	f040 81b4 	bne.w	8005ac0 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800575c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	699a      	ldr	r2, [r3, #24]
 8005764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005768:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	429a      	cmp	r2, r3
 8005772:	d917      	bls.n	80057a4 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	699a      	ldr	r2, [r3, #24]
 8005790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005794:	1ad2      	subs	r2, r2, r3
 8005796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800579a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	619a      	str	r2, [r3, #24]
 80057a2:	e00e      	b.n	80057c2 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80057a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80057b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2200      	movs	r2, #0
 80057c0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80057c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	785b      	ldrb	r3, [r3, #1]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f040 8085 	bne.w	80058de <USB_EPStartXfer+0x14fc>
 80057d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80057e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	461a      	mov	r2, r3
 80057f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057f8:	4413      	add	r3, r2
 80057fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80057fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	00da      	lsls	r2, r3, #3
 800580c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005810:	4413      	add	r3, r2
 8005812:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005816:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800581a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800581e:	881b      	ldrh	r3, [r3, #0]
 8005820:	b29b      	uxth	r3, r3
 8005822:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005826:	b29a      	uxth	r2, r3
 8005828:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800582c:	801a      	strh	r2, [r3, #0]
 800582e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005832:	2b3e      	cmp	r3, #62	; 0x3e
 8005834:	d923      	bls.n	800587e <USB_EPStartXfer+0x149c>
 8005836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800583a:	095b      	lsrs	r3, r3, #5
 800583c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005844:	f003 031f 	and.w	r3, r3, #31
 8005848:	2b00      	cmp	r3, #0
 800584a:	d104      	bne.n	8005856 <USB_EPStartXfer+0x1474>
 800584c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005850:	3b01      	subs	r3, #1
 8005852:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005856:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800585a:	881b      	ldrh	r3, [r3, #0]
 800585c:	b29a      	uxth	r2, r3
 800585e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005862:	b29b      	uxth	r3, r3
 8005864:	029b      	lsls	r3, r3, #10
 8005866:	b29b      	uxth	r3, r3
 8005868:	4313      	orrs	r3, r2
 800586a:	b29b      	uxth	r3, r3
 800586c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005870:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005874:	b29a      	uxth	r2, r3
 8005876:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800587a:	801a      	strh	r2, [r3, #0]
 800587c:	e060      	b.n	8005940 <USB_EPStartXfer+0x155e>
 800587e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10c      	bne.n	80058a0 <USB_EPStartXfer+0x14be>
 8005886:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800588a:	881b      	ldrh	r3, [r3, #0]
 800588c:	b29b      	uxth	r3, r3
 800588e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005896:	b29a      	uxth	r2, r3
 8005898:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800589c:	801a      	strh	r2, [r3, #0]
 800589e:	e04f      	b.n	8005940 <USB_EPStartXfer+0x155e>
 80058a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058a4:	085b      	lsrs	r3, r3, #1
 80058a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80058aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d004      	beq.n	80058c0 <USB_EPStartXfer+0x14de>
 80058b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058ba:	3301      	adds	r3, #1
 80058bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80058c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	029b      	lsls	r3, r3, #10
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	4313      	orrs	r3, r2
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058da:	801a      	strh	r2, [r3, #0]
 80058dc:	e030      	b.n	8005940 <USB_EPStartXfer+0x155e>
 80058de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	785b      	ldrb	r3, [r3, #1]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d128      	bne.n	8005940 <USB_EPStartXfer+0x155e>
 80058ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80058fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005900:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800590a:	b29b      	uxth	r3, r3
 800590c:	461a      	mov	r2, r3
 800590e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005912:	4413      	add	r3, r2
 8005914:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800591c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	00da      	lsls	r2, r3, #3
 8005926:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800592a:	4413      	add	r3, r2
 800592c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005930:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005938:	b29a      	uxth	r2, r3
 800593a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800593e:	801a      	strh	r2, [r3, #0]
 8005940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005944:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800594e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005952:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	785b      	ldrb	r3, [r3, #1]
 800595a:	2b00      	cmp	r3, #0
 800595c:	f040 8085 	bne.w	8005a6a <USB_EPStartXfer+0x1688>
 8005960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005964:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800596e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005972:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800597c:	b29b      	uxth	r3, r3
 800597e:	461a      	mov	r2, r3
 8005980:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005984:	4413      	add	r3, r2
 8005986:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800598a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800598e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	00da      	lsls	r2, r3, #3
 8005998:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800599c:	4413      	add	r3, r2
 800599e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80059a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059aa:	881b      	ldrh	r3, [r3, #0]
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059b8:	801a      	strh	r2, [r3, #0]
 80059ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059be:	2b3e      	cmp	r3, #62	; 0x3e
 80059c0:	d923      	bls.n	8005a0a <USB_EPStartXfer+0x1628>
 80059c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059d0:	f003 031f 	and.w	r3, r3, #31
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d104      	bne.n	80059e2 <USB_EPStartXfer+0x1600>
 80059d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059dc:	3b01      	subs	r3, #1
 80059de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80059e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	029b      	lsls	r3, r3, #10
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	4313      	orrs	r3, r2
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a00:	b29a      	uxth	r2, r3
 8005a02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a06:	801a      	strh	r2, [r3, #0]
 8005a08:	e05c      	b.n	8005ac4 <USB_EPStartXfer+0x16e2>
 8005a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d10c      	bne.n	8005a2c <USB_EPStartXfer+0x164a>
 8005a12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a16:	881b      	ldrh	r3, [r3, #0]
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a28:	801a      	strh	r2, [r3, #0]
 8005a2a:	e04b      	b.n	8005ac4 <USB_EPStartXfer+0x16e2>
 8005a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a30:	085b      	lsrs	r3, r3, #1
 8005a32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d004      	beq.n	8005a4c <USB_EPStartXfer+0x166a>
 8005a42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a46:	3301      	adds	r3, #1
 8005a48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	029b      	lsls	r3, r3, #10
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a66:	801a      	strh	r2, [r3, #0]
 8005a68:	e02c      	b.n	8005ac4 <USB_EPStartXfer+0x16e2>
 8005a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	785b      	ldrb	r3, [r3, #1]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d124      	bne.n	8005ac4 <USB_EPStartXfer+0x16e2>
 8005a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005a90:	4413      	add	r3, r2
 8005a92:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	00da      	lsls	r2, r3, #3
 8005aa4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005aae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005abc:	801a      	strh	r2, [r3, #0]
 8005abe:	e001      	b.n	8005ac4 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e03a      	b.n	8005b3a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ac8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	881b      	ldrh	r3, [r3, #0]
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ae6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aea:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005aee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005af2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005af6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005afa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005afe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005b02:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005b06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	441a      	add	r2, r3
 8005b20:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005b24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	785b      	ldrb	r3, [r3, #1]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d020      	beq.n	8005b98 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	4413      	add	r3, r2
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b6c:	81bb      	strh	r3, [r7, #12]
 8005b6e:	89bb      	ldrh	r3, [r7, #12]
 8005b70:	f083 0310 	eor.w	r3, r3, #16
 8005b74:	81bb      	strh	r3, [r7, #12]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	441a      	add	r2, r3
 8005b80:	89bb      	ldrh	r3, [r7, #12]
 8005b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	8013      	strh	r3, [r2, #0]
 8005b96:	e01f      	b.n	8005bd8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bae:	81fb      	strh	r3, [r7, #14]
 8005bb0:	89fb      	ldrh	r3, [r7, #14]
 8005bb2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005bb6:	81fb      	strh	r3, [r7, #14]
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	441a      	add	r2, r3
 8005bc2:	89fb      	ldrh	r3, [r7, #14]
 8005bc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b087      	sub	sp, #28
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	7b1b      	ldrb	r3, [r3, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f040 809d 	bne.w	8005d34 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	785b      	ldrb	r3, [r3, #1]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d04c      	beq.n	8005c9c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	881b      	ldrh	r3, [r3, #0]
 8005c0e:	823b      	strh	r3, [r7, #16]
 8005c10:	8a3b      	ldrh	r3, [r7, #16]
 8005c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d01b      	beq.n	8005c52 <USB_EPClearStall+0x6c>
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4413      	add	r3, r2
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c30:	81fb      	strh	r3, [r7, #14]
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	441a      	add	r2, r3
 8005c3c:	89fb      	ldrh	r3, [r7, #14]
 8005c3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	78db      	ldrb	r3, [r3, #3]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d06c      	beq.n	8005d34 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c70:	81bb      	strh	r3, [r7, #12]
 8005c72:	89bb      	ldrh	r3, [r7, #12]
 8005c74:	f083 0320 	eor.w	r3, r3, #32
 8005c78:	81bb      	strh	r3, [r7, #12]
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	441a      	add	r2, r3
 8005c84:	89bb      	ldrh	r3, [r7, #12]
 8005c86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	8013      	strh	r3, [r2, #0]
 8005c9a:	e04b      	b.n	8005d34 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	82fb      	strh	r3, [r7, #22]
 8005caa:	8afb      	ldrh	r3, [r7, #22]
 8005cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d01b      	beq.n	8005cec <USB_EPClearStall+0x106>
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	881b      	ldrh	r3, [r3, #0]
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cca:	82bb      	strh	r3, [r7, #20]
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	441a      	add	r2, r3
 8005cd6:	8abb      	ldrh	r3, [r7, #20]
 8005cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ce0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d02:	827b      	strh	r3, [r7, #18]
 8005d04:	8a7b      	ldrh	r3, [r7, #18]
 8005d06:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d0a:	827b      	strh	r3, [r7, #18]
 8005d0c:	8a7b      	ldrh	r3, [r7, #18]
 8005d0e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d12:	827b      	strh	r3, [r7, #18]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	441a      	add	r2, r3
 8005d1e:	8a7b      	ldrh	r3, [r7, #18]
 8005d20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	371c      	adds	r7, #28
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005d4e:	78fb      	ldrb	r3, [r7, #3]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d103      	bne.n	8005d5c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2280      	movs	r2, #128	; 0x80
 8005d58:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b083      	sub	sp, #12
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005daa:	68fb      	ldr	r3, [r7, #12]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b08b      	sub	sp, #44	; 0x2c
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	80fb      	strh	r3, [r7, #6]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005dce:	88bb      	ldrh	r3, [r7, #4]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	085b      	lsrs	r3, r3, #1
 8005dd4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005dde:	88fa      	ldrh	r2, [r7, #6]
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005de8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	627b      	str	r3, [r7, #36]	; 0x24
 8005dee:	e01b      	b.n	8005e28 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	021b      	lsls	r3, r3, #8
 8005dfe:	b21a      	sxth	r2, r3
 8005e00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	b21b      	sxth	r3, r3
 8005e08:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	8a7a      	ldrh	r2, [r7, #18]
 8005e0e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	3302      	adds	r3, #2
 8005e14:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e24:	3b01      	subs	r3, #1
 8005e26:	627b      	str	r3, [r7, #36]	; 0x24
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1e0      	bne.n	8005df0 <USB_WritePMA+0x38>
  }
}
 8005e2e:	bf00      	nop
 8005e30:	bf00      	nop
 8005e32:	372c      	adds	r7, #44	; 0x2c
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b08b      	sub	sp, #44	; 0x2c
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	4611      	mov	r1, r2
 8005e48:	461a      	mov	r2, r3
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	80fb      	strh	r3, [r7, #6]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005e52:	88bb      	ldrh	r3, [r7, #4]
 8005e54:	085b      	lsrs	r3, r3, #1
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005e62:	88fa      	ldrh	r2, [r7, #6]
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e6c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24
 8005e72:	e018      	b.n	8005ea6 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8005e74:	6a3b      	ldr	r3, [r7, #32]
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005e7c:	6a3b      	ldr	r3, [r7, #32]
 8005e7e:	3302      	adds	r3, #2
 8005e80:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	0a1b      	lsrs	r3, r3, #8
 8005e94:	b2da      	uxtb	r2, r3
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1e3      	bne.n	8005e74 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8005eac:	88bb      	ldrh	r3, [r7, #4]
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d007      	beq.n	8005ec8 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8005eb8:	6a3b      	ldr	r3, [r7, #32]
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	b2da      	uxtb	r2, r3
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	701a      	strb	r2, [r3, #0]
  }
}
 8005ec8:	bf00      	nop
 8005eca:	372c      	adds	r7, #44	; 0x2c
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	460b      	mov	r3, r1
 8005ede:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005ee0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005ee4:	f002 f92c 	bl	8008140 <USBD_static_malloc>
 8005ee8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d105      	bne.n	8005efc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005ef8:	2302      	movs	r3, #2
 8005efa:	e066      	b.n	8005fca <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	7c1b      	ldrb	r3, [r3, #16]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d119      	bne.n	8005f40 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f10:	2202      	movs	r2, #2
 8005f12:	2181      	movs	r1, #129	; 0x81
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f001 ffba 	bl	8007e8e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f24:	2202      	movs	r2, #2
 8005f26:	2101      	movs	r1, #1
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f001 ffb0 	bl	8007e8e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2210      	movs	r2, #16
 8005f3a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005f3e:	e016      	b.n	8005f6e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005f40:	2340      	movs	r3, #64	; 0x40
 8005f42:	2202      	movs	r2, #2
 8005f44:	2181      	movs	r1, #129	; 0x81
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f001 ffa1 	bl	8007e8e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005f52:	2340      	movs	r3, #64	; 0x40
 8005f54:	2202      	movs	r2, #2
 8005f56:	2101      	movs	r1, #1
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f001 ff98 	bl	8007e8e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2210      	movs	r2, #16
 8005f6a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005f6e:	2308      	movs	r3, #8
 8005f70:	2203      	movs	r2, #3
 8005f72:	2182      	movs	r1, #130	; 0x82
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f001 ff8a 	bl	8007e8e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	7c1b      	ldrb	r3, [r3, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d109      	bne.n	8005fb8 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005faa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fae:	2101      	movs	r1, #1
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f002 f85b 	bl	800806c <USBD_LL_PrepareReceive>
 8005fb6:	e007      	b.n	8005fc8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fbe:	2340      	movs	r3, #64	; 0x40
 8005fc0:	2101      	movs	r1, #1
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f002 f852 	bl	800806c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b082      	sub	sp, #8
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	460b      	mov	r3, r1
 8005fdc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005fde:	2181      	movs	r1, #129	; 0x81
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f001 ff7a 	bl	8007eda <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005fec:	2101      	movs	r1, #1
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f001 ff73 	bl	8007eda <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005ffc:	2182      	movs	r1, #130	; 0x82
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f001 ff6b 	bl	8007eda <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00e      	beq.n	800603c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800602e:	4618      	mov	r0, r3
 8006030:	f002 f894 	bl	800815c <USBD_static_free>
    pdev->pClassData = NULL;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
	...

08006048 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006058:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800605a:	2300      	movs	r3, #0
 800605c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800605e:	2300      	movs	r3, #0
 8006060:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006062:	2300      	movs	r3, #0
 8006064:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800606c:	2303      	movs	r3, #3
 800606e:	e0af      	b.n	80061d0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006078:	2b00      	cmp	r3, #0
 800607a:	d03f      	beq.n	80060fc <USBD_CDC_Setup+0xb4>
 800607c:	2b20      	cmp	r3, #32
 800607e:	f040 809f 	bne.w	80061c0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	88db      	ldrh	r3, [r3, #6]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d02e      	beq.n	80060e8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	b25b      	sxtb	r3, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	da16      	bge.n	80060c2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80060a0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	88d2      	ldrh	r2, [r2, #6]
 80060a6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	88db      	ldrh	r3, [r3, #6]
 80060ac:	2b07      	cmp	r3, #7
 80060ae:	bf28      	it	cs
 80060b0:	2307      	movcs	r3, #7
 80060b2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	89fa      	ldrh	r2, [r7, #14]
 80060b8:	4619      	mov	r1, r3
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f001 fa9f 	bl	80075fe <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80060c0:	e085      	b.n	80061ce <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	785a      	ldrb	r2, [r3, #1]
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	88db      	ldrh	r3, [r3, #6]
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80060d8:	6939      	ldr	r1, [r7, #16]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	88db      	ldrh	r3, [r3, #6]
 80060de:	461a      	mov	r2, r3
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f001 fab8 	bl	8007656 <USBD_CtlPrepareRx>
      break;
 80060e6:	e072      	b.n	80061ce <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	7850      	ldrb	r0, [r2, #1]
 80060f4:	2200      	movs	r2, #0
 80060f6:	6839      	ldr	r1, [r7, #0]
 80060f8:	4798      	blx	r3
      break;
 80060fa:	e068      	b.n	80061ce <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	785b      	ldrb	r3, [r3, #1]
 8006100:	2b0b      	cmp	r3, #11
 8006102:	d852      	bhi.n	80061aa <USBD_CDC_Setup+0x162>
 8006104:	a201      	add	r2, pc, #4	; (adr r2, 800610c <USBD_CDC_Setup+0xc4>)
 8006106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610a:	bf00      	nop
 800610c:	0800613d 	.word	0x0800613d
 8006110:	080061b9 	.word	0x080061b9
 8006114:	080061ab 	.word	0x080061ab
 8006118:	080061ab 	.word	0x080061ab
 800611c:	080061ab 	.word	0x080061ab
 8006120:	080061ab 	.word	0x080061ab
 8006124:	080061ab 	.word	0x080061ab
 8006128:	080061ab 	.word	0x080061ab
 800612c:	080061ab 	.word	0x080061ab
 8006130:	080061ab 	.word	0x080061ab
 8006134:	08006167 	.word	0x08006167
 8006138:	08006191 	.word	0x08006191
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b03      	cmp	r3, #3
 8006146:	d107      	bne.n	8006158 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006148:	f107 030a 	add.w	r3, r7, #10
 800614c:	2202      	movs	r2, #2
 800614e:	4619      	mov	r1, r3
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f001 fa54 	bl	80075fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006156:	e032      	b.n	80061be <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006158:	6839      	ldr	r1, [r7, #0]
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f001 f9de 	bl	800751c <USBD_CtlError>
            ret = USBD_FAIL;
 8006160:	2303      	movs	r3, #3
 8006162:	75fb      	strb	r3, [r7, #23]
          break;
 8006164:	e02b      	b.n	80061be <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b03      	cmp	r3, #3
 8006170:	d107      	bne.n	8006182 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006172:	f107 030d 	add.w	r3, r7, #13
 8006176:	2201      	movs	r2, #1
 8006178:	4619      	mov	r1, r3
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f001 fa3f 	bl	80075fe <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006180:	e01d      	b.n	80061be <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006182:	6839      	ldr	r1, [r7, #0]
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f001 f9c9 	bl	800751c <USBD_CtlError>
            ret = USBD_FAIL;
 800618a:	2303      	movs	r3, #3
 800618c:	75fb      	strb	r3, [r7, #23]
          break;
 800618e:	e016      	b.n	80061be <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b03      	cmp	r3, #3
 800619a:	d00f      	beq.n	80061bc <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800619c:	6839      	ldr	r1, [r7, #0]
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f001 f9bc 	bl	800751c <USBD_CtlError>
            ret = USBD_FAIL;
 80061a4:	2303      	movs	r3, #3
 80061a6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80061a8:	e008      	b.n	80061bc <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80061aa:	6839      	ldr	r1, [r7, #0]
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f001 f9b5 	bl	800751c <USBD_CtlError>
          ret = USBD_FAIL;
 80061b2:	2303      	movs	r3, #3
 80061b4:	75fb      	strb	r3, [r7, #23]
          break;
 80061b6:	e002      	b.n	80061be <USBD_CDC_Setup+0x176>
          break;
 80061b8:	bf00      	nop
 80061ba:	e008      	b.n	80061ce <USBD_CDC_Setup+0x186>
          break;
 80061bc:	bf00      	nop
      }
      break;
 80061be:	e006      	b.n	80061ce <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80061c0:	6839      	ldr	r1, [r7, #0]
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f001 f9aa 	bl	800751c <USBD_CtlError>
      ret = USBD_FAIL;
 80061c8:	2303      	movs	r3, #3
 80061ca:	75fb      	strb	r3, [r7, #23]
      break;
 80061cc:	bf00      	nop
  }

  return (uint8_t)ret;
 80061ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	460b      	mov	r3, r1
 80061e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80061ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e04f      	b.n	800629a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006200:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006202:	78fa      	ldrb	r2, [r7, #3]
 8006204:	6879      	ldr	r1, [r7, #4]
 8006206:	4613      	mov	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	4413      	add	r3, r2
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	440b      	add	r3, r1
 8006210:	3318      	adds	r3, #24
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d029      	beq.n	800626c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006218:	78fa      	ldrb	r2, [r7, #3]
 800621a:	6879      	ldr	r1, [r7, #4]
 800621c:	4613      	mov	r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	4413      	add	r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	440b      	add	r3, r1
 8006226:	3318      	adds	r3, #24
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	78f9      	ldrb	r1, [r7, #3]
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	460b      	mov	r3, r1
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	440b      	add	r3, r1
 8006234:	00db      	lsls	r3, r3, #3
 8006236:	4403      	add	r3, r0
 8006238:	3320      	adds	r3, #32
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006240:	fb01 f303 	mul.w	r3, r1, r3
 8006244:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006246:	2b00      	cmp	r3, #0
 8006248:	d110      	bne.n	800626c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800624a:	78fa      	ldrb	r2, [r7, #3]
 800624c:	6879      	ldr	r1, [r7, #4]
 800624e:	4613      	mov	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	440b      	add	r3, r1
 8006258:	3318      	adds	r3, #24
 800625a:	2200      	movs	r2, #0
 800625c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800625e:	78f9      	ldrb	r1, [r7, #3]
 8006260:	2300      	movs	r3, #0
 8006262:	2200      	movs	r2, #0
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f001 fee0 	bl	800802a <USBD_LL_Transmit>
 800626a:	e015      	b.n	8006298 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2200      	movs	r2, #0
 8006270:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00b      	beq.n	8006298 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006294:	78fa      	ldrb	r2, [r7, #3]
 8006296:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b084      	sub	sp, #16
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
 80062aa:	460b      	mov	r3, r1
 80062ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062b4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e015      	b.n	80062f0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80062c4:	78fb      	ldrb	r3, [r7, #3]
 80062c6:	4619      	mov	r1, r3
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f001 fef0 	bl	80080ae <USBD_LL_GetRxDataSize>
 80062ce:	4602      	mov	r2, r0
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80062e4:	68fa      	ldr	r2, [r7, #12]
 80062e6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80062ea:	4611      	mov	r1, r2
 80062ec:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006306:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800630e:	2303      	movs	r3, #3
 8006310:	e01b      	b.n	800634a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d015      	beq.n	8006348 <USBD_CDC_EP0_RxReady+0x50>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006322:	2bff      	cmp	r3, #255	; 0xff
 8006324:	d010      	beq.n	8006348 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006334:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800633c:	b292      	uxth	r2, r2
 800633e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	22ff      	movs	r2, #255	; 0xff
 8006344:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
	...

08006354 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2243      	movs	r2, #67	; 0x43
 8006360:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006362:	4b03      	ldr	r3, [pc, #12]	; (8006370 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006364:	4618      	mov	r0, r3
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	20000094 	.word	0x20000094

08006374 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2243      	movs	r2, #67	; 0x43
 8006380:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006382:	4b03      	ldr	r3, [pc, #12]	; (8006390 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006384:	4618      	mov	r0, r3
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	20000050 	.word	0x20000050

08006394 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2243      	movs	r2, #67	; 0x43
 80063a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80063a2:	4b03      	ldr	r3, [pc, #12]	; (80063b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	200000d8 	.word	0x200000d8

080063b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	220a      	movs	r2, #10
 80063c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80063c2:	4b03      	ldr	r3, [pc, #12]	; (80063d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	370c      	adds	r7, #12
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	2000000c 	.word	0x2000000c

080063d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d101      	bne.n	80063e8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e004      	b.n	80063f2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	683a      	ldr	r2, [r7, #0]
 80063ec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80063fe:	b480      	push	{r7}
 8006400:	b087      	sub	sp, #28
 8006402:	af00      	add	r7, sp, #0
 8006404:	60f8      	str	r0, [r7, #12]
 8006406:	60b9      	str	r1, [r7, #8]
 8006408:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006410:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d101      	bne.n	800641c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006418:	2303      	movs	r3, #3
 800641a:	e008      	b.n	800642e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	371c      	adds	r7, #28
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800643a:	b480      	push	{r7}
 800643c:	b085      	sub	sp, #20
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800644a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006452:	2303      	movs	r3, #3
 8006454:	e004      	b.n	8006460 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	683a      	ldr	r2, [r7, #0]
 800645a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800647a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006486:	2303      	movs	r3, #3
 8006488:	e016      	b.n	80064b8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	7c1b      	ldrb	r3, [r3, #16]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d109      	bne.n	80064a6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800649c:	2101      	movs	r1, #1
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f001 fde4 	bl	800806c <USBD_LL_PrepareReceive>
 80064a4:	e007      	b.n	80064b6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064ac:	2340      	movs	r3, #64	; 0x40
 80064ae:	2101      	movs	r1, #1
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f001 fddb 	bl	800806c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80064b6:	2300      	movs	r3, #0
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	4613      	mov	r3, r2
 80064cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e01f      	b.n	8006518 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d003      	beq.n	80064fe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	68ba      	ldr	r2, [r7, #8]
 80064fa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	79fa      	ldrb	r2, [r7, #7]
 800650a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f001 fc43 	bl	8007d98 <USBD_LL_Init>
 8006512:	4603      	mov	r3, r0
 8006514:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006516:	7dfb      	ldrb	r3, [r7, #23]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800652a:	2300      	movs	r3, #0
 800652c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006534:	2303      	movs	r3, #3
 8006536:	e016      	b.n	8006566 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00b      	beq.n	8006564 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006554:	f107 020e 	add.w	r2, r7, #14
 8006558:	4610      	mov	r0, r2
 800655a:	4798      	blx	r3
 800655c:	4602      	mov	r2, r0
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b082      	sub	sp, #8
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f001 fc6e 	bl	8007e58 <USBD_LL_Start>
 800657c:	4603      	mov	r3, r0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006586:	b480      	push	{r7}
 8006588:	b083      	sub	sp, #12
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	460b      	mov	r3, r1
 80065a6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80065a8:	2303      	movs	r3, #3
 80065aa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d009      	beq.n	80065ca <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	78fa      	ldrb	r2, [r7, #3]
 80065c0:	4611      	mov	r1, r2
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	4798      	blx	r3
 80065c6:	4603      	mov	r3, r0
 80065c8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80065ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	460b      	mov	r3, r1
 80065de:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d007      	beq.n	80065fa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	78fa      	ldrb	r2, [r7, #3]
 80065f4:	4611      	mov	r1, r2
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	4798      	blx	r3
  }

  return USBD_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006614:	6839      	ldr	r1, [r7, #0]
 8006616:	4618      	mov	r0, r3
 8006618:	f000 ff46 	bl	80074a8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800662a:	461a      	mov	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006638:	f003 031f 	and.w	r3, r3, #31
 800663c:	2b02      	cmp	r3, #2
 800663e:	d01a      	beq.n	8006676 <USBD_LL_SetupStage+0x72>
 8006640:	2b02      	cmp	r3, #2
 8006642:	d822      	bhi.n	800668a <USBD_LL_SetupStage+0x86>
 8006644:	2b00      	cmp	r3, #0
 8006646:	d002      	beq.n	800664e <USBD_LL_SetupStage+0x4a>
 8006648:	2b01      	cmp	r3, #1
 800664a:	d00a      	beq.n	8006662 <USBD_LL_SetupStage+0x5e>
 800664c:	e01d      	b.n	800668a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006654:	4619      	mov	r1, r3
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f9ee 	bl	8006a38 <USBD_StdDevReq>
 800665c:	4603      	mov	r3, r0
 800665e:	73fb      	strb	r3, [r7, #15]
      break;
 8006660:	e020      	b.n	80066a4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006668:	4619      	mov	r1, r3
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 fa52 	bl	8006b14 <USBD_StdItfReq>
 8006670:	4603      	mov	r3, r0
 8006672:	73fb      	strb	r3, [r7, #15]
      break;
 8006674:	e016      	b.n	80066a4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800667c:	4619      	mov	r1, r3
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fa91 	bl	8006ba6 <USBD_StdEPReq>
 8006684:	4603      	mov	r3, r0
 8006686:	73fb      	strb	r3, [r7, #15]
      break;
 8006688:	e00c      	b.n	80066a4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006690:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006694:	b2db      	uxtb	r3, r3
 8006696:	4619      	mov	r1, r3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f001 fc3d 	bl	8007f18 <USBD_LL_StallEP>
 800669e:	4603      	mov	r3, r0
 80066a0:	73fb      	strb	r3, [r7, #15]
      break;
 80066a2:	bf00      	nop
  }

  return ret;
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b086      	sub	sp, #24
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	60f8      	str	r0, [r7, #12]
 80066b6:	460b      	mov	r3, r1
 80066b8:	607a      	str	r2, [r7, #4]
 80066ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80066bc:	7afb      	ldrb	r3, [r7, #11]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d138      	bne.n	8006734 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80066c8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066d0:	2b03      	cmp	r3, #3
 80066d2:	d14a      	bne.n	800676a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	689a      	ldr	r2, [r3, #8]
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d913      	bls.n	8006708 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	689a      	ldr	r2, [r3, #8]
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	1ad2      	subs	r2, r2, r3
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	68da      	ldr	r2, [r3, #12]
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	4293      	cmp	r3, r2
 80066f8:	bf28      	it	cs
 80066fa:	4613      	movcs	r3, r2
 80066fc:	461a      	mov	r2, r3
 80066fe:	6879      	ldr	r1, [r7, #4]
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f000 ffc5 	bl	8007690 <USBD_CtlContinueRx>
 8006706:	e030      	b.n	800676a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b03      	cmp	r3, #3
 8006712:	d10b      	bne.n	800672c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d005      	beq.n	800672c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f000 ffc0 	bl	80076b2 <USBD_CtlSendStatus>
 8006732:	e01a      	b.n	800676a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b03      	cmp	r3, #3
 800673e:	d114      	bne.n	800676a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00e      	beq.n	800676a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	7afa      	ldrb	r2, [r7, #11]
 8006756:	4611      	mov	r1, r2
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	4798      	blx	r3
 800675c:	4603      	mov	r3, r0
 800675e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006760:	7dfb      	ldrb	r3, [r7, #23]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006766:	7dfb      	ldrb	r3, [r7, #23]
 8006768:	e000      	b.n	800676c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3718      	adds	r7, #24
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b086      	sub	sp, #24
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	460b      	mov	r3, r1
 800677e:	607a      	str	r2, [r7, #4]
 8006780:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006782:	7afb      	ldrb	r3, [r7, #11]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d16b      	bne.n	8006860 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	3314      	adds	r3, #20
 800678c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006794:	2b02      	cmp	r3, #2
 8006796:	d156      	bne.n	8006846 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	689a      	ldr	r2, [r3, #8]
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d914      	bls.n	80067ce <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	689a      	ldr	r2, [r3, #8]
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	1ad2      	subs	r2, r2, r3
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	461a      	mov	r2, r3
 80067b8:	6879      	ldr	r1, [r7, #4]
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f000 ff3a 	bl	8007634 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067c0:	2300      	movs	r3, #0
 80067c2:	2200      	movs	r2, #0
 80067c4:	2100      	movs	r1, #0
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f001 fc50 	bl	800806c <USBD_LL_PrepareReceive>
 80067cc:	e03b      	b.n	8006846 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	68da      	ldr	r2, [r3, #12]
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d11c      	bne.n	8006814 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	685a      	ldr	r2, [r3, #4]
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d316      	bcc.n	8006814 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d20f      	bcs.n	8006814 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80067f4:	2200      	movs	r2, #0
 80067f6:	2100      	movs	r1, #0
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f000 ff1b 	bl	8007634 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006806:	2300      	movs	r3, #0
 8006808:	2200      	movs	r2, #0
 800680a:	2100      	movs	r1, #0
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f001 fc2d 	bl	800806c <USBD_LL_PrepareReceive>
 8006812:	e018      	b.n	8006846 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b03      	cmp	r3, #3
 800681e:	d10b      	bne.n	8006838 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d005      	beq.n	8006838 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006838:	2180      	movs	r1, #128	; 0x80
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f001 fb6c 	bl	8007f18 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f000 ff49 	bl	80076d8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800684c:	2b01      	cmp	r3, #1
 800684e:	d122      	bne.n	8006896 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f7ff fe98 	bl	8006586 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800685e:	e01a      	b.n	8006896 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b03      	cmp	r3, #3
 800686a:	d114      	bne.n	8006896 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00e      	beq.n	8006896 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800687e:	695b      	ldr	r3, [r3, #20]
 8006880:	7afa      	ldrb	r2, [r7, #11]
 8006882:	4611      	mov	r1, r2
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	4798      	blx	r3
 8006888:	4603      	mov	r3, r0
 800688a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800688c:	7dfb      	ldrb	r3, [r7, #23]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006892:	7dfb      	ldrb	r3, [r7, #23]
 8006894:	e000      	b.n	8006898 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3718      	adds	r7, #24
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d101      	bne.n	80068d4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e02f      	b.n	8006934 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00f      	beq.n	80068fe <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d009      	beq.n	80068fe <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	6852      	ldr	r2, [r2, #4]
 80068f6:	b2d2      	uxtb	r2, r2
 80068f8:	4611      	mov	r1, r2
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068fe:	2340      	movs	r3, #64	; 0x40
 8006900:	2200      	movs	r2, #0
 8006902:	2100      	movs	r1, #0
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f001 fac2 	bl	8007e8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2240      	movs	r2, #64	; 0x40
 8006916:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800691a:	2340      	movs	r3, #64	; 0x40
 800691c:	2200      	movs	r2, #0
 800691e:	2180      	movs	r1, #128	; 0x80
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f001 fab4 	bl	8007e8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2201      	movs	r2, #1
 800692a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2240      	movs	r2, #64	; 0x40
 8006930:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3708      	adds	r7, #8
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	460b      	mov	r3, r1
 8006946:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	78fa      	ldrb	r2, [r7, #3]
 800694c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800696a:	b2da      	uxtb	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2204      	movs	r2, #4
 8006976:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b04      	cmp	r3, #4
 800699a:	d106      	bne.n	80069aa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	370c      	adds	r7, #12
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d101      	bne.n	80069ce <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e012      	b.n	80069f4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b03      	cmp	r3, #3
 80069d8:	d10b      	bne.n	80069f2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d005      	beq.n	80069f2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ec:	69db      	ldr	r3, [r3, #28]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b087      	sub	sp, #28
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	3301      	adds	r3, #1
 8006a12:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006a1a:	8a3b      	ldrh	r3, [r7, #16]
 8006a1c:	021b      	lsls	r3, r3, #8
 8006a1e:	b21a      	sxth	r2, r3
 8006a20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	b21b      	sxth	r3, r3
 8006a28:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006a2a:	89fb      	ldrh	r3, [r7, #14]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	371c      	adds	r7, #28
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a42:	2300      	movs	r3, #0
 8006a44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a4e:	2b40      	cmp	r3, #64	; 0x40
 8006a50:	d005      	beq.n	8006a5e <USBD_StdDevReq+0x26>
 8006a52:	2b40      	cmp	r3, #64	; 0x40
 8006a54:	d853      	bhi.n	8006afe <USBD_StdDevReq+0xc6>
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00b      	beq.n	8006a72 <USBD_StdDevReq+0x3a>
 8006a5a:	2b20      	cmp	r3, #32
 8006a5c:	d14f      	bne.n	8006afe <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	6839      	ldr	r1, [r7, #0]
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	4798      	blx	r3
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a70:	e04a      	b.n	8006b08 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	785b      	ldrb	r3, [r3, #1]
 8006a76:	2b09      	cmp	r3, #9
 8006a78:	d83b      	bhi.n	8006af2 <USBD_StdDevReq+0xba>
 8006a7a:	a201      	add	r2, pc, #4	; (adr r2, 8006a80 <USBD_StdDevReq+0x48>)
 8006a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a80:	08006ad5 	.word	0x08006ad5
 8006a84:	08006ae9 	.word	0x08006ae9
 8006a88:	08006af3 	.word	0x08006af3
 8006a8c:	08006adf 	.word	0x08006adf
 8006a90:	08006af3 	.word	0x08006af3
 8006a94:	08006ab3 	.word	0x08006ab3
 8006a98:	08006aa9 	.word	0x08006aa9
 8006a9c:	08006af3 	.word	0x08006af3
 8006aa0:	08006acb 	.word	0x08006acb
 8006aa4:	08006abd 	.word	0x08006abd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f9de 	bl	8006e6c <USBD_GetDescriptor>
          break;
 8006ab0:	e024      	b.n	8006afc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006ab2:	6839      	ldr	r1, [r7, #0]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 fb6d 	bl	8007194 <USBD_SetAddress>
          break;
 8006aba:	e01f      	b.n	8006afc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006abc:	6839      	ldr	r1, [r7, #0]
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fbac 	bl	800721c <USBD_SetConfig>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	73fb      	strb	r3, [r7, #15]
          break;
 8006ac8:	e018      	b.n	8006afc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fc4b 	bl	8007368 <USBD_GetConfig>
          break;
 8006ad2:	e013      	b.n	8006afc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006ad4:	6839      	ldr	r1, [r7, #0]
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 fc7c 	bl	80073d4 <USBD_GetStatus>
          break;
 8006adc:	e00e      	b.n	8006afc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006ade:	6839      	ldr	r1, [r7, #0]
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 fcab 	bl	800743c <USBD_SetFeature>
          break;
 8006ae6:	e009      	b.n	8006afc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006ae8:	6839      	ldr	r1, [r7, #0]
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 fcba 	bl	8007464 <USBD_ClrFeature>
          break;
 8006af0:	e004      	b.n	8006afc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006af2:	6839      	ldr	r1, [r7, #0]
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 fd11 	bl	800751c <USBD_CtlError>
          break;
 8006afa:	bf00      	nop
      }
      break;
 8006afc:	e004      	b.n	8006b08 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006afe:	6839      	ldr	r1, [r7, #0]
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fd0b 	bl	800751c <USBD_CtlError>
      break;
 8006b06:	bf00      	nop
  }

  return ret;
 8006b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop

08006b14 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b2a:	2b40      	cmp	r3, #64	; 0x40
 8006b2c:	d005      	beq.n	8006b3a <USBD_StdItfReq+0x26>
 8006b2e:	2b40      	cmp	r3, #64	; 0x40
 8006b30:	d82f      	bhi.n	8006b92 <USBD_StdItfReq+0x7e>
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <USBD_StdItfReq+0x26>
 8006b36:	2b20      	cmp	r3, #32
 8006b38:	d12b      	bne.n	8006b92 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	3b01      	subs	r3, #1
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d81d      	bhi.n	8006b84 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	889b      	ldrh	r3, [r3, #4]
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d813      	bhi.n	8006b7a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	6839      	ldr	r1, [r7, #0]
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	4798      	blx	r3
 8006b60:	4603      	mov	r3, r0
 8006b62:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	88db      	ldrh	r3, [r3, #6]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d110      	bne.n	8006b8e <USBD_StdItfReq+0x7a>
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10d      	bne.n	8006b8e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fd9d 	bl	80076b2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006b78:	e009      	b.n	8006b8e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006b7a:	6839      	ldr	r1, [r7, #0]
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fccd 	bl	800751c <USBD_CtlError>
          break;
 8006b82:	e004      	b.n	8006b8e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006b84:	6839      	ldr	r1, [r7, #0]
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fcc8 	bl	800751c <USBD_CtlError>
          break;
 8006b8c:	e000      	b.n	8006b90 <USBD_StdItfReq+0x7c>
          break;
 8006b8e:	bf00      	nop
      }
      break;
 8006b90:	e004      	b.n	8006b9c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006b92:	6839      	ldr	r1, [r7, #0]
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fcc1 	bl	800751c <USBD_CtlError>
      break;
 8006b9a:	bf00      	nop
  }

  return ret;
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b084      	sub	sp, #16
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
 8006bae:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	889b      	ldrh	r3, [r3, #4]
 8006bb8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bc2:	2b40      	cmp	r3, #64	; 0x40
 8006bc4:	d007      	beq.n	8006bd6 <USBD_StdEPReq+0x30>
 8006bc6:	2b40      	cmp	r3, #64	; 0x40
 8006bc8:	f200 8145 	bhi.w	8006e56 <USBD_StdEPReq+0x2b0>
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00c      	beq.n	8006bea <USBD_StdEPReq+0x44>
 8006bd0:	2b20      	cmp	r3, #32
 8006bd2:	f040 8140 	bne.w	8006e56 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	6839      	ldr	r1, [r7, #0]
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	4798      	blx	r3
 8006be4:	4603      	mov	r3, r0
 8006be6:	73fb      	strb	r3, [r7, #15]
      break;
 8006be8:	e13a      	b.n	8006e60 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	785b      	ldrb	r3, [r3, #1]
 8006bee:	2b03      	cmp	r3, #3
 8006bf0:	d007      	beq.n	8006c02 <USBD_StdEPReq+0x5c>
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	f300 8129 	bgt.w	8006e4a <USBD_StdEPReq+0x2a4>
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d07f      	beq.n	8006cfc <USBD_StdEPReq+0x156>
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d03c      	beq.n	8006c7a <USBD_StdEPReq+0xd4>
 8006c00:	e123      	b.n	8006e4a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d002      	beq.n	8006c14 <USBD_StdEPReq+0x6e>
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	d016      	beq.n	8006c40 <USBD_StdEPReq+0x9a>
 8006c12:	e02c      	b.n	8006c6e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c14:	7bbb      	ldrb	r3, [r7, #14]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00d      	beq.n	8006c36 <USBD_StdEPReq+0x90>
 8006c1a:	7bbb      	ldrb	r3, [r7, #14]
 8006c1c:	2b80      	cmp	r3, #128	; 0x80
 8006c1e:	d00a      	beq.n	8006c36 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c20:	7bbb      	ldrb	r3, [r7, #14]
 8006c22:	4619      	mov	r1, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f001 f977 	bl	8007f18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c2a:	2180      	movs	r1, #128	; 0x80
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f001 f973 	bl	8007f18 <USBD_LL_StallEP>
 8006c32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c34:	e020      	b.n	8006c78 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006c36:	6839      	ldr	r1, [r7, #0]
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fc6f 	bl	800751c <USBD_CtlError>
              break;
 8006c3e:	e01b      	b.n	8006c78 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	885b      	ldrh	r3, [r3, #2]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10e      	bne.n	8006c66 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006c48:	7bbb      	ldrb	r3, [r7, #14]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00b      	beq.n	8006c66 <USBD_StdEPReq+0xc0>
 8006c4e:	7bbb      	ldrb	r3, [r7, #14]
 8006c50:	2b80      	cmp	r3, #128	; 0x80
 8006c52:	d008      	beq.n	8006c66 <USBD_StdEPReq+0xc0>
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	88db      	ldrh	r3, [r3, #6]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d104      	bne.n	8006c66 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c5c:	7bbb      	ldrb	r3, [r7, #14]
 8006c5e:	4619      	mov	r1, r3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f001 f959 	bl	8007f18 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 fd23 	bl	80076b2 <USBD_CtlSendStatus>

              break;
 8006c6c:	e004      	b.n	8006c78 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006c6e:	6839      	ldr	r1, [r7, #0]
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 fc53 	bl	800751c <USBD_CtlError>
              break;
 8006c76:	bf00      	nop
          }
          break;
 8006c78:	e0ec      	b.n	8006e54 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d002      	beq.n	8006c8c <USBD_StdEPReq+0xe6>
 8006c86:	2b03      	cmp	r3, #3
 8006c88:	d016      	beq.n	8006cb8 <USBD_StdEPReq+0x112>
 8006c8a:	e030      	b.n	8006cee <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c8c:	7bbb      	ldrb	r3, [r7, #14]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00d      	beq.n	8006cae <USBD_StdEPReq+0x108>
 8006c92:	7bbb      	ldrb	r3, [r7, #14]
 8006c94:	2b80      	cmp	r3, #128	; 0x80
 8006c96:	d00a      	beq.n	8006cae <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c98:	7bbb      	ldrb	r3, [r7, #14]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f001 f93b 	bl	8007f18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ca2:	2180      	movs	r1, #128	; 0x80
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f001 f937 	bl	8007f18 <USBD_LL_StallEP>
 8006caa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006cac:	e025      	b.n	8006cfa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006cae:	6839      	ldr	r1, [r7, #0]
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 fc33 	bl	800751c <USBD_CtlError>
              break;
 8006cb6:	e020      	b.n	8006cfa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	885b      	ldrh	r3, [r3, #2]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d11b      	bne.n	8006cf8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006cc0:	7bbb      	ldrb	r3, [r7, #14]
 8006cc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d004      	beq.n	8006cd4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006cca:	7bbb      	ldrb	r3, [r7, #14]
 8006ccc:	4619      	mov	r1, r3
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f001 f941 	bl	8007f56 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fcec 	bl	80076b2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	6839      	ldr	r1, [r7, #0]
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	4798      	blx	r3
 8006ce8:	4603      	mov	r3, r0
 8006cea:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006cec:	e004      	b.n	8006cf8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006cee:	6839      	ldr	r1, [r7, #0]
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fc13 	bl	800751c <USBD_CtlError>
              break;
 8006cf6:	e000      	b.n	8006cfa <USBD_StdEPReq+0x154>
              break;
 8006cf8:	bf00      	nop
          }
          break;
 8006cfa:	e0ab      	b.n	8006e54 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d002      	beq.n	8006d0e <USBD_StdEPReq+0x168>
 8006d08:	2b03      	cmp	r3, #3
 8006d0a:	d032      	beq.n	8006d72 <USBD_StdEPReq+0x1cc>
 8006d0c:	e097      	b.n	8006e3e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d0e:	7bbb      	ldrb	r3, [r7, #14]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d007      	beq.n	8006d24 <USBD_StdEPReq+0x17e>
 8006d14:	7bbb      	ldrb	r3, [r7, #14]
 8006d16:	2b80      	cmp	r3, #128	; 0x80
 8006d18:	d004      	beq.n	8006d24 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006d1a:	6839      	ldr	r1, [r7, #0]
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 fbfd 	bl	800751c <USBD_CtlError>
                break;
 8006d22:	e091      	b.n	8006e48 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	da0b      	bge.n	8006d44 <USBD_StdEPReq+0x19e>
 8006d2c:	7bbb      	ldrb	r3, [r7, #14]
 8006d2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d32:	4613      	mov	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	3310      	adds	r3, #16
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	4413      	add	r3, r2
 8006d40:	3304      	adds	r3, #4
 8006d42:	e00b      	b.n	8006d5c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d44:	7bbb      	ldrb	r3, [r7, #14]
 8006d46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	4413      	add	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	4413      	add	r3, r2
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	2200      	movs	r2, #0
 8006d62:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	2202      	movs	r2, #2
 8006d68:	4619      	mov	r1, r3
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 fc47 	bl	80075fe <USBD_CtlSendData>
              break;
 8006d70:	e06a      	b.n	8006e48 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006d72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	da11      	bge.n	8006d9e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006d7a:	7bbb      	ldrb	r3, [r7, #14]
 8006d7c:	f003 020f 	and.w	r2, r3, #15
 8006d80:	6879      	ldr	r1, [r7, #4]
 8006d82:	4613      	mov	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	440b      	add	r3, r1
 8006d8c:	3324      	adds	r3, #36	; 0x24
 8006d8e:	881b      	ldrh	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d117      	bne.n	8006dc4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 fbc0 	bl	800751c <USBD_CtlError>
                  break;
 8006d9c:	e054      	b.n	8006e48 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d9e:	7bbb      	ldrb	r3, [r7, #14]
 8006da0:	f003 020f 	and.w	r2, r3, #15
 8006da4:	6879      	ldr	r1, [r7, #4]
 8006da6:	4613      	mov	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	440b      	add	r3, r1
 8006db0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006db4:	881b      	ldrh	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d104      	bne.n	8006dc4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006dba:	6839      	ldr	r1, [r7, #0]
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 fbad 	bl	800751c <USBD_CtlError>
                  break;
 8006dc2:	e041      	b.n	8006e48 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	da0b      	bge.n	8006de4 <USBD_StdEPReq+0x23e>
 8006dcc:	7bbb      	ldrb	r3, [r7, #14]
 8006dce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	3310      	adds	r3, #16
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	4413      	add	r3, r2
 8006de0:	3304      	adds	r3, #4
 8006de2:	e00b      	b.n	8006dfc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006de4:	7bbb      	ldrb	r3, [r7, #14]
 8006de6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dea:	4613      	mov	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	4413      	add	r3, r2
 8006dfa:	3304      	adds	r3, #4
 8006dfc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006dfe:	7bbb      	ldrb	r3, [r7, #14]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d002      	beq.n	8006e0a <USBD_StdEPReq+0x264>
 8006e04:	7bbb      	ldrb	r3, [r7, #14]
 8006e06:	2b80      	cmp	r3, #128	; 0x80
 8006e08:	d103      	bne.n	8006e12 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	601a      	str	r2, [r3, #0]
 8006e10:	e00e      	b.n	8006e30 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006e12:	7bbb      	ldrb	r3, [r7, #14]
 8006e14:	4619      	mov	r1, r3
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f001 f8bc 	bl	8007f94 <USBD_LL_IsStallEP>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d003      	beq.n	8006e2a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	2201      	movs	r2, #1
 8006e26:	601a      	str	r2, [r3, #0]
 8006e28:	e002      	b.n	8006e30 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	2202      	movs	r2, #2
 8006e34:	4619      	mov	r1, r3
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fbe1 	bl	80075fe <USBD_CtlSendData>
              break;
 8006e3c:	e004      	b.n	8006e48 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006e3e:	6839      	ldr	r1, [r7, #0]
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fb6b 	bl	800751c <USBD_CtlError>
              break;
 8006e46:	bf00      	nop
          }
          break;
 8006e48:	e004      	b.n	8006e54 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006e4a:	6839      	ldr	r1, [r7, #0]
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 fb65 	bl	800751c <USBD_CtlError>
          break;
 8006e52:	bf00      	nop
      }
      break;
 8006e54:	e004      	b.n	8006e60 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006e56:	6839      	ldr	r1, [r7, #0]
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fb5f 	bl	800751c <USBD_CtlError>
      break;
 8006e5e:	bf00      	nop
  }

  return ret;
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3710      	adds	r7, #16
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
	...

08006e6c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e76:	2300      	movs	r3, #0
 8006e78:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	885b      	ldrh	r3, [r3, #2]
 8006e86:	0a1b      	lsrs	r3, r3, #8
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	2b0e      	cmp	r3, #14
 8006e8e:	f200 8152 	bhi.w	8007136 <USBD_GetDescriptor+0x2ca>
 8006e92:	a201      	add	r2, pc, #4	; (adr r2, 8006e98 <USBD_GetDescriptor+0x2c>)
 8006e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e98:	08006f09 	.word	0x08006f09
 8006e9c:	08006f21 	.word	0x08006f21
 8006ea0:	08006f61 	.word	0x08006f61
 8006ea4:	08007137 	.word	0x08007137
 8006ea8:	08007137 	.word	0x08007137
 8006eac:	080070d7 	.word	0x080070d7
 8006eb0:	08007103 	.word	0x08007103
 8006eb4:	08007137 	.word	0x08007137
 8006eb8:	08007137 	.word	0x08007137
 8006ebc:	08007137 	.word	0x08007137
 8006ec0:	08007137 	.word	0x08007137
 8006ec4:	08007137 	.word	0x08007137
 8006ec8:	08007137 	.word	0x08007137
 8006ecc:	08007137 	.word	0x08007137
 8006ed0:	08006ed5 	.word	0x08006ed5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eda:	69db      	ldr	r3, [r3, #28]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00b      	beq.n	8006ef8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ee6:	69db      	ldr	r3, [r3, #28]
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	7c12      	ldrb	r2, [r2, #16]
 8006eec:	f107 0108 	add.w	r1, r7, #8
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	4798      	blx	r3
 8006ef4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ef6:	e126      	b.n	8007146 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006ef8:	6839      	ldr	r1, [r7, #0]
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fb0e 	bl	800751c <USBD_CtlError>
        err++;
 8006f00:	7afb      	ldrb	r3, [r7, #11]
 8006f02:	3301      	adds	r3, #1
 8006f04:	72fb      	strb	r3, [r7, #11]
      break;
 8006f06:	e11e      	b.n	8007146 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	7c12      	ldrb	r2, [r2, #16]
 8006f14:	f107 0108 	add.w	r1, r7, #8
 8006f18:	4610      	mov	r0, r2
 8006f1a:	4798      	blx	r3
 8006f1c:	60f8      	str	r0, [r7, #12]
      break;
 8006f1e:	e112      	b.n	8007146 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	7c1b      	ldrb	r3, [r3, #16]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10d      	bne.n	8006f44 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f30:	f107 0208 	add.w	r2, r7, #8
 8006f34:	4610      	mov	r0, r2
 8006f36:	4798      	blx	r3
 8006f38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	2202      	movs	r2, #2
 8006f40:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006f42:	e100      	b.n	8007146 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f4c:	f107 0208 	add.w	r2, r7, #8
 8006f50:	4610      	mov	r0, r2
 8006f52:	4798      	blx	r3
 8006f54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	2202      	movs	r2, #2
 8006f5c:	701a      	strb	r2, [r3, #0]
      break;
 8006f5e:	e0f2      	b.n	8007146 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	885b      	ldrh	r3, [r3, #2]
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b05      	cmp	r3, #5
 8006f68:	f200 80ac 	bhi.w	80070c4 <USBD_GetDescriptor+0x258>
 8006f6c:	a201      	add	r2, pc, #4	; (adr r2, 8006f74 <USBD_GetDescriptor+0x108>)
 8006f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f72:	bf00      	nop
 8006f74:	08006f8d 	.word	0x08006f8d
 8006f78:	08006fc1 	.word	0x08006fc1
 8006f7c:	08006ff5 	.word	0x08006ff5
 8006f80:	08007029 	.word	0x08007029
 8006f84:	0800705d 	.word	0x0800705d
 8006f88:	08007091 	.word	0x08007091
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00b      	beq.n	8006fb0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	7c12      	ldrb	r2, [r2, #16]
 8006fa4:	f107 0108 	add.w	r1, r7, #8
 8006fa8:	4610      	mov	r0, r2
 8006faa:	4798      	blx	r3
 8006fac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fae:	e091      	b.n	80070d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 fab2 	bl	800751c <USBD_CtlError>
            err++;
 8006fb8:	7afb      	ldrb	r3, [r7, #11]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	72fb      	strb	r3, [r7, #11]
          break;
 8006fbe:	e089      	b.n	80070d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00b      	beq.n	8006fe4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	7c12      	ldrb	r2, [r2, #16]
 8006fd8:	f107 0108 	add.w	r1, r7, #8
 8006fdc:	4610      	mov	r0, r2
 8006fde:	4798      	blx	r3
 8006fe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fe2:	e077      	b.n	80070d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006fe4:	6839      	ldr	r1, [r7, #0]
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fa98 	bl	800751c <USBD_CtlError>
            err++;
 8006fec:	7afb      	ldrb	r3, [r7, #11]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ff2:	e06f      	b.n	80070d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00b      	beq.n	8007018 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	7c12      	ldrb	r2, [r2, #16]
 800700c:	f107 0108 	add.w	r1, r7, #8
 8007010:	4610      	mov	r0, r2
 8007012:	4798      	blx	r3
 8007014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007016:	e05d      	b.n	80070d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007018:	6839      	ldr	r1, [r7, #0]
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fa7e 	bl	800751c <USBD_CtlError>
            err++;
 8007020:	7afb      	ldrb	r3, [r7, #11]
 8007022:	3301      	adds	r3, #1
 8007024:	72fb      	strb	r3, [r7, #11]
          break;
 8007026:	e055      	b.n	80070d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00b      	beq.n	800704c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	7c12      	ldrb	r2, [r2, #16]
 8007040:	f107 0108 	add.w	r1, r7, #8
 8007044:	4610      	mov	r0, r2
 8007046:	4798      	blx	r3
 8007048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800704a:	e043      	b.n	80070d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fa64 	bl	800751c <USBD_CtlError>
            err++;
 8007054:	7afb      	ldrb	r3, [r7, #11]
 8007056:	3301      	adds	r3, #1
 8007058:	72fb      	strb	r3, [r7, #11]
          break;
 800705a:	e03b      	b.n	80070d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007062:	695b      	ldr	r3, [r3, #20]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00b      	beq.n	8007080 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	7c12      	ldrb	r2, [r2, #16]
 8007074:	f107 0108 	add.w	r1, r7, #8
 8007078:	4610      	mov	r0, r2
 800707a:	4798      	blx	r3
 800707c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800707e:	e029      	b.n	80070d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fa4a 	bl	800751c <USBD_CtlError>
            err++;
 8007088:	7afb      	ldrb	r3, [r7, #11]
 800708a:	3301      	adds	r3, #1
 800708c:	72fb      	strb	r3, [r7, #11]
          break;
 800708e:	e021      	b.n	80070d4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00b      	beq.n	80070b4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	7c12      	ldrb	r2, [r2, #16]
 80070a8:	f107 0108 	add.w	r1, r7, #8
 80070ac:	4610      	mov	r0, r2
 80070ae:	4798      	blx	r3
 80070b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070b2:	e00f      	b.n	80070d4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80070b4:	6839      	ldr	r1, [r7, #0]
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fa30 	bl	800751c <USBD_CtlError>
            err++;
 80070bc:	7afb      	ldrb	r3, [r7, #11]
 80070be:	3301      	adds	r3, #1
 80070c0:	72fb      	strb	r3, [r7, #11]
          break;
 80070c2:	e007      	b.n	80070d4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80070c4:	6839      	ldr	r1, [r7, #0]
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fa28 	bl	800751c <USBD_CtlError>
          err++;
 80070cc:	7afb      	ldrb	r3, [r7, #11]
 80070ce:	3301      	adds	r3, #1
 80070d0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80070d2:	bf00      	nop
      }
      break;
 80070d4:	e037      	b.n	8007146 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	7c1b      	ldrb	r3, [r3, #16]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d109      	bne.n	80070f2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e6:	f107 0208 	add.w	r2, r7, #8
 80070ea:	4610      	mov	r0, r2
 80070ec:	4798      	blx	r3
 80070ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070f0:	e029      	b.n	8007146 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80070f2:	6839      	ldr	r1, [r7, #0]
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fa11 	bl	800751c <USBD_CtlError>
        err++;
 80070fa:	7afb      	ldrb	r3, [r7, #11]
 80070fc:	3301      	adds	r3, #1
 80070fe:	72fb      	strb	r3, [r7, #11]
      break;
 8007100:	e021      	b.n	8007146 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	7c1b      	ldrb	r3, [r3, #16]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10d      	bne.n	8007126 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007112:	f107 0208 	add.w	r2, r7, #8
 8007116:	4610      	mov	r0, r2
 8007118:	4798      	blx	r3
 800711a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	3301      	adds	r3, #1
 8007120:	2207      	movs	r2, #7
 8007122:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007124:	e00f      	b.n	8007146 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007126:	6839      	ldr	r1, [r7, #0]
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 f9f7 	bl	800751c <USBD_CtlError>
        err++;
 800712e:	7afb      	ldrb	r3, [r7, #11]
 8007130:	3301      	adds	r3, #1
 8007132:	72fb      	strb	r3, [r7, #11]
      break;
 8007134:	e007      	b.n	8007146 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007136:	6839      	ldr	r1, [r7, #0]
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f9ef 	bl	800751c <USBD_CtlError>
      err++;
 800713e:	7afb      	ldrb	r3, [r7, #11]
 8007140:	3301      	adds	r3, #1
 8007142:	72fb      	strb	r3, [r7, #11]
      break;
 8007144:	bf00      	nop
  }

  if (err != 0U)
 8007146:	7afb      	ldrb	r3, [r7, #11]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d11e      	bne.n	800718a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	88db      	ldrh	r3, [r3, #6]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d016      	beq.n	8007182 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007154:	893b      	ldrh	r3, [r7, #8]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00e      	beq.n	8007178 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	88da      	ldrh	r2, [r3, #6]
 800715e:	893b      	ldrh	r3, [r7, #8]
 8007160:	4293      	cmp	r3, r2
 8007162:	bf28      	it	cs
 8007164:	4613      	movcs	r3, r2
 8007166:	b29b      	uxth	r3, r3
 8007168:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800716a:	893b      	ldrh	r3, [r7, #8]
 800716c:	461a      	mov	r2, r3
 800716e:	68f9      	ldr	r1, [r7, #12]
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fa44 	bl	80075fe <USBD_CtlSendData>
 8007176:	e009      	b.n	800718c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007178:	6839      	ldr	r1, [r7, #0]
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f9ce 	bl	800751c <USBD_CtlError>
 8007180:	e004      	b.n	800718c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fa95 	bl	80076b2 <USBD_CtlSendStatus>
 8007188:	e000      	b.n	800718c <USBD_GetDescriptor+0x320>
    return;
 800718a:	bf00      	nop
  }
}
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop

08007194 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	889b      	ldrh	r3, [r3, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d131      	bne.n	800720a <USBD_SetAddress+0x76>
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	88db      	ldrh	r3, [r3, #6]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d12d      	bne.n	800720a <USBD_SetAddress+0x76>
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	885b      	ldrh	r3, [r3, #2]
 80071b2:	2b7f      	cmp	r3, #127	; 0x7f
 80071b4:	d829      	bhi.n	800720a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	885b      	ldrh	r3, [r3, #2]
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	2b03      	cmp	r3, #3
 80071cc:	d104      	bne.n	80071d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80071ce:	6839      	ldr	r1, [r7, #0]
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f9a3 	bl	800751c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071d6:	e01d      	b.n	8007214 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	7bfa      	ldrb	r2, [r7, #15]
 80071dc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80071e0:	7bfb      	ldrb	r3, [r7, #15]
 80071e2:	4619      	mov	r1, r3
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 ff01 	bl	8007fec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 fa61 	bl	80076b2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80071f0:	7bfb      	ldrb	r3, [r7, #15]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d004      	beq.n	8007200 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2202      	movs	r2, #2
 80071fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071fe:	e009      	b.n	8007214 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007208:	e004      	b.n	8007214 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800720a:	6839      	ldr	r1, [r7, #0]
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f985 	bl	800751c <USBD_CtlError>
  }
}
 8007212:	bf00      	nop
 8007214:	bf00      	nop
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	885b      	ldrh	r3, [r3, #2]
 800722e:	b2da      	uxtb	r2, r3
 8007230:	4b4c      	ldr	r3, [pc, #304]	; (8007364 <USBD_SetConfig+0x148>)
 8007232:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007234:	4b4b      	ldr	r3, [pc, #300]	; (8007364 <USBD_SetConfig+0x148>)
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d905      	bls.n	8007248 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800723c:	6839      	ldr	r1, [r7, #0]
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f96c 	bl	800751c <USBD_CtlError>
    return USBD_FAIL;
 8007244:	2303      	movs	r3, #3
 8007246:	e088      	b.n	800735a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800724e:	b2db      	uxtb	r3, r3
 8007250:	2b02      	cmp	r3, #2
 8007252:	d002      	beq.n	800725a <USBD_SetConfig+0x3e>
 8007254:	2b03      	cmp	r3, #3
 8007256:	d025      	beq.n	80072a4 <USBD_SetConfig+0x88>
 8007258:	e071      	b.n	800733e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800725a:	4b42      	ldr	r3, [pc, #264]	; (8007364 <USBD_SetConfig+0x148>)
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d01c      	beq.n	800729c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8007262:	4b40      	ldr	r3, [pc, #256]	; (8007364 <USBD_SetConfig+0x148>)
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800726c:	4b3d      	ldr	r3, [pc, #244]	; (8007364 <USBD_SetConfig+0x148>)
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	4619      	mov	r1, r3
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7ff f992 	bl	800659c <USBD_SetClassConfig>
 8007278:	4603      	mov	r3, r0
 800727a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800727c:	7bfb      	ldrb	r3, [r7, #15]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d004      	beq.n	800728c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f949 	bl	800751c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800728a:	e065      	b.n	8007358 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fa10 	bl	80076b2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2203      	movs	r2, #3
 8007296:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800729a:	e05d      	b.n	8007358 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 fa08 	bl	80076b2 <USBD_CtlSendStatus>
      break;
 80072a2:	e059      	b.n	8007358 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80072a4:	4b2f      	ldr	r3, [pc, #188]	; (8007364 <USBD_SetConfig+0x148>)
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d112      	bne.n	80072d2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80072b4:	4b2b      	ldr	r3, [pc, #172]	; (8007364 <USBD_SetConfig+0x148>)
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	461a      	mov	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80072be:	4b29      	ldr	r3, [pc, #164]	; (8007364 <USBD_SetConfig+0x148>)
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	4619      	mov	r1, r3
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f7ff f985 	bl	80065d4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f9f1 	bl	80076b2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80072d0:	e042      	b.n	8007358 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80072d2:	4b24      	ldr	r3, [pc, #144]	; (8007364 <USBD_SetConfig+0x148>)
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	461a      	mov	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d02a      	beq.n	8007336 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	4619      	mov	r1, r3
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f7ff f973 	bl	80065d4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80072ee:	4b1d      	ldr	r3, [pc, #116]	; (8007364 <USBD_SetConfig+0x148>)
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	461a      	mov	r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80072f8:	4b1a      	ldr	r3, [pc, #104]	; (8007364 <USBD_SetConfig+0x148>)
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	4619      	mov	r1, r3
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7ff f94c 	bl	800659c <USBD_SetClassConfig>
 8007304:	4603      	mov	r3, r0
 8007306:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007308:	7bfb      	ldrb	r3, [r7, #15]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00f      	beq.n	800732e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800730e:	6839      	ldr	r1, [r7, #0]
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f903 	bl	800751c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	b2db      	uxtb	r3, r3
 800731c:	4619      	mov	r1, r3
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7ff f958 	bl	80065d4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2202      	movs	r2, #2
 8007328:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800732c:	e014      	b.n	8007358 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f9bf 	bl	80076b2 <USBD_CtlSendStatus>
      break;
 8007334:	e010      	b.n	8007358 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f9bb 	bl	80076b2 <USBD_CtlSendStatus>
      break;
 800733c:	e00c      	b.n	8007358 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800733e:	6839      	ldr	r1, [r7, #0]
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f8eb 	bl	800751c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007346:	4b07      	ldr	r3, [pc, #28]	; (8007364 <USBD_SetConfig+0x148>)
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f7ff f941 	bl	80065d4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007352:	2303      	movs	r3, #3
 8007354:	73fb      	strb	r3, [r7, #15]
      break;
 8007356:	bf00      	nop
  }

  return ret;
 8007358:	7bfb      	ldrb	r3, [r7, #15]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	200001ac 	.word	0x200001ac

08007368 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	88db      	ldrh	r3, [r3, #6]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d004      	beq.n	8007384 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800737a:	6839      	ldr	r1, [r7, #0]
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 f8cd 	bl	800751c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007382:	e023      	b.n	80073cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800738a:	b2db      	uxtb	r3, r3
 800738c:	2b02      	cmp	r3, #2
 800738e:	dc02      	bgt.n	8007396 <USBD_GetConfig+0x2e>
 8007390:	2b00      	cmp	r3, #0
 8007392:	dc03      	bgt.n	800739c <USBD_GetConfig+0x34>
 8007394:	e015      	b.n	80073c2 <USBD_GetConfig+0x5a>
 8007396:	2b03      	cmp	r3, #3
 8007398:	d00b      	beq.n	80073b2 <USBD_GetConfig+0x4a>
 800739a:	e012      	b.n	80073c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	3308      	adds	r3, #8
 80073a6:	2201      	movs	r2, #1
 80073a8:	4619      	mov	r1, r3
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f927 	bl	80075fe <USBD_CtlSendData>
        break;
 80073b0:	e00c      	b.n	80073cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	3304      	adds	r3, #4
 80073b6:	2201      	movs	r2, #1
 80073b8:	4619      	mov	r1, r3
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f91f 	bl	80075fe <USBD_CtlSendData>
        break;
 80073c0:	e004      	b.n	80073cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80073c2:	6839      	ldr	r1, [r7, #0]
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f8a9 	bl	800751c <USBD_CtlError>
        break;
 80073ca:	bf00      	nop
}
 80073cc:	bf00      	nop
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	3b01      	subs	r3, #1
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d81e      	bhi.n	800742a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	88db      	ldrh	r3, [r3, #6]
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d004      	beq.n	80073fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80073f4:	6839      	ldr	r1, [r7, #0]
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f000 f890 	bl	800751c <USBD_CtlError>
        break;
 80073fc:	e01a      	b.n	8007434 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800740a:	2b00      	cmp	r3, #0
 800740c:	d005      	beq.n	800741a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	f043 0202 	orr.w	r2, r3, #2
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	330c      	adds	r3, #12
 800741e:	2202      	movs	r2, #2
 8007420:	4619      	mov	r1, r3
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f8eb 	bl	80075fe <USBD_CtlSendData>
      break;
 8007428:	e004      	b.n	8007434 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800742a:	6839      	ldr	r1, [r7, #0]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 f875 	bl	800751c <USBD_CtlError>
      break;
 8007432:	bf00      	nop
  }
}
 8007434:	bf00      	nop
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	885b      	ldrh	r3, [r3, #2]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d106      	bne.n	800745c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f92b 	bl	80076b2 <USBD_CtlSendStatus>
  }
}
 800745c:	bf00      	nop
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007474:	b2db      	uxtb	r3, r3
 8007476:	3b01      	subs	r3, #1
 8007478:	2b02      	cmp	r3, #2
 800747a:	d80b      	bhi.n	8007494 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	885b      	ldrh	r3, [r3, #2]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d10c      	bne.n	800749e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f910 	bl	80076b2 <USBD_CtlSendStatus>
      }
      break;
 8007492:	e004      	b.n	800749e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007494:	6839      	ldr	r1, [r7, #0]
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f840 	bl	800751c <USBD_CtlError>
      break;
 800749c:	e000      	b.n	80074a0 <USBD_ClrFeature+0x3c>
      break;
 800749e:	bf00      	nop
  }
}
 80074a0:	bf00      	nop
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	781a      	ldrb	r2, [r3, #0]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	3301      	adds	r3, #1
 80074c2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	781a      	ldrb	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	3301      	adds	r3, #1
 80074d0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f7ff fa92 	bl	80069fc <SWAPBYTE>
 80074d8:	4603      	mov	r3, r0
 80074da:	461a      	mov	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	3301      	adds	r3, #1
 80074e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	3301      	adds	r3, #1
 80074ea:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f7ff fa85 	bl	80069fc <SWAPBYTE>
 80074f2:	4603      	mov	r3, r0
 80074f4:	461a      	mov	r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	3301      	adds	r3, #1
 80074fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	3301      	adds	r3, #1
 8007504:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f7ff fa78 	bl	80069fc <SWAPBYTE>
 800750c:	4603      	mov	r3, r0
 800750e:	461a      	mov	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	80da      	strh	r2, [r3, #6]
}
 8007514:	bf00      	nop
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007526:	2180      	movs	r1, #128	; 0x80
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 fcf5 	bl	8007f18 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800752e:	2100      	movs	r1, #0
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fcf1 	bl	8007f18 <USBD_LL_StallEP>
}
 8007536:	bf00      	nop
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b086      	sub	sp, #24
 8007542:	af00      	add	r7, sp, #0
 8007544:	60f8      	str	r0, [r7, #12]
 8007546:	60b9      	str	r1, [r7, #8]
 8007548:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800754a:	2300      	movs	r3, #0
 800754c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d036      	beq.n	80075c2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007558:	6938      	ldr	r0, [r7, #16]
 800755a:	f000 f836 	bl	80075ca <USBD_GetLen>
 800755e:	4603      	mov	r3, r0
 8007560:	3301      	adds	r3, #1
 8007562:	b29b      	uxth	r3, r3
 8007564:	005b      	lsls	r3, r3, #1
 8007566:	b29a      	uxth	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800756c:	7dfb      	ldrb	r3, [r7, #23]
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	4413      	add	r3, r2
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	7812      	ldrb	r2, [r2, #0]
 8007576:	701a      	strb	r2, [r3, #0]
  idx++;
 8007578:	7dfb      	ldrb	r3, [r7, #23]
 800757a:	3301      	adds	r3, #1
 800757c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800757e:	7dfb      	ldrb	r3, [r7, #23]
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	4413      	add	r3, r2
 8007584:	2203      	movs	r2, #3
 8007586:	701a      	strb	r2, [r3, #0]
  idx++;
 8007588:	7dfb      	ldrb	r3, [r7, #23]
 800758a:	3301      	adds	r3, #1
 800758c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800758e:	e013      	b.n	80075b8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007590:	7dfb      	ldrb	r3, [r7, #23]
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	4413      	add	r3, r2
 8007596:	693a      	ldr	r2, [r7, #16]
 8007598:	7812      	ldrb	r2, [r2, #0]
 800759a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	3301      	adds	r3, #1
 80075a0:	613b      	str	r3, [r7, #16]
    idx++;
 80075a2:	7dfb      	ldrb	r3, [r7, #23]
 80075a4:	3301      	adds	r3, #1
 80075a6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80075a8:	7dfb      	ldrb	r3, [r7, #23]
 80075aa:	68ba      	ldr	r2, [r7, #8]
 80075ac:	4413      	add	r3, r2
 80075ae:	2200      	movs	r2, #0
 80075b0:	701a      	strb	r2, [r3, #0]
    idx++;
 80075b2:	7dfb      	ldrb	r3, [r7, #23]
 80075b4:	3301      	adds	r3, #1
 80075b6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1e7      	bne.n	8007590 <USBD_GetString+0x52>
 80075c0:	e000      	b.n	80075c4 <USBD_GetString+0x86>
    return;
 80075c2:	bf00      	nop
  }
}
 80075c4:	3718      	adds	r7, #24
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80075ca:	b480      	push	{r7}
 80075cc:	b085      	sub	sp, #20
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80075d2:	2300      	movs	r3, #0
 80075d4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80075da:	e005      	b.n	80075e8 <USBD_GetLen+0x1e>
  {
    len++;
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
 80075de:	3301      	adds	r3, #1
 80075e0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	3301      	adds	r3, #1
 80075e6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1f5      	bne.n	80075dc <USBD_GetLen+0x12>
  }

  return len;
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3714      	adds	r7, #20
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b084      	sub	sp, #16
 8007602:	af00      	add	r7, sp, #0
 8007604:	60f8      	str	r0, [r7, #12]
 8007606:	60b9      	str	r1, [r7, #8]
 8007608:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2202      	movs	r2, #2
 800760e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	68ba      	ldr	r2, [r7, #8]
 8007622:	2100      	movs	r1, #0
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f000 fd00 	bl	800802a <USBD_LL_Transmit>

  return USBD_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	2100      	movs	r1, #0
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f000 fcef 	bl	800802a <USBD_LL_Transmit>

  return USBD_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b084      	sub	sp, #16
 800765a:	af00      	add	r7, sp, #0
 800765c:	60f8      	str	r0, [r7, #12]
 800765e:	60b9      	str	r1, [r7, #8]
 8007660:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2203      	movs	r2, #3
 8007666:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	2100      	movs	r1, #0
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 fcf3 	bl	800806c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	2100      	movs	r1, #0
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f000 fce2 	bl	800806c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b082      	sub	sp, #8
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2204      	movs	r2, #4
 80076be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80076c2:	2300      	movs	r3, #0
 80076c4:	2200      	movs	r2, #0
 80076c6:	2100      	movs	r1, #0
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 fcae 	bl	800802a <USBD_LL_Transmit>

  return USBD_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3708      	adds	r7, #8
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2205      	movs	r2, #5
 80076e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076e8:	2300      	movs	r3, #0
 80076ea:	2200      	movs	r2, #0
 80076ec:	2100      	movs	r1, #0
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fcbc 	bl	800806c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3708      	adds	r7, #8
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
	...

08007700 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8007704:	2200      	movs	r2, #0
 8007706:	4912      	ldr	r1, [pc, #72]	; (8007750 <MX_USB_Device_Init+0x50>)
 8007708:	4812      	ldr	r0, [pc, #72]	; (8007754 <MX_USB_Device_Init+0x54>)
 800770a:	f7fe fed9 	bl	80064c0 <USBD_Init>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d001      	beq.n	8007718 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8007714:	f7f8 fe56 	bl	80003c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8007718:	490f      	ldr	r1, [pc, #60]	; (8007758 <MX_USB_Device_Init+0x58>)
 800771a:	480e      	ldr	r0, [pc, #56]	; (8007754 <MX_USB_Device_Init+0x54>)
 800771c:	f7fe ff00 	bl	8006520 <USBD_RegisterClass>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d001      	beq.n	800772a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8007726:	f7f8 fe4d 	bl	80003c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800772a:	490c      	ldr	r1, [pc, #48]	; (800775c <MX_USB_Device_Init+0x5c>)
 800772c:	4809      	ldr	r0, [pc, #36]	; (8007754 <MX_USB_Device_Init+0x54>)
 800772e:	f7fe fe51 	bl	80063d4 <USBD_CDC_RegisterInterface>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d001      	beq.n	800773c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8007738:	f7f8 fe44 	bl	80003c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800773c:	4805      	ldr	r0, [pc, #20]	; (8007754 <MX_USB_Device_Init+0x54>)
 800773e:	f7fe ff16 	bl	800656e <USBD_Start>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d001      	beq.n	800774c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8007748:	f7f8 fe3c 	bl	80003c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800774c:	bf00      	nop
 800774e:	bd80      	pop	{r7, pc}
 8007750:	20000138 	.word	0x20000138
 8007754:	200001b0 	.word	0x200001b0
 8007758:	20000018 	.word	0x20000018
 800775c:	20000124 	.word	0x20000124

08007760 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007764:	2200      	movs	r2, #0
 8007766:	4905      	ldr	r1, [pc, #20]	; (800777c <CDC_Init_FS+0x1c>)
 8007768:	4805      	ldr	r0, [pc, #20]	; (8007780 <CDC_Init_FS+0x20>)
 800776a:	f7fe fe48 	bl	80063fe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800776e:	4905      	ldr	r1, [pc, #20]	; (8007784 <CDC_Init_FS+0x24>)
 8007770:	4803      	ldr	r0, [pc, #12]	; (8007780 <CDC_Init_FS+0x20>)
 8007772:	f7fe fe62 	bl	800643a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007776:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007778:	4618      	mov	r0, r3
 800777a:	bd80      	pop	{r7, pc}
 800777c:	20000c98 	.word	0x20000c98
 8007780:	200001b0 	.word	0x200001b0
 8007784:	20000498 	.word	0x20000498

08007788 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007788:	b480      	push	{r7}
 800778a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800778c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800778e:	4618      	mov	r0, r3
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	4603      	mov	r3, r0
 80077a0:	6039      	str	r1, [r7, #0]
 80077a2:	71fb      	strb	r3, [r7, #7]
 80077a4:	4613      	mov	r3, r2
 80077a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef *)pbuf;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	60fb      	str	r3, [r7, #12]

  switch(cmd)
 80077ac:	79fb      	ldrb	r3, [r7, #7]
 80077ae:	2b23      	cmp	r3, #35	; 0x23
 80077b0:	f200 80af 	bhi.w	8007912 <CDC_Control_FS+0x17a>
 80077b4:	a201      	add	r2, pc, #4	; (adr r2, 80077bc <CDC_Control_FS+0x24>)
 80077b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ba:	bf00      	nop
 80077bc:	08007913 	.word	0x08007913
 80077c0:	08007913 	.word	0x08007913
 80077c4:	08007913 	.word	0x08007913
 80077c8:	08007913 	.word	0x08007913
 80077cc:	08007913 	.word	0x08007913
 80077d0:	08007913 	.word	0x08007913
 80077d4:	08007913 	.word	0x08007913
 80077d8:	08007913 	.word	0x08007913
 80077dc:	08007913 	.word	0x08007913
 80077e0:	08007913 	.word	0x08007913
 80077e4:	08007913 	.word	0x08007913
 80077e8:	08007913 	.word	0x08007913
 80077ec:	08007913 	.word	0x08007913
 80077f0:	08007913 	.word	0x08007913
 80077f4:	08007913 	.word	0x08007913
 80077f8:	08007913 	.word	0x08007913
 80077fc:	08007913 	.word	0x08007913
 8007800:	08007913 	.word	0x08007913
 8007804:	08007913 	.word	0x08007913
 8007808:	08007913 	.word	0x08007913
 800780c:	08007913 	.word	0x08007913
 8007810:	08007913 	.word	0x08007913
 8007814:	08007913 	.word	0x08007913
 8007818:	08007913 	.word	0x08007913
 800781c:	08007913 	.word	0x08007913
 8007820:	08007913 	.word	0x08007913
 8007824:	08007913 	.word	0x08007913
 8007828:	08007913 	.word	0x08007913
 800782c:	08007913 	.word	0x08007913
 8007830:	08007913 	.word	0x08007913
 8007834:	08007913 	.word	0x08007913
 8007838:	08007913 	.word	0x08007913
 800783c:	0800784d 	.word	0x0800784d
 8007840:	080078a7 	.word	0x080078a7
 8007844:	080078fb 	.word	0x080078fb
 8007848:	08007913 	.word	0x08007913
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate   = (uint32_t)(pbuf[0]);
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	461a      	mov	r2, r3
 8007852:	4b34      	ldr	r3, [pc, #208]	; (8007924 <CDC_Control_FS+0x18c>)
 8007854:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[1]<<8);
 8007856:	4b33      	ldr	r3, [pc, #204]	; (8007924 <CDC_Control_FS+0x18c>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	683a      	ldr	r2, [r7, #0]
 800785c:	3201      	adds	r2, #1
 800785e:	7812      	ldrb	r2, [r2, #0]
 8007860:	0212      	lsls	r2, r2, #8
 8007862:	4313      	orrs	r3, r2
 8007864:	4a2f      	ldr	r2, [pc, #188]	; (8007924 <CDC_Control_FS+0x18c>)
 8007866:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[2]<<16);
 8007868:	4b2e      	ldr	r3, [pc, #184]	; (8007924 <CDC_Control_FS+0x18c>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	683a      	ldr	r2, [r7, #0]
 800786e:	3202      	adds	r2, #2
 8007870:	7812      	ldrb	r2, [r2, #0]
 8007872:	0412      	lsls	r2, r2, #16
 8007874:	4313      	orrs	r3, r2
 8007876:	4a2b      	ldr	r2, [pc, #172]	; (8007924 <CDC_Control_FS+0x18c>)
 8007878:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[3]<<24);
 800787a:	4b2a      	ldr	r3, [pc, #168]	; (8007924 <CDC_Control_FS+0x18c>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	3203      	adds	r2, #3
 8007882:	7812      	ldrb	r2, [r2, #0]
 8007884:	0612      	lsls	r2, r2, #24
 8007886:	4313      	orrs	r3, r2
 8007888:	4a26      	ldr	r2, [pc, #152]	; (8007924 <CDC_Control_FS+0x18c>)
 800788a:	6013      	str	r3, [r2, #0]
      LineCoding.format    = pbuf[4];
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	791a      	ldrb	r2, [r3, #4]
 8007890:	4b24      	ldr	r3, [pc, #144]	; (8007924 <CDC_Control_FS+0x18c>)
 8007892:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype= pbuf[5];
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	795a      	ldrb	r2, [r3, #5]
 8007898:	4b22      	ldr	r3, [pc, #136]	; (8007924 <CDC_Control_FS+0x18c>)
 800789a:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype  = pbuf[6];
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	799a      	ldrb	r2, [r3, #6]
 80078a0:	4b20      	ldr	r3, [pc, #128]	; (8007924 <CDC_Control_FS+0x18c>)
 80078a2:	719a      	strb	r2, [r3, #6]

    break;
 80078a4:	e036      	b.n	8007914 <CDC_Control_FS+0x17c>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80078a6:	4b1f      	ldr	r3, [pc, #124]	; (8007924 <CDC_Control_FS+0x18c>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	b2da      	uxtb	r2, r3
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 80078b0:	4b1c      	ldr	r3, [pc, #112]	; (8007924 <CDC_Control_FS+0x18c>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	0a1a      	lsrs	r2, r3, #8
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	3301      	adds	r3, #1
 80078ba:	b2d2      	uxtb	r2, r2
 80078bc:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 80078be:	4b19      	ldr	r3, [pc, #100]	; (8007924 <CDC_Control_FS+0x18c>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	0c1a      	lsrs	r2, r3, #16
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	3302      	adds	r3, #2
 80078c8:	b2d2      	uxtb	r2, r2
 80078ca:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 80078cc:	4b15      	ldr	r3, [pc, #84]	; (8007924 <CDC_Control_FS+0x18c>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	0e1a      	lsrs	r2, r3, #24
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	3303      	adds	r3, #3
 80078d6:	b2d2      	uxtb	r2, r2
 80078d8:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	3304      	adds	r3, #4
 80078de:	4a11      	ldr	r2, [pc, #68]	; (8007924 <CDC_Control_FS+0x18c>)
 80078e0:	7912      	ldrb	r2, [r2, #4]
 80078e2:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	3305      	adds	r3, #5
 80078e8:	4a0e      	ldr	r2, [pc, #56]	; (8007924 <CDC_Control_FS+0x18c>)
 80078ea:	7952      	ldrb	r2, [r2, #5]
 80078ec:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	3306      	adds	r3, #6
 80078f2:	4a0c      	ldr	r2, [pc, #48]	; (8007924 <CDC_Control_FS+0x18c>)
 80078f4:	7992      	ldrb	r2, [r2, #6]
 80078f6:	701a      	strb	r2, [r3, #0]

    break;
 80078f8:	e00c      	b.n	8007914 <CDC_Control_FS+0x17c>

    case CDC_SET_CONTROL_LINE_STATE:
      is_opened = req->wValue & 0x01;   // 0 bit: DTR, 1 bit: RTS
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	885b      	ldrh	r3, [r3, #2]
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	2b00      	cmp	r3, #0
 8007904:	bf14      	ite	ne
 8007906:	2301      	movne	r3, #1
 8007908:	2300      	moveq	r3, #0
 800790a:	b2da      	uxtb	r2, r3
 800790c:	4b06      	ldr	r3, [pc, #24]	; (8007928 <CDC_Control_FS+0x190>)
 800790e:	701a      	strb	r2, [r3, #0]

    break;
 8007910:	e000      	b.n	8007914 <CDC_Control_FS+0x17c>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007912:	bf00      	nop
  }

  return (USBD_OK);
 8007914:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007916:	4618      	mov	r0, r3
 8007918:	3714      	adds	r7, #20
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	2000011c 	.word	0x2000011c
 8007928:	20000494 	.word	0x20000494

0800792c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800792c:	b590      	push	{r4, r7, lr}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  qbufferWrite(&q_rx, Buf, *Len);
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	461a      	mov	r2, r3
 800793c:	6879      	ldr	r1, [r7, #4]
 800793e:	480f      	ldr	r0, [pc, #60]	; (800797c <CDC_Receive_FS+0x50>)
 8007940:	f7f8 fddb 	bl	80004fa <qbufferWrite>


  uint32_t buf_len;

  buf_len = (q_rx.len - qbufferAvailable(&q_rx)) - 1;
 8007944:	4b0d      	ldr	r3, [pc, #52]	; (800797c <CDC_Receive_FS+0x50>)
 8007946:	689c      	ldr	r4, [r3, #8]
 8007948:	480c      	ldr	r0, [pc, #48]	; (800797c <CDC_Receive_FS+0x50>)
 800794a:	f7f8 fe32 	bl	80005b2 <qbufferAvailable>
 800794e:	4603      	mov	r3, r0
 8007950:	1ae3      	subs	r3, r4, r3
 8007952:	3b01      	subs	r3, #1
 8007954:	60fb      	str	r3, [r7, #12]

  if (buf_len >= CDC_DATA_FS_MAX_PACKET_SIZE)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2b3f      	cmp	r3, #63	; 0x3f
 800795a:	d907      	bls.n	800796c <CDC_Receive_FS+0x40>
  {
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800795c:	6879      	ldr	r1, [r7, #4]
 800795e:	4808      	ldr	r0, [pc, #32]	; (8007980 <CDC_Receive_FS+0x54>)
 8007960:	f7fe fd6b 	bl	800643a <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007964:	4806      	ldr	r0, [pc, #24]	; (8007980 <CDC_Receive_FS+0x54>)
 8007966:	f7fe fd81 	bl	800646c <USBD_CDC_ReceivePacket>
 800796a:	e002      	b.n	8007972 <CDC_Receive_FS+0x46>
  }
  else
  {
    is_rx_full = true;
 800796c:	4b05      	ldr	r3, [pc, #20]	; (8007984 <CDC_Receive_FS+0x58>)
 800796e:	2201      	movs	r2, #1
 8007970:	701a      	strb	r2, [r3, #0]
  }

    return (USBD_OK);
 8007972:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007974:	4618      	mov	r0, r3
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	bd90      	pop	{r4, r7, pc}
 800797c:	20000480 	.word	0x20000480
 8007980:	200001b0 	.word	0x200001b0
 8007984:	20000495 	.word	0x20000495

08007988 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007988:	b480      	push	{r7}
 800798a:	b087      	sub	sp, #28
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	4613      	mov	r3, r2
 8007994:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007996:	2300      	movs	r3, #0
 8007998:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800799a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800799e:	4618      	mov	r0, r3
 80079a0:	371c      	adds	r7, #28
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr
	...

080079ac <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b083      	sub	sp, #12
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	4603      	mov	r3, r0
 80079b4:	6039      	str	r1, [r7, #0]
 80079b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	2212      	movs	r2, #18
 80079bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80079be:	4b03      	ldr	r3, [pc, #12]	; (80079cc <USBD_CDC_DeviceDescriptor+0x20>)
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr
 80079cc:	20000158 	.word	0x20000158

080079d0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	4603      	mov	r3, r0
 80079d8:	6039      	str	r1, [r7, #0]
 80079da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	2204      	movs	r2, #4
 80079e0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80079e2:	4b03      	ldr	r3, [pc, #12]	; (80079f0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr
 80079f0:	2000016c 	.word	0x2000016c

080079f4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	4603      	mov	r3, r0
 80079fc:	6039      	str	r1, [r7, #0]
 80079fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a00:	79fb      	ldrb	r3, [r7, #7]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d105      	bne.n	8007a12 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8007a06:	683a      	ldr	r2, [r7, #0]
 8007a08:	4907      	ldr	r1, [pc, #28]	; (8007a28 <USBD_CDC_ProductStrDescriptor+0x34>)
 8007a0a:	4808      	ldr	r0, [pc, #32]	; (8007a2c <USBD_CDC_ProductStrDescriptor+0x38>)
 8007a0c:	f7ff fd97 	bl	800753e <USBD_GetString>
 8007a10:	e004      	b.n	8007a1c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	4904      	ldr	r1, [pc, #16]	; (8007a28 <USBD_CDC_ProductStrDescriptor+0x34>)
 8007a16:	4805      	ldr	r0, [pc, #20]	; (8007a2c <USBD_CDC_ProductStrDescriptor+0x38>)
 8007a18:	f7ff fd91 	bl	800753e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a1c:	4b02      	ldr	r3, [pc, #8]	; (8007a28 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20001498 	.word	0x20001498
 8007a2c:	0800825c 	.word	0x0800825c

08007a30 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	4603      	mov	r3, r0
 8007a38:	6039      	str	r1, [r7, #0]
 8007a3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	4904      	ldr	r1, [pc, #16]	; (8007a50 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8007a40:	4804      	ldr	r0, [pc, #16]	; (8007a54 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8007a42:	f7ff fd7c 	bl	800753e <USBD_GetString>
  return USBD_StrDesc;
 8007a46:	4b02      	ldr	r3, [pc, #8]	; (8007a50 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3708      	adds	r7, #8
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	20001498 	.word	0x20001498
 8007a54:	08008274 	.word	0x08008274

08007a58 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	4603      	mov	r3, r0
 8007a60:	6039      	str	r1, [r7, #0]
 8007a62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	221a      	movs	r2, #26
 8007a68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007a6a:	f000 f843 	bl	8007af4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8007a6e:	4b02      	ldr	r3, [pc, #8]	; (8007a78 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3708      	adds	r7, #8
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	20000170 	.word	0x20000170

08007a7c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	4603      	mov	r3, r0
 8007a84:	6039      	str	r1, [r7, #0]
 8007a86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007a88:	79fb      	ldrb	r3, [r7, #7]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d105      	bne.n	8007a9a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8007a8e:	683a      	ldr	r2, [r7, #0]
 8007a90:	4907      	ldr	r1, [pc, #28]	; (8007ab0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8007a92:	4808      	ldr	r0, [pc, #32]	; (8007ab4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8007a94:	f7ff fd53 	bl	800753e <USBD_GetString>
 8007a98:	e004      	b.n	8007aa4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	4904      	ldr	r1, [pc, #16]	; (8007ab0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8007a9e:	4805      	ldr	r0, [pc, #20]	; (8007ab4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8007aa0:	f7ff fd4d 	bl	800753e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007aa4:	4b02      	ldr	r3, [pc, #8]	; (8007ab0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3708      	adds	r7, #8
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	20001498 	.word	0x20001498
 8007ab4:	08008288 	.word	0x08008288

08007ab8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	4603      	mov	r3, r0
 8007ac0:	6039      	str	r1, [r7, #0]
 8007ac2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ac4:	79fb      	ldrb	r3, [r7, #7]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d105      	bne.n	8007ad6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8007aca:	683a      	ldr	r2, [r7, #0]
 8007acc:	4907      	ldr	r1, [pc, #28]	; (8007aec <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8007ace:	4808      	ldr	r0, [pc, #32]	; (8007af0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8007ad0:	f7ff fd35 	bl	800753e <USBD_GetString>
 8007ad4:	e004      	b.n	8007ae0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8007ad6:	683a      	ldr	r2, [r7, #0]
 8007ad8:	4904      	ldr	r1, [pc, #16]	; (8007aec <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8007ada:	4805      	ldr	r0, [pc, #20]	; (8007af0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8007adc:	f7ff fd2f 	bl	800753e <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ae0:	4b02      	ldr	r3, [pc, #8]	; (8007aec <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	20001498 	.word	0x20001498
 8007af0:	08008294 	.word	0x08008294

08007af4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007afa:	4b0f      	ldr	r3, [pc, #60]	; (8007b38 <Get_SerialNum+0x44>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007b00:	4b0e      	ldr	r3, [pc, #56]	; (8007b3c <Get_SerialNum+0x48>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007b06:	4b0e      	ldr	r3, [pc, #56]	; (8007b40 <Get_SerialNum+0x4c>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4413      	add	r3, r2
 8007b12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d009      	beq.n	8007b2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007b1a:	2208      	movs	r2, #8
 8007b1c:	4909      	ldr	r1, [pc, #36]	; (8007b44 <Get_SerialNum+0x50>)
 8007b1e:	68f8      	ldr	r0, [r7, #12]
 8007b20:	f000 f814 	bl	8007b4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007b24:	2204      	movs	r2, #4
 8007b26:	4908      	ldr	r1, [pc, #32]	; (8007b48 <Get_SerialNum+0x54>)
 8007b28:	68b8      	ldr	r0, [r7, #8]
 8007b2a:	f000 f80f 	bl	8007b4c <IntToUnicode>
  }
}
 8007b2e:	bf00      	nop
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	1fff7590 	.word	0x1fff7590
 8007b3c:	1fff7594 	.word	0x1fff7594
 8007b40:	1fff7598 	.word	0x1fff7598
 8007b44:	20000172 	.word	0x20000172
 8007b48:	20000182 	.word	0x20000182

08007b4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b087      	sub	sp, #28
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	4613      	mov	r3, r2
 8007b58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007b5e:	2300      	movs	r3, #0
 8007b60:	75fb      	strb	r3, [r7, #23]
 8007b62:	e027      	b.n	8007bb4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	0f1b      	lsrs	r3, r3, #28
 8007b68:	2b09      	cmp	r3, #9
 8007b6a:	d80b      	bhi.n	8007b84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	0f1b      	lsrs	r3, r3, #28
 8007b70:	b2da      	uxtb	r2, r3
 8007b72:	7dfb      	ldrb	r3, [r7, #23]
 8007b74:	005b      	lsls	r3, r3, #1
 8007b76:	4619      	mov	r1, r3
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	440b      	add	r3, r1
 8007b7c:	3230      	adds	r2, #48	; 0x30
 8007b7e:	b2d2      	uxtb	r2, r2
 8007b80:	701a      	strb	r2, [r3, #0]
 8007b82:	e00a      	b.n	8007b9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	0f1b      	lsrs	r3, r3, #28
 8007b88:	b2da      	uxtb	r2, r3
 8007b8a:	7dfb      	ldrb	r3, [r7, #23]
 8007b8c:	005b      	lsls	r3, r3, #1
 8007b8e:	4619      	mov	r1, r3
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	440b      	add	r3, r1
 8007b94:	3237      	adds	r2, #55	; 0x37
 8007b96:	b2d2      	uxtb	r2, r2
 8007b98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	011b      	lsls	r3, r3, #4
 8007b9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007ba0:	7dfb      	ldrb	r3, [r7, #23]
 8007ba2:	005b      	lsls	r3, r3, #1
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	4413      	add	r3, r2
 8007baa:	2200      	movs	r2, #0
 8007bac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007bae:	7dfb      	ldrb	r3, [r7, #23]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	75fb      	strb	r3, [r7, #23]
 8007bb4:	7dfa      	ldrb	r2, [r7, #23]
 8007bb6:	79fb      	ldrb	r3, [r7, #7]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d3d3      	bcc.n	8007b64 <IntToUnicode+0x18>
  }
}
 8007bbc:	bf00      	nop
 8007bbe:	bf00      	nop
 8007bc0:	371c      	adds	r7, #28
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
	...

08007bcc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b098      	sub	sp, #96	; 0x60
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007bd4:	f107 030c 	add.w	r3, r7, #12
 8007bd8:	2254      	movs	r2, #84	; 0x54
 8007bda:	2100      	movs	r1, #0
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f000 fb04 	bl	80081ea <memset>
  if(pcdHandle->Instance==USB)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a15      	ldr	r2, [pc, #84]	; (8007c3c <HAL_PCD_MspInit+0x70>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d123      	bne.n	8007c34 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8007bec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007bf0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8007bf2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007bf6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007bf8:	f107 030c 	add.w	r3, r7, #12
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7fb fba1 	bl	8003344 <HAL_RCCEx_PeriphCLKConfig>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d001      	beq.n	8007c0c <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8007c08:	f7f8 fbdc 	bl	80003c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007c0c:	4b0c      	ldr	r3, [pc, #48]	; (8007c40 <HAL_PCD_MspInit+0x74>)
 8007c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c10:	4a0b      	ldr	r2, [pc, #44]	; (8007c40 <HAL_PCD_MspInit+0x74>)
 8007c12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007c16:	6593      	str	r3, [r2, #88]	; 0x58
 8007c18:	4b09      	ldr	r3, [pc, #36]	; (8007c40 <HAL_PCD_MspInit+0x74>)
 8007c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c20:	60bb      	str	r3, [r7, #8]
 8007c22:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8007c24:	2200      	movs	r2, #0
 8007c26:	2100      	movs	r1, #0
 8007c28:	2014      	movs	r0, #20
 8007c2a:	f7f8 fede 	bl	80009ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8007c2e:	2014      	movs	r0, #20
 8007c30:	f7f8 fef5 	bl	8000a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007c34:	bf00      	nop
 8007c36:	3760      	adds	r7, #96	; 0x60
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	40005c00 	.word	0x40005c00
 8007c40:	40021000 	.word	0x40021000

08007c44 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8007c58:	4619      	mov	r1, r3
 8007c5a:	4610      	mov	r0, r2
 8007c5c:	f7fe fcd2 	bl	8006604 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8007c60:	bf00      	nop
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	460b      	mov	r3, r1
 8007c72:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8007c7a:	78fa      	ldrb	r2, [r7, #3]
 8007c7c:	6879      	ldr	r1, [r7, #4]
 8007c7e:	4613      	mov	r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4413      	add	r3, r2
 8007c84:	00db      	lsls	r3, r3, #3
 8007c86:	440b      	add	r3, r1
 8007c88:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	78fb      	ldrb	r3, [r7, #3]
 8007c90:	4619      	mov	r1, r3
 8007c92:	f7fe fd0c 	bl	80066ae <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8007c96:	bf00      	nop
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b082      	sub	sp, #8
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8007cb0:	78fa      	ldrb	r2, [r7, #3]
 8007cb2:	6879      	ldr	r1, [r7, #4]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	00db      	lsls	r3, r3, #3
 8007cbc:	440b      	add	r3, r1
 8007cbe:	3324      	adds	r3, #36	; 0x24
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	78fb      	ldrb	r3, [r7, #3]
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	f7fe fd55 	bl	8006774 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8007cca:	bf00      	nop
 8007ccc:	3708      	adds	r7, #8
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b082      	sub	sp, #8
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7fe fe69 	bl	80069b8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8007ce6:	bf00      	nop
 8007ce8:	3708      	adds	r7, #8
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b084      	sub	sp, #16
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	795b      	ldrb	r3, [r3, #5]
 8007cfe:	2b02      	cmp	r3, #2
 8007d00:	d001      	beq.n	8007d06 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007d02:	f7f8 fb5f 	bl	80003c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007d0c:	7bfa      	ldrb	r2, [r7, #15]
 8007d0e:	4611      	mov	r1, r2
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7fe fe13 	bl	800693c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7fe fdbf 	bl	80068a0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8007d22:	bf00      	nop
 8007d24:	3710      	adds	r7, #16
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
	...

08007d2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7fe fe0e 	bl	800695c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	7a5b      	ldrb	r3, [r3, #9]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d005      	beq.n	8007d54 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d48:	4b04      	ldr	r3, [pc, #16]	; (8007d5c <HAL_PCD_SuspendCallback+0x30>)
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	4a03      	ldr	r2, [pc, #12]	; (8007d5c <HAL_PCD_SuspendCallback+0x30>)
 8007d4e:	f043 0306 	orr.w	r3, r3, #6
 8007d52:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8007d54:	bf00      	nop
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	e000ed00 	.word	0xe000ed00

08007d60 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	7a5b      	ldrb	r3, [r3, #9]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d007      	beq.n	8007d80 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d70:	4b08      	ldr	r3, [pc, #32]	; (8007d94 <HAL_PCD_ResumeCallback+0x34>)
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	4a07      	ldr	r2, [pc, #28]	; (8007d94 <HAL_PCD_ResumeCallback+0x34>)
 8007d76:	f023 0306 	bic.w	r3, r3, #6
 8007d7a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8007d7c:	f000 f9f8 	bl	8008170 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7fe fdfe 	bl	8006988 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8007d8c:	bf00      	nop
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	e000ed00 	.word	0xe000ed00

08007d98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8007da0:	4a2b      	ldr	r2, [pc, #172]	; (8007e50 <USBD_LL_Init+0xb8>)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a29      	ldr	r2, [pc, #164]	; (8007e50 <USBD_LL_Init+0xb8>)
 8007dac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8007db0:	4b27      	ldr	r3, [pc, #156]	; (8007e50 <USBD_LL_Init+0xb8>)
 8007db2:	4a28      	ldr	r2, [pc, #160]	; (8007e54 <USBD_LL_Init+0xbc>)
 8007db4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007db6:	4b26      	ldr	r3, [pc, #152]	; (8007e50 <USBD_LL_Init+0xb8>)
 8007db8:	2208      	movs	r2, #8
 8007dba:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007dbc:	4b24      	ldr	r3, [pc, #144]	; (8007e50 <USBD_LL_Init+0xb8>)
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007dc2:	4b23      	ldr	r3, [pc, #140]	; (8007e50 <USBD_LL_Init+0xb8>)
 8007dc4:	2202      	movs	r2, #2
 8007dc6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8007dc8:	4b21      	ldr	r3, [pc, #132]	; (8007e50 <USBD_LL_Init+0xb8>)
 8007dca:	2200      	movs	r2, #0
 8007dcc:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007dce:	4b20      	ldr	r3, [pc, #128]	; (8007e50 <USBD_LL_Init+0xb8>)
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007dd4:	4b1e      	ldr	r3, [pc, #120]	; (8007e50 <USBD_LL_Init+0xb8>)
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007dda:	4b1d      	ldr	r3, [pc, #116]	; (8007e50 <USBD_LL_Init+0xb8>)
 8007ddc:	2200      	movs	r2, #0
 8007dde:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007de0:	481b      	ldr	r0, [pc, #108]	; (8007e50 <USBD_LL_Init+0xb8>)
 8007de2:	f7f8 ffd1 	bl	8000d88 <HAL_PCD_Init>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d001      	beq.n	8007df0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8007dec:	f7f8 faea 	bl	80003c4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007df6:	2318      	movs	r3, #24
 8007df8:	2200      	movs	r2, #0
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	f7fa fc8b 	bl	8002716 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007e06:	2358      	movs	r3, #88	; 0x58
 8007e08:	2200      	movs	r2, #0
 8007e0a:	2180      	movs	r1, #128	; 0x80
 8007e0c:	f7fa fc83 	bl	8002716 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007e16:	23c0      	movs	r3, #192	; 0xc0
 8007e18:	2200      	movs	r2, #0
 8007e1a:	2181      	movs	r1, #129	; 0x81
 8007e1c:	f7fa fc7b 	bl	8002716 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007e26:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	f7fa fc72 	bl	8002716 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007e38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	2182      	movs	r1, #130	; 0x82
 8007e40:	f7fa fc69 	bl	8002716 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	20001698 	.word	0x20001698
 8007e54:	40005c00 	.word	0x40005c00

08007e58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e60:	2300      	movs	r3, #0
 8007e62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e64:	2300      	movs	r3, #0
 8007e66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7f9 f858 	bl	8000f24 <HAL_PCD_Start>
 8007e74:	4603      	mov	r3, r0
 8007e76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e78:	7bfb      	ldrb	r3, [r7, #15]
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f000 f97e 	bl	800817c <USBD_Get_USB_Status>
 8007e80:	4603      	mov	r3, r0
 8007e82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e84:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b084      	sub	sp, #16
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	4608      	mov	r0, r1
 8007e98:	4611      	mov	r1, r2
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	70fb      	strb	r3, [r7, #3]
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	70bb      	strb	r3, [r7, #2]
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eac:	2300      	movs	r3, #0
 8007eae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007eb6:	78bb      	ldrb	r3, [r7, #2]
 8007eb8:	883a      	ldrh	r2, [r7, #0]
 8007eba:	78f9      	ldrb	r1, [r7, #3]
 8007ebc:	f7f9 f99f 	bl	80011fe <HAL_PCD_EP_Open>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f000 f958 	bl	800817c <USBD_Get_USB_Status>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ed0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007eda:	b580      	push	{r7, lr}
 8007edc:	b084      	sub	sp, #16
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ef4:	78fa      	ldrb	r2, [r7, #3]
 8007ef6:	4611      	mov	r1, r2
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7f9 f9dd 	bl	80012b8 <HAL_PCD_EP_Close>
 8007efe:	4603      	mov	r3, r0
 8007f00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f000 f939 	bl	800817c <USBD_Get_USB_Status>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3710      	adds	r7, #16
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	460b      	mov	r3, r1
 8007f22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f24:	2300      	movs	r3, #0
 8007f26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f32:	78fa      	ldrb	r2, [r7, #3]
 8007f34:	4611      	mov	r1, r2
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7f9 fa86 	bl	8001448 <HAL_PCD_EP_SetStall>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f40:	7bfb      	ldrb	r3, [r7, #15]
 8007f42:	4618      	mov	r0, r3
 8007f44:	f000 f91a 	bl	800817c <USBD_Get_USB_Status>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b084      	sub	sp, #16
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
 8007f5e:	460b      	mov	r3, r1
 8007f60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f62:	2300      	movs	r3, #0
 8007f64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f66:	2300      	movs	r3, #0
 8007f68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f70:	78fa      	ldrb	r2, [r7, #3]
 8007f72:	4611      	mov	r1, r2
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7f9 fab9 	bl	80014ec <HAL_PCD_EP_ClrStall>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f7e:	7bfb      	ldrb	r3, [r7, #15]
 8007f80:	4618      	mov	r0, r3
 8007f82:	f000 f8fb 	bl	800817c <USBD_Get_USB_Status>
 8007f86:	4603      	mov	r3, r0
 8007f88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007fa6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007fa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	da0b      	bge.n	8007fc8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007fb0:	78fb      	ldrb	r3, [r7, #3]
 8007fb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fb6:	68f9      	ldr	r1, [r7, #12]
 8007fb8:	4613      	mov	r3, r2
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	4413      	add	r3, r2
 8007fbe:	00db      	lsls	r3, r3, #3
 8007fc0:	440b      	add	r3, r1
 8007fc2:	3312      	adds	r3, #18
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	e00b      	b.n	8007fe0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007fc8:	78fb      	ldrb	r3, [r7, #3]
 8007fca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fce:	68f9      	ldr	r1, [r7, #12]
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	4413      	add	r3, r2
 8007fd6:	00db      	lsls	r3, r3, #3
 8007fd8:	440b      	add	r3, r1
 8007fda:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 8007fde:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3714      	adds	r7, #20
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008006:	78fa      	ldrb	r2, [r7, #3]
 8008008:	4611      	mov	r1, r2
 800800a:	4618      	mov	r0, r3
 800800c:	f7f9 f8d3 	bl	80011b6 <HAL_PCD_SetAddress>
 8008010:	4603      	mov	r3, r0
 8008012:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008014:	7bfb      	ldrb	r3, [r7, #15]
 8008016:	4618      	mov	r0, r3
 8008018:	f000 f8b0 	bl	800817c <USBD_Get_USB_Status>
 800801c:	4603      	mov	r3, r0
 800801e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008020:	7bbb      	ldrb	r3, [r7, #14]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3710      	adds	r7, #16
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b086      	sub	sp, #24
 800802e:	af00      	add	r7, sp, #0
 8008030:	60f8      	str	r0, [r7, #12]
 8008032:	607a      	str	r2, [r7, #4]
 8008034:	603b      	str	r3, [r7, #0]
 8008036:	460b      	mov	r3, r1
 8008038:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800803a:	2300      	movs	r3, #0
 800803c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800803e:	2300      	movs	r3, #0
 8008040:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008048:	7af9      	ldrb	r1, [r7, #11]
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	f7f9 f9c4 	bl	80013da <HAL_PCD_EP_Transmit>
 8008052:	4603      	mov	r3, r0
 8008054:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008056:	7dfb      	ldrb	r3, [r7, #23]
 8008058:	4618      	mov	r0, r3
 800805a:	f000 f88f 	bl	800817c <USBD_Get_USB_Status>
 800805e:	4603      	mov	r3, r0
 8008060:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008062:	7dbb      	ldrb	r3, [r7, #22]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3718      	adds	r7, #24
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b086      	sub	sp, #24
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	607a      	str	r2, [r7, #4]
 8008076:	603b      	str	r3, [r7, #0]
 8008078:	460b      	mov	r3, r1
 800807a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800807c:	2300      	movs	r3, #0
 800807e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008080:	2300      	movs	r3, #0
 8008082:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800808a:	7af9      	ldrb	r1, [r7, #11]
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	f7f9 f95a 	bl	8001348 <HAL_PCD_EP_Receive>
 8008094:	4603      	mov	r3, r0
 8008096:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008098:	7dfb      	ldrb	r3, [r7, #23]
 800809a:	4618      	mov	r0, r3
 800809c:	f000 f86e 	bl	800817c <USBD_Get_USB_Status>
 80080a0:	4603      	mov	r3, r0
 80080a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80080a4:	7dbb      	ldrb	r3, [r7, #22]
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3718      	adds	r7, #24
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}

080080ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b082      	sub	sp, #8
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
 80080b6:	460b      	mov	r3, r1
 80080b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80080c0:	78fa      	ldrb	r2, [r7, #3]
 80080c2:	4611      	mov	r1, r2
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7f9 f970 	bl	80013aa <HAL_PCD_EP_GetRxCount>
 80080ca:	4603      	mov	r3, r0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3708      	adds	r7, #8
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	460b      	mov	r3, r1
 80080de:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80080e0:	78fb      	ldrb	r3, [r7, #3]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d002      	beq.n	80080ec <HAL_PCDEx_LPM_Callback+0x18>
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d013      	beq.n	8008112 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80080ea:	e023      	b.n	8008134 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	7a5b      	ldrb	r3, [r3, #9]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d007      	beq.n	8008104 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80080f4:	f000 f83c 	bl	8008170 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80080f8:	4b10      	ldr	r3, [pc, #64]	; (800813c <HAL_PCDEx_LPM_Callback+0x68>)
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	4a0f      	ldr	r2, [pc, #60]	; (800813c <HAL_PCDEx_LPM_Callback+0x68>)
 80080fe:	f023 0306 	bic.w	r3, r3, #6
 8008102:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800810a:	4618      	mov	r0, r3
 800810c:	f7fe fc3c 	bl	8006988 <USBD_LL_Resume>
    break;
 8008110:	e010      	b.n	8008134 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008118:	4618      	mov	r0, r3
 800811a:	f7fe fc1f 	bl	800695c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	7a5b      	ldrb	r3, [r3, #9]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d005      	beq.n	8008132 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008126:	4b05      	ldr	r3, [pc, #20]	; (800813c <HAL_PCDEx_LPM_Callback+0x68>)
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	4a04      	ldr	r2, [pc, #16]	; (800813c <HAL_PCDEx_LPM_Callback+0x68>)
 800812c:	f043 0306 	orr.w	r3, r3, #6
 8008130:	6113      	str	r3, [r2, #16]
    break;
 8008132:	bf00      	nop
}
 8008134:	bf00      	nop
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	e000ed00 	.word	0xe000ed00

08008140 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008148:	4b03      	ldr	r3, [pc, #12]	; (8008158 <USBD_static_malloc+0x18>)
}
 800814a:	4618      	mov	r0, r3
 800814c:	370c      	adds	r7, #12
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop
 8008158:	20001974 	.word	0x20001974

0800815c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]

}
 8008164:	bf00      	nop
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008174:	f7f8 f8da 	bl	800032c <SystemClock_Config>
}
 8008178:	bf00      	nop
 800817a:	bd80      	pop	{r7, pc}

0800817c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	4603      	mov	r3, r0
 8008184:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008186:	2300      	movs	r3, #0
 8008188:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800818a:	79fb      	ldrb	r3, [r7, #7]
 800818c:	2b03      	cmp	r3, #3
 800818e:	d817      	bhi.n	80081c0 <USBD_Get_USB_Status+0x44>
 8008190:	a201      	add	r2, pc, #4	; (adr r2, 8008198 <USBD_Get_USB_Status+0x1c>)
 8008192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008196:	bf00      	nop
 8008198:	080081a9 	.word	0x080081a9
 800819c:	080081af 	.word	0x080081af
 80081a0:	080081b5 	.word	0x080081b5
 80081a4:	080081bb 	.word	0x080081bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	73fb      	strb	r3, [r7, #15]
    break;
 80081ac:	e00b      	b.n	80081c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80081ae:	2303      	movs	r3, #3
 80081b0:	73fb      	strb	r3, [r7, #15]
    break;
 80081b2:	e008      	b.n	80081c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80081b4:	2301      	movs	r3, #1
 80081b6:	73fb      	strb	r3, [r7, #15]
    break;
 80081b8:	e005      	b.n	80081c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80081ba:	2303      	movs	r3, #3
 80081bc:	73fb      	strb	r3, [r7, #15]
    break;
 80081be:	e002      	b.n	80081c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80081c0:	2303      	movs	r3, #3
 80081c2:	73fb      	strb	r3, [r7, #15]
    break;
 80081c4:	bf00      	nop
  }
  return usb_status;
 80081c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <main>:


#include "main.h"

int main(void)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	af00      	add	r7, sp, #0
  hwInit();
 80081d8:	f7f8 fa79 	bl	80006ce <hwInit>
  apInit();
 80081dc:	f7f8 f81c 	bl	8000218 <apInit>

  apMain();
 80081e0:	f7f8 f821 	bl	8000226 <apMain>
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	bd80      	pop	{r7, pc}

080081ea <memset>:
 80081ea:	4402      	add	r2, r0
 80081ec:	4603      	mov	r3, r0
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d100      	bne.n	80081f4 <memset+0xa>
 80081f2:	4770      	bx	lr
 80081f4:	f803 1b01 	strb.w	r1, [r3], #1
 80081f8:	e7f9      	b.n	80081ee <memset+0x4>
	...

080081fc <__libc_init_array>:
 80081fc:	b570      	push	{r4, r5, r6, lr}
 80081fe:	4d0d      	ldr	r5, [pc, #52]	; (8008234 <__libc_init_array+0x38>)
 8008200:	4c0d      	ldr	r4, [pc, #52]	; (8008238 <__libc_init_array+0x3c>)
 8008202:	1b64      	subs	r4, r4, r5
 8008204:	10a4      	asrs	r4, r4, #2
 8008206:	2600      	movs	r6, #0
 8008208:	42a6      	cmp	r6, r4
 800820a:	d109      	bne.n	8008220 <__libc_init_array+0x24>
 800820c:	4d0b      	ldr	r5, [pc, #44]	; (800823c <__libc_init_array+0x40>)
 800820e:	4c0c      	ldr	r4, [pc, #48]	; (8008240 <__libc_init_array+0x44>)
 8008210:	f000 f818 	bl	8008244 <_init>
 8008214:	1b64      	subs	r4, r4, r5
 8008216:	10a4      	asrs	r4, r4, #2
 8008218:	2600      	movs	r6, #0
 800821a:	42a6      	cmp	r6, r4
 800821c:	d105      	bne.n	800822a <__libc_init_array+0x2e>
 800821e:	bd70      	pop	{r4, r5, r6, pc}
 8008220:	f855 3b04 	ldr.w	r3, [r5], #4
 8008224:	4798      	blx	r3
 8008226:	3601      	adds	r6, #1
 8008228:	e7ee      	b.n	8008208 <__libc_init_array+0xc>
 800822a:	f855 3b04 	ldr.w	r3, [r5], #4
 800822e:	4798      	blx	r3
 8008230:	3601      	adds	r6, #1
 8008232:	e7f2      	b.n	800821a <__libc_init_array+0x1e>
 8008234:	080082bc 	.word	0x080082bc
 8008238:	080082bc 	.word	0x080082bc
 800823c:	080082bc 	.word	0x080082bc
 8008240:	080082c0 	.word	0x080082c0

08008244 <_init>:
 8008244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008246:	bf00      	nop
 8008248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800824a:	bc08      	pop	{r3}
 800824c:	469e      	mov	lr, r3
 800824e:	4770      	bx	lr

08008250 <_fini>:
 8008250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008252:	bf00      	nop
 8008254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008256:	bc08      	pop	{r3}
 8008258:	469e      	mov	lr, r3
 800825a:	4770      	bx	lr
